/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/ansi-html/index.js":
/*!*****************************************!*\
  !*** ./node_modules/ansi-html/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/css-vars-ponyfill/dist/css-vars-ponyfill.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/css-vars-ponyfill/dist/css-vars-ponyfill.esm.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*!
 * css-vars-ponyfill
 * v2.4.3
 * https://jhildenbiddle.github.io/css-vars-ponyfill/
 * (c) 2018-2021 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
function _extends() {
    _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}

/*!
 * get-css-data
 * v2.0.0
 * https://github.com/jhildenbiddle/get-css-data
 * (c) 2018-2021 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */ function getUrls(urls) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var settings = {
        mimeType: options.mimeType || null,
        onBeforeSend: options.onBeforeSend || Function.prototype,
        onSuccess: options.onSuccess || Function.prototype,
        onError: options.onError || Function.prototype,
        onComplete: options.onComplete || Function.prototype
    };
    var urlArray = Array.isArray(urls) ? urls : [ urls ];
    var urlQueue = Array.apply(null, Array(urlArray.length)).map((function(x) {
        return null;
    }));
    function isValidCss(cssText) {
        var isHTML = cssText && cssText.trim().charAt(0) === "<";
        return cssText && !isHTML;
    }
    function onError(xhr, urlIndex) {
        settings.onError(xhr, urlArray[urlIndex], urlIndex);
    }
    function onSuccess(responseText, urlIndex) {
        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);
        responseText = returnVal === false ? "" : returnVal || responseText;
        urlQueue[urlIndex] = responseText;
        if (urlQueue.indexOf(null) === -1) {
            settings.onComplete(urlQueue);
        }
    }
    var parser = document.createElement("a");
    urlArray.forEach((function(url, i) {
        parser.setAttribute("href", url);
        parser.href = String(parser.href);
        var isIElte9 = Boolean(document.all && !window.atob);
        var isIElte9CORS = isIElte9 && parser.host.split(":")[0] !== location.host.split(":")[0];
        if (isIElte9CORS) {
            var isSameProtocol = parser.protocol === location.protocol;
            if (isSameProtocol) {
                var xdr = new XDomainRequest;
                xdr.open("GET", url);
                xdr.timeout = 0;
                xdr.onprogress = Function.prototype;
                xdr.ontimeout = Function.prototype;
                xdr.onload = function() {
                    if (isValidCss(xdr.responseText)) {
                        onSuccess(xdr.responseText, i);
                    } else {
                        onError(xdr, i);
                    }
                };
                xdr.onerror = function(err) {
                    onError(xdr, i);
                };
                setTimeout((function() {
                    xdr.send();
                }), 0);
            } else {
                console.warn("Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (".concat(url, ")"));
                onError(null, i);
            }
        } else {
            var xhr = new XMLHttpRequest;
            xhr.open("GET", url);
            if (settings.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(settings.mimeType);
            }
            settings.onBeforeSend(xhr, url, i);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    if (xhr.status < 400 && isValidCss(xhr.responseText)) {
                        onSuccess(xhr.responseText, i);
                    } else if (xhr.status === 0 && isValidCss(xhr.responseText)) {
                        onSuccess(xhr.responseText, i);
                    } else {
                        onError(xhr, i);
                    }
                }
            };
            xhr.send();
        }
    }));
}

/**
 * Gets CSS data from <style> and <link> nodes (including @imports), then
 * returns data in order processed by DOM. Allows specifying nodes to
 * include/exclude and filtering CSS data using RegEx.
 *
 * @preserve
 * @param {object}   [options] The options object
 * @param {object}   [options.rootElement=document] Root element to traverse for
 *                   <link> and <style> nodes.
 * @param {string}   [options.include] CSS selector matching <link> and <style>
 *                   nodes to include
 * @param {string}   [options.exclude] CSS selector matching <link> and <style>
 *                   nodes to exclude
 * @param {object}   [options.filter] Regular expression used to filter node CSS
 *                   data. Each block of CSS data is tested against the filter,
 *                   and only matching data is included.
 * @param {boolean}  [options.skipDisabled=true] Determines if disabled
 *                   stylesheets will be skipped while collecting CSS data.
 * @param {boolean}  [options.useCSSOM=false] Determines if CSS data will be
 *                   collected from a stylesheet's runtime values instead of its
 *                   text content. This is required to get accurate CSS data
 *                   when a stylesheet has been modified using the deleteRule()
 *                   or insertRule() methods because these modifications will
 *                   not be reflected in the stylesheet's text content.
 * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes
 *                   1) the XHR object, 2) source node reference, and 3) the
 *                   source URL as arguments.
 * @param {function} [options.onSuccess] Callback on each CSS node read. Passes
 *                   1) CSS text, 2) source node reference, and 3) the source
 *                   URL as arguments.
 * @param {function} [options.onError] Callback on each error. Passes 1) the XHR
 *                   object for inspection, 2) soure node reference, and 3) the
 *                   source URL that failed (either a <link> href or an @import)
 *                   as arguments
 * @param {function} [options.onComplete] Callback after all nodes have been
 *                   processed. Passes 1) concatenated CSS text, 2) an array of
 *                   CSS text in DOM order, and 3) an array of nodes in DOM
 *                   order as arguments.
 *
 * @example
 *
 *   getCssData({
 *     rootElement : document,
 *     include     : 'style,link[rel="stylesheet"]',
 *     exclude     : '[href="skip.css"]',
 *     filter      : /red/,
 *     skipDisabled: true,
 *     useCSSOM    : false,
 *     onBeforeSend(xhr, node, url) {
 *       // ...
 *     }
 *     onSuccess(cssText, node, url) {
 *       // ...
 *     }
 *     onError(xhr, node, url) {
 *       // ...
 *     },
 *     onComplete(cssText, cssArray, nodeArray) {
 *       // ...
 *     }
 *   });
 */ function getCssData(options) {
    var regex = {
        cssComments: /\/\*[\s\S]+?\*\//g,
        cssImports: /(?:@import\s*)(?:url\(\s*)?(?:['"])([^'"]*)(?:['"])(?:\s*\))?(?:[^;]*;)/g
    };
    var settings = {
        rootElement: options.rootElement || document,
        include: options.include || 'style,link[rel="stylesheet"]',
        exclude: options.exclude || null,
        filter: options.filter || null,
        skipDisabled: options.skipDisabled !== false,
        useCSSOM: options.useCSSOM || false,
        onBeforeSend: options.onBeforeSend || Function.prototype,
        onSuccess: options.onSuccess || Function.prototype,
        onError: options.onError || Function.prototype,
        onComplete: options.onComplete || Function.prototype
    };
    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter((function(node) {
        return !matchesSelector(node, settings.exclude);
    }));
    var cssArray = Array.apply(null, Array(sourceNodes.length)).map((function(x) {
        return null;
    }));
    function handleComplete() {
        var isComplete = cssArray.indexOf(null) === -1;
        if (isComplete) {
            cssArray.reduce((function(skipIndices, value, i) {
                if (value === "") {
                    skipIndices.push(i);
                }
                return skipIndices;
            }), []).reverse().forEach((function(skipIndex) {
                return [ sourceNodes, cssArray ].forEach((function(arr) {
                    return arr.splice(skipIndex, 1);
                }));
            }));
            var cssText = cssArray.join("");
            settings.onComplete(cssText, cssArray, sourceNodes);
        }
    }
    function handleSuccess(cssText, cssIndex, node, sourceUrl) {
        var returnVal = settings.onSuccess(cssText, node, sourceUrl);
        cssText = returnVal !== undefined && Boolean(returnVal) === false ? "" : returnVal || cssText;
        resolveImports(cssText, node, sourceUrl, (function(resolvedCssText, errorData) {
            if (cssArray[cssIndex] === null) {
                errorData.forEach((function(data) {
                    return settings.onError(data.xhr, node, data.url);
                }));
                if (!settings.filter || settings.filter.test(resolvedCssText)) {
                    cssArray[cssIndex] = resolvedCssText;
                } else {
                    cssArray[cssIndex] = "";
                }
                handleComplete();
            }
        }));
    }
    function parseImportData(cssText, baseUrl) {
        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var importData = {};
        importData.rules = (cssText.replace(regex.cssComments, "").match(regex.cssImports) || []).filter((function(rule) {
            return ignoreRules.indexOf(rule) === -1;
        }));
        importData.urls = importData.rules.map((function(rule) {
            return rule.replace(regex.cssImports, "$1");
        }));
        importData.absoluteUrls = importData.urls.map((function(url) {
            return getFullUrl(url, baseUrl);
        }));
        importData.absoluteRules = importData.rules.map((function(rule, i) {
            var oldUrl = importData.urls[i];
            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);
            return rule.replace(oldUrl, newUrl);
        }));
        return importData;
    }
    function resolveImports(cssText, node, baseUrl, callbackFn) {
        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
        var importData = parseImportData(cssText, baseUrl, __errorRules);
        if (importData.rules.length) {
            getUrls(importData.absoluteUrls, {
                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {
                    settings.onBeforeSend(xhr, node, url);
                },
                onSuccess: function onSuccess(cssText, url, urlIndex) {
                    var returnVal = settings.onSuccess(cssText, node, url);
                    cssText = returnVal === false ? "" : returnVal || cssText;
                    var responseImportData = parseImportData(cssText, url, __errorRules);
                    responseImportData.rules.forEach((function(rule, i) {
                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);
                    }));
                    return cssText;
                },
                onError: function onError(xhr, url, urlIndex) {
                    __errorData.push({
                        xhr: xhr,
                        url: url
                    });
                    __errorRules.push(importData.rules[urlIndex]);
                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);
                },
                onComplete: function onComplete(responseArray) {
                    responseArray.forEach((function(importText, i) {
                        cssText = cssText.replace(importData.rules[i], importText);
                    }));
                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);
                }
            });
        } else {
            callbackFn(cssText, __errorData);
        }
    }
    if (sourceNodes.length) {
        sourceNodes.forEach((function(node, i) {
            var linkHref = node.getAttribute("href");
            var linkRel = node.getAttribute("rel");
            var isLink = node.nodeName.toLowerCase() === "link" && linkHref && linkRel && linkRel.toLowerCase().indexOf("stylesheet") !== -1;
            var isSkip = settings.skipDisabled === false ? false : node.disabled;
            var isStyle = node.nodeName.toLowerCase() === "style";
            if (isLink && !isSkip) {
                getUrls(linkHref, {
                    mimeType: "text/css",
                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {
                        settings.onBeforeSend(xhr, node, url);
                    },
                    onSuccess: function onSuccess(cssText, url, urlIndex) {
                        var sourceUrl = getFullUrl(linkHref);
                        handleSuccess(cssText, i, node, sourceUrl);
                    },
                    onError: function onError(xhr, url, urlIndex) {
                        cssArray[i] = "";
                        settings.onError(xhr, node, url);
                        handleComplete();
                    }
                });
            } else if (isStyle && !isSkip) {
                var cssText = node.textContent;
                if (settings.useCSSOM) {
                    cssText = Array.apply(null, node.sheet.cssRules).map((function(rule) {
                        return rule.cssText;
                    })).join("");
                }
                handleSuccess(cssText, i, node, location.href);
            } else {
                cssArray[i] = "";
                handleComplete();
            }
        }));
    } else {
        settings.onComplete("", []);
    }
}

function getFullUrl(url, base) {
    var d = document.implementation.createHTMLDocument("");
    var b = d.createElement("base");
    var a = d.createElement("a");
    d.head.appendChild(b);
    d.body.appendChild(a);
    b.href = base || document.baseURI || (document.querySelector("base") || {}).href || location.href;
    a.href = url;
    return a.href;
}

function matchesSelector(elm, selector) {
    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;
    return matches.call(elm, selector);
}

var balancedMatch = balanced;

function balanced(a, b, str) {
    if (a instanceof RegExp) a = maybeMatch(a, str);
    if (b instanceof RegExp) b = maybeMatch(b, str);
    var r = range(a, b, str);
    return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
    };
}

function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
}

balanced.range = range;

function range(a, b, str) {
    var begs, beg, left, right, result;
    var ai = str.indexOf(a);
    var bi = str.indexOf(b, ai + 1);
    var i = ai;
    if (ai >= 0 && bi > 0) {
        begs = [];
        left = str.length;
        while (i >= 0 && !result) {
            if (i == ai) {
                begs.push(i);
                ai = str.indexOf(a, i + 1);
            } else if (begs.length == 1) {
                result = [ begs.pop(), bi ];
            } else {
                beg = begs.pop();
                if (beg < left) {
                    left = beg;
                    right = bi;
                }
                bi = str.indexOf(b, i + 1);
            }
            i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
            result = [ left, right ];
        }
    }
    return result;
}

function parseCss(css) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var defaults = {
        preserveStatic: true,
        removeComments: false
    };
    var settings = _extends({}, defaults, options);
    var errors = [];
    function error(msg) {
        throw new Error("CSS parse error: ".concat(msg));
    }
    function match(re) {
        var m = re.exec(css);
        if (m) {
            css = css.slice(m[0].length);
            return m;
        }
    }
    function open() {
        return match(/^{\s*/);
    }
    function close() {
        return match(/^}/);
    }
    function whitespace() {
        match(/^\s*/);
    }
    function comment() {
        whitespace();
        if (css[0] !== "/" || css[1] !== "*") {
            return;
        }
        var i = 2;
        while (css[i] && (css[i] !== "*" || css[i + 1] !== "/")) {
            i++;
        }
        if (!css[i]) {
            return error("end of comment is missing");
        }
        var str = css.slice(2, i);
        css = css.slice(i + 2);
        return {
            type: "comment",
            comment: str
        };
    }
    function comments() {
        var cmnts = [];
        var c;
        while (c = comment()) {
            cmnts.push(c);
        }
        return settings.removeComments ? [] : cmnts;
    }
    function selector() {
        whitespace();
        while (css[0] === "}") {
            error("extra closing bracket");
        }
        var m = match(/^(("(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^{])+)/);
        if (m) {
            return m[0].trim().replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, (function(m) {
                return m.replace(/,/g, "‌");
            })).split(/\s*(?![^(]*\)),\s*/).map((function(s) {
                return s.replace(/\u200C/g, ",");
            }));
        }
    }
    function declaration() {
        if (css[0] === "@") {
            return at_rule();
        }
        match(/^([;\s]*)+/);
        var comment_regexp = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
        var prop = match(/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
        if (!prop) {
            return;
        }
        prop = prop[0].trim();
        if (!match(/^:\s*/)) {
            return error("property missing ':'");
        }
        var val = match(/^((?:\/\*.*?\*\/|'(?:\\'|.)*?'|"(?:\\"|.)*?"|\((\s*'(?:\\'|.)*?'|"(?:\\"|.)*?"|[^)]*?)\s*\)|[^};])+)/);
        var ret = {
            type: "declaration",
            property: prop.replace(comment_regexp, ""),
            value: val ? val[0].replace(comment_regexp, "").trim() : ""
        };
        match(/^[;\s]*/);
        return ret;
    }
    function declarations() {
        if (!open()) {
            return error("missing '{'");
        }
        var d;
        var decls = comments();
        while (d = declaration()) {
            decls.push(d);
            decls = decls.concat(comments());
        }
        if (!close()) {
            return error("missing '}'");
        }
        return decls;
    }
    function keyframe() {
        whitespace();
        var vals = [];
        var m;
        while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
            vals.push(m[1]);
            match(/^,\s*/);
        }
        if (vals.length) {
            return {
                type: "keyframe",
                values: vals,
                declarations: declarations()
            };
        }
    }
    function at_keyframes() {
        var m = match(/^@([-\w]+)?keyframes\s*/);
        if (!m) {
            return;
        }
        var vendor = m[1];
        m = match(/^([-\w]+)\s*/);
        if (!m) {
            return error("@keyframes missing name");
        }
        var name = m[1];
        if (!open()) {
            return error("@keyframes missing '{'");
        }
        var frame;
        var frames = comments();
        while (frame = keyframe()) {
            frames.push(frame);
            frames = frames.concat(comments());
        }
        if (!close()) {
            return error("@keyframes missing '}'");
        }
        return {
            type: "keyframes",
            name: name,
            vendor: vendor,
            keyframes: frames
        };
    }
    function at_page() {
        var m = match(/^@page */);
        if (m) {
            var sel = selector() || [];
            return {
                type: "page",
                selectors: sel,
                declarations: declarations()
            };
        }
    }
    function at_page_margin_box() {
        var m = match(/@(top|bottom|left|right)-(left|center|right|top|middle|bottom)-?(corner)?\s*/);
        if (m) {
            var name = "".concat(m[1], "-").concat(m[2]) + (m[3] ? "-".concat(m[3]) : "");
            return {
                type: "page-margin-box",
                name: name,
                declarations: declarations()
            };
        }
    }
    function at_fontface() {
        var m = match(/^@font-face\s*/);
        if (m) {
            return {
                type: "font-face",
                declarations: declarations()
            };
        }
    }
    function at_supports() {
        var m = match(/^@supports *([^{]+)/);
        if (m) {
            return {
                type: "supports",
                supports: m[1].trim(),
                rules: rules()
            };
        }
    }
    function at_host() {
        var m = match(/^@host\s*/);
        if (m) {
            return {
                type: "host",
                rules: rules()
            };
        }
    }
    function at_media() {
        var m = match(/^@media([^{]+)*/);
        if (m) {
            return {
                type: "media",
                media: (m[1] || "").trim(),
                rules: rules()
            };
        }
    }
    function at_custom_m() {
        var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
        if (m) {
            return {
                type: "custom-media",
                name: m[1].trim(),
                media: m[2].trim()
            };
        }
    }
    function at_document() {
        var m = match(/^@([-\w]+)?document *([^{]+)/);
        if (m) {
            return {
                type: "document",
                document: m[2].trim(),
                vendor: m[1] ? m[1].trim() : null,
                rules: rules()
            };
        }
    }
    function at_x() {
        var m = match(/^@(import|charset|namespace)\s*([^;]+);/);
        if (m) {
            return {
                type: m[1],
                name: m[2].trim()
            };
        }
    }
    function at_rule() {
        whitespace();
        if (css[0] === "@") {
            var ret = at_x() || at_fontface() || at_media() || at_keyframes() || at_supports() || at_document() || at_custom_m() || at_host() || at_page() || at_page_margin_box();
            if (ret && !settings.preserveStatic) {
                var hasVarFunc = false;
                if (ret.declarations) {
                    hasVarFunc = ret.declarations.some((function(decl) {
                        return /var\(/.test(decl.value);
                    }));
                } else {
                    var arr = ret.keyframes || ret.rules || [];
                    hasVarFunc = arr.some((function(obj) {
                        return (obj.declarations || []).some((function(decl) {
                            return /var\(/.test(decl.value);
                        }));
                    }));
                }
                return hasVarFunc ? ret : {};
            }
            return ret;
        }
    }
    function rule() {
        if (!settings.preserveStatic) {
            var balancedMatch$1 = balancedMatch("{", "}", css);
            if (balancedMatch$1) {
                var hasVarDecl = /:(?:root|host)(?![.:#(])/.test(balancedMatch$1.pre) && /--\S*\s*:/.test(balancedMatch$1.body);
                var hasVarFunc = /var\(/.test(balancedMatch$1.body);
                if (!hasVarDecl && !hasVarFunc) {
                    css = css.slice(balancedMatch$1.end + 1);
                    return {};
                }
            }
        }
        var sel = selector() || [];
        var decls = settings.preserveStatic ? declarations() : declarations().filter((function(decl) {
            var hasVarDecl = sel.some((function(s) {
                return /:(?:root|host)(?![.:#(])/.test(s);
            })) && /^--\S/.test(decl.property);
            var hasVarFunc = /var\(/.test(decl.value);
            return hasVarDecl || hasVarFunc;
        }));
        if (!sel.length) {
            error("selector missing");
        }
        return {
            type: "rule",
            selectors: sel,
            declarations: decls
        };
    }
    function rules(core) {
        if (!core && !open()) {
            return error("missing '{'");
        }
        var node;
        var rules = comments();
        while (css.length && (core || css[0] !== "}") && (node = at_rule() || rule())) {
            if (node.type) {
                rules.push(node);
            }
            rules = rules.concat(comments());
        }
        if (!core && !close()) {
            return error("missing '}'");
        }
        return rules;
    }
    return {
        type: "stylesheet",
        stylesheet: {
            rules: rules(true),
            errors: errors
        }
    };
}

function parseVars(cssData) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var defaults = {
        parseHost: false,
        store: {},
        onWarning: function onWarning() {}
    };
    var settings = _extends({}, defaults, options);
    var reVarDeclSelectors = new RegExp(":".concat(settings.parseHost ? "host" : "root", "$"));
    if (typeof cssData === "string") {
        cssData = parseCss(cssData, settings);
    }
    cssData.stylesheet.rules.forEach((function(rule) {
        if (rule.type !== "rule" || !rule.selectors.some((function(s) {
            return reVarDeclSelectors.test(s);
        }))) {
            return;
        }
        rule.declarations.forEach((function(decl, i) {
            var prop = decl.property;
            var value = decl.value;
            if (prop && prop.indexOf("--") === 0) {
                settings.store[prop] = value;
            }
        }));
    }));
    return settings.store;
}

function stringifyCss(tree) {
    var delim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var cb = arguments.length > 2 ? arguments[2] : undefined;
    var renderMethods = {
        charset: function charset(node) {
            return "@charset " + node.name + ";";
        },
        comment: function comment(node) {
            return node.comment.indexOf("__CSSVARSPONYFILL") === 0 ? "/*" + node.comment + "*/" : "";
        },
        "custom-media": function customMedia(node) {
            return "@custom-media " + node.name + " " + node.media + ";";
        },
        declaration: function declaration(node) {
            return node.property + ":" + node.value + ";";
        },
        document: function document(node) {
            return "@" + (node.vendor || "") + "document " + node.document + "{" + visit(node.rules) + "}";
        },
        "font-face": function fontFace(node) {
            return "@font-face" + "{" + visit(node.declarations) + "}";
        },
        host: function host(node) {
            return "@host" + "{" + visit(node.rules) + "}";
        },
        import: function _import(node) {
            return "@import " + node.name + ";";
        },
        keyframe: function keyframe(node) {
            return node.values.join(",") + "{" + visit(node.declarations) + "}";
        },
        keyframes: function keyframes(node) {
            return "@" + (node.vendor || "") + "keyframes " + node.name + "{" + visit(node.keyframes) + "}";
        },
        media: function media(node) {
            return "@media " + node.media + "{" + visit(node.rules) + "}";
        },
        namespace: function namespace(node) {
            return "@namespace " + node.name + ";";
        },
        page: function page(node) {
            return "@page " + (node.selectors.length ? node.selectors.join(", ") : "") + "{" + visit(node.declarations) + "}";
        },
        "page-margin-box": function pageMarginBox(node) {
            return "@" + node.name + "{" + visit(node.declarations) + "}";
        },
        rule: function rule(node) {
            var decls = node.declarations;
            if (decls.length) {
                return node.selectors.join(",") + "{" + visit(decls) + "}";
            }
        },
        supports: function supports(node) {
            return "@supports " + node.supports + "{" + visit(node.rules) + "}";
        }
    };
    function visit(nodes) {
        var buf = "";
        for (var i = 0; i < nodes.length; i++) {
            var n = nodes[i];
            if (cb) {
                cb(n);
            }
            var txt = renderMethods[n.type](n);
            if (txt) {
                buf += txt;
                if (txt.length && n.selectors) {
                    buf += delim;
                }
            }
        }
        return buf;
    }
    return visit(tree.stylesheet.rules);
}

function walkCss(node, fn) {
    node.rules.forEach((function(rule) {
        if (rule.rules) {
            walkCss(rule, fn);
            return;
        }
        if (rule.keyframes) {
            rule.keyframes.forEach((function(keyframe) {
                if (keyframe.type === "keyframe") {
                    fn(keyframe.declarations, rule);
                }
            }));
            return;
        }
        if (!rule.declarations) {
            return;
        }
        fn(rule.declarations, node);
    }));
}

var VAR_PROP_IDENTIFIER = "--";

var VAR_FUNC_IDENTIFIER = "var";

function transformCss(cssData) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var defaults = {
        preserveStatic: true,
        preserveVars: false,
        variables: {},
        onWarning: function onWarning() {}
    };
    var settings = _extends({}, defaults, options);
    if (typeof cssData === "string") {
        cssData = parseCss(cssData, settings);
    }
    walkCss(cssData.stylesheet, (function(declarations, node) {
        for (var i = 0; i < declarations.length; i++) {
            var decl = declarations[i];
            var type = decl.type;
            var prop = decl.property;
            var value = decl.value;
            if (type !== "declaration") {
                continue;
            }
            if (!settings.preserveVars && prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {
                declarations.splice(i, 1);
                i--;
                continue;
            }
            if (value.indexOf(VAR_FUNC_IDENTIFIER + "(") !== -1) {
                var resolvedValue = resolveValue(value, settings);
                if (resolvedValue !== decl.value) {
                    resolvedValue = fixNestedCalc(resolvedValue);
                    if (!settings.preserveVars) {
                        decl.value = resolvedValue;
                    } else {
                        declarations.splice(i, 0, {
                            type: type,
                            property: prop,
                            value: resolvedValue
                        });
                        i++;
                    }
                }
            }
        }
    }));
    return stringifyCss(cssData);
}

function fixNestedCalc(value) {
    var reCalcVal = /calc\(([^)]+)\)/g;
    (value.match(reCalcVal) || []).forEach((function(match) {
        var newVal = "calc".concat(match.split("calc").join(""));
        value = value.replace(match, newVal);
    }));
    return value;
}

function resolveValue(value) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var __recursiveFallback = arguments.length > 2 ? arguments[2] : undefined;
    if (value.indexOf("var(") === -1) {
        return value;
    }
    var valueData = balancedMatch("(", ")", value);
    function resolveFunc(value) {
        var name = value.split(",")[0].replace(/[\s\n\t]/g, "");
        var fallback = (value.match(/(?:\s*,\s*){1}(.*)?/) || [])[1];
        var match = Object.prototype.hasOwnProperty.call(settings.variables, name) ? String(settings.variables[name]) : undefined;
        var replacement = match || (fallback ? String(fallback) : undefined);
        var unresolvedFallback = __recursiveFallback || value;
        if (!match) {
            settings.onWarning('variable "'.concat(name, '" is undefined'));
        }
        if (replacement && replacement !== "undefined" && replacement.length > 0) {
            return resolveValue(replacement, settings, unresolvedFallback);
        } else {
            return "var(".concat(unresolvedFallback, ")");
        }
    }
    if (!valueData) {
        if (value.indexOf("var(") !== -1) {
            settings.onWarning('missing closing ")" in the value "'.concat(value, '"'));
        }
        return value;
    } else if (valueData.pre.slice(-3) === "var") {
        var isEmptyVarFunc = valueData.body.trim().length === 0;
        if (isEmptyVarFunc) {
            settings.onWarning("var() must contain a non-whitespace string");
            return value;
        } else {
            return valueData.pre.slice(0, -3) + resolveFunc(valueData.body) + resolveValue(valueData.post, settings);
        }
    } else {
        return valueData.pre + "(".concat(resolveValue(valueData.body, settings), ")") + resolveValue(valueData.post, settings);
    }
}

var isBrowser = typeof window !== "undefined";

var isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports("(--a: 0)");

var counters = {
    group: 0,
    job: 0
};

var defaults = {
    rootElement: isBrowser ? document : null,
    shadowDOM: false,
    include: "style,link[rel=stylesheet]",
    exclude: "",
    variables: {},
    onlyLegacy: true,
    preserveStatic: true,
    preserveVars: false,
    silent: false,
    updateDOM: true,
    updateURLs: true,
    watch: null,
    onBeforeSend: function onBeforeSend() {},
    onError: function onError() {},
    onWarning: function onWarning() {},
    onSuccess: function onSuccess() {},
    onComplete: function onComplete() {},
    onFinally: function onFinally() {}
};

var regex = {
    cssComments: /\/\*[\s\S]+?\*\//g,
    cssKeyframes: /@(?:-\w*-)?keyframes/,
    cssMediaQueries: /@media[^{]+\{([\s\S]+?})\s*}/g,
    cssUrls: /url\((?!['"]?(?:data|http|\/\/):)['"]?([^'")]*)['"]?\)/g,
    cssVarDeclRules: /(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^}]*})/g,
    cssVarDecls: /(?:[\s;]*)(-{2}\w[\w-]*)(?:\s*:\s*)([^;]*);/g,
    cssVarFunc: /var\(\s*--[\w-]/,
    cssVars: /(?:(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^;]*;*\s*)|(?:var\(\s*))(--[^:)]+)(?:\s*[:)])/
};

var variableStore = {
    dom: {},
    job: {},
    user: {}
};

var cssVarsIsRunning = false;

var cssVarsObserver = null;

var cssVarsSrcNodeCount = 0;

var debounceTimer = null;

var isShadowDOMReady = false;

/**
 * Fetches, parses, and transforms CSS custom properties from specified
 * <style> and <link> elements into static values, then appends a new <style>
 * element with static values to the DOM to provide CSS custom property
 * compatibility for legacy browsers. Also provides a single interface for
 * live updates of runtime values in both modern and legacy browsers.
 *
 * @preserve
 * @param {object}   [options] Options object
 * @param {object}   [options.rootElement=document] Root element to traverse for
 *                   <link> and <style> nodes
 * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>
 *                   and <style> nodes will be processed.
 * @param {string}   [options.include="style,link[rel=stylesheet]"] CSS selector
 *                   matching <link re="stylesheet"> and <style> nodes to
 *                   process
 * @param {string}   [options.exclude] CSS selector matching <link
 *                   rel="stylehseet"> and <style> nodes to exclude from those
 *                   matches by options.include
 * @param {object}   [options.variables] A map of custom property name/value
 *                   pairs. Property names can omit or include the leading
 *                   double-hyphen (—), and values specified will override
 *                   previous values
 * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will
 *                   only generate legacy-compatible CSS in browsers that lack
 *                   native support (i.e., legacy browsers)
 * @param {boolean}  [options.preserveStatic=true] Determines if CSS
 *                   declarations that do not reference a custom property will
 *                   be preserved in the transformed CSS
 * @param {boolean}  [options.preserveVars=false] Determines if CSS custom
 *                   property declarations will be preserved in the transformed
 *                   CSS
 * @param {boolean}  [options.silent=false] Determines if warning and error
 *                   messages will be displayed on the console
 * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will
 *                   update the DOM after processing CSS custom properties
 * @param {boolean}  [options.updateURLs=true] Determines if relative url()
 *                   paths will be converted to absolute urls in external CSS
 * @param {boolean}  [options.watch=false] Determines if a MutationObserver will
 *                   be created that will execute the ponyfill when a <link> or
 *                   <style> DOM mutation is observed
 * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes
 *                   1) the XHR object, 2) source node reference, and 3) the
 *                   source URL as arguments
 * @param {function} [options.onError] Callback after a CSS parsing error has
 *                   occurred or an XHR request has failed. Passes 1) an error
 *                   message, and 2) source node reference, 3) xhr, and 4 url as
 *                   arguments.
 * @param {function} [options.onWarning] Callback after each CSS parsing warning
 *                   has occurred. Passes 1) a warning message as an argument.
 * @param {function} [options.onSuccess] Callback after CSS data has been
 *                   collected from each node and before CSS custom properties
 *                   have been transformed. Allows modifying the CSS data before
 *                   it is transformed by returning any string value (or false
 *                   to skip). Passes 1) CSS text, 2) source node reference, and
 *                   3) the source URL as arguments.
 * @param {function} [options.onComplete] Callback after all CSS has been
 *                   processed, legacy-compatible CSS has been generated, and
 *                   (optionally) the DOM has been updated. Passes 1) a CSS
 *                   string with CSS variable values resolved, 2) an array of
 *                   output <style> node references that have been appended to
 *                   the DOM, 3) an object containing all custom properies names
 *                   and values, and 4) the ponyfill execution time in
 *                   milliseconds.
 * @param {function} [options.onFinally] Callback in modern and legacy browsers
 *                   after the ponyfill has finished all tasks. Passes 1) a
 *                   boolean indicating if the last ponyfill call resulted in a
 *                   style change, 2) a boolean indicating if the current
 *                   browser provides native support for CSS custom properties,
 *                   and 3) the ponyfill execution time in milliseconds.
 * @example
 *
 *   cssVars({
 *     rootElement   : document,
 *     shadowDOM     : false,
 *     include       : 'style,link[rel="stylesheet"]',
 *     exclude       : '',
 *     variables     : {},
 *     onlyLegacy    : true,
 *     preserveStatic: true,
 *     preserveVars  : false,
 *     silent        : false,
 *     updateDOM     : true,
 *     updateURLs    : true,
 *     watch         : false,
 *     onBeforeSend(xhr, node, url) {},
 *     onError(message, node, xhr, url) {},
 *     onWarning(message) {},
 *     onSuccess(cssText, node, url) {},
 *     onComplete(cssText, styleNode, cssVariables, benchmark) {},
 *     onFinally(hasChanged, hasNativeSupport, benchmark)
 *   });
 */ function cssVars() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var msgPrefix = "cssVars(): ";
    var settings = _extends({}, defaults, options);
    function handleError(message, sourceNode, xhr, url) {
        if (!settings.silent && window.console) {
            console.error("".concat(msgPrefix).concat(message, "\n"), sourceNode);
        }
        settings.onError(message, sourceNode, xhr, url);
    }
    function handleWarning(message) {
        if (!settings.silent && window.console) {
            console.warn("".concat(msgPrefix).concat(message));
        }
        settings.onWarning(message);
    }
    function handleFinally(hasChanged) {
        settings.onFinally(Boolean(hasChanged), isNativeSupport, getTimeStamp() - settings.__benchmark);
    }
    if (!isBrowser) {
        return;
    }
    if (settings.watch) {
        settings.watch = defaults.watch;
        addMutationObserver(settings);
        cssVars(settings);
        return;
    } else if (settings.watch === false && cssVarsObserver) {
        cssVarsObserver.disconnect();
        cssVarsObserver = null;
    }
    if (!settings.__benchmark) {
        if (cssVarsIsRunning === settings.rootElement) {
            cssVarsDebounced(options);
            return;
        }
        var srcNodes = Array.apply(null, settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])'));
        settings.__benchmark = getTimeStamp();
        settings.exclude = [ cssVarsObserver ? '[data-cssvars]:not([data-cssvars=""])' : '[data-cssvars="out"]', "link[disabled]:not([data-cssvars])", settings.exclude ].filter((function(selector) {
            return selector;
        })).join(",");
        settings.variables = fixVarNames(settings.variables);
        srcNodes.forEach((function(srcNode) {
            var hasStyleCache = srcNode.nodeName.toLowerCase() === "style" && srcNode.__cssVars.text;
            var hasStyleChanged = hasStyleCache && srcNode.textContent !== srcNode.__cssVars.text;
            if (hasStyleCache && hasStyleChanged) {
                srcNode.sheet && (srcNode.sheet.disabled = false);
                srcNode.setAttribute("data-cssvars", "");
            }
        }));
        if (!cssVarsObserver) {
            var outNodes = Array.apply(null, settings.rootElement.querySelectorAll('[data-cssvars="out"]'));
            outNodes.forEach((function(outNode) {
                var dataGroup = outNode.getAttribute("data-cssvars-group");
                var srcNode = dataGroup ? settings.rootElement.querySelector('[data-cssvars="src"][data-cssvars-group="'.concat(dataGroup, '"]')) : null;
                if (!srcNode) {
                    outNode.parentNode.removeChild(outNode);
                }
            }));
            if (cssVarsSrcNodeCount && srcNodes.length < cssVarsSrcNodeCount) {
                cssVarsSrcNodeCount = srcNodes.length;
                variableStore.dom = {};
            }
        }
    }
    if (document.readyState !== "loading") {
        if (isNativeSupport && settings.onlyLegacy) {
            var hasVarChange = false;
            if (settings.updateDOM) {
                var targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);
                Object.keys(settings.variables).forEach((function(key) {
                    var varValue = settings.variables[key];
                    hasVarChange = hasVarChange || varValue !== getComputedStyle(targetElm).getPropertyValue(key);
                    targetElm.style.setProperty(key, varValue);
                }));
            }
            handleFinally(hasVarChange);
        } else if (!isShadowDOMReady && (settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host)) {
            getCssData({
                rootElement: defaults.rootElement,
                include: defaults.include,
                exclude: settings.exclude,
                skipDisabled: false,
                onSuccess: function onSuccess(cssText, node, url) {
                    var isUserDisabled = (node.sheet || {}).disabled && !node.__cssVars;
                    if (isUserDisabled) {
                        return false;
                    }
                    cssText = cssText.replace(regex.cssComments, "").replace(regex.cssMediaQueries, "");
                    cssText = (cssText.match(regex.cssVarDeclRules) || []).join("");
                    return cssText || false;
                },
                onComplete: function onComplete(cssText, cssArray, nodeArray) {
                    parseVars(cssText, {
                        store: variableStore.dom,
                        onWarning: handleWarning
                    });
                    isShadowDOMReady = true;
                    cssVars(settings);
                }
            });
        } else {
            cssVarsIsRunning = settings.rootElement;
            getCssData({
                rootElement: settings.rootElement,
                include: settings.include,
                exclude: settings.exclude,
                skipDisabled: false,
                onBeforeSend: settings.onBeforeSend,
                onError: function onError(xhr, node, url) {
                    var responseUrl = xhr.responseURL || getFullUrl$1(url, location.href);
                    var statusText = xhr.statusText ? "(".concat(xhr.statusText, ")") : "Unspecified Error" + (xhr.status === 0 ? " (possibly CORS related)" : "");
                    var errorMsg = "CSS XHR Error: ".concat(responseUrl, " ").concat(xhr.status, " ").concat(statusText);
                    handleError(errorMsg, node, xhr, responseUrl);
                },
                onSuccess: function onSuccess(cssText, node, url) {
                    var isUserDisabled = (node.sheet || {}).disabled && !node.__cssVars;
                    if (isUserDisabled) {
                        return false;
                    }
                    var isLink = node.nodeName.toLowerCase() === "link";
                    var isStyleImport = node.nodeName.toLowerCase() === "style" && cssText !== node.textContent;
                    var returnVal = settings.onSuccess(cssText, node, url);
                    cssText = returnVal !== undefined && Boolean(returnVal) === false ? "" : returnVal || cssText;
                    if (settings.updateURLs && (isLink || isStyleImport)) {
                        cssText = fixRelativeCssUrls(cssText, url);
                    }
                    return cssText;
                },
                onComplete: function onComplete(cssText, cssArray) {
                    var nodeArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                    var currentVars = _extends({}, variableStore.dom, variableStore.user);
                    var hasVarChange = false;
                    variableStore.job = {};
                    nodeArray.forEach((function(node, i) {
                        var nodeCSS = cssArray[i];
                        node.__cssVars = node.__cssVars || {};
                        node.__cssVars.text = nodeCSS;
                        if (regex.cssVars.test(nodeCSS)) {
                            try {
                                var cssTree = parseCss(nodeCSS, {
                                    preserveStatic: settings.preserveStatic,
                                    removeComments: true
                                });
                                parseVars(cssTree, {
                                    parseHost: Boolean(settings.rootElement.host),
                                    store: variableStore.dom,
                                    onWarning: handleWarning
                                });
                                node.__cssVars.tree = cssTree;
                            } catch (err) {
                                handleError(err.message, node);
                            }
                        }
                    }));
                    _extends(variableStore.job, variableStore.dom);
                    if (settings.updateDOM) {
                        _extends(variableStore.user, settings.variables);
                        _extends(variableStore.job, variableStore.user);
                    } else {
                        _extends(variableStore.job, variableStore.user, settings.variables);
                        _extends(currentVars, settings.variables);
                    }
                    hasVarChange = counters.job > 0 && Boolean(Object.keys(variableStore.job).length > Object.keys(currentVars).length || Boolean(Object.keys(currentVars).length && Object.keys(variableStore.job).some((function(key) {
                        return variableStore.job[key] !== currentVars[key];
                    }))));
                    if (hasVarChange) {
                        resetCssNodes(settings.rootElement);
                        cssVars(settings);
                    } else {
                        var outCssArray = [];
                        var outNodeArray = [];
                        var hasKeyframesWithVars = false;
                        if (settings.updateDOM) {
                            counters.job++;
                        }
                        nodeArray.forEach((function(node, i) {
                            var isSkip = !node.__cssVars.tree;
                            if (node.__cssVars.tree) {
                                try {
                                    transformCss(node.__cssVars.tree, _extends({}, settings, {
                                        variables: variableStore.job,
                                        onWarning: handleWarning
                                    }));
                                    var outCss = stringifyCss(node.__cssVars.tree);
                                    if (settings.updateDOM) {
                                        var nodeCSS = cssArray[i];
                                        var hasCSSVarFunc = regex.cssVarFunc.test(nodeCSS);
                                        if (!node.getAttribute("data-cssvars")) {
                                            node.setAttribute("data-cssvars", "src");
                                        }
                                        if (outCss.length && hasCSSVarFunc) {
                                            var dataGroup = node.getAttribute("data-cssvars-group") || ++counters.group;
                                            var outCssNoSpaces = outCss.replace(/\s/g, "");
                                            var outNode = settings.rootElement.querySelector('[data-cssvars="out"][data-cssvars-group="'.concat(dataGroup, '"]')) || document.createElement("style");
                                            hasKeyframesWithVars = hasKeyframesWithVars || regex.cssKeyframes.test(outCss);
                                            if (settings.preserveStatic) {
                                                node.sheet && (node.sheet.disabled = true);
                                            }
                                            if (!outNode.hasAttribute("data-cssvars")) {
                                                outNode.setAttribute("data-cssvars", "out");
                                            }
                                            if (outCssNoSpaces === node.textContent.replace(/\s/g, "")) {
                                                isSkip = true;
                                                if (outNode && outNode.parentNode) {
                                                    node.removeAttribute("data-cssvars-group");
                                                    outNode.parentNode.removeChild(outNode);
                                                }
                                            } else if (outCssNoSpaces !== outNode.textContent.replace(/\s/g, "")) {
                                                [ node, outNode ].forEach((function(n) {
                                                    n.setAttribute("data-cssvars-job", counters.job);
                                                    n.setAttribute("data-cssvars-group", dataGroup);
                                                }));
                                                outNode.textContent = outCss;
                                                outCssArray.push(outCss);
                                                outNodeArray.push(outNode);
                                                if (!outNode.parentNode) {
                                                    node.parentNode.insertBefore(outNode, node.nextSibling);
                                                }
                                            }
                                        }
                                    } else {
                                        if (node.textContent.replace(/\s/g, "") !== outCss) {
                                            outCssArray.push(outCss);
                                        }
                                    }
                                } catch (err) {
                                    handleError(err.message, node);
                                }
                            }
                            if (isSkip) {
                                node.setAttribute("data-cssvars", "skip");
                            }
                            if (!node.hasAttribute("data-cssvars-job")) {
                                node.setAttribute("data-cssvars-job", counters.job);
                            }
                        }));
                        cssVarsSrcNodeCount = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])').length;
                        if (settings.shadowDOM) {
                            var elms = [].concat(settings.rootElement).concat(Array.apply(null, settings.rootElement.querySelectorAll("*")));
                            for (var i = 0, elm; elm = elms[i]; ++i) {
                                if (elm.shadowRoot && elm.shadowRoot.querySelector("style")) {
                                    var shadowSettings = _extends({}, settings, {
                                        rootElement: elm.shadowRoot
                                    });
                                    cssVars(shadowSettings);
                                }
                            }
                        }
                        if (settings.updateDOM && hasKeyframesWithVars) {
                            fixKeyframes(settings.rootElement);
                        }
                        cssVarsIsRunning = false;
                        settings.onComplete(outCssArray.join(""), outNodeArray, JSON.parse(JSON.stringify(variableStore.job)), getTimeStamp() - settings.__benchmark);
                        handleFinally(outNodeArray.length);
                    }
                }
            });
        }
    } else {
        document.addEventListener("DOMContentLoaded", (function init(evt) {
            cssVars(options);
            document.removeEventListener("DOMContentLoaded", init);
        }));
    }
}

cssVars.reset = function() {
    counters.job = 0;
    counters.group = 0;
    cssVarsIsRunning = false;
    if (cssVarsObserver) {
        cssVarsObserver.disconnect();
        cssVarsObserver = null;
    }
    cssVarsSrcNodeCount = 0;
    debounceTimer = null;
    isShadowDOMReady = false;
    for (var prop in variableStore) {
        variableStore[prop] = {};
    }
};

function addMutationObserver(settings) {
    function isDisabled(node) {
        var isDisabledAttr = isLink(node) && node.hasAttribute("disabled");
        var isDisabledSheet = (node.sheet || {}).disabled;
        return isDisabledAttr || isDisabledSheet;
    }
    function isLink(node) {
        var isStylesheet = node.nodeName.toLowerCase() === "link" && (node.getAttribute("rel") || "").indexOf("stylesheet") !== -1;
        return isStylesheet;
    }
    function isStyle(node) {
        return node.nodeName.toLowerCase() === "style";
    }
    function isValidAttributeMutation(mutation) {
        var isValid = false;
        if (mutation.type === "attributes" && isLink(mutation.target) && !isDisabled(mutation.target)) {
            var isEnabledMutation = mutation.attributeName === "disabled";
            var isHrefMutation = mutation.attributeName === "href";
            var isSkipNode = mutation.target.getAttribute("data-cssvars") === "skip";
            var isSrcNode = mutation.target.getAttribute("data-cssvars") === "src";
            if (isEnabledMutation) {
                isValid = !isSkipNode && !isSrcNode;
            } else if (isHrefMutation) {
                if (isSkipNode) {
                    mutation.target.setAttribute("data-cssvars", "");
                } else if (isSrcNode) {
                    resetCssNodes(settings.rootElement, true);
                }
                isValid = true;
            }
        }
        return isValid;
    }
    function isValidStyleTextMutation(mutation) {
        var isValid = false;
        if (mutation.type === "childList") {
            var isStyleElm = isStyle(mutation.target);
            var isOutNode = mutation.target.getAttribute("data-cssvars") === "out";
            isValid = isStyleElm && !isOutNode;
        }
        return isValid;
    }
    function isValidAddMutation(mutation) {
        var isValid = false;
        if (mutation.type === "childList") {
            isValid = Array.apply(null, mutation.addedNodes).some((function(node) {
                var isElm = node.nodeType === 1;
                var hasAttr = isElm && node.hasAttribute("data-cssvars");
                var isStyleWithVars = isStyle(node) && regex.cssVars.test(node.textContent);
                var isValid = !hasAttr && (isLink(node) || isStyleWithVars);
                return isValid && !isDisabled(node);
            }));
        }
        return isValid;
    }
    function isValidRemoveMutation(mutation) {
        var isValid = false;
        if (mutation.type === "childList") {
            isValid = Array.apply(null, mutation.removedNodes).some((function(node) {
                var isElm = node.nodeType === 1;
                var isOutNode = isElm && node.getAttribute("data-cssvars") === "out";
                var isSrcNode = isElm && node.getAttribute("data-cssvars") === "src";
                var isValid = isSrcNode;
                if (isSrcNode || isOutNode) {
                    var dataGroup = node.getAttribute("data-cssvars-group");
                    var orphanNode = settings.rootElement.querySelector('[data-cssvars-group="'.concat(dataGroup, '"]'));
                    if (isSrcNode) {
                        resetCssNodes(settings.rootElement, true);
                    }
                    if (orphanNode) {
                        orphanNode.parentNode.removeChild(orphanNode);
                    }
                }
                return isValid;
            }));
        }
        return isValid;
    }
    if (!window.MutationObserver) {
        return;
    }
    if (cssVarsObserver) {
        cssVarsObserver.disconnect();
        cssVarsObserver = null;
    }
    cssVarsObserver = new MutationObserver((function(mutations) {
        var hasValidMutation = mutations.some((function(mutation) {
            return isValidAttributeMutation(mutation) || isValidStyleTextMutation(mutation) || isValidAddMutation(mutation) || isValidRemoveMutation(mutation);
        }));
        if (hasValidMutation) {
            cssVars(settings);
        }
    }));
    cssVarsObserver.observe(document.documentElement, {
        attributes: true,
        attributeFilter: [ "disabled", "href" ],
        childList: true,
        subtree: true
    });
}

function cssVarsDebounced(settings) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout((function() {
        settings.__benchmark = null;
        cssVars(settings);
    }), delay);
}

function fixKeyframes(rootElement) {
    var animationNameProp = [ "animation-name", "-moz-animation-name", "-webkit-animation-name" ].filter((function(prop) {
        return getComputedStyle(document.body)[prop];
    }))[0];
    if (animationNameProp) {
        var allNodes = rootElement.getElementsByTagName("*");
        var keyframeNodes = [];
        var nameMarker = "__CSSVARSPONYFILL-KEYFRAMES__";
        for (var i = 0, len = allNodes.length; i < len; i++) {
            var node = allNodes[i];
            var animationName = getComputedStyle(node)[animationNameProp];
            if (animationName !== "none") {
                node.style[animationNameProp] += nameMarker;
                keyframeNodes.push(node);
            }
        }
        void document.body.offsetHeight;
        for (var _i = 0, _len = keyframeNodes.length; _i < _len; _i++) {
            var nodeStyle = keyframeNodes[_i].style;
            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, "");
        }
    }
}

function fixRelativeCssUrls(cssText, baseUrl) {
    var cssUrls = cssText.replace(regex.cssComments, "").match(regex.cssUrls) || [];
    cssUrls.forEach((function(cssUrl) {
        var oldUrl = cssUrl.replace(regex.cssUrls, "$1");
        var newUrl = getFullUrl$1(oldUrl, baseUrl);
        cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));
    }));
    return cssText;
}

function fixVarNames() {
    var varObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var reLeadingHyphens = /^-{2}/;
    return Object.keys(varObj).reduce((function(obj, value) {
        var key = reLeadingHyphens.test(value) ? value : "--".concat(value.replace(/^-+/, ""));
        obj[key] = varObj[value];
        return obj;
    }), {});
}

function getFullUrl$1(url) {
    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;
    var d = document.implementation.createHTMLDocument("");
    var b = d.createElement("base");
    var a = d.createElement("a");
    d.head.appendChild(b);
    d.body.appendChild(a);
    b.href = base;
    a.href = url;
    return a.href;
}

function getTimeStamp() {
    return isBrowser && (window.performance || {}).now ? window.performance.now() : (new Date).getTime();
}

function resetCssNodes(rootElement) {
    var resetDOMVariableStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var resetNodes = Array.apply(null, rootElement.querySelectorAll('[data-cssvars="skip"],[data-cssvars="src"]'));
    resetNodes.forEach((function(node) {
        return node.setAttribute("data-cssvars", "");
    }));
    if (resetDOMVariableStore) {
        variableStore.dom = {};
    }
}

/* harmony default export */ __webpack_exports__["default"] = (cssVars);
//# sourceMappingURL=css-vars-ponyfill.esm.js.map


/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function eventListener() {
      if (errorListener !== undefined) {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };
    var errorListener;

    // Adding an error listener is not optional because
    // if an error is thrown on an event emitter we cannot
    // guarantee that the actual event we are waiting will
    // be fired. The result could be a silent way to create
    // memory or file descriptor leaks, which is something
    // we should avoid.
    if (name !== 'error') {
      errorListener = function errorListener(err) {
        emitter.removeListener(name, eventListener);
        reject(err);
      };

      emitter.once('error', errorListener);
    }

    emitter.once(name, eventListener);
  });
}


/***/ }),

/***/ "./node_modules/html-entities/lib/html4-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html4-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var surrogate_pairs_1 = __webpack_require__(/*! ./surrogate-pairs */ "./node_modules/html-entities/lib/surrogate-pairs.js");
var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'AElig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];
var alphaIndex = {};
var numIndex = {};
(function () {
    var i = 0;
    var length = HTML_ALPHA.length;
    while (i < length) {
        var a = HTML_ALPHA[i];
        var c = HTML_CODES[i];
        alphaIndex[a] = String.fromCharCode(c);
        numIndex[c] = a;
        i++;
    }
})();
var Html4Entities = /** @class */ (function () {
    function Html4Entities() {
    }
    Html4Entities.prototype.decode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
            var chr;
            if (entity.charAt(0) === "#") {
                var code = entity.charAt(1).toLowerCase() === 'x' ?
                    parseInt(entity.substr(2), 16) :
                    parseInt(entity.substr(1));
                if (!isNaN(code) || code >= -32768) {
                    if (code <= 65535) {
                        chr = String.fromCharCode(code);
                    }
                    else {
                        chr = surrogate_pairs_1.fromCodePoint(code);
                    }
                }
            }
            else {
                chr = alphaIndex[entity];
            }
            return chr || s;
        });
    };
    Html4Entities.decode = function (str) {
        return new Html4Entities().decode(str);
    };
    Html4Entities.prototype.encode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var alpha = numIndex[str.charCodeAt(i)];
            result += alpha ? "&" + alpha + ";" : str.charAt(i);
            i++;
        }
        return result;
    };
    Html4Entities.encode = function (str) {
        return new Html4Entities().encode(str);
    };
    Html4Entities.prototype.encodeNonUTF = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var cc = str.charCodeAt(i);
            var alpha = numIndex[cc];
            if (alpha) {
                result += "&" + alpha + ";";
            }
            else if (cc < 32 || cc > 126) {
                if (cc >= surrogate_pairs_1.highSurrogateFrom && cc <= surrogate_pairs_1.highSurrogateTo) {
                    result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
                    i++;
                }
                else {
                    result += '&#' + cc + ';';
                }
            }
            else {
                result += str.charAt(i);
            }
            i++;
        }
        return result;
    };
    Html4Entities.encodeNonUTF = function (str) {
        return new Html4Entities().encodeNonUTF(str);
    };
    Html4Entities.prototype.encodeNonASCII = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            if (c <= 255) {
                result += str[i++];
                continue;
            }
            if (c >= surrogate_pairs_1.highSurrogateFrom && c <= surrogate_pairs_1.highSurrogateTo) {
                result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
                i++;
            }
            else {
                result += '&#' + c + ';';
            }
            i++;
        }
        return result;
    };
    Html4Entities.encodeNonASCII = function (str) {
        return new Html4Entities().encodeNonASCII(str);
    };
    return Html4Entities;
}());
exports.Html4Entities = Html4Entities;


/***/ }),

/***/ "./node_modules/html-entities/lib/html5-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html5-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var surrogate_pairs_1 = __webpack_require__(/*! ./surrogate-pairs */ "./node_modules/html-entities/lib/surrogate-pairs.js");
var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];
var DECODE_ONLY_ENTITIES = [['NewLine', [10]]];
var alphaIndex = {};
var charIndex = {};
createIndexes(alphaIndex, charIndex);
var Html5Entities = /** @class */ (function () {
    function Html5Entities() {
    }
    Html5Entities.prototype.decode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
            var chr;
            if (entity.charAt(0) === "#") {
                var code = entity.charAt(1) === 'x' ?
                    parseInt(entity.substr(2).toLowerCase(), 16) :
                    parseInt(entity.substr(1));
                if (!isNaN(code) || code >= -32768) {
                    if (code <= 65535) {
                        chr = String.fromCharCode(code);
                    }
                    else {
                        chr = surrogate_pairs_1.fromCodePoint(code);
                    }
                }
            }
            else {
                chr = alphaIndex[entity];
            }
            return chr || s;
        });
    };
    Html5Entities.decode = function (str) {
        return new Html5Entities().decode(str);
    };
    Html5Entities.prototype.encode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var charInfo = charIndex[str.charCodeAt(i)];
            if (charInfo) {
                var alpha = charInfo[str.charCodeAt(i + 1)];
                if (alpha) {
                    i++;
                }
                else {
                    alpha = charInfo[''];
                }
                if (alpha) {
                    result += "&" + alpha + ";";
                    i++;
                    continue;
                }
            }
            result += str.charAt(i);
            i++;
        }
        return result;
    };
    Html5Entities.encode = function (str) {
        return new Html5Entities().encode(str);
    };
    Html5Entities.prototype.encodeNonUTF = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            var charInfo = charIndex[c];
            if (charInfo) {
                var alpha = charInfo[str.charCodeAt(i + 1)];
                if (alpha) {
                    i++;
                }
                else {
                    alpha = charInfo[''];
                }
                if (alpha) {
                    result += "&" + alpha + ";";
                    i++;
                    continue;
                }
            }
            if (c < 32 || c > 126) {
                if (c >= surrogate_pairs_1.highSurrogateFrom && c <= surrogate_pairs_1.highSurrogateTo) {
                    result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
                    i++;
                }
                else {
                    result += '&#' + c + ';';
                }
            }
            else {
                result += str.charAt(i);
            }
            i++;
        }
        return result;
    };
    Html5Entities.encodeNonUTF = function (str) {
        return new Html5Entities().encodeNonUTF(str);
    };
    Html5Entities.prototype.encodeNonASCII = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            if (c <= 255) {
                result += str[i++];
                continue;
            }
            if (c >= surrogate_pairs_1.highSurrogateFrom && c <= surrogate_pairs_1.highSurrogateTo) {
                result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
                i += 2;
            }
            else {
                result += '&#' + c + ';';
                i++;
            }
        }
        return result;
    };
    Html5Entities.encodeNonASCII = function (str) {
        return new Html5Entities().encodeNonASCII(str);
    };
    return Html5Entities;
}());
exports.Html5Entities = Html5Entities;
function createIndexes(alphaIndex, charIndex) {
    var i = ENTITIES.length;
    while (i--) {
        var _a = ENTITIES[i], alpha = _a[0], _b = _a[1], chr = _b[0], chr2 = _b[1];
        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
        var charInfo = void 0;
        if (addChar) {
            charInfo = charIndex[chr] = charIndex[chr] || {};
        }
        if (chr2) {
            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
            addChar && (charInfo[chr2] = alpha);
        }
        else {
            alphaIndex[alpha] = String.fromCharCode(chr);
            addChar && (charInfo[''] = alpha);
        }
    }
    i = DECODE_ONLY_ENTITIES.length;
    while (i--) {
        var _c = DECODE_ONLY_ENTITIES[i], alpha = _c[0], _d = _c[1], chr = _d[0], chr2 = _d[1];
        alphaIndex[alpha] = String.fromCharCode(chr) + (chr2 ? String.fromCharCode(chr2) : '');
    }
}


/***/ }),

/***/ "./node_modules/html-entities/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/html-entities/lib/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xml_entities_1 = __webpack_require__(/*! ./xml-entities */ "./node_modules/html-entities/lib/xml-entities.js");
exports.XmlEntities = xml_entities_1.XmlEntities;
var html4_entities_1 = __webpack_require__(/*! ./html4-entities */ "./node_modules/html-entities/lib/html4-entities.js");
exports.Html4Entities = html4_entities_1.Html4Entities;
var html5_entities_1 = __webpack_require__(/*! ./html5-entities */ "./node_modules/html-entities/lib/html5-entities.js");
exports.Html5Entities = html5_entities_1.Html5Entities;
exports.AllHtmlEntities = html5_entities_1.Html5Entities;


/***/ }),

/***/ "./node_modules/html-entities/lib/surrogate-pairs.js":
/*!***********************************************************!*\
  !*** ./node_modules/html-entities/lib/surrogate-pairs.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.fromCodePoint = String.fromCodePoint || function (astralCodePoint) {
    return String.fromCharCode(Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xD800, (astralCodePoint - 0x10000) % 0x400 + 0xDC00);
};
exports.getCodePoint = String.prototype.codePointAt ?
    function (input, position) {
        return input.codePointAt(position);
    } :
    function (input, position) {
        return (input.charCodeAt(position) - 0xD800) * 0x400
            + input.charCodeAt(position + 1) - 0xDC00 + 0x10000;
    };
exports.highSurrogateFrom = 0xD800;
exports.highSurrogateTo = 0xDBFF;


/***/ }),

/***/ "./node_modules/html-entities/lib/xml-entities.js":
/*!********************************************************!*\
  !*** ./node_modules/html-entities/lib/xml-entities.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var surrogate_pairs_1 = __webpack_require__(/*! ./surrogate-pairs */ "./node_modules/html-entities/lib/surrogate-pairs.js");
var ALPHA_INDEX = {
    '&lt': '<',
    '&gt': '>',
    '&quot': '"',
    '&apos': '\'',
    '&amp': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&apos;': '\'',
    '&amp;': '&'
};
var CHAR_INDEX = {
    60: 'lt',
    62: 'gt',
    34: 'quot',
    39: 'apos',
    38: 'amp'
};
var CHAR_S_INDEX = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&apos;',
    '&': '&amp;'
};
var XmlEntities = /** @class */ (function () {
    function XmlEntities() {
    }
    XmlEntities.prototype.encode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/[<>"'&]/g, function (s) {
            return CHAR_S_INDEX[s];
        });
    };
    XmlEntities.encode = function (str) {
        return new XmlEntities().encode(str);
    };
    XmlEntities.prototype.decode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/&#?[0-9a-zA-Z]+;?/g, function (s) {
            if (s.charAt(1) === '#') {
                var code = s.charAt(2).toLowerCase() === 'x' ?
                    parseInt(s.substr(3), 16) :
                    parseInt(s.substr(2));
                if (!isNaN(code) || code >= -32768) {
                    if (code <= 65535) {
                        return String.fromCharCode(code);
                    }
                    else {
                        return surrogate_pairs_1.fromCodePoint(code);
                    }
                }
                return '';
            }
            return ALPHA_INDEX[s] || s;
        });
    };
    XmlEntities.decode = function (str) {
        return new XmlEntities().decode(str);
    };
    XmlEntities.prototype.encodeNonUTF = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            var alpha = CHAR_INDEX[c];
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
            if (c < 32 || c > 126) {
                if (c >= surrogate_pairs_1.highSurrogateFrom && c <= surrogate_pairs_1.highSurrogateTo) {
                    result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
                    i++;
                }
                else {
                    result += '&#' + c + ';';
                }
            }
            else {
                result += str.charAt(i);
            }
            i++;
        }
        return result;
    };
    XmlEntities.encodeNonUTF = function (str) {
        return new XmlEntities().encodeNonUTF(str);
    };
    XmlEntities.prototype.encodeNonASCII = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            if (c <= 255) {
                result += str[i++];
                continue;
            }
            if (c >= surrogate_pairs_1.highSurrogateFrom && c <= surrogate_pairs_1.highSurrogateTo) {
                result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
                i++;
            }
            else {
                result += '&#' + c + ';';
            }
            i++;
        }
        return result;
    };
    XmlEntities.encodeNonASCII = function (str) {
        return new XmlEntities().encodeNonASCII(str);
    };
    return XmlEntities;
}());
exports.XmlEntities = XmlEntities;


/***/ }),

/***/ "./node_modules/identicon.js/identicon.js":
/*!************************************************!*\
  !*** ./node_modules/identicon.js/identicon.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Identicon.js 2.3.3
 * http://github.com/stewartlord/identicon.js
 *
 * PNGLib required for PNG output
 * http://www.xarg.org/download/pnglib.js
 *
 * Copyright 2018, Stewart Lord
 * Released under the BSD license
 * http://www.opensource.org/licenses/bsd-license.php
 */

(function() {
    var PNGlib;
    if ( true && typeof module.exports !== 'undefined') {
        PNGlib = __webpack_require__(/*! ./pnglib */ "./node_modules/identicon.js/pnglib.js");
    } else {
        PNGlib = window.PNGlib;
    }

    var Identicon = function(hash, options){
        if (typeof(hash) !== 'string' || hash.length < 15) {
            throw 'A hash of at least 15 characters is required.';
        }

        this.defaults = {
            background: [240, 240, 240, 255],
            margin:     0.08,
            size:       64,
            saturation: 0.7,
            brightness: 0.5,
            format:     'png'
        };

        this.options = typeof(options) === 'object' ? options : this.defaults;

        // backward compatibility with old constructor (hash, size, margin)
        if (typeof(arguments[1]) === 'number') { this.options.size   = arguments[1]; }
        if (arguments[2])                      { this.options.margin = arguments[2]; }

        this.hash        = hash
        this.background  = this.options.background || this.defaults.background;
        this.size        = this.options.size       || this.defaults.size;
        this.format      = this.options.format     || this.defaults.format;
        this.margin      = this.options.margin !== undefined ? this.options.margin : this.defaults.margin;

        // foreground defaults to last 7 chars as hue at 70% saturation, 50% brightness
        var hue          = parseInt(this.hash.substr(-7), 16) / 0xfffffff;
        var saturation   = this.options.saturation || this.defaults.saturation;
        var brightness   = this.options.brightness || this.defaults.brightness;
        this.foreground  = this.options.foreground || this.hsl2rgb(hue, saturation, brightness);
    };

    Identicon.prototype = {
        background: null,
        foreground: null,
        hash:       null,
        margin:     null,
        size:       null,
        format:     null,

        image: function(){
            return this.isSvg()
                ? new Svg(this.size, this.foreground, this.background)
                : new PNGlib(this.size, this.size, 256);
        },

        render: function(){
            var image      = this.image(),
                size       = this.size,
                baseMargin = Math.floor(size * this.margin),
                cell       = Math.floor((size - (baseMargin * 2)) / 5),
                margin     = Math.floor((size - cell * 5) / 2),
                bg         = image.color.apply(image, this.background),
                fg         = image.color.apply(image, this.foreground);

            // the first 15 characters of the hash control the pixels (even/odd)
            // they are drawn down the middle first, then mirrored outwards
            var i, color;
            for (i = 0; i < 15; i++) {
                color = parseInt(this.hash.charAt(i), 16) % 2 ? bg : fg;
                if (i < 5) {
                    this.rectangle(2 * cell + margin, i * cell + margin, cell, cell, color, image);
                } else if (i < 10) {
                    this.rectangle(1 * cell + margin, (i - 5) * cell + margin, cell, cell, color, image);
                    this.rectangle(3 * cell + margin, (i - 5) * cell + margin, cell, cell, color, image);
                } else if (i < 15) {
                    this.rectangle(0 * cell + margin, (i - 10) * cell + margin, cell, cell, color, image);
                    this.rectangle(4 * cell + margin, (i - 10) * cell + margin, cell, cell, color, image);
                }
            }

            return image;
        },

        rectangle: function(x, y, w, h, color, image){
            if (this.isSvg()) {
                image.rectangles.push({x: x, y: y, w: w, h: h, color: color});
            } else {
                var i, j;
                for (i = x; i < x + w; i++) {
                    for (j = y; j < y + h; j++) {
                        image.buffer[image.index(i, j)] = color;
                    }
                }
            }
        },

        // adapted from: https://gist.github.com/aemkei/1325937
        hsl2rgb: function(h, s, b){
            h *= 6;
            s = [
                b += s *= b < .5 ? b : 1 - b,
                b - h % 1 * s * 2,
                b -= s *= 2,
                b,
                b + h % 1 * s,
                b + s
            ];

            return[
                s[ ~~h    % 6 ] * 255, // red
                s[ (h|16) % 6 ] * 255, // green
                s[ (h|8)  % 6 ] * 255  // blue
            ];
        },

        toString: function(raw){
            // backward compatibility with old toString, default to base64
            if (raw) {
                return this.render().getDump();
            } else {
                return this.render().getBase64();
            }
        },

        isSvg: function(){
            return this.format.match(/svg/i)
        }
    };

    var Svg = function(size, foreground, background){
        this.size       = size;
        this.foreground = this.color.apply(this, foreground);
        this.background = this.color.apply(this, background);
        this.rectangles = [];
    };

    Svg.prototype = {
        size:       null,
        foreground: null,
        background: null,
        rectangles: null,

        color: function(r, g, b, a){
            var values = [r, g, b].map(Math.round);
            values.push((a >= 0) && (a <= 255) ? a/255 : 1);
            return 'rgba(' + values.join(',') + ')';
        },

        getDump: function(){
          var i,
                xml,
                rect,
                fg     = this.foreground,
                bg     = this.background,
                stroke = this.size * 0.005;

            xml = "<svg xmlns='http://www.w3.org/2000/svg'"
                + " width='" + this.size + "' height='" + this.size + "'"
                + " style='background-color:" + bg + ";'>"
                + "<g style='fill:" + fg + "; stroke:" + fg + "; stroke-width:" + stroke + ";'>";

            for (i = 0; i < this.rectangles.length; i++) {
                rect = this.rectangles[i];
                if (rect.color == bg) continue;
                xml += "<rect "
                    + " x='"      + rect.x + "'"
                    + " y='"      + rect.y + "'"
                    + " width='"  + rect.w + "'"
                    + " height='" + rect.h + "'"
                    + "/>";
            }
            xml += "</g></svg>"

            return xml;
        },

        getBase64: function(){
            if ('function' === typeof btoa) {
                return btoa(this.getDump());
            } else if (Buffer) {
                return new Buffer(this.getDump(), 'binary').toString('base64');
            } else {
                throw 'Cannot generate base64 output';
            }
        }
    };

    if ( true && typeof module.exports !== 'undefined') {
        module.exports = Identicon;
    } else {
        window.Identicon = Identicon;
    }
})();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/identicon.js/pnglib.js":
/*!*********************************************!*\
  !*** ./node_modules/identicon.js/pnglib.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
* A handy class to calculate color values.
*
* @version 1.0
* @author Robert Eisele <robert@xarg.org>
* @copyright Copyright (c) 2010, Robert Eisele
* @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/
* @license http://www.opensource.org/licenses/bsd-license.php BSD License
*
*/

(function() {

	// helper functions for that ctx
	function write(buffer, offs) {
		for (var i = 2; i < arguments.length; i++) {
			for (var j = 0; j < arguments[i].length; j++) {
				buffer[offs++] = arguments[i].charAt(j);
			}
		}
	}

	function byte2(w) {
		return String.fromCharCode((w >> 8) & 255, w & 255);
	}

	function byte4(w) {
		return String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);
	}

	function byte2lsb(w) {
		return String.fromCharCode(w & 255, (w >> 8) & 255);
	}

	// modified from original source to support NPM
	var PNGlib = function(width,height,depth) {

		this.width   = width;
		this.height  = height;
		this.depth   = depth;

		// pixel data and row filter identifier size
		this.pix_size = height * (width + 1);

		// deflate header, pix_size, block headers, adler32 checksum
		this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;

		// offsets and sizes of Png chunks
		this.ihdr_offs = 0;									// IHDR offset and size
		this.ihdr_size = 4 + 4 + 13 + 4;
		this.plte_offs = this.ihdr_offs + this.ihdr_size;	// PLTE offset and size
		this.plte_size = 4 + 4 + 3 * depth + 4;
		this.trns_offs = this.plte_offs + this.plte_size;	// tRNS offset and size
		this.trns_size = 4 + 4 + depth + 4;
		this.idat_offs = this.trns_offs + this.trns_size;	// IDAT offset and size
		this.idat_size = 4 + 4 + this.data_size + 4;
		this.iend_offs = this.idat_offs + this.idat_size;	// IEND offset and size
		this.iend_size = 4 + 4 + 4;
		this.buffer_size  = this.iend_offs + this.iend_size;	// total PNG size

		this.buffer  = new Array();
		this.palette = new Object();
		this.pindex  = 0;

		var _crc32 = new Array();

		// initialize buffer with zero bytes
		for (var i = 0; i < this.buffer_size; i++) {
			this.buffer[i] = "\x00";
		}

		// initialize non-zero elements
		write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), "\x08\x03");
		write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');
		write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');
		write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');
		write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');

		// initialize deflate header
		var header = ((8 + (7 << 4)) << 8) | (3 << 6);
		header+= 31 - (header % 31);

		write(this.buffer, this.idat_offs + 8, byte2(header));

		// initialize deflate block headers
		for (var i = 0; (i << 16) - 1 < this.pix_size; i++) {
			var size, bits;
			if (i + 0xffff < this.pix_size) {
				size = 0xffff;
				bits = "\x00";
			} else {
				size = this.pix_size - (i << 16) - i;
				bits = "\x01";
			}
			write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));
		}

		/* Create crc32 lookup table */
		for (var i = 0; i < 256; i++) {
			var c = i;
			for (var j = 0; j < 8; j++) {
				if (c & 1) {
					c = -306674912 ^ ((c >> 1) & 0x7fffffff);
				} else {
					c = (c >> 1) & 0x7fffffff;
				}
			}
			_crc32[i] = c;
		}

		// compute the index into a png for a given pixel
		this.index = function(x,y) {
			var i = y * (this.width + 1) + x + 1;
			var j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;
			return j;
		}

		// convert a color and build up the palette
		this.color = function(red, green, blue, alpha) {

			alpha = alpha >= 0 ? alpha : 255;
			var color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;

			if (typeof this.palette[color] == "undefined") {
				if (this.pindex == this.depth) return "\x00";

				var ndx = this.plte_offs + 8 + 3 * this.pindex;

				this.buffer[ndx + 0] = String.fromCharCode(red);
				this.buffer[ndx + 1] = String.fromCharCode(green);
				this.buffer[ndx + 2] = String.fromCharCode(blue);
				this.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);

				this.palette[color] = String.fromCharCode(this.pindex++);
			}
			return this.palette[color];
		}

		// output a PNG string, Base64 encoded
		this.getBase64 = function() {

			var s = this.getDump();

			var ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
			var c1, c2, c3, e1, e2, e3, e4;
			var l = s.length;
			var i = 0;
			var r = "";

			do {
				c1 = s.charCodeAt(i);
				e1 = c1 >> 2;
				c2 = s.charCodeAt(i+1);
				e2 = ((c1 & 3) << 4) | (c2 >> 4);
				c3 = s.charCodeAt(i+2);
				if (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }
				if (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }
				r+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);
			} while ((i+= 3) < l);
			return r;
		}

		// output a PNG string
		this.getDump = function() {

			// compute adler32 of output pixels + row filter bytes
			var BASE = 65521; /* largest prime smaller than 65536 */
			var NMAX = 5552;  /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */
			var s1 = 1;
			var s2 = 0;
			var n = NMAX;

			for (var y = 0; y < this.height; y++) {
				for (var x = -1; x < this.width; x++) {
					s1+= this.buffer[this.index(x, y)].charCodeAt(0);
					s2+= s1;
					if ((n-= 1) == 0) {
						s1%= BASE;
						s2%= BASE;
						n = NMAX;
					}
				}
			}
			s1%= BASE;
			s2%= BASE;
			write(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));

			// compute crc32 of the PNG chunks
			function crc32(png, offs, size) {
				var crc = -1;
				for (var i = 4; i < size-4; i += 1) {
					crc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);
				}
				write(png, offs+size-4, byte4(crc ^ -1));
			}

			crc32(this.buffer, this.ihdr_offs, this.ihdr_size);
			crc32(this.buffer, this.plte_offs, this.plte_size);
			crc32(this.buffer, this.trns_offs, this.trns_size);
			crc32(this.buffer, this.idat_offs, this.idat_size);
			crc32(this.buffer, this.iend_offs, this.iend_size);

			// convert PNG to string
			return "\x89PNG\r\n\x1a\n"+this.buffer.join('');
		}
	}

	// modified from original source to support NPM
	if ( true && typeof module.exports !== 'undefined') {
		module.exports = PNGlib;
	} else {
		window.PNGlib = PNGlib;
	}
})();


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/jssha/dist/sha.mjs":
/*!*****************************************!*\
  !*** ./node_modules/jssha/dist/sha.mjs ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * A JavaScript implementation of the SHA family of hashes - defined in FIPS PUB 180-4, FIPS PUB 202,
 * and SP 800-185 - as well as the corresponding HMAC implementation as defined in FIPS PUB 198-1.
 *
 * Copyright 2008-2020 Brian Turek, 1998-2009 Paul Johnston & Contributors
 * Distributed under the BSD License
 * See http://caligatio.github.com/jsSHA/ for more information
 */
const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function n(t,n,e,r){let i,s,o;const h=n||[0],u=(e=e||0)>>>3,w=-1===r?3:0;for(i=0;i<t.length;i+=1)o=i+u,s=o>>>2,h.length<=s&&h.push(0),h[s]|=t[i]<<8*(w+r*(o%4));return{value:h,binLen:8*t.length+e}}function e(e,r,i){switch(r){case"UTF8":case"UTF16BE":case"UTF16LE":break;default:throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE")}switch(e){case"HEX":return function(t,n,e){return function(t,n,e,r){let i,s,o,h;if(0!=t.length%2)throw new Error("String of HEX type must be in byte increments");const u=n||[0],w=(e=e||0)>>>3,c=-1===r?3:0;for(i=0;i<t.length;i+=2){if(s=parseInt(t.substr(i,2),16),isNaN(s))throw new Error("String of HEX type contains invalid characters");for(h=(i>>>1)+w,o=h>>>2;u.length<=o;)u.push(0);u[o]|=s<<8*(c+r*(h%4))}return{value:u,binLen:4*t.length+e}}(t,n,e,i)};case"TEXT":return function(t,n,e){return function(t,n,e,r,i){let s,o,h,u,w,c,f,a,l=0;const A=e||[0],E=(r=r||0)>>>3;if("UTF8"===n)for(f=-1===i?3:0,h=0;h<t.length;h+=1)for(s=t.charCodeAt(h),o=[],128>s?o.push(s):2048>s?(o.push(192|s>>>6),o.push(128|63&s)):55296>s||57344<=s?o.push(224|s>>>12,128|s>>>6&63,128|63&s):(h+=1,s=65536+((1023&s)<<10|1023&t.charCodeAt(h)),o.push(240|s>>>18,128|s>>>12&63,128|s>>>6&63,128|63&s)),u=0;u<o.length;u+=1){for(c=l+E,w=c>>>2;A.length<=w;)A.push(0);A[w]|=o[u]<<8*(f+i*(c%4)),l+=1}else for(f=-1===i?2:0,a="UTF16LE"===n&&1!==i||"UTF16LE"!==n&&1===i,h=0;h<t.length;h+=1){for(s=t.charCodeAt(h),!0===a&&(u=255&s,s=u<<8|s>>>8),c=l+E,w=c>>>2;A.length<=w;)A.push(0);A[w]|=s<<8*(f+i*(c%4)),l+=2}return{value:A,binLen:8*l+r}}(t,r,n,e,i)};case"B64":return function(n,e,r){return function(n,e,r,i){let s,o,h,u,w,c,f,a=0;const l=e||[0],A=(r=r||0)>>>3,E=-1===i?3:0,H=n.indexOf("=");if(-1===n.search(/^[a-zA-Z0-9=+/]+$/))throw new Error("Invalid character in base-64 string");if(n=n.replace(/=/g,""),-1!==H&&H<n.length)throw new Error("Invalid '=' found in base-64 string");for(o=0;o<n.length;o+=4){for(w=n.substr(o,4),u=0,h=0;h<w.length;h+=1)s=t.indexOf(w.charAt(h)),u|=s<<18-6*h;for(h=0;h<w.length-1;h+=1){for(f=a+A,c=f>>>2;l.length<=c;)l.push(0);l[c]|=(u>>>16-8*h&255)<<8*(E+i*(f%4)),a+=1}}return{value:l,binLen:8*a+r}}(n,e,r,i)};case"BYTES":return function(t,n,e){return function(t,n,e,r){let i,s,o,h;const u=n||[0],w=(e=e||0)>>>3,c=-1===r?3:0;for(s=0;s<t.length;s+=1)i=t.charCodeAt(s),h=s+w,o=h>>>2,u.length<=o&&u.push(0),u[o]|=i<<8*(c+r*(h%4));return{value:u,binLen:8*t.length+e}}(t,n,e,i)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t,e,r){return function(t,e,r,i){return n(new Uint8Array(t),e,r,i)}(t,e,r,i)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t,e,r){return n(t,e,r,i)};default:throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}function r(n,e,r,i){switch(n){case"HEX":return function(t){return function(t,n,e,r){let i,s,o="";const h=n/8,u=-1===e?3:0;for(i=0;i<h;i+=1)s=t[i>>>2]>>>8*(u+e*(i%4)),o+="0123456789abcdef".charAt(s>>>4&15)+"0123456789abcdef".charAt(15&s);return r.outputUpper?o.toUpperCase():o}(t,e,r,i)};case"B64":return function(n){return function(n,e,r,i){let s,o,h,u,w,c="";const f=e/8,a=-1===r?3:0;for(s=0;s<f;s+=3)for(u=s+1<f?n[s+1>>>2]:0,w=s+2<f?n[s+2>>>2]:0,h=(n[s>>>2]>>>8*(a+r*(s%4))&255)<<16|(u>>>8*(a+r*((s+1)%4))&255)<<8|w>>>8*(a+r*((s+2)%4))&255,o=0;o<4;o+=1)c+=8*s+6*o<=e?t.charAt(h>>>6*(3-o)&63):i.b64Pad;return c}(n,e,r,i)};case"BYTES":return function(t){return function(t,n,e){let r,i,s="";const o=n/8,h=-1===e?3:0;for(r=0;r<o;r+=1)i=t[r>>>2]>>>8*(h+e*(r%4))&255,s+=String.fromCharCode(i);return s}(t,e,r)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t){return function(t,n,e){let r;const i=n/8,s=new ArrayBuffer(i),o=new Uint8Array(s),h=-1===e?3:0;for(r=0;r<i;r+=1)o[r]=t[r>>>2]>>>8*(h+e*(r%4))&255;return s}(t,e,r)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t){return function(t,n,e){let r;const i=n/8,s=-1===e?3:0,o=new Uint8Array(i);for(r=0;r<i;r+=1)o[r]=t[r>>>2]>>>8*(s+e*(r%4))&255;return o}(t,e,r)};default:throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}const i=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],o=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],h="Chosen SHA variant is not supported";function u(t,n){let e,r;const i=t.binLen>>>3,s=n.binLen>>>3,o=i<<3,h=4-i<<3;if(i%4!=0){for(e=0;e<s;e+=4)r=i+e>>>2,t.value[r]|=n.value[e>>>2]<<o,t.value.push(0),t.value[r+1]|=n.value[e>>>2]>>>h;return(t.value.length<<2)-4>=s+i&&t.value.pop(),{value:t.value,binLen:t.binLen+n.binLen}}return{value:t.value.concat(n.value),binLen:t.binLen+n.binLen}}function w(t){const n={outputUpper:!1,b64Pad:"=",outputLen:-1},e=t||{},r="Output length must be a multiple of 8";if(n.outputUpper=e.outputUpper||!1,e.b64Pad&&(n.b64Pad=e.b64Pad),e.outputLen){if(e.outputLen%8!=0)throw new Error(r);n.outputLen=e.outputLen}else if(e.shakeLen){if(e.shakeLen%8!=0)throw new Error(r);n.outputLen=e.shakeLen}if("boolean"!=typeof n.outputUpper)throw new Error("Invalid outputUpper formatting option");if("string"!=typeof n.b64Pad)throw new Error("Invalid b64Pad formatting option");return n}function c(t,n,r,i){const s=t+" must include a value and format";if(!n){if(!i)throw new Error(s);return i}if(void 0===n.value||!n.format)throw new Error(s);return e(n.format,n.encoding||"UTF8",r)(n.value)}class f{constructor(t,n,e){const r=e||{};if(this.t=n,this.i=r.encoding||"UTF8",this.numRounds=r.numRounds||1,isNaN(this.numRounds)||this.numRounds!==parseInt(this.numRounds,10)||1>this.numRounds)throw new Error("numRounds must a integer >= 1");this.s=t,this.o=[],this.h=0,this.u=!1,this.l=0,this.A=!1,this.H=[],this.S=[]}update(t){let n,e=0;const r=this.p>>>5,i=this.m(t,this.o,this.h),s=i.binLen,o=i.value,h=s>>>5;for(n=0;n<h;n+=r)e+this.p<=s&&(this.C=this.R(o.slice(n,n+r),this.C),e+=this.p);this.l+=e,this.o=o.slice(e>>>5),this.h=s%this.p,this.u=!0}getHash(t,n){let e,i,s=this.U;const o=w(n);if(this.v){if(-1===o.outputLen)throw new Error("Output length must be specified in options");s=o.outputLen}const h=r(t,s,this.K,o);if(this.A&&this.T)return h(this.T(o));for(i=this.F(this.o.slice(),this.h,this.l,this.g(this.C),s),e=1;e<this.numRounds;e+=1)this.v&&s%32!=0&&(i[i.length-1]&=16777215>>>24-s%32),i=this.F(i,s,0,this.B(this.s),s);return h(i)}setHMACKey(t,n,r){if(!this.L)throw new Error("Variant does not support HMAC");if(this.u)throw new Error("Cannot set MAC key after calling update");const i=e(n,(r||{}).encoding||"UTF8",this.K);this.M(i(t))}M(t){const n=this.p>>>3,e=n/4-1;let r;if(1!==this.numRounds)throw new Error("Cannot set numRounds with MAC");if(this.A)throw new Error("MAC key already set");for(n<t.binLen/8&&(t.value=this.F(t.value,t.binLen,0,this.B(this.s),this.U));t.value.length<=e;)t.value.push(0);for(r=0;r<=e;r+=1)this.H[r]=909522486^t.value[r],this.S[r]=1549556828^t.value[r];this.C=this.R(this.H,this.C),this.l=this.p,this.A=!0}getHMAC(t,n){const e=w(n);return r(t,this.U,this.K,e)(this.k())}k(){let t;if(!this.A)throw new Error("Cannot call getHMAC without first setting MAC key");const n=this.F(this.o.slice(),this.h,this.l,this.g(this.C),this.U);return t=this.R(this.S,this.B(this.s)),t=this.F(n,this.U,this.p,t,this.U),t}}function a(t,n){return t<<n|t>>>32-n}function l(t,n){return t>>>n|t<<32-n}function A(t,n){return t>>>n}function E(t,n,e){return t^n^e}function H(t,n,e){return t&n^~t&e}function S(t,n,e){return t&n^t&e^n&e}function b(t){return l(t,2)^l(t,13)^l(t,22)}function p(t,n){const e=(65535&t)+(65535&n);return(65535&(t>>>16)+(n>>>16)+(e>>>16))<<16|65535&e}function d(t,n,e,r){const i=(65535&t)+(65535&n)+(65535&e)+(65535&r);return(65535&(t>>>16)+(n>>>16)+(e>>>16)+(r>>>16)+(i>>>16))<<16|65535&i}function m(t,n,e,r,i){const s=(65535&t)+(65535&n)+(65535&e)+(65535&r)+(65535&i);return(65535&(t>>>16)+(n>>>16)+(e>>>16)+(r>>>16)+(i>>>16)+(s>>>16))<<16|65535&s}function C(t){return l(t,7)^l(t,18)^A(t,3)}function y(t){return l(t,6)^l(t,11)^l(t,25)}function R(t){return[1732584193,4023233417,2562383102,271733878,3285377520]}function U(t,n){let e,r,i,s,o,h,u;const w=[];for(e=n[0],r=n[1],i=n[2],s=n[3],o=n[4],u=0;u<80;u+=1)w[u]=u<16?t[u]:a(w[u-3]^w[u-8]^w[u-14]^w[u-16],1),h=u<20?m(a(e,5),H(r,i,s),o,1518500249,w[u]):u<40?m(a(e,5),E(r,i,s),o,1859775393,w[u]):u<60?m(a(e,5),S(r,i,s),o,2400959708,w[u]):m(a(e,5),E(r,i,s),o,3395469782,w[u]),o=s,s=i,i=a(r,30),r=e,e=h;return n[0]=p(e,n[0]),n[1]=p(r,n[1]),n[2]=p(i,n[2]),n[3]=p(s,n[3]),n[4]=p(o,n[4]),n}function v(t,n,e,r){let i;const s=15+(n+65>>>9<<4),o=n+e;for(;t.length<=s;)t.push(0);for(t[n>>>5]|=128<<24-n%32,t[s]=4294967295&o,t[s-1]=o/4294967296|0,i=0;i<t.length;i+=16)r=U(t.slice(i,i+16),r);return r}class K extends f{constructor(t,n,r){if("SHA-1"!==t)throw new Error(h);super(t,n,r);const i=r||{};this.L=!0,this.T=this.k,this.K=-1,this.m=e(this.t,this.i,this.K),this.R=U,this.g=function(t){return t.slice()},this.B=R,this.F=v,this.C=[1732584193,4023233417,2562383102,271733878,3285377520],this.p=512,this.U=160,this.v=!1,i.hmacKey&&this.M(c("hmacKey",i.hmacKey,this.K))}}function T(t){let n;return n="SHA-224"==t?s.slice():o.slice(),n}function F(t,n){let e,r,s,o,h,u,w,c,f,a,E;const R=[];for(e=n[0],r=n[1],s=n[2],o=n[3],h=n[4],u=n[5],w=n[6],c=n[7],E=0;E<64;E+=1)R[E]=E<16?t[E]:d(l(U=R[E-2],17)^l(U,19)^A(U,10),R[E-7],C(R[E-15]),R[E-16]),f=m(c,y(h),H(h,u,w),i[E],R[E]),a=p(b(e),S(e,r,s)),c=w,w=u,u=h,h=p(o,f),o=s,s=r,r=e,e=p(f,a);var U;return n[0]=p(e,n[0]),n[1]=p(r,n[1]),n[2]=p(s,n[2]),n[3]=p(o,n[3]),n[4]=p(h,n[4]),n[5]=p(u,n[5]),n[6]=p(w,n[6]),n[7]=p(c,n[7]),n}class g extends f{constructor(t,n,r){if("SHA-224"!==t&&"SHA-256"!==t)throw new Error(h);super(t,n,r);const i=r||{};this.T=this.k,this.L=!0,this.K=-1,this.m=e(this.t,this.i,this.K),this.R=F,this.g=function(t){return t.slice()},this.B=T,this.F=function(n,e,r,i){return function(t,n,e,r,i){let s,o;const h=15+(n+65>>>9<<4),u=n+e;for(;t.length<=h;)t.push(0);for(t[n>>>5]|=128<<24-n%32,t[h]=4294967295&u,t[h-1]=u/4294967296|0,s=0;s<t.length;s+=16)r=F(t.slice(s,s+16),r);return o="SHA-224"===i?[r[0],r[1],r[2],r[3],r[4],r[5],r[6]]:r,o}(n,e,r,i,t)},this.C=T(t),this.p=512,this.U="SHA-224"===t?224:256,this.v=!1,i.hmacKey&&this.M(c("hmacKey",i.hmacKey,this.K))}}class B{constructor(t,n){this.Y=t,this.N=n}}function L(t,n){let e;return n>32?(e=64-n,new B(t.N<<n|t.Y>>>e,t.Y<<n|t.N>>>e)):0!==n?(e=32-n,new B(t.Y<<n|t.N>>>e,t.N<<n|t.Y>>>e)):t}function M(t,n){let e;return n<32?(e=32-n,new B(t.Y>>>n|t.N<<e,t.N>>>n|t.Y<<e)):(e=64-n,new B(t.N>>>n|t.Y<<e,t.Y>>>n|t.N<<e))}function k(t,n){return new B(t.Y>>>n,t.N>>>n|t.Y<<32-n)}function Y(t,n,e){return new B(t.Y&n.Y^t.Y&e.Y^n.Y&e.Y,t.N&n.N^t.N&e.N^n.N&e.N)}function N(t){const n=M(t,28),e=M(t,34),r=M(t,39);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}function I(t,n){let e,r;e=(65535&t.N)+(65535&n.N),r=(t.N>>>16)+(n.N>>>16)+(e>>>16);const i=(65535&r)<<16|65535&e;e=(65535&t.Y)+(65535&n.Y)+(r>>>16),r=(t.Y>>>16)+(n.Y>>>16)+(e>>>16);return new B((65535&r)<<16|65535&e,i)}function X(t,n,e,r){let i,s;i=(65535&t.N)+(65535&n.N)+(65535&e.N)+(65535&r.N),s=(t.N>>>16)+(n.N>>>16)+(e.N>>>16)+(r.N>>>16)+(i>>>16);const o=(65535&s)<<16|65535&i;i=(65535&t.Y)+(65535&n.Y)+(65535&e.Y)+(65535&r.Y)+(s>>>16),s=(t.Y>>>16)+(n.Y>>>16)+(e.Y>>>16)+(r.Y>>>16)+(i>>>16);return new B((65535&s)<<16|65535&i,o)}function z(t,n,e,r,i){let s,o;s=(65535&t.N)+(65535&n.N)+(65535&e.N)+(65535&r.N)+(65535&i.N),o=(t.N>>>16)+(n.N>>>16)+(e.N>>>16)+(r.N>>>16)+(i.N>>>16)+(s>>>16);const h=(65535&o)<<16|65535&s;s=(65535&t.Y)+(65535&n.Y)+(65535&e.Y)+(65535&r.Y)+(65535&i.Y)+(o>>>16),o=(t.Y>>>16)+(n.Y>>>16)+(e.Y>>>16)+(r.Y>>>16)+(i.Y>>>16)+(s>>>16);return new B((65535&o)<<16|65535&s,h)}function x(t,n){return new B(t.Y^n.Y,t.N^n.N)}function _(t){const n=M(t,19),e=M(t,61),r=k(t,6);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}function O(t){const n=M(t,1),e=M(t,8),r=k(t,7);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}function P(t){const n=M(t,14),e=M(t,18),r=M(t,41);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}const V=[new B(i[0],3609767458),new B(i[1],602891725),new B(i[2],3964484399),new B(i[3],2173295548),new B(i[4],4081628472),new B(i[5],3053834265),new B(i[6],2937671579),new B(i[7],3664609560),new B(i[8],2734883394),new B(i[9],1164996542),new B(i[10],1323610764),new B(i[11],3590304994),new B(i[12],4068182383),new B(i[13],991336113),new B(i[14],633803317),new B(i[15],3479774868),new B(i[16],2666613458),new B(i[17],944711139),new B(i[18],2341262773),new B(i[19],2007800933),new B(i[20],1495990901),new B(i[21],1856431235),new B(i[22],3175218132),new B(i[23],2198950837),new B(i[24],3999719339),new B(i[25],766784016),new B(i[26],2566594879),new B(i[27],3203337956),new B(i[28],1034457026),new B(i[29],2466948901),new B(i[30],3758326383),new B(i[31],168717936),new B(i[32],1188179964),new B(i[33],1546045734),new B(i[34],1522805485),new B(i[35],2643833823),new B(i[36],2343527390),new B(i[37],1014477480),new B(i[38],1206759142),new B(i[39],344077627),new B(i[40],1290863460),new B(i[41],3158454273),new B(i[42],3505952657),new B(i[43],106217008),new B(i[44],3606008344),new B(i[45],1432725776),new B(i[46],1467031594),new B(i[47],851169720),new B(i[48],3100823752),new B(i[49],1363258195),new B(i[50],3750685593),new B(i[51],3785050280),new B(i[52],3318307427),new B(i[53],3812723403),new B(i[54],2003034995),new B(i[55],3602036899),new B(i[56],1575990012),new B(i[57],1125592928),new B(i[58],2716904306),new B(i[59],442776044),new B(i[60],593698344),new B(i[61],3733110249),new B(i[62],2999351573),new B(i[63],3815920427),new B(3391569614,3928383900),new B(3515267271,566280711),new B(3940187606,3454069534),new B(4118630271,4000239992),new B(116418474,1914138554),new B(174292421,2731055270),new B(289380356,3203993006),new B(460393269,320620315),new B(685471733,587496836),new B(852142971,1086792851),new B(1017036298,365543100),new B(1126000580,2618297676),new B(1288033470,3409855158),new B(1501505948,4234509866),new B(1607167915,987167468),new B(1816402316,1246189591)];function Z(t){return"SHA-384"===t?[new B(3418070365,s[0]),new B(1654270250,s[1]),new B(2438529370,s[2]),new B(355462360,s[3]),new B(1731405415,s[4]),new B(41048885895,s[5]),new B(3675008525,s[6]),new B(1203062813,s[7])]:[new B(o[0],4089235720),new B(o[1],2227873595),new B(o[2],4271175723),new B(o[3],1595750129),new B(o[4],2917565137),new B(o[5],725511199),new B(o[6],4215389547),new B(o[7],327033209)]}function j(t,n){let e,r,i,s,o,h,u,w,c,f,a,l;const A=[];for(e=n[0],r=n[1],i=n[2],s=n[3],o=n[4],h=n[5],u=n[6],w=n[7],a=0;a<80;a+=1)a<16?(l=2*a,A[a]=new B(t[l],t[l+1])):A[a]=X(_(A[a-2]),A[a-7],O(A[a-15]),A[a-16]),c=z(w,P(o),(H=h,S=u,new B((E=o).Y&H.Y^~E.Y&S.Y,E.N&H.N^~E.N&S.N)),V[a],A[a]),f=I(N(e),Y(e,r,i)),w=u,u=h,h=o,o=I(s,c),s=i,i=r,r=e,e=I(c,f);var E,H,S;return n[0]=I(e,n[0]),n[1]=I(r,n[1]),n[2]=I(i,n[2]),n[3]=I(s,n[3]),n[4]=I(o,n[4]),n[5]=I(h,n[5]),n[6]=I(u,n[6]),n[7]=I(w,n[7]),n}class q extends f{constructor(t,n,r){if("SHA-384"!==t&&"SHA-512"!==t)throw new Error(h);super(t,n,r);const i=r||{};this.T=this.k,this.L=!0,this.K=-1,this.m=e(this.t,this.i,this.K),this.R=j,this.g=function(t){return t.slice()},this.B=Z,this.F=function(n,e,r,i){return function(t,n,e,r,i){let s,o;const h=31+(n+129>>>10<<5),u=n+e;for(;t.length<=h;)t.push(0);for(t[n>>>5]|=128<<24-n%32,t[h]=4294967295&u,t[h-1]=u/4294967296|0,s=0;s<t.length;s+=32)r=j(t.slice(s,s+32),r);return o="SHA-384"===i?[(r=r)[0].Y,r[0].N,r[1].Y,r[1].N,r[2].Y,r[2].N,r[3].Y,r[3].N,r[4].Y,r[4].N,r[5].Y,r[5].N]:[r[0].Y,r[0].N,r[1].Y,r[1].N,r[2].Y,r[2].N,r[3].Y,r[3].N,r[4].Y,r[4].N,r[5].Y,r[5].N,r[6].Y,r[6].N,r[7].Y,r[7].N],o}(n,e,r,i,t)},this.C=Z(t),this.p=1024,this.U="SHA-384"===t?384:512,this.v=!1,i.hmacKey&&this.M(c("hmacKey",i.hmacKey,this.K))}}const D=[new B(0,1),new B(0,32898),new B(2147483648,32906),new B(2147483648,2147516416),new B(0,32907),new B(0,2147483649),new B(2147483648,2147516545),new B(2147483648,32777),new B(0,138),new B(0,136),new B(0,2147516425),new B(0,2147483658),new B(0,2147516555),new B(2147483648,139),new B(2147483648,32905),new B(2147483648,32771),new B(2147483648,32770),new B(2147483648,128),new B(0,32778),new B(2147483648,2147483658),new B(2147483648,2147516545),new B(2147483648,32896),new B(0,2147483649),new B(2147483648,2147516424)],G=[[0,36,3,41,18],[1,44,10,45,2],[62,6,43,15,61],[28,55,25,21,56],[27,20,39,8,14]];function J(t){let n;const e=[];for(n=0;n<5;n+=1)e[n]=[new B(0,0),new B(0,0),new B(0,0),new B(0,0),new B(0,0)];return e}function Q(t){let n;const e=[];for(n=0;n<5;n+=1)e[n]=t[n].slice();return e}function W(t,n){let e,r,i,s;const o=[],h=[];if(null!==t)for(r=0;r<t.length;r+=2)n[(r>>>1)%5][(r>>>1)/5|0]=x(n[(r>>>1)%5][(r>>>1)/5|0],new B(t[r+1],t[r]));for(e=0;e<24;e+=1){for(s=J(),r=0;r<5;r+=1)o[r]=(u=n[r][0],w=n[r][1],c=n[r][2],f=n[r][3],a=n[r][4],new B(u.Y^w.Y^c.Y^f.Y^a.Y,u.N^w.N^c.N^f.N^a.N));for(r=0;r<5;r+=1)h[r]=x(o[(r+4)%5],L(o[(r+1)%5],1));for(r=0;r<5;r+=1)for(i=0;i<5;i+=1)n[r][i]=x(n[r][i],h[r]);for(r=0;r<5;r+=1)for(i=0;i<5;i+=1)s[i][(2*r+3*i)%5]=L(n[r][i],G[r][i]);for(r=0;r<5;r+=1)for(i=0;i<5;i+=1)n[r][i]=x(s[r][i],new B(~s[(r+1)%5][i].Y&s[(r+2)%5][i].Y,~s[(r+1)%5][i].N&s[(r+2)%5][i].N));n[0][0]=x(n[0][0],D[e])}var u,w,c,f,a;return n}function $(t){let n,e,r=0;const i=[0,0],s=[4294967295&t,t/4294967296&2097151];for(n=6;n>=0;n--)e=s[n>>2]>>>8*n&255,0===e&&0===r||(i[r+1>>2]|=e<<8*(r+1),r+=1);return r=0!==r?r:1,i[0]|=r,{value:r+1>4?i:[i[0]],binLen:8+8*r}}function tt(t){return u($(t.binLen),t)}function nt(t,n){let e,r=$(n);r=u(r,t);const i=n>>>2,s=(i-r.value.length%i)%i;for(e=0;e<s;e++)r.value.push(0);return r.value}class et extends f{constructor(t,n,r){let i=6,s=0;super(t,n,r);const o=r||{};if(1!==this.numRounds){if(o.kmacKey||o.hmacKey)throw new Error("Cannot set numRounds with MAC");if("CSHAKE128"===this.s||"CSHAKE256"===this.s)throw new Error("Cannot set numRounds for CSHAKE variants")}switch(this.K=1,this.m=e(this.t,this.i,this.K),this.R=W,this.g=Q,this.B=J,this.C=J(),this.v=!1,t){case"SHA3-224":this.p=s=1152,this.U=224,this.L=!0,this.T=this.k;break;case"SHA3-256":this.p=s=1088,this.U=256,this.L=!0,this.T=this.k;break;case"SHA3-384":this.p=s=832,this.U=384,this.L=!0,this.T=this.k;break;case"SHA3-512":this.p=s=576,this.U=512,this.L=!0,this.T=this.k;break;case"SHAKE128":i=31,this.p=s=1344,this.U=-1,this.v=!0,this.L=!1,this.T=null;break;case"SHAKE256":i=31,this.p=s=1088,this.U=-1,this.v=!0,this.L=!1,this.T=null;break;case"KMAC128":i=4,this.p=s=1344,this.I(r),this.U=-1,this.v=!0,this.L=!1,this.T=this.X;break;case"KMAC256":i=4,this.p=s=1088,this.I(r),this.U=-1,this.v=!0,this.L=!1,this.T=this.X;break;case"CSHAKE128":this.p=s=1344,i=this._(r),this.U=-1,this.v=!0,this.L=!1,this.T=null;break;case"CSHAKE256":this.p=s=1088,i=this._(r),this.U=-1,this.v=!0,this.L=!1,this.T=null;break;default:throw new Error(h)}this.F=function(t,n,e,r,o){return function(t,n,e,r,i,s,o){let h,u,w=0;const c=[],f=i>>>5,a=n>>>5;for(h=0;h<a&&n>=i;h+=f)r=W(t.slice(h,h+f),r),n-=i;for(t=t.slice(h),n%=i;t.length<f;)t.push(0);for(h=n>>>3,t[h>>2]^=s<<h%4*8,t[f-1]^=2147483648,r=W(t,r);32*c.length<o&&(u=r[w%5][w/5|0],c.push(u.N),!(32*c.length>=o));)c.push(u.Y),w+=1,0==64*w%i&&(W(null,r),w=0);return c}(t,n,0,r,s,i,o)},o.hmacKey&&this.M(c("hmacKey",o.hmacKey,this.K))}_(t,n){const e=function(t){const n=t||{};return{funcName:c("funcName",n.funcName,1,{value:[],binLen:0}),customization:c("Customization",n.customization,1,{value:[],binLen:0})}}(t||{});n&&(e.funcName=n);const r=u(tt(e.funcName),tt(e.customization));if(0!==e.customization.binLen||0!==e.funcName.binLen){const t=nt(r,this.p>>>3);for(let n=0;n<t.length;n+=this.p>>>5)this.C=this.R(t.slice(n,n+(this.p>>>5)),this.C),this.l+=this.p;return 4}return 31}I(t){const n=function(t){const n=t||{};return{kmacKey:c("kmacKey",n.kmacKey,1),funcName:{value:[1128353099],binLen:32},customization:c("Customization",n.customization,1,{value:[],binLen:0})}}(t||{});this._(t,n.funcName);const e=nt(tt(n.kmacKey),this.p>>>3);for(let t=0;t<e.length;t+=this.p>>>5)this.C=this.R(e.slice(t,t+(this.p>>>5)),this.C),this.l+=this.p;this.A=!0}X(t){const n=u({value:this.o.slice(),binLen:this.h},function(t){let n,e,r=0;const i=[0,0],s=[4294967295&t,t/4294967296&2097151];for(n=6;n>=0;n--)e=s[n>>2]>>>8*n&255,0===e&&0===r||(i[r>>2]|=e<<8*r,r+=1);return r=0!==r?r:1,i[r>>2]|=r<<8*r,{value:r+1>4?i:[i[0]],binLen:8+8*r}}(t.outputLen));return this.F(n.value,n.binLen,this.l,this.g(this.C),t.outputLen)}}/* harmony default export */ __webpack_exports__["default"] = (class{constructor(t,n,e){if("SHA-1"==t)this.O=new K(t,n,e);else if("SHA-224"==t||"SHA-256"==t)this.O=new g(t,n,e);else if("SHA-384"==t||"SHA-512"==t)this.O=new q(t,n,e);else{if("SHA3-224"!=t&&"SHA3-256"!=t&&"SHA3-384"!=t&&"SHA3-512"!=t&&"SHAKE128"!=t&&"SHAKE256"!=t&&"CSHAKE128"!=t&&"CSHAKE256"!=t&&"KMAC128"!=t&&"KMAC256"!=t)throw new Error(h);this.O=new et(t,n,e)}}update(t){this.O.update(t)}getHash(t,n){return this.O.getHash(t,n)}setHMACKey(t,n,e){this.O.setHMACKey(t,n,e)}getHMAC(t,n){return this.O.getHMAC(t,n)}});
//# sourceMappingURL=sha.mjs.map


/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
    "use strict";
    if (true) {
        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
    "use strict";

    // Slightly dubious tricks to cut down minimized file size
    var noop = function() {};
    var undefinedType = "undefined";
    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (
        /Trident\/|MSIE /.test(window.navigator.userAgent)
    );

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    // Cross-browser bind equivalent that works at least back to IE6
    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    // Trace() doesn't print the message in IE, so for that case we need to wrap it
    function traceForIE() {
        if (console.log) {
            if (console.log.apply) {
                console.log.apply(console, arguments);
            } else {
                // In old IE, native console methods themselves don't have apply().
                Function.prototype.apply.apply(console.log, [console, arguments]);
            }
        }
        if (console.trace) console.trace();
    }

    // Build the best logging method possible for this env
    // Wherever possible we want to bind, not wrap, to preserve stack traces
    function realMethod(methodName) {
        if (methodName === 'debug') {
            methodName = 'log';
        }

        if (typeof console === undefinedType) {
            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
        } else if (methodName === 'trace' && isIE) {
            return traceForIE;
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }

    // These private functions always need `this` to be set properly

    function replaceLoggingMethods(level, loggerName) {
        /*jshint validthis:true */
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = (i < level) ?
                noop :
                this.methodFactory(methodName, level, loggerName);
        }

        // Define log.log as an alias for log.debug
        this.log = this.debug;
    }

    // In old IE versions, the console isn't present until you first open it.
    // We build realMethod() replacements here that regenerate logging methods
    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods.call(this, level, loggerName);
                this[methodName].apply(this, arguments);
            }
        };
    }

    // By default, we use closely bound real methods wherever possible, and
    // otherwise we wait for a console to appear, and then try again.
    function defaultMethodFactory(methodName, level, loggerName) {
        /*jshint validthis:true */
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives.apply(this, arguments);
    }

    function Logger(name, defaultLevel, factory) {
      var self = this;
      var currentLevel;

      var storageKey = "loglevel";
      if (typeof name === "string") {
        storageKey += ":" + name;
      } else if (typeof name === "symbol") {
        storageKey = undefined;
      }

      function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

          if (typeof window === undefinedType || !storageKey) return;

          // Use localStorage if available
          try {
              window.localStorage[storageKey] = levelName;
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {}
      }

      function getPersistedLevel() {
          var storedLevel;

          if (typeof window === undefinedType || !storageKey) return;

          try {
              storedLevel = window.localStorage[storageKey];
          } catch (ignore) {}

          // Fallback to cookies if local storage gives us nothing
          if (typeof storedLevel === undefinedType) {
              try {
                  var cookie = window.document.cookie;
                  var location = cookie.indexOf(
                      encodeURIComponent(storageKey) + "=");
                  if (location !== -1) {
                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
                  }
              } catch (ignore) {}
          }

          // If the stored level is not valid, treat it as if nothing was stored.
          if (self.levels[storedLevel] === undefined) {
              storedLevel = undefined;
          }

          return storedLevel;
      }

      /*
       *
       * Public logger API - see https://github.com/pimterry/loglevel for details
       *
       */

      self.name = name;

      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
          "ERROR": 4, "SILENT": 5};

      self.methodFactory = factory || defaultMethodFactory;

      self.getLevel = function () {
          return currentLevel;
      };

      self.setLevel = function (level, persist) {
          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
              level = self.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
              currentLevel = level;
              if (persist !== false) {  // defaults to true
                  persistLevelIfPossible(level);
              }
              replaceLoggingMethods.call(self, level, name);
              if (typeof console === undefinedType && level < self.levels.SILENT) {
                  return "No console available for logging";
              }
          } else {
              throw "log.setLevel() called with invalid level: " + level;
          }
      };

      self.setDefaultLevel = function (level) {
          if (!getPersistedLevel()) {
              self.setLevel(level, false);
          }
      };

      self.enableAll = function(persist) {
          self.setLevel(self.levels.TRACE, persist);
      };

      self.disableAll = function(persist) {
          self.setLevel(self.levels.SILENT, persist);
      };

      // Initialize with the right level
      var initialLevel = getPersistedLevel();
      if (initialLevel == null) {
          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
      }
      self.setLevel(initialLevel, false);
    }

    /*
     *
     * Top-level API
     *
     */

    var defaultLogger = new Logger();

    var _loggersByName = {};
    defaultLogger.getLogger = function getLogger(name) {
        if ((typeof name !== "symbol" && typeof name !== "string") || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }

        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
        }
        return logger;
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === defaultLogger) {
            window.log = _log;
        }

        return defaultLogger;
    };

    defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
    };

    // ES6 default export, for compatibility
    defaultLogger['default'] = defaultLogger;

    return defaultLogger;
}));


/***/ }),

/***/ "./node_modules/moment/moment.js":
/*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js

;(function (global, factory) {
     true ? module.exports = factory() :
    undefined
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate (y) {
        var date;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays (ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays :
            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
            : (m) ? weekdays[m.day()] : weekdays;
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                !(function webpackMissingModule() { var e = new Error("Cannot find module 'undefined'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':   return months;
                case 'quarter': return months / 3;
                case 'year':    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asQuarters     = makeAs('Q');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asQuarters     = asQuarters;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.24.0';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");


/***/ }),

/***/ "./node_modules/sockjs-client/dist/sockjs.js":
/*!***************************************************!*\
  !*** ./node_modules/sockjs-client/dist/sockjs.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/* sockjs-client v1.5.0 | http://sockjs.org | MIT license */
(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
'use strict';

var transportList = require('./transport-list');

module.exports = require('./main')(transportList);

// TODO can't get rid of this until all servers do
if ('_sockjs_onload' in global) {
  setTimeout(global._sockjs_onload, 1);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./main":14,"./transport-list":16}],2:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function CloseEvent() {
  Event.call(this);
  this.initEvent('close', false, false);
  this.wasClean = false;
  this.code = 0;
  this.reason = '';
}

inherits(CloseEvent, Event);

module.exports = CloseEvent;

},{"./event":4,"inherits":57}],3:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventTarget = require('./eventtarget')
  ;

function EventEmitter() {
  EventTarget.call(this);
}

inherits(EventEmitter, EventTarget);

EventEmitter.prototype.removeAllListeners = function(type) {
  if (type) {
    delete this._listeners[type];
  } else {
    this._listeners = {};
  }
};

EventEmitter.prototype.once = function(type, listener) {
  var self = this
    , fired = false;

  function g() {
    self.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  this.on(type, g);
};

EventEmitter.prototype.emit = function() {
  var type = arguments[0];
  var listeners = this._listeners[type];
  if (!listeners) {
    return;
  }
  // equivalent of Array.prototype.slice.call(arguments, 1);
  var l = arguments.length;
  var args = new Array(l - 1);
  for (var ai = 1; ai < l; ai++) {
    args[ai - 1] = arguments[ai];
  }
  for (var i = 0; i < listeners.length; i++) {
    listeners[i].apply(this, args);
  }
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;

module.exports.EventEmitter = EventEmitter;

},{"./eventtarget":5,"inherits":57}],4:[function(require,module,exports){
'use strict';

function Event(eventType) {
  this.type = eventType;
}

Event.prototype.initEvent = function(eventType, canBubble, cancelable) {
  this.type = eventType;
  this.bubbles = canBubble;
  this.cancelable = cancelable;
  this.timeStamp = +new Date();
  return this;
};

Event.prototype.stopPropagation = function() {};
Event.prototype.preventDefault = function() {};

Event.CAPTURING_PHASE = 1;
Event.AT_TARGET = 2;
Event.BUBBLING_PHASE = 3;

module.exports = Event;

},{}],5:[function(require,module,exports){
'use strict';

/* Simplified implementation of DOM2 EventTarget.
 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
 */

function EventTarget() {
  this._listeners = {};
}

EventTarget.prototype.addEventListener = function(eventType, listener) {
  if (!(eventType in this._listeners)) {
    this._listeners[eventType] = [];
  }
  var arr = this._listeners[eventType];
  // #4
  if (arr.indexOf(listener) === -1) {
    // Make a copy so as not to interfere with a current dispatchEvent.
    arr = arr.concat([listener]);
  }
  this._listeners[eventType] = arr;
};

EventTarget.prototype.removeEventListener = function(eventType, listener) {
  var arr = this._listeners[eventType];
  if (!arr) {
    return;
  }
  var idx = arr.indexOf(listener);
  if (idx !== -1) {
    if (arr.length > 1) {
      // Make a copy so as not to interfere with a current dispatchEvent.
      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
    } else {
      delete this._listeners[eventType];
    }
    return;
  }
};

EventTarget.prototype.dispatchEvent = function() {
  var event = arguments[0];
  var t = event.type;
  // equivalent of Array.prototype.slice.call(arguments, 0);
  var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);
  // TODO: This doesn't match the real behavior; per spec, onfoo get
  // their place in line from the /first/ time they're set from
  // non-null. Although WebKit bumps it to the end every time it's
  // set.
  if (this['on' + t]) {
    this['on' + t].apply(this, args);
  }
  if (t in this._listeners) {
    // Grab a reference to the listeners list. removeEventListener may alter the list.
    var listeners = this._listeners[t];
    for (var i = 0; i < listeners.length; i++) {
      listeners[i].apply(this, args);
    }
  }
};

module.exports = EventTarget;

},{}],6:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function TransportMessageEvent(data) {
  Event.call(this);
  this.initEvent('message', false, false);
  this.data = data;
}

inherits(TransportMessageEvent, Event);

module.exports = TransportMessageEvent;

},{"./event":4,"inherits":57}],7:[function(require,module,exports){
'use strict';

var JSON3 = require('json3')
  , iframeUtils = require('./utils/iframe')
  ;

function FacadeJS(transport) {
  this._transport = transport;
  transport.on('message', this._transportMessage.bind(this));
  transport.on('close', this._transportClose.bind(this));
}

FacadeJS.prototype._transportClose = function(code, reason) {
  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
};
FacadeJS.prototype._transportMessage = function(frame) {
  iframeUtils.postMessage('t', frame);
};
FacadeJS.prototype._send = function(data) {
  this._transport.send(data);
};
FacadeJS.prototype._close = function() {
  this._transport.close();
  this._transport.removeAllListeners();
};

module.exports = FacadeJS;

},{"./utils/iframe":47,"json3":58}],8:[function(require,module,exports){
(function (process){
'use strict';

var urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , JSON3 = require('json3')
  , FacadeJS = require('./facade')
  , InfoIframeReceiver = require('./info-iframe-receiver')
  , iframeUtils = require('./utils/iframe')
  , loc = require('./location')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:iframe-bootstrap');
}

module.exports = function(SockJS, availableTransports) {
  var transportMap = {};
  availableTransports.forEach(function(at) {
    if (at.facadeTransport) {
      transportMap[at.facadeTransport.transportName] = at.facadeTransport;
    }
  });

  // hard-coded for the info iframe
  // TODO see if we can make this more dynamic
  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
  var parentOrigin;

  /* eslint-disable camelcase */
  SockJS.bootstrap_iframe = function() {
    /* eslint-enable camelcase */
    var facade;
    iframeUtils.currentWindowId = loc.hash.slice(1);
    var onMessage = function(e) {
      if (e.source !== parent) {
        return;
      }
      if (typeof parentOrigin === 'undefined') {
        parentOrigin = e.origin;
      }
      if (e.origin !== parentOrigin) {
        return;
      }

      var iframeMessage;
      try {
        iframeMessage = JSON3.parse(e.data);
      } catch (ignored) {
        debug('bad json', e.data);
        return;
      }

      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
        return;
      }
      switch (iframeMessage.type) {
      case 's':
        var p;
        try {
          p = JSON3.parse(iframeMessage.data);
        } catch (ignored) {
          debug('bad json', iframeMessage.data);
          break;
        }
        var version = p[0];
        var transport = p[1];
        var transUrl = p[2];
        var baseUrl = p[3];
        debug(version, transport, transUrl, baseUrl);
        // change this to semver logic
        if (version !== SockJS.version) {
          throw new Error('Incompatible SockJS! Main site uses:' +
                    ' "' + version + '", the iframe:' +
                    ' "' + SockJS.version + '".');
        }

        if (!urlUtils.isOriginEqual(transUrl, loc.href) ||
            !urlUtils.isOriginEqual(baseUrl, loc.href)) {
          throw new Error('Can\'t connect to different domain from within an ' +
                    'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
        }
        facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
        break;
      case 'm':
        facade._send(iframeMessage.data);
        break;
      case 'c':
        if (facade) {
          facade._close();
        }
        facade = null;
        break;
      }
    };

    eventUtils.attachEvent('message', onMessage);

    // Start
    iframeUtils.postMessage('s');
  };
};

}).call(this,{ env: {} })

},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,"debug":55,"json3":58}],9:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , objectUtils = require('./utils/object')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-ajax');
}

function InfoAjax(url, AjaxObject) {
  EventEmitter.call(this);

  var self = this;
  var t0 = +new Date();
  this.xo = new AjaxObject('GET', url);

  this.xo.once('finish', function(status, text) {
    var info, rtt;
    if (status === 200) {
      rtt = (+new Date()) - t0;
      if (text) {
        try {
          info = JSON3.parse(text);
        } catch (e) {
          debug('bad json', text);
        }
      }

      if (!objectUtils.isObject(info)) {
        info = {};
      }
    }
    self.emit('finish', info, rtt);
    self.removeAllListeners();
  });
}

inherits(InfoAjax, EventEmitter);

InfoAjax.prototype.close = function() {
  this.removeAllListeners();
  this.xo.close();
};

module.exports = InfoAjax;

}).call(this,{ env: {} })

},{"./utils/object":49,"debug":55,"events":3,"inherits":57,"json3":58}],10:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , JSON3 = require('json3')
  , XHRLocalObject = require('./transport/sender/xhr-local')
  , InfoAjax = require('./info-ajax')
  ;

function InfoReceiverIframe(transUrl) {
  var self = this;
  EventEmitter.call(this);

  this.ir = new InfoAjax(transUrl, XHRLocalObject);
  this.ir.once('finish', function(info, rtt) {
    self.ir = null;
    self.emit('message', JSON3.stringify([info, rtt]));
  });
}

inherits(InfoReceiverIframe, EventEmitter);

InfoReceiverIframe.transportName = 'iframe-info-receiver';

InfoReceiverIframe.prototype.close = function() {
  if (this.ir) {
    this.ir.close();
    this.ir = null;
  }
  this.removeAllListeners();
};

module.exports = InfoReceiverIframe;

},{"./info-ajax":9,"./transport/sender/xhr-local":37,"events":3,"inherits":57,"json3":58}],11:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , utils = require('./utils/event')
  , IframeTransport = require('./transport/iframe')
  , InfoReceiverIframe = require('./info-iframe-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-iframe');
}

function InfoIframe(baseUrl, url) {
  var self = this;
  EventEmitter.call(this);

  var go = function() {
    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);

    ifr.once('message', function(msg) {
      if (msg) {
        var d;
        try {
          d = JSON3.parse(msg);
        } catch (e) {
          debug('bad json', msg);
          self.emit('finish');
          self.close();
          return;
        }

        var info = d[0], rtt = d[1];
        self.emit('finish', info, rtt);
      }
      self.close();
    });

    ifr.once('close', function() {
      self.emit('finish');
      self.close();
    });
  };

  // TODO this seems the same as the 'needBody' from transports
  if (!global.document.body) {
    utils.attachEvent('load', go);
  } else {
    go();
  }
}

inherits(InfoIframe, EventEmitter);

InfoIframe.enabled = function() {
  return IframeTransport.enabled();
};

InfoIframe.prototype.close = function() {
  if (this.ifr) {
    this.ifr.close();
  }
  this.removeAllListeners();
  this.ifr = null;
};

module.exports = InfoIframe;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,"debug":55,"events":3,"inherits":57,"json3":58}],12:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , urlUtils = require('./utils/url')
  , XDR = require('./transport/sender/xdr')
  , XHRCors = require('./transport/sender/xhr-cors')
  , XHRLocal = require('./transport/sender/xhr-local')
  , XHRFake = require('./transport/sender/xhr-fake')
  , InfoIframe = require('./info-iframe')
  , InfoAjax = require('./info-ajax')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-receiver');
}

function InfoReceiver(baseUrl, urlInfo) {
  debug(baseUrl);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self.doXhr(baseUrl, urlInfo);
  }, 0);
}

inherits(InfoReceiver, EventEmitter);

// TODO this is currently ignoring the list of available transports and the whitelist

InfoReceiver._getReceiver = function(baseUrl, url, urlInfo) {
  // determine method of CORS support (if needed)
  if (urlInfo.sameOrigin) {
    return new InfoAjax(url, XHRLocal);
  }
  if (XHRCors.enabled) {
    return new InfoAjax(url, XHRCors);
  }
  if (XDR.enabled && urlInfo.sameScheme) {
    return new InfoAjax(url, XDR);
  }
  if (InfoIframe.enabled()) {
    return new InfoIframe(baseUrl, url);
  }
  return new InfoAjax(url, XHRFake);
};

InfoReceiver.prototype.doXhr = function(baseUrl, urlInfo) {
  var self = this
    , url = urlUtils.addPath(baseUrl, '/info')
    ;
  debug('doXhr', url);

  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);

  this.timeoutRef = setTimeout(function() {
    debug('timeout');
    self._cleanup(false);
    self.emit('finish');
  }, InfoReceiver.timeout);

  this.xo.once('finish', function(info, rtt) {
    debug('finish', info, rtt);
    self._cleanup(true);
    self.emit('finish', info, rtt);
  });
};

InfoReceiver.prototype._cleanup = function(wasClean) {
  debug('_cleanup');
  clearTimeout(this.timeoutRef);
  this.timeoutRef = null;
  if (!wasClean && this.xo) {
    this.xo.close();
  }
  this.xo = null;
};

InfoReceiver.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  this._cleanup(false);
};

InfoReceiver.timeout = 8000;

module.exports = InfoReceiver;

}).call(this,{ env: {} })

},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,"debug":55,"events":3,"inherits":57}],13:[function(require,module,exports){
(function (global){
'use strict';

module.exports = global.location || {
  origin: 'http://localhost:80'
, protocol: 'http:'
, host: 'localhost'
, port: 80
, href: 'http://localhost/'
, hash: ''
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],14:[function(require,module,exports){
(function (process,global){
'use strict';

require('./shims');

var URL = require('url-parse')
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , random = require('./utils/random')
  , escape = require('./utils/escape')
  , urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , transport = require('./utils/transport')
  , objectUtils = require('./utils/object')
  , browser = require('./utils/browser')
  , log = require('./utils/log')
  , Event = require('./event/event')
  , EventTarget = require('./event/eventtarget')
  , loc = require('./location')
  , CloseEvent = require('./event/close')
  , TransportMessageEvent = require('./event/trans-message')
  , InfoReceiver = require('./info-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:main');
}

var transports;

// follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface
function SockJS(url, protocols, options) {
  if (!(this instanceof SockJS)) {
    return new SockJS(url, protocols, options);
  }
  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
  }
  EventTarget.call(this);

  this.readyState = SockJS.CONNECTING;
  this.extensions = '';
  this.protocol = '';

  // non-standard extension
  options = options || {};
  if (options.protocols_whitelist) {
    log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
  }
  this._transportsWhitelist = options.transports;
  this._transportOptions = options.transportOptions || {};
  this._timeout = options.timeout || 0;

  var sessionId = options.sessionId || 8;
  if (typeof sessionId === 'function') {
    this._generateSessionId = sessionId;
  } else if (typeof sessionId === 'number') {
    this._generateSessionId = function() {
      return random.string(sessionId);
    };
  } else {
    throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
  }

  this._server = options.server || random.numberString(1000);

  // Step 1 of WS spec - parse and validate the url. Issue #8
  var parsedUrl = new URL(url);
  if (!parsedUrl.host || !parsedUrl.protocol) {
    throw new SyntaxError("The URL '" + url + "' is invalid");
  } else if (parsedUrl.hash) {
    throw new SyntaxError('The URL must not contain a fragment');
  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
    throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
  }

  var secure = parsedUrl.protocol === 'https:';
  // Step 2 - don't allow secure origin with an insecure protocol
  if (loc.protocol === 'https:' && !secure) {
    // exception is 127.0.0.0/8 and ::1 urls
    if (!urlUtils.isLoopbackAddr(parsedUrl.hostname)) {
      throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
    }
  }

  // Step 3 - check port access - no need here
  // Step 4 - parse protocols argument
  if (!protocols) {
    protocols = [];
  } else if (!Array.isArray(protocols)) {
    protocols = [protocols];
  }

  // Step 5 - check protocols argument
  var sortedProtocols = protocols.sort();
  sortedProtocols.forEach(function(proto, i) {
    if (!proto) {
      throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
    }
    if (i < (sortedProtocols.length - 1) && proto === sortedProtocols[i + 1]) {
      throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
    }
  });

  // Step 6 - convert origin
  var o = urlUtils.getOrigin(loc.href);
  this._origin = o ? o.toLowerCase() : null;

  // remove the trailing slash
  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, ''));

  // store the sanitized url
  this.url = parsedUrl.href;
  debug('using url', this.url);

  // Step 7 - start connection in background
  // obtain server info
  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26
  this._urlInfo = {
    nullOrigin: !browser.hasDomain()
  , sameOrigin: urlUtils.isOriginEqual(this.url, loc.href)
  , sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
  };

  this._ir = new InfoReceiver(this.url, this._urlInfo);
  this._ir.once('finish', this._receiveInfo.bind(this));
}

inherits(SockJS, EventTarget);

function userSetCode(code) {
  return code === 1000 || (code >= 3000 && code <= 4999);
}

SockJS.prototype.close = function(code, reason) {
  // Step 1
  if (code && !userSetCode(code)) {
    throw new Error('InvalidAccessError: Invalid code');
  }
  // Step 2.4 states the max is 123 bytes, but we are just checking length
  if (reason && reason.length > 123) {
    throw new SyntaxError('reason argument has an invalid length');
  }

  // Step 3.1
  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
    return;
  }

  // TODO look at docs to determine how to set this
  var wasClean = true;
  this._close(code || 1000, reason || 'Normal closure', wasClean);
};

SockJS.prototype.send = function(data) {
  // #13 - convert anything non-string to string
  // TODO this currently turns objects into [object Object]
  if (typeof data !== 'string') {
    data = '' + data;
  }
  if (this.readyState === SockJS.CONNECTING) {
    throw new Error('InvalidStateError: The connection has not been established yet');
  }
  if (this.readyState !== SockJS.OPEN) {
    return;
  }
  this._transport.send(escape.quote(data));
};

SockJS.version = require('./version');

SockJS.CONNECTING = 0;
SockJS.OPEN = 1;
SockJS.CLOSING = 2;
SockJS.CLOSED = 3;

SockJS.prototype._receiveInfo = function(info, rtt) {
  debug('_receiveInfo', rtt);
  this._ir = null;
  if (!info) {
    this._close(1002, 'Cannot connect to server');
    return;
  }

  // establish a round-trip timeout (RTO) based on the
  // round-trip time (RTT)
  this._rto = this.countRTO(rtt);
  // allow server to override url used for the actual transport
  this._transUrl = info.base_url ? info.base_url : this.url;
  info = objectUtils.extend(info, this._urlInfo);
  debug('info', info);
  // determine list of desired and supported transports
  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
  this._transports = enabledTransports.main;
  debug(this._transports.length + ' enabled transports');

  this._connect();
};

SockJS.prototype._connect = function() {
  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
    debug('attempt', Transport.transportName);
    if (Transport.needBody) {
      if (!global.document.body ||
          (typeof global.document.readyState !== 'undefined' &&
            global.document.readyState !== 'complete' &&
            global.document.readyState !== 'interactive')) {
        debug('waiting for body');
        this._transports.unshift(Transport);
        eventUtils.attachEvent('load', this._connect.bind(this));
        return;
      }
    }

    // calculate timeout based on RTO and round trips. Default to 5s
    var timeoutMs = Math.max(this._timeout, (this._rto * Transport.roundTrips) || 5000);
    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
    debug('using timeout', timeoutMs);

    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
    var options = this._transportOptions[Transport.transportName];
    debug('transport url', transportUrl);
    var transportObj = new Transport(transportUrl, this._transUrl, options);
    transportObj.on('message', this._transportMessage.bind(this));
    transportObj.once('close', this._transportClose.bind(this));
    transportObj.transportName = Transport.transportName;
    this._transport = transportObj;

    return;
  }
  this._close(2000, 'All transports failed', false);
};

SockJS.prototype._transportTimeout = function() {
  debug('_transportTimeout');
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transport) {
      this._transport.close();
    }

    this._transportClose(2007, 'Transport timed out');
  }
};

SockJS.prototype._transportMessage = function(msg) {
  debug('_transportMessage', msg);
  var self = this
    , type = msg.slice(0, 1)
    , content = msg.slice(1)
    , payload
    ;

  // first check for messages that don't need a payload
  switch (type) {
    case 'o':
      this._open();
      return;
    case 'h':
      this.dispatchEvent(new Event('heartbeat'));
      debug('heartbeat', this.transport);
      return;
  }

  if (content) {
    try {
      payload = JSON3.parse(content);
    } catch (e) {
      debug('bad json', content);
    }
  }

  if (typeof payload === 'undefined') {
    debug('empty payload', content);
    return;
  }

  switch (type) {
    case 'a':
      if (Array.isArray(payload)) {
        payload.forEach(function(p) {
          debug('message', self.transport, p);
          self.dispatchEvent(new TransportMessageEvent(p));
        });
      }
      break;
    case 'm':
      debug('message', this.transport, payload);
      this.dispatchEvent(new TransportMessageEvent(payload));
      break;
    case 'c':
      if (Array.isArray(payload) && payload.length === 2) {
        this._close(payload[0], payload[1], true);
      }
      break;
  }
};

SockJS.prototype._transportClose = function(code, reason) {
  debug('_transportClose', this.transport, code, reason);
  if (this._transport) {
    this._transport.removeAllListeners();
    this._transport = null;
    this.transport = null;
  }

  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
    this._connect();
    return;
  }

  this._close(code, reason);
};

SockJS.prototype._open = function() {
  debug('_open', this._transport && this._transport.transportName, this.readyState);
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transportTimeoutId) {
      clearTimeout(this._transportTimeoutId);
      this._transportTimeoutId = null;
    }
    this.readyState = SockJS.OPEN;
    this.transport = this._transport.transportName;
    this.dispatchEvent(new Event('open'));
    debug('connected', this.transport);
  } else {
    // The server might have been restarted, and lost track of our
    // connection.
    this._close(1006, 'Server lost session');
  }
};

SockJS.prototype._close = function(code, reason, wasClean) {
  debug('_close', this.transport, code, reason, wasClean, this.readyState);
  var forceFail = false;

  if (this._ir) {
    forceFail = true;
    this._ir.close();
    this._ir = null;
  }
  if (this._transport) {
    this._transport.close();
    this._transport = null;
    this.transport = null;
  }

  if (this.readyState === SockJS.CLOSED) {
    throw new Error('InvalidStateError: SockJS has already been closed');
  }

  this.readyState = SockJS.CLOSING;
  setTimeout(function() {
    this.readyState = SockJS.CLOSED;

    if (forceFail) {
      this.dispatchEvent(new Event('error'));
    }

    var e = new CloseEvent('close');
    e.wasClean = wasClean || false;
    e.code = code || 1000;
    e.reason = reason;

    this.dispatchEvent(e);
    this.onmessage = this.onclose = this.onerror = null;
    debug('disconnected');
  }.bind(this), 0);
};

// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
// and RFC 2988.
SockJS.prototype.countRTO = function(rtt) {
  // In a local environment, when using IE8/9 and the `jsonp-polling`
  // transport the time needed to establish a connection (the time that pass
  // from the opening of the transport to the call of `_dispatchOpen`) is
  // around 200msec (the lower bound used in the article above) and this
  // causes spurious timeouts. For this reason we calculate a value slightly
  // larger than that used in the article.
  if (rtt > 100) {
    return 4 * rtt; // rto > 400msec
  }
  return 300 + rtt; // 300msec < rto <= 400msec
};

module.exports = function(availableTransports) {
  transports = transport(availableTransports);
  require('./iframe-bootstrap')(SockJS, availableTransports);
  return SockJS;
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,"debug":55,"inherits":57,"json3":58,"url-parse":61}],15:[function(require,module,exports){
/* eslint-disable */
/* jscs: disable */
'use strict';

// pulled specific shims from https://github.com/es-shims/es5-shim

var ArrayPrototype = Array.prototype;
var ObjectPrototype = Object.prototype;
var FunctionPrototype = Function.prototype;
var StringPrototype = String.prototype;
var array_slice = ArrayPrototype.slice;

var _toString = ObjectPrototype.toString;
var isFunction = function (val) {
    return ObjectPrototype.toString.call(val) === '[object Function]';
};
var isArray = function isArray(obj) {
    return _toString.call(obj) === '[object Array]';
};
var isString = function isString(obj) {
    return _toString.call(obj) === '[object String]';
};

var supportsDescriptors = Object.defineProperty && (function () {
    try {
        Object.defineProperty({}, 'x', {});
        return true;
    } catch (e) { /* this is ES3 */
        return false;
    }
}());

// Define configurable, writable and non-enumerable props
// if they don't exist.
var defineProperty;
if (supportsDescriptors) {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        Object.defineProperty(object, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: method
        });
    };
} else {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        object[name] = method;
    };
}
var defineProperties = function (object, map, forceAssign) {
    for (var name in map) {
        if (ObjectPrototype.hasOwnProperty.call(map, name)) {
          defineProperty(object, name, map[name], forceAssign);
        }
    }
};

var toObject = function (o) {
    if (o == null) { // this matches both null and undefined
        throw new TypeError("can't convert " + o + ' to object');
    }
    return Object(o);
};

//
// Util
// ======
//

// ES5 9.4
// http://es5.github.com/#x9.4
// http://jsperf.com/to-integer

function toInteger(num) {
    var n = +num;
    if (n !== n) { // isNaN
        n = 0;
    } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }
    return n;
}

function ToUint32(x) {
    return x >>> 0;
}

//
// Function
// ========
//

// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5

function Empty() {}

defineProperties(FunctionPrototype, {
    bind: function bind(that) { // .length is 1
        // 1. Let Target be the this value.
        var target = this;
        // 2. If IsCallable(Target) is false, throw a TypeError exception.
        if (!isFunction(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
        }
        // 3. Let A be a new (possibly empty) internal list of all of the
        //   argument values provided after thisArg (arg1, arg2 etc), in order.
        // XXX slicedArgs will stand in for "A" if used
        var args = array_slice.call(arguments, 1); // for normal call
        // 4. Let F be a new native ECMAScript object.
        // 11. Set the [[Prototype]] internal property of F to the standard
        //   built-in Function prototype object as specified in 15.3.3.1.
        // 12. Set the [[Call]] internal property of F as described in
        //   15.3.4.5.1.
        // 13. Set the [[Construct]] internal property of F as described in
        //   15.3.4.5.2.
        // 14. Set the [[HasInstance]] internal property of F as described in
        //   15.3.4.5.3.
        var binder = function () {

            if (this instanceof bound) {
                // 15.3.4.5.2 [[Construct]]
                // When the [[Construct]] internal method of a function object,
                // F that was created using the bind function is called with a
                // list of arguments ExtraArgs, the following steps are taken:
                // 1. Let target be the value of F's [[TargetFunction]]
                //   internal property.
                // 2. If target has no [[Construct]] internal method, a
                //   TypeError exception is thrown.
                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Construct]] internal
                //   method of target providing args as the arguments.

                var result = target.apply(
                    this,
                    args.concat(array_slice.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;

            } else {
                // 15.3.4.5.1 [[Call]]
                // When the [[Call]] internal method of a function object, F,
                // which was created using the bind function is called with a
                // this value and a list of arguments ExtraArgs, the following
                // steps are taken:
                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 2. Let boundThis be the value of F's [[BoundThis]] internal
                //   property.
                // 3. Let target be the value of F's [[TargetFunction]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Call]] internal method
                //   of target providing boundThis as the this value and
                //   providing args as the arguments.

                // equiv: target.call(this, ...boundArgs, ...args)
                return target.apply(
                    that,
                    args.concat(array_slice.call(arguments))
                );

            }

        };

        // 15. If the [[Class]] internal property of Target is "Function", then
        //     a. Let L be the length property of Target minus the length of A.
        //     b. Set the length own property of F to either 0 or L, whichever is
        //       larger.
        // 16. Else set the length own property of F to 0.

        var boundLength = Math.max(0, target.length - args.length);

        // 17. Set the attributes of the length own property of F to the values
        //   specified in 15.3.5.1.
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        // XXX Build a dynamic function with desired amount of arguments is the only
        // way to set the length property of a function.
        // In environments where Content Security Policies enabled (Chrome extensions,
        // for ex.) all use of eval or Function costructor throws an exception.
        // However in all of these environments Function.prototype.bind exists
        // and so this code will never be executed.
        var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

        if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            // Clean up dangling references.
            Empty.prototype = null;
        }

        // TODO
        // 18. Set the [[Extensible]] internal property of F to true.

        // TODO
        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
        // 20. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
        //   false.
        // 21. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
        //   and false.

        // TODO
        // NOTE Function objects created using Function.prototype.bind do not
        // have a prototype property or the [[Code]], [[FormalParameters]], and
        // [[Scope]] internal properties.
        // XXX can't delete prototype in pure-js.

        // 22. Return F.
        return bound;
    }
});

//
// Array
// =====
//

// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
defineProperties(Array, { isArray: isArray });


var boxedString = Object('a');
var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

var properlyBoxesContext = function properlyBoxed(method) {
    // Check node 0.6.21 bug where third parameter is not boxed
    var properlyBoxesNonStrict = true;
    var properlyBoxesStrict = true;
    if (method) {
        method.call('foo', function (_, __, context) {
            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
        });

        method.call([1], function () {
            'use strict';
            properlyBoxesStrict = typeof this === 'string';
        }, 'x');
    }
    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
};

defineProperties(ArrayPrototype, {
    forEach: function forEach(fun /*, thisp*/) {
        var object = toObject(this),
            self = splitString && isString(this) ? this.split('') : object,
            thisp = arguments[1],
            i = -1,
            length = self.length >>> 0;

        // If no callback function or if callback is not a callable function
        if (!isFunction(fun)) {
            throw new TypeError(); // TODO message
        }

        while (++i < length) {
            if (i in self) {
                // Invoke the callback function with call, passing arguments:
                // context, property value, property key, thisArg object
                // context
                fun.call(thisp, self[i], i, object);
            }
        }
    }
}, !properlyBoxesContext(ArrayPrototype.forEach));

// ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
defineProperties(ArrayPrototype, {
    indexOf: function indexOf(sought /*, fromIndex */ ) {
        var self = splitString && isString(this) ? this.split('') : toObject(this),
            length = self.length >>> 0;

        if (!length) {
            return -1;
        }

        var i = 0;
        if (arguments.length > 1) {
            i = toInteger(arguments[1]);
        }

        // handle negative indices
        i = i >= 0 ? i : Math.max(0, length + i);
        for (; i < length; i++) {
            if (i in self && self[i] === sought) {
                return i;
            }
        }
        return -1;
    }
}, hasFirefox2IndexOfBug);

//
// String
// ======
//

// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14

// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
//       [undefined, "t", undefined, "e", ...]
//    ''.split(/.?/) should be [], not [""]
//    '.'.split(/()()/) should be ["."], not ["", "", "."]

var string_split = StringPrototype.split;
if (
    'ab'.split(/(?:ab)*/).length !== 2 ||
    '.'.split(/(.?)(.?)/).length !== 4 ||
    'tesst'.split(/(s)*/)[1] === 't' ||
    'test'.split(/(?:)/, -1).length !== 4 ||
    ''.split(/.?/).length ||
    '.'.split(/()()/).length > 1
) {
    (function () {
        var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

        StringPrototype.split = function (separator, limit) {
            var string = this;
            if (separator === void 0 && limit === 0) {
                return [];
            }

            // If `separator` is not a regex, use native split
            if (_toString.call(separator) !== '[object RegExp]') {
                return string_split.call(this, separator, limit);
            }

            var output = [],
                flags = (separator.ignoreCase ? 'i' : '') +
                        (separator.multiline  ? 'm' : '') +
                        (separator.extended   ? 'x' : '') + // Proposed for ES6
                        (separator.sticky     ? 'y' : ''), // Firefox 3+
                lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
                separator2, match, lastIndex, lastLength;
            separator = new RegExp(separator.source, flags + 'g');
            string += ''; // Type-convert
            if (!compliantExecNpcg) {
                // Doesn't need flags gy, but they don't hurt
                separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
            limit = limit === void 0 ?
                -1 >>> 0 : // Math.pow(2, 32) - 1
                ToUint32(limit);
            while (match = separator.exec(string)) {
                // `separator.lastIndex` is not reliable cross-browser
                lastIndex = match.index + match[0].length;
                if (lastIndex > lastLastIndex) {
                    output.push(string.slice(lastLastIndex, match.index));
                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
                    // nonparticipating capturing groups
                    if (!compliantExecNpcg && match.length > 1) {
                        match[0].replace(separator2, function () {
                            for (var i = 1; i < arguments.length - 2; i++) {
                                if (arguments[i] === void 0) {
                                    match[i] = void 0;
                                }
                            }
                        });
                    }
                    if (match.length > 1 && match.index < string.length) {
                        ArrayPrototype.push.apply(output, match.slice(1));
                    }
                    lastLength = match[0].length;
                    lastLastIndex = lastIndex;
                    if (output.length >= limit) {
                        break;
                    }
                }
                if (separator.lastIndex === match.index) {
                    separator.lastIndex++; // Avoid an infinite loop
                }
            }
            if (lastLastIndex === string.length) {
                if (lastLength || !separator.test('')) {
                    output.push('');
                }
            } else {
                output.push(string.slice(lastLastIndex));
            }
            return output.length > limit ? output.slice(0, limit) : output;
        };
    }());

// [bugfix, chrome]
// If separator is undefined, then the result array contains just one String,
// which is the this value (converted to a String). If limit is not undefined,
// then the output array is truncated so that it contains no more than limit
// elements.
// "0".split(undefined, 0) -> []
} else if ('0'.split(void 0, 0).length) {
    StringPrototype.split = function split(separator, limit) {
        if (separator === void 0 && limit === 0) { return []; }
        return string_split.call(this, separator, limit);
    };
}

// ECMA-262, 3rd B.2.3
// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
var string_substr = StringPrototype.substr;
var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
defineProperties(StringPrototype, {
    substr: function substr(start, length) {
        return string_substr.call(
            this,
            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
            length
        );
    }
}, hasNegativeSubstrBug);

},{}],16:[function(require,module,exports){
'use strict';

module.exports = [
  // streaming transports
  require('./transport/websocket')
, require('./transport/xhr-streaming')
, require('./transport/xdr-streaming')
, require('./transport/eventsource')
, require('./transport/lib/iframe-wrap')(require('./transport/eventsource'))

  // polling transports
, require('./transport/htmlfile')
, require('./transport/lib/iframe-wrap')(require('./transport/htmlfile'))
, require('./transport/xhr-polling')
, require('./transport/xdr-polling')
, require('./transport/lib/iframe-wrap')(require('./transport/xhr-polling'))
, require('./transport/jsonp-polling')
];

},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , utils = require('../../utils/event')
  , urlUtils = require('../../utils/url')
  , XHR = global.XMLHttpRequest
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:browser:xhr');
}

function AbstractXHRObject(method, url, payload, opts) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function () {
    self._start(method, url, payload, opts);
  }, 0);
}

inherits(AbstractXHRObject, EventEmitter);

AbstractXHRObject.prototype._start = function(method, url, payload, opts) {
  var self = this;

  try {
    this.xhr = new XHR();
  } catch (x) {
    // intentionally empty
  }

  if (!this.xhr) {
    debug('no xhr');
    this.emit('finish', 0, 'no xhr support');
    this._cleanup();
    return;
  }

  // several browsers cache POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  // Explorer tends to keep connection open, even after the
  // tab gets closed: http://bugs.jquery.com/ticket/5280
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload cleanup');
    self._cleanup(true);
  });
  try {
    this.xhr.open(method, url, true);
    if (this.timeout && 'timeout' in this.xhr) {
      this.xhr.timeout = this.timeout;
      this.xhr.ontimeout = function() {
        debug('xhr timeout');
        self.emit('finish', 0, '');
        self._cleanup(false);
      };
    }
  } catch (e) {
    debug('exception', e);
    // IE raises an exception on wrong port.
    this.emit('finish', 0, '');
    this._cleanup(false);
    return;
  }

  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
    debug('withCredentials');
    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
    // "This never affects same-site requests."

    this.xhr.withCredentials = true;
  }
  if (opts && opts.headers) {
    for (var key in opts.headers) {
      this.xhr.setRequestHeader(key, opts.headers[key]);
    }
  }

  this.xhr.onreadystatechange = function() {
    if (self.xhr) {
      var x = self.xhr;
      var text, status;
      debug('readyState', x.readyState);
      switch (x.readyState) {
      case 3:
        // IE doesn't like peeking into responseText or status
        // on Microsoft.XMLHTTP and readystate=3
        try {
          status = x.status;
          text = x.responseText;
        } catch (e) {
          // intentionally empty
        }
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }

        // IE does return readystate == 3 for 404 answers.
        if (status === 200 && text && text.length > 0) {
          debug('chunk');
          self.emit('chunk', status, text);
        }
        break;
      case 4:
        status = x.status;
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }
        // IE returns this for a bad port
        // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx
        if (status === 12005 || status === 12029) {
          status = 0;
        }

        debug('finish', status, x.responseText);
        self.emit('finish', status, x.responseText);
        self._cleanup(false);
        break;
      }
    }
  };

  try {
    self.xhr.send(payload);
  } catch (e) {
    self.emit('finish', 0, '');
    self._cleanup(false);
  }
};

AbstractXHRObject.prototype._cleanup = function(abort) {
  debug('cleanup');
  if (!this.xhr) {
    return;
  }
  this.removeAllListeners();
  utils.unloadDel(this.unloadRef);

  // IE needs this field to be a function
  this.xhr.onreadystatechange = function() {};
  if (this.xhr.ontimeout) {
    this.xhr.ontimeout = null;
  }

  if (abort) {
    try {
      this.xhr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xhr = null;
};

AbstractXHRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

AbstractXHRObject.enabled = !!XHR;
// override XMLHttpRequest for IE6/7
// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (!AbstractXHRObject.enabled && (axo in global)) {
  debug('overriding xmlhttprequest');
  XHR = function() {
    try {
      return new global[axo]('Microsoft.XMLHTTP');
    } catch (e) {
      return null;
    }
  };
  AbstractXHRObject.enabled = !!new XHR();
}

var cors = false;
try {
  cors = 'withCredentials' in new XHR();
} catch (ignored) {
  // intentionally empty
}

AbstractXHRObject.supportsCORS = cors;

module.exports = AbstractXHRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],18:[function(require,module,exports){
(function (global){
module.exports = global.EventSource;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],19:[function(require,module,exports){
(function (global){
'use strict';

var Driver = global.WebSocket || global.MozWebSocket;
if (Driver) {
	module.exports = function WebSocketBrowserDriver(url) {
		return new Driver(url);
	};
} else {
	module.exports = undefined;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],20:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , EventSourceReceiver = require('./receiver/eventsource')
  , XHRCorsObject = require('./sender/xhr-cors')
  , EventSourceDriver = require('eventsource')
  ;

function EventSourceTransport(transUrl) {
  if (!EventSourceTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
}

inherits(EventSourceTransport, AjaxBasedTransport);

EventSourceTransport.enabled = function() {
  return !!EventSourceDriver;
};

EventSourceTransport.transportName = 'eventsource';
EventSourceTransport.roundTrips = 2;

module.exports = EventSourceTransport;

},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,"eventsource":18,"inherits":57}],21:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , HtmlfileReceiver = require('./receiver/htmlfile')
  , XHRLocalObject = require('./sender/xhr-local')
  , AjaxBasedTransport = require('./lib/ajax-based')
  ;

function HtmlFileTransport(transUrl) {
  if (!HtmlfileReceiver.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
}

inherits(HtmlFileTransport, AjaxBasedTransport);

HtmlFileTransport.enabled = function(info) {
  return HtmlfileReceiver.enabled && info.sameOrigin;
};

HtmlFileTransport.transportName = 'htmlfile';
HtmlFileTransport.roundTrips = 2;

module.exports = HtmlFileTransport;

},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,"inherits":57}],22:[function(require,module,exports){
(function (process){
'use strict';

// Few cool transports do work only for same-origin. In order to make
// them work cross-domain we shall use iframe, served from the
// remote domain. New browsers have capabilities to communicate with
// cross domain iframe using postMessage(). In IE it was implemented
// from IE 8+, but of course, IE got some details wrong:
//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
//    http://stevesouders.com/misc/test-postmessage.php

var inherits = require('inherits')
  , JSON3 = require('json3')
  , EventEmitter = require('events').EventEmitter
  , version = require('../version')
  , urlUtils = require('../utils/url')
  , iframeUtils = require('../utils/iframe')
  , eventUtils = require('../utils/event')
  , random = require('../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:transport:iframe');
}

function IframeTransport(transport, transUrl, baseUrl) {
  if (!IframeTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  EventEmitter.call(this);

  var self = this;
  this.origin = urlUtils.getOrigin(baseUrl);
  this.baseUrl = baseUrl;
  this.transUrl = transUrl;
  this.transport = transport;
  this.windowId = random.string(8);

  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
  debug(transport, transUrl, iframeUrl);

  this.iframeObj = iframeUtils.createIframe(iframeUrl, function(r) {
    debug('err callback');
    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
    self.close();
  });

  this.onmessageCallback = this._message.bind(this);
  eventUtils.attachEvent('message', this.onmessageCallback);
}

inherits(IframeTransport, EventEmitter);

IframeTransport.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  if (this.iframeObj) {
    eventUtils.detachEvent('message', this.onmessageCallback);
    try {
      // When the iframe is not loaded, IE raises an exception
      // on 'contentWindow'.
      this.postMessage('c');
    } catch (x) {
      // intentionally empty
    }
    this.iframeObj.cleanup();
    this.iframeObj = null;
    this.onmessageCallback = this.iframeObj = null;
  }
};

IframeTransport.prototype._message = function(e) {
  debug('message', e.data);
  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
    debug('not same origin', e.origin, this.origin);
    return;
  }

  var iframeMessage;
  try {
    iframeMessage = JSON3.parse(e.data);
  } catch (ignored) {
    debug('bad json', e.data);
    return;
  }

  if (iframeMessage.windowId !== this.windowId) {
    debug('mismatched window id', iframeMessage.windowId, this.windowId);
    return;
  }

  switch (iframeMessage.type) {
  case 's':
    this.iframeObj.loaded();
    // window global dependency
    this.postMessage('s', JSON3.stringify([
      version
    , this.transport
    , this.transUrl
    , this.baseUrl
    ]));
    break;
  case 't':
    this.emit('message', iframeMessage.data);
    break;
  case 'c':
    var cdata;
    try {
      cdata = JSON3.parse(iframeMessage.data);
    } catch (ignored) {
      debug('bad json', iframeMessage.data);
      return;
    }
    this.emit('close', cdata[0], cdata[1]);
    this.close();
    break;
  }
};

IframeTransport.prototype.postMessage = function(type, data) {
  debug('postMessage', type, data);
  this.iframeObj.post(JSON3.stringify({
    windowId: this.windowId
  , type: type
  , data: data || ''
  }), this.origin);
};

IframeTransport.prototype.send = function(message) {
  debug('send', message);
  this.postMessage('m', message);
};

IframeTransport.enabled = function() {
  return iframeUtils.iframeEnabled;
};

IframeTransport.transportName = 'iframe';
IframeTransport.roundTrips = 2;

module.exports = IframeTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,"debug":55,"events":3,"inherits":57,"json3":58}],23:[function(require,module,exports){
(function (global){
'use strict';

// The simplest and most robust transport, using the well-know cross
// domain hack - JSONP. This transport is quite inefficient - one
// message could use up to one http request. But at least it works almost
// everywhere.
// Known limitations:
//   o you will get a spinning cursor
//   o for Konqueror a dumb timer is needed to detect errors

var inherits = require('inherits')
  , SenderReceiver = require('./lib/sender-receiver')
  , JsonpReceiver = require('./receiver/jsonp')
  , jsonpSender = require('./sender/jsonp')
  ;

function JsonPTransport(transUrl) {
  if (!JsonPTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
}

inherits(JsonPTransport, SenderReceiver);

JsonPTransport.enabled = function() {
  return !!global.document;
};

JsonPTransport.transportName = 'jsonp-polling';
JsonPTransport.roundTrips = 1;
JsonPTransport.needBody = true;

module.exports = JsonPTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,"inherits":57}],24:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , SenderReceiver = require('./sender-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:ajax-based');
}

function createAjaxSender(AjaxObject) {
  return function(url, payload, callback) {
    debug('create ajax sender', url, payload);
    var opt = {};
    if (typeof payload === 'string') {
      opt.headers = {'Content-type': 'text/plain'};
    }
    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
    xo.once('finish', function(status) {
      debug('finish', status);
      xo = null;

      if (status !== 200 && status !== 204) {
        return callback(new Error('http status ' + status));
      }
      callback();
    });
    return function() {
      debug('abort');
      xo.close();
      xo = null;

      var err = new Error('Aborted');
      err.code = 1000;
      callback(err);
    };
  };
}

function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
}

inherits(AjaxBasedTransport, SenderReceiver);

module.exports = AjaxBasedTransport;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./sender-receiver":28,"debug":55,"inherits":57}],25:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:buffered-sender');
}

function BufferedSender(url, sender) {
  debug(url);
  EventEmitter.call(this);
  this.sendBuffer = [];
  this.sender = sender;
  this.url = url;
}

inherits(BufferedSender, EventEmitter);

BufferedSender.prototype.send = function(message) {
  debug('send', message);
  this.sendBuffer.push(message);
  if (!this.sendStop) {
    this.sendSchedule();
  }
};

// For polling transports in a situation when in the message callback,
// new message is being send. If the sending connection was started
// before receiving one, it is possible to saturate the network and
// timeout due to the lack of receiving socket. To avoid that we delay
// sending messages by some small time, in order to let receiving
// connection be started beforehand. This is only a halfmeasure and
// does not fix the big problem, but it does make the tests go more
// stable on slow networks.
BufferedSender.prototype.sendScheduleWait = function() {
  debug('sendScheduleWait');
  var self = this;
  var tref;
  this.sendStop = function() {
    debug('sendStop');
    self.sendStop = null;
    clearTimeout(tref);
  };
  tref = setTimeout(function() {
    debug('timeout');
    self.sendStop = null;
    self.sendSchedule();
  }, 25);
};

BufferedSender.prototype.sendSchedule = function() {
  debug('sendSchedule', this.sendBuffer.length);
  var self = this;
  if (this.sendBuffer.length > 0) {
    var payload = '[' + this.sendBuffer.join(',') + ']';
    this.sendStop = this.sender(this.url, payload, function(err) {
      self.sendStop = null;
      if (err) {
        debug('error', err);
        self.emit('close', err.code || 1006, 'Sending error: ' + err);
        self.close();
      } else {
        self.sendScheduleWait();
      }
    });
    this.sendBuffer = [];
  }
};

BufferedSender.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

BufferedSender.prototype.close = function() {
  debug('close');
  this._cleanup();
  if (this.sendStop) {
    this.sendStop();
    this.sendStop = null;
  }
};

module.exports = BufferedSender;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],26:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , IframeTransport = require('../iframe')
  , objectUtils = require('../../utils/object')
  ;

module.exports = function(transport) {

  function IframeWrapTransport(transUrl, baseUrl) {
    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
  }

  inherits(IframeWrapTransport, IframeTransport);

  IframeWrapTransport.enabled = function(url, info) {
    if (!global.document) {
      return false;
    }

    var iframeInfo = objectUtils.extend({}, info);
    iframeInfo.sameOrigin = true;
    return transport.enabled(iframeInfo) && IframeTransport.enabled();
  };

  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
  IframeWrapTransport.needBody = true;
  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

  IframeWrapTransport.facadeTransport = transport;

  return IframeWrapTransport;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/object":49,"../iframe":22,"inherits":57}],27:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:polling');
}

function Polling(Receiver, receiveUrl, AjaxObject) {
  debug(receiveUrl);
  EventEmitter.call(this);
  this.Receiver = Receiver;
  this.receiveUrl = receiveUrl;
  this.AjaxObject = AjaxObject;
  this._scheduleReceiver();
}

inherits(Polling, EventEmitter);

Polling.prototype._scheduleReceiver = function() {
  debug('_scheduleReceiver');
  var self = this;
  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);

  poll.on('message', function(msg) {
    debug('message', msg);
    self.emit('message', msg);
  });

  poll.once('close', function(code, reason) {
    debug('close', code, reason, self.pollIsClosing);
    self.poll = poll = null;

    if (!self.pollIsClosing) {
      if (reason === 'network') {
        self._scheduleReceiver();
      } else {
        self.emit('close', code || 1006, reason);
        self.removeAllListeners();
      }
    }
  });
};

Polling.prototype.abort = function() {
  debug('abort');
  this.removeAllListeners();
  this.pollIsClosing = true;
  if (this.poll) {
    this.poll.abort();
  }
};

module.exports = Polling;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],28:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , BufferedSender = require('./buffered-sender')
  , Polling = require('./polling')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender-receiver');
}

function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
  debug(pollUrl);
  var self = this;
  BufferedSender.call(this, transUrl, senderFunc);

  this.poll = new Polling(Receiver, pollUrl, AjaxObject);
  this.poll.on('message', function(msg) {
    debug('poll message', msg);
    self.emit('message', msg);
  });
  this.poll.once('close', function(code, reason) {
    debug('poll close', code, reason);
    self.poll = null;
    self.emit('close', code, reason);
    self.close();
  });
}

inherits(SenderReceiver, BufferedSender);

SenderReceiver.prototype.close = function() {
  BufferedSender.prototype.close.call(this);
  debug('close');
  this.removeAllListeners();
  if (this.poll) {
    this.poll.abort();
    this.poll = null;
  }
};

module.exports = SenderReceiver;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,"debug":55,"inherits":57}],29:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , EventSourceDriver = require('eventsource')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:eventsource');
}

function EventSourceReceiver(url) {
  debug(url);
  EventEmitter.call(this);

  var self = this;
  var es = this.es = new EventSourceDriver(url);
  es.onmessage = function(e) {
    debug('message', e.data);
    self.emit('message', decodeURI(e.data));
  };
  es.onerror = function(e) {
    debug('error', es.readyState, e);
    // ES on reconnection has readyState = 0 or 1.
    // on network error it's CLOSED = 2
    var reason = (es.readyState !== 2 ? 'network' : 'permanent');
    self._cleanup();
    self._close(reason);
  };
}

inherits(EventSourceReceiver, EventEmitter);

EventSourceReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

EventSourceReceiver.prototype._cleanup = function() {
  debug('cleanup');
  var es = this.es;
  if (es) {
    es.onmessage = es.onerror = null;
    es.close();
    this.es = null;
  }
};

EventSourceReceiver.prototype._close = function(reason) {
  debug('close', reason);
  var self = this;
  // Safari and chrome < 15 crash if we close window before
  // waiting for ES cleanup. See:
  // https://code.google.com/p/chromium/issues/detail?id=89155
  setTimeout(function() {
    self.emit('close', null, reason);
    self.removeAllListeners();
  }, 200);
};

module.exports = EventSourceReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"eventsource":18,"inherits":57}],30:[function(require,module,exports){
(function (process,global){
'use strict';

var inherits = require('inherits')
  , iframeUtils = require('../../utils/iframe')
  , urlUtils = require('../../utils/url')
  , EventEmitter = require('events').EventEmitter
  , random = require('../../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:htmlfile');
}

function HtmlfileReceiver(url) {
  debug(url);
  EventEmitter.call(this);
  var self = this;
  iframeUtils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));

  debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
  var constructFunc = HtmlfileReceiver.htmlfileEnabled ?
      iframeUtils.createHtmlfile : iframeUtils.createIframe;

  global[iframeUtils.WPrefix][this.id] = {
    start: function() {
      debug('start');
      self.iframeObj.loaded();
    }
  , message: function(data) {
      debug('message', data);
      self.emit('message', data);
    }
  , stop: function() {
      debug('stop');
      self._cleanup();
      self._close('network');
    }
  };
  this.iframeObj = constructFunc(url, function() {
    debug('callback');
    self._cleanup();
    self._close('permanent');
  });
}

inherits(HtmlfileReceiver, EventEmitter);

HtmlfileReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

HtmlfileReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  if (this.iframeObj) {
    this.iframeObj.cleanup();
    this.iframeObj = null;
  }
  delete global[iframeUtils.WPrefix][this.id];
};

HtmlfileReceiver.prototype._close = function(reason) {
  debug('_close', reason);
  this.emit('close', null, reason);
  this.removeAllListeners();
};

HtmlfileReceiver.htmlfileEnabled = false;

// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (axo in global) {
  try {
    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
  } catch (x) {
    // intentionally empty
  }
}

HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;

module.exports = HtmlfileReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],31:[function(require,module,exports){
(function (process,global){
'use strict';

var utils = require('../../utils/iframe')
  , random = require('../../utils/random')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:jsonp');
}

function JsonpReceiver(url) {
  debug(url);
  var self = this;
  EventEmitter.call(this);

  utils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));

  global[utils.WPrefix][this.id] = this._callback.bind(this);
  this._createScript(urlWithId);

  // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
  this.timeoutId = setTimeout(function() {
    debug('timeout');
    self._abort(new Error('JSONP script loaded abnormally (timeout)'));
  }, JsonpReceiver.timeout);
}

inherits(JsonpReceiver, EventEmitter);

JsonpReceiver.prototype.abort = function() {
  debug('abort');
  if (global[utils.WPrefix][this.id]) {
    var err = new Error('JSONP user aborted read');
    err.code = 1000;
    this._abort(err);
  }
};

JsonpReceiver.timeout = 35000;
JsonpReceiver.scriptErrorTimeout = 1000;

JsonpReceiver.prototype._callback = function(data) {
  debug('_callback', data);
  this._cleanup();

  if (this.aborting) {
    return;
  }

  if (data) {
    debug('message', data);
    this.emit('message', data);
  }
  this.emit('close', null, 'network');
  this.removeAllListeners();
};

JsonpReceiver.prototype._abort = function(err) {
  debug('_abort', err);
  this._cleanup();
  this.aborting = true;
  this.emit('close', err.code, err.message);
  this.removeAllListeners();
};

JsonpReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  clearTimeout(this.timeoutId);
  if (this.script2) {
    this.script2.parentNode.removeChild(this.script2);
    this.script2 = null;
  }
  if (this.script) {
    var script = this.script;
    // Unfortunately, you can't really abort script loading of
    // the script.
    script.parentNode.removeChild(script);
    script.onreadystatechange = script.onerror =
        script.onload = script.onclick = null;
    this.script = null;
  }
  delete global[utils.WPrefix][this.id];
};

JsonpReceiver.prototype._scriptError = function() {
  debug('_scriptError');
  var self = this;
  if (this.errorTimer) {
    return;
  }

  this.errorTimer = setTimeout(function() {
    if (!self.loadedOkay) {
      self._abort(new Error('JSONP script loaded abnormally (onerror)'));
    }
  }, JsonpReceiver.scriptErrorTimeout);
};

JsonpReceiver.prototype._createScript = function(url) {
  debug('_createScript', url);
  var self = this;
  var script = this.script = global.document.createElement('script');
  var script2;  // Opera synchronous load trick.

  script.id = 'a' + random.string(8);
  script.src = url;
  script.type = 'text/javascript';
  script.charset = 'UTF-8';
  script.onerror = this._scriptError.bind(this);
  script.onload = function() {
    debug('onload');
    self._abort(new Error('JSONP script loaded abnormally (onload)'));
  };

  // IE9 fires 'error' event after onreadystatechange or before, in random order.
  // Use loadedOkay to determine if actually errored
  script.onreadystatechange = function() {
    debug('onreadystatechange', script.readyState);
    if (/loaded|closed/.test(script.readyState)) {
      if (script && script.htmlFor && script.onclick) {
        self.loadedOkay = true;
        try {
          // In IE, actually execute the script.
          script.onclick();
        } catch (x) {
          // intentionally empty
        }
      }
      if (script) {
        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
      }
    }
  };
  // IE: event/htmlFor/onclick trick.
  // One can't rely on proper order for onreadystatechange. In order to
  // make sure, set a 'htmlFor' and 'event' properties, so that
  // script code will be installed as 'onclick' handler for the
  // script object. Later, onreadystatechange, manually execute this
  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
  // set. For reference see:
  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
  // Also, read on that about script ordering:
  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
  if (typeof script.async === 'undefined' && global.document.attachEvent) {
    // According to mozilla docs, in recent browsers script.async defaults
    // to 'true', so we may use it to detect a good browser:
    // https://developer.mozilla.org/en/HTML/Element/script
    if (!browser.isOpera()) {
      // Naively assume we're in IE
      try {
        script.htmlFor = script.id;
        script.event = 'onclick';
      } catch (x) {
        // intentionally empty
      }
      script.async = true;
    } else {
      // Opera, second sync script hack
      script2 = this.script2 = global.document.createElement('script');
      script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
      script.async = script2.async = false;
    }
  }
  if (typeof script.async !== 'undefined') {
    script.async = true;
  }

  var head = global.document.getElementsByTagName('head')[0];
  head.insertBefore(script, head.firstChild);
  if (script2) {
    head.insertBefore(script2, head.firstChild);
  }
};

module.exports = JsonpReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],32:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:xhr');
}

function XhrReceiver(url, AjaxObject) {
  debug(url);
  EventEmitter.call(this);
  var self = this;

  this.bufferPosition = 0;

  this.xo = new AjaxObject('POST', url, null);
  this.xo.on('chunk', this._chunkHandler.bind(this));
  this.xo.once('finish', function(status, text) {
    debug('finish', status, text);
    self._chunkHandler(status, text);
    self.xo = null;
    var reason = status === 200 ? 'network' : 'permanent';
    debug('close', reason);
    self.emit('close', null, reason);
    self._cleanup();
  });
}

inherits(XhrReceiver, EventEmitter);

XhrReceiver.prototype._chunkHandler = function(status, text) {
  debug('_chunkHandler', status);
  if (status !== 200 || !text) {
    return;
  }

  for (var idx = -1; ; this.bufferPosition += idx + 1) {
    var buf = text.slice(this.bufferPosition);
    idx = buf.indexOf('\n');
    if (idx === -1) {
      break;
    }
    var msg = buf.slice(0, idx);
    if (msg) {
      debug('message', msg);
      this.emit('message', msg);
    }
  }
};

XhrReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

XhrReceiver.prototype.abort = function() {
  debug('abort');
  if (this.xo) {
    this.xo.close();
    debug('close');
    this.emit('close', null, 'user');
    this.xo = null;
  }
  this._cleanup();
};

module.exports = XhrReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],33:[function(require,module,exports){
(function (process,global){
'use strict';

var random = require('../../utils/random')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:jsonp');
}

var form, area;

function createIframe(id) {
  debug('createIframe', id);
  try {
    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
    return global.document.createElement('<iframe name="' + id + '">');
  } catch (x) {
    var iframe = global.document.createElement('iframe');
    iframe.name = id;
    return iframe;
  }
}

function createForm() {
  debug('createForm');
  form = global.document.createElement('form');
  form.style.display = 'none';
  form.style.position = 'absolute';
  form.method = 'POST';
  form.enctype = 'application/x-www-form-urlencoded';
  form.acceptCharset = 'UTF-8';

  area = global.document.createElement('textarea');
  area.name = 'd';
  form.appendChild(area);

  global.document.body.appendChild(form);
}

module.exports = function(url, payload, callback) {
  debug(url, payload);
  if (!form) {
    createForm();
  }
  var id = 'a' + random.string(8);
  form.target = id;
  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);

  var iframe = createIframe(id);
  iframe.id = id;
  iframe.style.display = 'none';
  form.appendChild(iframe);

  try {
    area.value = payload;
  } catch (e) {
    // seriously broken browsers get here
  }
  form.submit();

  var completed = function(err) {
    debug('completed', id, err);
    if (!iframe.onerror) {
      return;
    }
    iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
    // Opera mini doesn't like if we GC iframe
    // immediately, thus this timeout.
    setTimeout(function() {
      debug('cleaning up', id);
      iframe.parentNode.removeChild(iframe);
      iframe = null;
    }, 500);
    area.value = '';
    // It is not possible to detect if the iframe succeeded or
    // failed to submit our form.
    callback(err);
  };
  iframe.onerror = function() {
    debug('onerror', id);
    completed();
  };
  iframe.onload = function() {
    debug('onload', id);
    completed();
  };
  iframe.onreadystatechange = function(e) {
    debug('onreadystatechange', id, iframe.readyState, e);
    if (iframe.readyState === 'complete') {
      completed();
    }
  };
  return function() {
    debug('aborted', id);
    completed(new Error('Aborted'));
  };
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/random":50,"../../utils/url":52,"debug":55}],34:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , eventUtils = require('../../utils/event')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:xdr');
}

// References:
//   http://ajaxian.com/archives/100-line-ajax-wrapper
//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

function XDRObject(method, url, payload) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self._start(method, url, payload);
  }, 0);
}

inherits(XDRObject, EventEmitter);

XDRObject.prototype._start = function(method, url, payload) {
  debug('_start');
  var self = this;
  var xdr = new global.XDomainRequest();
  // IE caches even POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  xdr.onerror = function() {
    debug('onerror');
    self._error();
  };
  xdr.ontimeout = function() {
    debug('ontimeout');
    self._error();
  };
  xdr.onprogress = function() {
    debug('progress', xdr.responseText);
    self.emit('chunk', 200, xdr.responseText);
  };
  xdr.onload = function() {
    debug('load');
    self.emit('finish', 200, xdr.responseText);
    self._cleanup(false);
  };
  this.xdr = xdr;
  this.unloadRef = eventUtils.unloadAdd(function() {
    self._cleanup(true);
  });
  try {
    // Fails with AccessDenied if port number is bogus
    this.xdr.open(method, url);
    if (this.timeout) {
      this.xdr.timeout = this.timeout;
    }
    this.xdr.send(payload);
  } catch (x) {
    this._error();
  }
};

XDRObject.prototype._error = function() {
  this.emit('finish', 0, '');
  this._cleanup(false);
};

XDRObject.prototype._cleanup = function(abort) {
  debug('cleanup', abort);
  if (!this.xdr) {
    return;
  }
  this.removeAllListeners();
  eventUtils.unloadDel(this.unloadRef);

  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;
  if (abort) {
    try {
      this.xdr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xdr = null;
};

XDRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

// IE 8/9 if the request target uses the same scheme - #79
XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());

module.exports = XDRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],35:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRCorsObject(method, url, payload, opts) {
  XhrDriver.call(this, method, url, payload, opts);
}

inherits(XHRCorsObject, XhrDriver);

XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;

module.exports = XHRCorsObject;

},{"../driver/xhr":17,"inherits":57}],36:[function(require,module,exports){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  ;

function XHRFake(/* method, url, payload, opts */) {
  var self = this;
  EventEmitter.call(this);

  this.to = setTimeout(function() {
    self.emit('finish', 200, '{}');
  }, XHRFake.timeout);
}

inherits(XHRFake, EventEmitter);

XHRFake.prototype.close = function() {
  clearTimeout(this.to);
};

XHRFake.timeout = 2000;

module.exports = XHRFake;

},{"events":3,"inherits":57}],37:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRLocalObject(method, url, payload /*, opts */) {
  XhrDriver.call(this, method, url, payload, {
    noCredentials: true
  });
}

inherits(XHRLocalObject, XhrDriver);

XHRLocalObject.enabled = XhrDriver.enabled;

module.exports = XHRLocalObject;

},{"../driver/xhr":17,"inherits":57}],38:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('../utils/event')
  , urlUtils = require('../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , WebsocketDriver = require('./driver/websocket')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:websocket');
}

function WebSocketTransport(transUrl, ignore, options) {
  if (!WebSocketTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  EventEmitter.call(this);
  debug('constructor', transUrl);

  var self = this;
  var url = urlUtils.addPath(transUrl, '/websocket');
  if (url.slice(0, 5) === 'https') {
    url = 'wss' + url.slice(5);
  } else {
    url = 'ws' + url.slice(4);
  }
  this.url = url;

  this.ws = new WebsocketDriver(this.url, [], options);
  this.ws.onmessage = function(e) {
    debug('message event', e.data);
    self.emit('message', e.data);
  };
  // Firefox has an interesting bug. If a websocket connection is
  // created after onunload, it stays alive even when user
  // navigates away from the page. In such situation let's lie -
  // let's not open the ws connection at all. See:
  // https://github.com/sockjs/sockjs-client/issues/28
  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload');
    self.ws.close();
  });
  this.ws.onclose = function(e) {
    debug('close event', e.code, e.reason);
    self.emit('close', e.code, e.reason);
    self._cleanup();
  };
  this.ws.onerror = function(e) {
    debug('error event', e);
    self.emit('close', 1006, 'WebSocket connection broken');
    self._cleanup();
  };
}

inherits(WebSocketTransport, EventEmitter);

WebSocketTransport.prototype.send = function(data) {
  var msg = '[' + data + ']';
  debug('send', msg);
  this.ws.send(msg);
};

WebSocketTransport.prototype.close = function() {
  debug('close');
  var ws = this.ws;
  this._cleanup();
  if (ws) {
    ws.close();
  }
};

WebSocketTransport.prototype._cleanup = function() {
  debug('_cleanup');
  var ws = this.ws;
  if (ws) {
    ws.onmessage = ws.onclose = ws.onerror = null;
  }
  utils.unloadDel(this.unloadRef);
  this.unloadRef = this.ws = null;
  this.removeAllListeners();
};

WebSocketTransport.enabled = function() {
  debug('enabled');
  return !!WebsocketDriver;
};
WebSocketTransport.transportName = 'websocket';

// In theory, ws should require 1 round trip. But in chrome, this is
// not very stable over SSL. Most likely a ws connection requires a
// separate SSL connection, in which case 2 round trips are an
// absolute minumum.
WebSocketTransport.roundTrips = 2;

module.exports = WebSocketTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,"debug":55,"events":3,"inherits":57}],39:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XdrStreamingTransport = require('./xdr-streaming')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

function XdrPollingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
}

inherits(XdrPollingTransport, AjaxBasedTransport);

XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
XdrPollingTransport.transportName = 'xdr-polling';
XdrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,"inherits":57}],40:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

// According to:
//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/

function XdrStreamingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
}

inherits(XdrStreamingTransport, AjaxBasedTransport);

XdrStreamingTransport.enabled = function(info) {
  if (info.cookie_needed || info.nullOrigin) {
    return false;
  }
  return XDRObject.enabled && info.sameScheme;
};

XdrStreamingTransport.transportName = 'xdr-streaming';
XdrStreamingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrStreamingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"inherits":57}],41:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  ;

function XhrPollingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
}

inherits(XhrPollingTransport, AjaxBasedTransport);

XhrPollingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }

  if (XHRLocalObject.enabled && info.sameOrigin) {
    return true;
  }
  return XHRCorsObject.enabled;
};

XhrPollingTransport.transportName = 'xhr-polling';
XhrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XhrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],42:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  , browser = require('../utils/browser')
  ;

function XhrStreamingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
}

inherits(XhrStreamingTransport, AjaxBasedTransport);

XhrStreamingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }
  // Opera doesn't support xhr-streaming #60
  // But it might be able to #92
  if (browser.isOpera()) {
    return false;
  }

  return XHRCorsObject.enabled;
};

XhrStreamingTransport.transportName = 'xhr-streaming';
XhrStreamingTransport.roundTrips = 2; // preflight, ajax

// Safari gets confused when a streaming ajax request is started
// before onload. This causes the load indicator to spin indefinetely.
// Only require body when used in a browser
XhrStreamingTransport.needBody = !!global.document;

module.exports = XhrStreamingTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],43:[function(require,module,exports){
(function (global){
'use strict';

if (global.crypto && global.crypto.getRandomValues) {
  module.exports.randomBytes = function(length) {
    var bytes = new Uint8Array(length);
    global.crypto.getRandomValues(bytes);
    return bytes;
  };
} else {
  module.exports.randomBytes = function(length) {
    var bytes = new Array(length);
    for (var i = 0; i < length; i++) {
      bytes[i] = Math.floor(Math.random() * 256);
    }
    return bytes;
  };
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],44:[function(require,module,exports){
(function (global){
'use strict';

module.exports = {
  isOpera: function() {
    return global.navigator &&
      /opera/i.test(global.navigator.userAgent);
  }

, isKonqueror: function() {
    return global.navigator &&
      /konqueror/i.test(global.navigator.userAgent);
  }

  // #187 wrap document.domain in try/catch because of WP8 from file:///
, hasDomain: function () {
    // non-browser client always has a domain
    if (!global.document) {
      return true;
    }

    try {
      return !!global.document.domain;
    } catch (e) {
      return false;
    }
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],45:[function(require,module,exports){
'use strict';

var JSON3 = require('json3');

// Some extra characters that Chrome gets wrong, and substitutes with
// something else on the wire.
// eslint-disable-next-line no-control-regex, no-misleading-character-class
var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g
  , extraLookup;

// This may be quite slow, so let's delay until user actually uses bad
// characters.
var unrollLookup = function(escapable) {
  var i;
  var unrolled = {};
  var c = [];
  for (i = 0; i < 65536; i++) {
    c.push( String.fromCharCode(i) );
  }
  escapable.lastIndex = 0;
  c.join('').replace(escapable, function(a) {
    unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    return '';
  });
  escapable.lastIndex = 0;
  return unrolled;
};

// Quote string, also taking care of unicode characters that browsers
// often break. Especially, take care of unicode surrogates:
// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
module.exports = {
  quote: function(string) {
    var quoted = JSON3.stringify(string);

    // In most cases this should be very fast and good enough.
    extraEscapable.lastIndex = 0;
    if (!extraEscapable.test(quoted)) {
      return quoted;
    }

    if (!extraLookup) {
      extraLookup = unrollLookup(extraEscapable);
    }

    return quoted.replace(extraEscapable, function(a) {
      return extraLookup[a];
    });
  }
};

},{"json3":58}],46:[function(require,module,exports){
(function (global){
'use strict';

var random = require('./random');

var onUnload = {}
  , afterUnload = false
    // detect google chrome packaged apps because they don't allow the 'unload' event
  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime
  ;

module.exports = {
  attachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.addEventListener(event, listener, false);
    } else if (global.document && global.attachEvent) {
      // IE quirks.
      // According to: http://stevesouders.com/misc/test-postmessage.php
      // the message gets delivered only to 'document', not 'window'.
      global.document.attachEvent('on' + event, listener);
      // I get 'window' for ie8.
      global.attachEvent('on' + event, listener);
    }
  }

, detachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.removeEventListener(event, listener, false);
    } else if (global.document && global.detachEvent) {
      global.document.detachEvent('on' + event, listener);
      global.detachEvent('on' + event, listener);
    }
  }

, unloadAdd: function(listener) {
    if (isChromePackagedApp) {
      return null;
    }

    var ref = random.string(8);
    onUnload[ref] = listener;
    if (afterUnload) {
      setTimeout(this.triggerUnloadCallbacks, 0);
    }
    return ref;
  }

, unloadDel: function(ref) {
    if (ref in onUnload) {
      delete onUnload[ref];
    }
  }

, triggerUnloadCallbacks: function() {
    for (var ref in onUnload) {
      onUnload[ref]();
      delete onUnload[ref];
    }
  }
};

var unloadTriggered = function() {
  if (afterUnload) {
    return;
  }
  afterUnload = true;
  module.exports.triggerUnloadCallbacks();
};

// 'unload' alone is not reliable in opera within an iframe, but we
// can't use `beforeunload` as IE fires it on javascript: links.
if (!isChromePackagedApp) {
  module.exports.attachEvent('unload', unloadTriggered);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./random":50}],47:[function(require,module,exports){
(function (process,global){
'use strict';

var eventUtils = require('./event')
  , JSON3 = require('json3')
  , browser = require('./browser')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:iframe');
}

module.exports = {
  WPrefix: '_jp'
, currentWindowId: null

, polluteGlobalNamespace: function() {
    if (!(module.exports.WPrefix in global)) {
      global[module.exports.WPrefix] = {};
    }
  }

, postMessage: function(type, data) {
    if (global.parent !== global) {
      global.parent.postMessage(JSON3.stringify({
        windowId: module.exports.currentWindowId
      , type: type
      , data: data || ''
      }), '*');
    } else {
      debug('Cannot postMessage, no parent window.', type, data);
    }
  }

, createIframe: function(iframeUrl, errorCallback) {
    var iframe = global.document.createElement('iframe');
    var tref, unloadRef;
    var unattach = function() {
      debug('unattach');
      clearTimeout(tref);
      // Explorer had problems with that.
      try {
        iframe.onload = null;
      } catch (x) {
        // intentionally empty
      }
      iframe.onerror = null;
    };
    var cleanup = function() {
      debug('cleanup');
      if (iframe) {
        unattach();
        // This timeout makes chrome fire onbeforeunload event
        // within iframe. Without the timeout it goes straight to
        // onunload.
        setTimeout(function() {
          if (iframe) {
            iframe.parentNode.removeChild(iframe);
          }
          iframe = null;
        }, 0);
        eventUtils.unloadDel(unloadRef);
      }
    };
    var onerror = function(err) {
      debug('onerror', err);
      if (iframe) {
        cleanup();
        errorCallback(err);
      }
    };
    var post = function(msg, origin) {
      debug('post', msg, origin);
      setTimeout(function() {
        try {
          // When the iframe is not loaded, IE raises an exception
          // on 'contentWindow'.
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage(msg, origin);
          }
        } catch (x) {
          // intentionally empty
        }
      }, 0);
    };

    iframe.src = iframeUrl;
    iframe.style.display = 'none';
    iframe.style.position = 'absolute';
    iframe.onerror = function() {
      onerror('onerror');
    };
    iframe.onload = function() {
      debug('onload');
      // `onload` is triggered before scripts on the iframe are
      // executed. Give it few seconds to actually load stuff.
      clearTimeout(tref);
      tref = setTimeout(function() {
        onerror('onload timeout');
      }, 2000);
    };
    global.document.body.appendChild(iframe);
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }

/* eslint no-undef: "off", new-cap: "off" */
, createHtmlfile: function(iframeUrl, errorCallback) {
    var axo = ['Active'].concat('Object').join('X');
    var doc = new global[axo]('htmlfile');
    var tref, unloadRef;
    var iframe;
    var unattach = function() {
      clearTimeout(tref);
      iframe.onerror = null;
    };
    var cleanup = function() {
      if (doc) {
        unattach();
        eventUtils.unloadDel(unloadRef);
        iframe.parentNode.removeChild(iframe);
        iframe = doc = null;
        CollectGarbage();
      }
    };
    var onerror = function(r) {
      debug('onerror', r);
      if (doc) {
        cleanup();
        errorCallback(r);
      }
    };
    var post = function(msg, origin) {
      try {
        // When the iframe is not loaded, IE raises an exception
        // on 'contentWindow'.
        setTimeout(function() {
          if (iframe && iframe.contentWindow) {
              iframe.contentWindow.postMessage(msg, origin);
          }
        }, 0);
      } catch (x) {
        // intentionally empty
      }
    };

    doc.open();
    doc.write('<html><s' + 'cript>' +
              'document.domain="' + global.document.domain + '";' +
              '</s' + 'cript></html>');
    doc.close();
    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
    var c = doc.createElement('div');
    doc.body.appendChild(c);
    iframe = doc.createElement('iframe');
    c.appendChild(iframe);
    iframe.src = iframeUrl;
    iframe.onerror = function() {
      onerror('onerror');
    };
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }
};

module.exports.iframeEnabled = false;
if (global.document) {
  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
  // huge delay, or not at all.
  module.exports.iframeEnabled = (typeof global.postMessage === 'function' ||
    typeof global.postMessage === 'object') && (!browser.isKonqueror());
}

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./browser":44,"./event":46,"debug":55,"json3":58}],48:[function(require,module,exports){
(function (global){
'use strict';

var logObject = {};
['log', 'debug', 'warn'].forEach(function (level) {
  var levelExists;

  try {
    levelExists = global.console && global.console[level] && global.console[level].apply;
  } catch(e) {
    // do nothing
  }

  logObject[level] = levelExists ? function () {
    return global.console[level].apply(global.console, arguments);
  } : (level === 'log' ? function () {} : logObject.log);
});

module.exports = logObject;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],49:[function(require,module,exports){
'use strict';

module.exports = {
  isObject: function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  }

, extend: function(obj) {
    if (!this.isObject(obj)) {
      return obj;
    }
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  }
};

},{}],50:[function(require,module,exports){
'use strict';

var crypto = require('crypto');

// This string has length 32, a power of 2, so the modulus doesn't introduce a
// bias.
var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
module.exports = {
  string: function(length) {
    var max = _randomStringChars.length;
    var bytes = crypto.randomBytes(length);
    var ret = [];
    for (var i = 0; i < length; i++) {
      ret.push(_randomStringChars.substr(bytes[i] % max, 1));
    }
    return ret.join('');
  }

, number: function(max) {
    return Math.floor(Math.random() * max);
  }

, numberString: function(max) {
    var t = ('' + (max - 1)).length;
    var p = new Array(t + 1).join('0');
    return (p + this.number(max)).slice(-t);
  }
};

},{"crypto":43}],51:[function(require,module,exports){
(function (process){
'use strict';

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:transport');
}

module.exports = function(availableTransports) {
  return {
    filterToEnabled: function(transportsWhitelist, info) {
      var transports = {
        main: []
      , facade: []
      };
      if (!transportsWhitelist) {
        transportsWhitelist = [];
      } else if (typeof transportsWhitelist === 'string') {
        transportsWhitelist = [transportsWhitelist];
      }

      availableTransports.forEach(function(trans) {
        if (!trans) {
          return;
        }

        if (trans.transportName === 'websocket' && info.websocket === false) {
          debug('disabled from server', 'websocket');
          return;
        }

        if (transportsWhitelist.length &&
            transportsWhitelist.indexOf(trans.transportName) === -1) {
          debug('not in whitelist', trans.transportName);
          return;
        }

        if (trans.enabled(info)) {
          debug('enabled', trans.transportName);
          transports.main.push(trans);
          if (trans.facadeTransport) {
            transports.facade.push(trans.facadeTransport);
          }
        } else {
          debug('disabled', trans.transportName);
        }
      });
      return transports;
    }
  };
};

}).call(this,{ env: {} })

},{"debug":55}],52:[function(require,module,exports){
(function (process){
'use strict';

var URL = require('url-parse');

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:url');
}

module.exports = {
  getOrigin: function(url) {
    if (!url) {
      return null;
    }

    var p = new URL(url);
    if (p.protocol === 'file:') {
      return null;
    }

    var port = p.port;
    if (!port) {
      port = (p.protocol === 'https:') ? '443' : '80';
    }

    return p.protocol + '//' + p.hostname + ':' + port;
  }

, isOriginEqual: function(a, b) {
    var res = this.getOrigin(a) === this.getOrigin(b);
    debug('same', a, b, res);
    return res;
  }

, isSchemeEqual: function(a, b) {
    return (a.split(':')[0] === b.split(':')[0]);
  }

, addPath: function (url, path) {
    var qs = url.split('?');
    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
  }

, addQuery: function (url, q) {
    return url + (url.indexOf('?') === -1 ? ('?' + q) : ('&' + q));
  }

, isLoopbackAddr: function (addr) {
    return /^127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(addr) || /^\[::1\]$/.test(addr);
  }
};

}).call(this,{ env: {} })

},{"debug":55,"url-parse":61}],53:[function(require,module,exports){
module.exports = '1.5.0';

},{}],54:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

},{}],55:[function(require,module,exports){
(function (process){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  var _console;

  // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = require('./common')(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};


}).call(this,{ env: {} })

},{"./common":56}],56:[function(require,module,exports){
"use strict";

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = require('ms');
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      // Disabled?
      if (!debug.enabled) {
        return;
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      var instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @api public
  */


  function disable() {
    createDebug.enable('');
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;


},{"ms":54}],57:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],58:[function(require,module,exports){
(function (global){
/*! JSON v3.3.2 | https://bestiejs.github.io/json3 | Copyright 2012-2015, Kit Cambridge, Benjamin Tan | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === "function" && define.amd;

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root.Object());
    exports || (exports = root.Object());

    // Native constructor aliases.
    var Number = context.Number || root.Number,
        String = context.String || root.String,
        Object = context.Object || root.Object,
        Date = context.Date || root.Date,
        SyntaxError = context.SyntaxError || root.SyntaxError,
        TypeError = context.TypeError || root.TypeError,
        Math = context.Math || root.Math,
        nativeJSON = context.JSON || root.JSON;

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty = objectProto.hasOwnProperty,
        undefined;

    // Internal: Contains `try...catch` logic used by other functions.
    // This prevents other functions from being deoptimized.
    function attempt(func, errorFunc) {
      try {
        func();
      } catch (exception) {
        if (errorFunc) {
          errorFunc();
        }
      }
    }

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    attempt(function () {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    });

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] != null) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("date-serialization") && has("json-parse");
      } else if (name == "date-serialization") {
        // Indicates whether `Date`s can be serialized accurately by `JSON.stringify`.
        isSupported = has("json-stringify") && isExtended;
        if (isSupported) {
          var stringify = exports.stringify;
          attempt(function () {
            isSupported =
              // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
              // serialize extended years.
              stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
              // The milliseconds are optional in ES 5, but required in 5.1.
              stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
              // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
              // four-digit years instead of six-digit years. Credits: @Yaffle.
              stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
              // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
              // values less than 1000. Credits: @Yaffle.
              stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
          });
        }
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function";
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            attempt(function () {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undefined &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undefined) === undefined &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undefined &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undefined]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undefined, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]";
            }, function () {
              stringifySupported = false;
            });
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse, parseSupported;
          if (typeof parse == "function") {
            attempt(function () {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  attempt(function () {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  });
                  if (parseSupported) {
                    attempt(function () {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    });
                  }
                  if (parseSupported) {
                    attempt(function () {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    });
                  }
                }
              }
            }, function () {
              parseSupported = false;
            });
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }
    has["bug-string-char-index"] = has["date-serialization"] = has["json"] = has["json-stringify"] = has["json-parse"] = null;

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      var forOwn = function (object, callback) {
        var size = 0, Properties, dontEnums, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        dontEnums = new Properties();
        for (property in dontEnums) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(dontEnums, property)) {
            size++;
          }
        }
        Properties = dontEnums = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          dontEnums = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forOwn = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = dontEnums.length; property = dontEnums[--length];) {
              if (hasProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forOwn = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forOwn(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify") && !has("date-serialization")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Serializes a date object.
        var serializeDate = function (value) {
          var getData, year, month, date, time, hours, minutes, seconds, milliseconds;
          // Define additional utility methods if the `Date` methods are buggy.
          if (!isExtended) {
            var floor = Math.floor;
            // A mapping between the months of the year and the number of days between
            // January 1st and the first of the respective month.
            var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
            // Internal: Calculates the number of days between the Unix epoch and the
            // first day of the given month.
            var getDay = function (year, month) {
              return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
            };
            getData = function (value) {
              // Manually compute the year, month, date, hours, minutes,
              // seconds, and milliseconds if the `getUTC*` methods are
              // buggy. Adapted from @Yaffle's `date-shim` project.
              date = floor(value / 864e5);
              for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
              for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
              date = 1 + date - getDay(year, month);
              // The `time` value specifies the time within the day (see ES
              // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
              // to compute `A modulo B`, as the `%` operator does not
              // correspond to the `modulo` operation for negative numbers.
              time = (value % 864e5 + 864e5) % 864e5;
              // The hours, minutes, seconds, and milliseconds are obtained by
              // decomposing the time within the day. See section 15.9.1.10.
              hours = floor(time / 36e5) % 24;
              minutes = floor(time / 6e4) % 60;
              seconds = floor(time / 1e3) % 60;
              milliseconds = time % 1e3;
            };
          } else {
            getData = function (value) {
              year = value.getUTCFullYear();
              month = value.getUTCMonth();
              date = value.getUTCDate();
              hours = value.getUTCHours();
              minutes = value.getUTCMinutes();
              seconds = value.getUTCSeconds();
              milliseconds = value.getUTCMilliseconds();
            };
          }
          serializeDate = function (value) {
            if (value > -1 / 0 && value < 1 / 0) {
              // Dates are serialized according to the `Date#toJSON` method
              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
              // for the ISO 8601 date time string format.
              getData(value);
              // Serialize extended years correctly.
              value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
              "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
              // Months, dates, hours, minutes, and seconds should have two
              // digits; milliseconds should have three.
              "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
              // Milliseconds are optional in ES 5.0, but required in 5.1.
              "." + toPaddedString(3, milliseconds) + "Z";
              year = month = date = hours = minutes = seconds = milliseconds = null;
            } else {
              value = null;
            }
            return value;
          };
          return serializeDate(value);
        };

        // For environments with `JSON.stringify` but buggy date serialization,
        // we override the native `Date#toJSON` implementation with a
        // spec-compliant one.
        if (has("json-stringify") && !has("date-serialization")) {
          // Internal: the `Date#toJSON` implementation used to override the native one.
          function dateToJSON (key) {
            return serializeDate(this);
          }

          // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
          var nativeStringify = exports.stringify;
          exports.stringify = function (source, filter, width) {
            var nativeToJSON = Date.prototype.toJSON;
            Date.prototype.toJSON = dateToJSON;
            var result = nativeStringify(source, filter, width);
            Date.prototype.toJSON = nativeToJSON;
            return result;
          }
        } else {
          // Internal: Double-quotes a string `value`, replacing all ASCII control
          // characters (characters with code unit values between 0 and 31) with
          // their escaped equivalents. This is an implementation of the
          // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
          var unicodePrefix = "\\u00";
          var escapeChar = function (character) {
            var charCode = character.charCodeAt(0), escaped = Escapes[charCode];
            if (escaped) {
              return escaped;
            }
            return unicodePrefix + toPaddedString(2, charCode.toString(16));
          };
          var reEscape = /[\x00-\x1f\x22\x5c]/g;
          var quote = function (value) {
            reEscape.lastIndex = 0;
            return '"' +
              (
                reEscape.test(value)
                  ? value.replace(reEscape, escapeChar)
                  : value
              ) +
              '"';
          };

          // Internal: Recursively serializes an object. Implements the
          // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
          var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
            var value, type, className, results, element, index, length, prefix, result;
            attempt(function () {
              // Necessary for host object support.
              value = object[property];
            });
            if (typeof value == "object" && value) {
              if (value.getUTCFullYear && getClass.call(value) == dateClass && value.toJSON === Date.prototype.toJSON) {
                value = serializeDate(value);
              } else if (typeof value.toJSON == "function") {
                value = value.toJSON(property);
              }
            }
            if (callback) {
              // If a replacement function was provided, call it to obtain the value
              // for serialization.
              value = callback.call(object, property, value);
            }
            // Exit early if value is `undefined` or `null`.
            if (value == undefined) {
              return value === undefined ? value : "null";
            }
            type = typeof value;
            // Only call `getClass` if the value is an object.
            if (type == "object") {
              className = getClass.call(value);
            }
            switch (className || type) {
              case "boolean":
              case booleanClass:
                // Booleans are represented literally.
                return "" + value;
              case "number":
              case numberClass:
                // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
                // `"null"`.
                return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
              case "string":
              case stringClass:
                // Strings are double-quoted and escaped.
                return quote("" + value);
            }
            // Recursively serialize objects and arrays.
            if (typeof value == "object") {
              // Check for cyclic structures. This is a linear search; performance
              // is inversely proportional to the number of unique nested objects.
              for (length = stack.length; length--;) {
                if (stack[length] === value) {
                  // Cyclic structures cannot be serialized by `JSON.stringify`.
                  throw TypeError();
                }
              }
              // Add the object to the stack of traversed objects.
              stack.push(value);
              results = [];
              // Save the current indentation level and indent one additional level.
              prefix = indentation;
              indentation += whitespace;
              if (className == arrayClass) {
                // Recursively serialize array elements.
                for (index = 0, length = value.length; index < length; index++) {
                  element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                  results.push(element === undefined ? "null" : element);
                }
                result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
              } else {
                // Recursively serialize object members. Members are selected from
                // either a user-specified list of property names, or the object
                // itself.
                forOwn(properties || value, function (property) {
                  var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                  if (element !== undefined) {
                    // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                    // is not the empty string, let `member` {quote(property) + ":"}
                    // be the concatenation of `member` and the `space` character."
                    // The "`space` character" refers to the literal space
                    // character, not the `space` {width} argument provided to
                    // `JSON.stringify`.
                    results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                  }
                });
                result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
              }
              // Remove the object from the traversed object stack.
              stack.pop();
              return result;
            }
          };

          // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
          exports.stringify = function (source, filter, width) {
            var whitespace, callback, properties, className;
            if (objectTypes[typeof filter] && filter) {
              className = getClass.call(filter);
              if (className == functionClass) {
                callback = filter;
              } else if (className == arrayClass) {
                // Convert the property names array into a makeshift set.
                properties = {};
                for (var index = 0, length = filter.length, value; index < length;) {
                  value = filter[index++];
                  className = getClass.call(value);
                  if (className == "[object String]" || className == "[object Number]") {
                    properties[value] = 1;
                  }
                }
              }
            }
            if (width) {
              className = getClass.call(width);
              if (className == numberClass) {
                // Convert the `width` to an integer and create a string containing
                // `width` number of space characters.
                if ((width -= width % 1) > 0) {
                  if (width > 10) {
                    width = 10;
                  }
                  for (whitespace = ""; whitespace.length < width;) {
                    whitespace += " ";
                  }
                }
              } else if (className == stringClass) {
                whitespace = width.length <= 10 ? width : width.slice(0, 10);
              }
            }
            // Opera <= 7.54u2 discards the values associated with empty string keys
            // (`""`) only if they are used directly within an object member list
            // (e.g., `!("" in { "": 1})`).
            return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
          };
        }
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length; position++) {
                      charCode = source.charCodeAt(position);
                      if (charCode < 48 || charCode > 57) {
                        break;
                      }
                    }
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length; position++) {
                      charCode = source.charCodeAt(position);
                      if (charCode < 48 || charCode > 57) {
                        break;
                      }
                    }
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                var temp = source.slice(Index, Index + 4);
                if (temp == "true") {
                  Index += 4;
                  return true;
                } else if (temp == "fals" && source.charCodeAt(Index + 4 ) == 101) {
                  Index += 5;
                  return false;
                } else if (temp == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;;) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                } else {
                  hasMembers = true;
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;;) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                } else {
                  hasMembers = true;
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undefined) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forOwn` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(getClass, forOwn, value, length, callback);
              }
            } else {
              forOwn(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports.runInContext = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root.JSON3,
        isRestored = false;

    var JSON3 = runInContext(root, (root.JSON3 = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root.JSON3 = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],59:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty
  , undef;

/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String|Null} The decoded string.
 * @api private
 */
function decode(input) {
  try {
    return decodeURIComponent(input.replace(/\+/g, ' '));
  } catch (e) {
    return null;
  }
}

/**
 * Attempts to encode a given input.
 *
 * @param {String} input The string that needs to be encoded.
 * @returns {String|Null} The encoded string.
 * @api private
 */
function encode(input) {
  try {
    return encodeURIComponent(input);
  } catch (e) {
    return null;
  }
}

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */
function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g
    , result = {}
    , part;

  while (part = parser.exec(query)) {
    var key = decode(part[1])
      , value = decode(part[2]);

    //
    // Prevent overriding of existing properties. This ensures that build-in
    // methods like `toString` or __proto__ are not overriden by malicious
    // querystrings.
    //
    // In the case if failed decoding, we want to omit the key/value pairs
    // from the result.
    //
    if (key === null || value === null || key in result) continue;
    result[key] = value;
  }

  return result;
}

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */
function querystringify(obj, prefix) {
  prefix = prefix || '';

  var pairs = []
    , value
    , key;

  //
  // Optionally prefix with a '?' if needed
  //
  if ('string' !== typeof prefix) prefix = '?';

  for (key in obj) {
    if (has.call(obj, key)) {
      value = obj[key];

      //
      // Edge cases where we actually want to encode the value to an empty
      // string instead of the stringified value.
      //
      if (!value && (value === null || value === undef || isNaN(value))) {
        value = '';
      }

      key = encodeURIComponent(key);
      value = encodeURIComponent(value);

      //
      // If we failed to encode the strings, we should bail out as we don't
      // want to add invalid strings to the query.
      //
      if (key === null || value === null) continue;
      pairs.push(key +'='+ value);
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
}

//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;

},{}],60:[function(require,module,exports){
'use strict';

/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */
module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;

  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
    return port !== 80;

    case 'https':
    case 'wss':
    return port !== 443;

    case 'ftp':
    return port !== 21;

    case 'gopher':
    return port !== 70;

    case 'file':
    return false;
  }

  return port !== 0;
};

},{}],61:[function(require,module,exports){
(function (global){
'use strict';

var required = require('requires-port')
  , qs = require('querystringify')
  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//
  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i
  , whitespace = '[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]'
  , left = new RegExp('^'+ whitespace +'+');

/**
 * Trim a given string.
 *
 * @param {String} str String to trim.
 * @public
 */
function trimLeft(str) {
  return (str ? str : '').toString().replace(left, '');
}

/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */
var rules = [
  ['#', 'hash'],                        // Extract from the back.
  ['?', 'query'],                       // Extract from the back.
  function sanitize(address) {          // Sanitize what is left of the address
    return address.replace('\\', '/');
  },
  ['/', 'pathname'],                    // Extract from the back.
  ['@', 'auth', 1],                     // Extract from the front.
  [NaN, 'host', undefined, 1, 1],       // Set left over value.
  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
];

/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */
var ignore = { hash: 1, query: 1 };

/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */
function lolcation(loc) {
  var globalVar;

  if (typeof window !== 'undefined') globalVar = window;
  else if (typeof global !== 'undefined') globalVar = global;
  else if (typeof self !== 'undefined') globalVar = self;
  else globalVar = {};

  var location = globalVar.location || {};
  loc = loc || location;

  var finaldestination = {}
    , type = typeof loc
    , key;

  if ('blob:' === loc.protocol) {
    finaldestination = new Url(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new Url(loc, {});
    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}

/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @private
 */
function extractProtocol(address) {
  address = trimLeft(address);
  var match = protocolre.exec(address);

  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}

/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */
function resolve(relative, base) {
  if (relative === '') return base;

  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
    , i = path.length
    , last = path[i - 1]
    , unshift = false
    , up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');

  return path.join('/');
}

/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} [location] Location defaults for relative paths.
 * @param {Boolean|Function} [parser] Parser for the query string.
 * @private
 */
function Url(address, location, parser) {
  address = trimLeft(address);

  if (!(this instanceof Url)) {
    return new Url(address, location, parser);
  }

  var relative, extracted, parse, instruction, index, key
    , instructions = rules.slice()
    , type = typeof location
    , url = this
    , i = 0;

  //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //
  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;

  location = lolcation(location);

  //
  // Extract protocol information before running the instructions.
  //
  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest;

  //
  // When the authority component is absent the URL starts with a path
  // component.
  //
  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];

    if (typeof instruction === 'function') {
      address = instruction(address);
      continue;
    }

    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if ((index = parse.exec(address))) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (
      relative && instruction[3] ? location[key] || '' : ''
    );

    //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //
    if (instruction[4]) url[key] = url[key].toLowerCase();
  }

  //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //
  if (parser) url.query = parser(url.query);

  //
  // If the URL is relative, resolve the pathname against the base URL.
  //
  if (
      relative
    && location.slashes
    && url.pathname.charAt(0) !== '/'
    && (url.pathname !== '' || location.pathname !== '')
  ) {
    url.pathname = resolve(url.pathname, location.pathname);
  }

  //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //
  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  }

  //
  // Parse down the `auth` for the username and password.
  //
  url.username = url.password = '';
  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  //
  // The href is just the compiled result.
  //
  url.href = url.toString();
}

/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */
function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname +':'+ value;
      }

      break;

    case 'hostname':
      url[part] = value;

      if (url.port) value += ':'+ url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
    case 'hash':
      if (value) {
        var char = part === 'pathname' ? '/' : '#';
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }
      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];

    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();

  return url;
}

/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */
function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

  var query
    , url = this
    , protocol = url.protocol;

  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':'+ url.password;
    result += '@';
  }

  result += url.host + url.pathname;

  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

  if (url.hash) result += url.hash;

  return result;
}

Url.prototype = { set: set, toString: toString };

//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.trimLeft = trimLeft;
Url.qs = qs;

module.exports = Url;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"querystringify":59,"requires-port":60}]},{},[1])(1)
});


//# sourceMappingURL=sockjs.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(/*! punycode */ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/BaseClient.js":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client/clients/BaseClient.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function BaseClient() {
    _classCallCheck(this, BaseClient);
  }

  _createClass(BaseClient, null, [{
    key: "getClientPath",
    value: function getClientPath(options) {
      throw new Error('Client needs implementation');
    }
  }]);

  return BaseClient;
}();

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js":
/*!***********************************************************!*\
  !*** (webpack)-dev-server/client/clients/SockJSClient.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SockJS = __webpack_require__(/*! sockjs-client/dist/sockjs */ "./node_modules/sockjs-client/dist/sockjs.js");

var BaseClient = __webpack_require__(/*! ./BaseClient */ "./node_modules/webpack-dev-server/client/clients/BaseClient.js");

module.exports = /*#__PURE__*/function (_BaseClient) {
  _inherits(SockJSClient, _BaseClient);

  var _super = _createSuper(SockJSClient);

  function SockJSClient(url) {
    var _this;

    _classCallCheck(this, SockJSClient);

    _this = _super.call(this);
    _this.sock = new SockJS(url);

    _this.sock.onerror = function (err) {// TODO: use logger to log the error event once client and client-src
      // are reorganized to have the same directory structure
    };

    return _this;
  }

  _createClass(SockJSClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.sock.onopen = f;
    }
  }, {
    key: "onClose",
    value: function onClose(f) {
      this.sock.onclose = f;
    } // call f with the message string as the first argument

  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.sock.onmessage = function (e) {
        f(e.data);
      };
    }
  }], [{
    key: "getClientPath",
    value: function getClientPath(options) {
      return /*require.resolve*/(/*! ./SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
    }
  }]);

  return SockJSClient;
}(BaseClient);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/index.js?http://localhost:9000":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client?http://localhost:9000 ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__resourceQuery) {
/* global __resourceQuery WorkerGlobalScope self */

/* eslint prefer-destructuring: off */

var stripAnsi = __webpack_require__(/*! strip-ansi */ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js");

var socket = __webpack_require__(/*! ./socket */ "./node_modules/webpack-dev-server/client/socket.js");

var overlay = __webpack_require__(/*! ./overlay */ "./node_modules/webpack-dev-server/client/overlay.js");

var _require = __webpack_require__(/*! ./utils/log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log,
    setLogLevel = _require.setLogLevel;

var sendMessage = __webpack_require__(/*! ./utils/sendMessage */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");

var reloadApp = __webpack_require__(/*! ./utils/reloadApp */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");

var createSocketUrl = __webpack_require__(/*! ./utils/createSocketUrl */ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js");

var status = {
  isUnloading: false,
  currentHash: ''
};
var options = {
  hot: false,
  hotReload: true,
  liveReload: false,
  initial: true,
  useWarningOverlay: false,
  useErrorOverlay: false,
  useProgress: false
};
var socketUrl = createSocketUrl(__resourceQuery);
self.addEventListener('beforeunload', function () {
  status.isUnloading = true;
});

if (typeof window !== 'undefined') {
  var qs = window.location.search.toLowerCase();
  options.hotReload = qs.indexOf('hotreload=false') === -1;
}

var onSocketMessage = {
  hot: function hot() {
    options.hot = true;
    log.info('[WDS] Hot Module Replacement enabled.');
  },
  liveReload: function liveReload() {
    options.liveReload = true;
    log.info('[WDS] Live Reloading enabled.');
  },
  invalid: function invalid() {
    log.info('[WDS] App updated. Recompiling...'); // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('Invalid');
  },
  hash: function hash(_hash) {
    status.currentHash = _hash;
  },
  'still-ok': function stillOk() {
    log.info('[WDS] Nothing changed.');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('StillOk');
  },
  'log-level': function logLevel(level) {
    var hotCtx = __webpack_require__("./node_modules/webpack/hot sync ^\\.\\/log$");

    if (hotCtx.keys().indexOf('./log') !== -1) {
      hotCtx('./log').setLogLevel(level);
    }

    setLogLevel(level);
  },
  overlay: function overlay(value) {
    if (typeof document !== 'undefined') {
      if (typeof value === 'boolean') {
        options.useWarningOverlay = false;
        options.useErrorOverlay = value;
      } else if (value) {
        options.useWarningOverlay = value.warnings;
        options.useErrorOverlay = value.errors;
      }
    }
  },
  progress: function progress(_progress) {
    if (typeof document !== 'undefined') {
      options.useProgress = _progress;
    }
  },
  'progress-update': function progressUpdate(data) {
    if (options.useProgress) {
      log.info("[WDS] ".concat(data.percent, "% - ").concat(data.msg, "."));
    }

    sendMessage('Progress', data);
  },
  ok: function ok() {
    sendMessage('Ok');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  'content-changed': function contentChanged() {
    log.info('[WDS] Content base changed. Reloading...');
    self.location.reload();
  },
  warnings: function warnings(_warnings) {
    log.warn('[WDS] Warnings while compiling.');

    var strippedWarnings = _warnings.map(function (warning) {
      return stripAnsi(warning);
    });

    sendMessage('Warnings', strippedWarnings);

    for (var i = 0; i < strippedWarnings.length; i++) {
      log.warn(strippedWarnings[i]);
    }

    if (options.useWarningOverlay) {
      overlay.showMessage(_warnings);
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  errors: function errors(_errors) {
    log.error('[WDS] Errors while compiling. Reload prevented.');

    var strippedErrors = _errors.map(function (error) {
      return stripAnsi(error);
    });

    sendMessage('Errors', strippedErrors);

    for (var i = 0; i < strippedErrors.length; i++) {
      log.error(strippedErrors[i]);
    }

    if (options.useErrorOverlay) {
      overlay.showMessage(_errors);
    }

    options.initial = false;
  },
  error: function error(_error) {
    log.error(_error);
  },
  close: function close() {
    log.error('[WDS] Disconnected!');
    sendMessage('Close');
  }
};
socket(socketUrl, onSocketMessage);
/* WEBPACK VAR INJECTION */}.call(this, "?http://localhost:9000"))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!**********************************************!*\
  !*** (webpack)-dev-server/client/overlay.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).

var ansiHTML = __webpack_require__(/*! ansi-html */ "./node_modules/ansi-html/index.js");

var _require = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/lib/index.js"),
    AllHtmlEntities = _require.AllHtmlEntities;

var entities = new AllHtmlEntities();
var colors = {
  reset: ['transparent', 'transparent'],
  black: '181818',
  red: 'E36049',
  green: 'B3CB74',
  yellow: 'FFD080',
  blue: '7CAFC2',
  magenta: '7FACCA',
  cyan: 'C3C2EF',
  lightgrey: 'EBE7E3',
  darkgrey: '6D7891'
};
var overlayIframe = null;
var overlayDiv = null;
var lastOnOverlayDivReady = null;
ansiHTML.setColors(colors);

function createOverlayIframe(onIframeLoad) {
  var iframe = document.createElement('iframe');
  iframe.id = 'webpack-dev-server-client-overlay';
  iframe.src = 'about:blank';
  iframe.style.position = 'fixed';
  iframe.style.left = 0;
  iframe.style.top = 0;
  iframe.style.right = 0;
  iframe.style.bottom = 0;
  iframe.style.width = '100vw';
  iframe.style.height = '100vh';
  iframe.style.border = 'none';
  iframe.style.zIndex = 9999999999;
  iframe.onload = onIframeLoad;
  return iframe;
}

function addOverlayDivTo(iframe) {
  var div = iframe.contentDocument.createElement('div');
  div.id = 'webpack-dev-server-client-overlay-div';
  div.style.position = 'fixed';
  div.style.boxSizing = 'border-box';
  div.style.left = 0;
  div.style.top = 0;
  div.style.right = 0;
  div.style.bottom = 0;
  div.style.width = '100vw';
  div.style.height = '100vh';
  div.style.backgroundColor = 'rgba(0, 0, 0, 0.85)';
  div.style.color = '#E8E8E8';
  div.style.fontFamily = 'Menlo, Consolas, monospace';
  div.style.fontSize = 'large';
  div.style.padding = '2rem';
  div.style.lineHeight = '1.2';
  div.style.whiteSpace = 'pre-wrap';
  div.style.overflow = 'auto';
  iframe.contentDocument.body.appendChild(div);
  return div;
}

function ensureOverlayDivExists(onOverlayDivReady) {
  if (overlayDiv) {
    // Everything is ready, call the callback right away.
    onOverlayDivReady(overlayDiv);
    return;
  } // Creating an iframe may be asynchronous so we'll schedule the callback.
  // In case of multiple calls, last callback wins.


  lastOnOverlayDivReady = onOverlayDivReady;

  if (overlayIframe) {
    // We've already created it.
    return;
  } // Create iframe and, when it is ready, a div inside it.


  overlayIframe = createOverlayIframe(function () {
    overlayDiv = addOverlayDivTo(overlayIframe); // Now we can talk!

    lastOnOverlayDivReady(overlayDiv);
  }); // Zalgo alert: onIframeLoad() will be called either synchronously
  // or asynchronously depending on the browser.
  // We delay adding it so `overlayIframe` is set when `onIframeLoad` fires.

  document.body.appendChild(overlayIframe);
} // Successful compilation.


function clear() {
  if (!overlayDiv) {
    // It is not there in the first place.
    return;
  } // Clean up and reset internal state.


  document.body.removeChild(overlayIframe);
  overlayDiv = null;
  overlayIframe = null;
  lastOnOverlayDivReady = null;
} // Compilation with errors (e.g. syntax error or missing modules).


function showMessage(messages) {
  ensureOverlayDivExists(function (div) {
    // Make it look similar to our terminal.
    div.innerHTML = "<span style=\"color: #".concat(colors.red, "\">Failed to compile.</span><br><br>").concat(ansiHTML(entities.encode(messages[0])));
  });
}

module.exports = {
  clear: clear,
  showMessage: showMessage
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!*********************************************!*\
  !*** (webpack)-dev-server/client/socket.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__webpack_dev_server_client__) {
/* global __webpack_dev_server_client__ */

/* eslint-disable
  camelcase
*/
// this SockJSClient is here as a default fallback, in case inline mode
// is off or the client is not injected. This will be switched to
// WebsocketClient when it becomes the default
// important: the path to SockJSClient here is made to work in the 'client'
// directory, but is updated via the webpack compilation when compiled from
// the 'client-src' directory

var Client = typeof __webpack_dev_server_client__ !== 'undefined' ? __webpack_dev_server_client__ : // eslint-disable-next-line import/no-unresolved
__webpack_require__(/*! ./clients/SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
var retries = 0;
var client = null;

var socket = function initSocket(url, handlers) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries <= 10) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-mixed-operators, no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      setTimeout(function () {
        socket(url, handlers);
      }, retryInMs);
    }
  });
  client.onMessage(function (data) {
    var msg = JSON.parse(data);

    if (handlers[msg.type]) {
      handlers[msg.type](msg.data);
    }
  });
};

module.exports = socket;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! (webpack)-dev-server/client/clients/SockJSClient.js */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js")))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":
/*!************************************************************!*\
  !*** (webpack)-dev-server/client/utils/createSocketUrl.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global self */

var url = __webpack_require__(/*! url */ "./node_modules/url/url.js");

var getCurrentScriptSource = __webpack_require__(/*! ./getCurrentScriptSource */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");

function createSocketUrl(resourceQuery, currentLocation) {
  var urlParts;

  if (typeof resourceQuery === 'string' && resourceQuery !== '') {
    // If this bundle is inlined, use the resource query to get the correct url.
    // format is like `?http://0.0.0.0:8096&sockPort=8097&sockHost=localhost`
    urlParts = url.parse(resourceQuery // strip leading `?` from query string to get a valid URL
    .substr(1) // replace first `&` with `?` to have a valid query string
    .replace('&', '?'), true);
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptHost = getCurrentScriptSource();
    urlParts = url.parse(scriptHost || '/', true, true);
  } // Use parameter to allow passing location in unit tests


  if (typeof currentLocation === 'string' && currentLocation !== '') {
    currentLocation = url.parse(currentLocation);
  } else {
    currentLocation = self.location;
  }

  return getSocketUrl(urlParts, currentLocation);
}
/*
 * Gets socket URL based on Script Source/Location
 * (scriptSrc: URL, location: URL) -> URL
 */


function getSocketUrl(urlParts, loc) {
  var auth = urlParts.auth,
      query = urlParts.query;
  var hostname = urlParts.hostname,
      protocol = urlParts.protocol,
      port = urlParts.port;

  if (!port || port === '0') {
    port = loc.port;
  } // check ipv4 and ipv6 `all hostname`
  // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384


  if ((hostname === '0.0.0.0' || hostname === '::') && loc.hostname && loc.protocol.indexOf('http') === 0) {
    hostname = loc.hostname;
  } // `hostname` can be empty when the script path is relative. In that case, specifying
  // a protocol would result in an invalid URL.
  // When https is used in the app, secure websockets are always necessary
  // because the browser doesn't accept non-secure websockets.


  if (hostname && hostname !== '127.0.0.1' && (loc.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {
    protocol = loc.protocol;
  } // all of these sock url params are optionally passed in through
  // resourceQuery, so we need to fall back to the default if
  // they are not provided


  var sockHost = query.sockHost || hostname;
  var sockPath = query.sockPath || '/sockjs-node';
  var sockPort = query.sockPort || port;

  if (sockPort === 'location') {
    sockPort = loc.port;
  }

  return url.format({
    protocol: protocol,
    auth: auth,
    hostname: sockHost,
    port: sockPort,
    // If sockPath is provided it'll be passed in via the resourceQuery as a
    // query param so it has to be parsed out of the querystring in order for the
    // client to open the socket to the correct location.
    pathname: sockPath
  });
}

module.exports = createSocketUrl;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!*******************************************************************!*\
  !*** (webpack)-dev-server/client/utils/getCurrentScriptSource.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute('src');
  } // Fall back to getting all scripts in the document.


  var scriptElements = document.scripts || [];
  var currentScript = scriptElements[scriptElements.length - 1];

  if (currentScript) {
    return currentScript.getAttribute('src');
  } // Fail as there was no script to use.


  throw new Error('[WDS] Failed to get current script source.');
}

module.exports = getCurrentScriptSource;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!************************************************!*\
  !*** (webpack)-dev-server/client/utils/log.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var log = __webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js").getLogger('webpack-dev-server');

var INFO = 'info';
var WARN = 'warn';
var ERROR = 'error';
var DEBUG = 'debug';
var TRACE = 'trace';
var SILENT = 'silent'; // deprecated
// TODO: remove these at major released
// https://github.com/webpack/webpack-dev-server/pull/1825

var WARNING = 'warning';
var NONE = 'none'; // Set the default log level

log.setDefaultLevel(INFO);

function setLogLevel(level) {
  switch (level) {
    case INFO:
    case WARN:
    case ERROR:
    case DEBUG:
    case TRACE:
      log.setLevel(level);
      break;
    // deprecated

    case WARNING:
      // loglevel's warning name is different from webpack's
      log.setLevel('warn');
      break;
    // deprecated

    case NONE:
    case SILENT:
      log.disableAll();
      break;

    default:
      log.error("[WDS] Unknown clientLogLevel '".concat(level, "'"));
  }
}

module.exports = {
  log: log,
  setLogLevel: setLogLevel
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!******************************************************!*\
  !*** (webpack)-dev-server/client/utils/reloadApp.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global WorkerGlobalScope self */

var _require = __webpack_require__(/*! ./log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log;

function reloadApp(_ref, _ref2) {
  var hotReload = _ref.hotReload,
      hot = _ref.hot,
      liveReload = _ref.liveReload;
  var isUnloading = _ref2.isUnloading,
      currentHash = _ref2.currentHash;

  if (isUnloading || !hotReload) {
    return;
  }

  if (hot) {
    log.info('[WDS] App hot update...');

    var hotEmitter = __webpack_require__(/*! webpack/hot/emitter */ "./node_modules/webpack/hot/emitter.js");

    hotEmitter.emit('webpackHotUpdate', currentHash);

    if (typeof self !== 'undefined' && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(currentHash), '*');
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload) {
      var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

      var intervalId = self.setInterval(function () {
        if (rootWindow.location.protocol !== 'about:') {
          // reload immediately if protocol is valid
          applyReload(rootWindow, intervalId);
        } else {
          rootWindow = rootWindow.parent;

          if (rootWindow.parent === rootWindow) {
            // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
            applyReload(rootWindow, intervalId);
          }
        }
      });
    }

  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    log.info('[WDS] App updated. Reloading...');
    rootWindow.location.reload();
  }
}

module.exports = reloadApp;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!********************************************************!*\
  !*** (webpack)-dev-server/client/utils/sendMessage.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global __resourceQuery WorkerGlobalScope self */
// Send messages to the outside, so plugins can consume it.

function sendMsg(type, data) {
  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, '*');
  }
}

module.exports = sendMsg;

/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":
/*!*************************************************************!*\
  !*** (webpack)-dev-server/node_modules/ansi-regex/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function () {
	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":
/*!*************************************************************!*\
  !*** (webpack)-dev-server/node_modules/strip-ansi/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ansiRegex = __webpack_require__(/*! ansi-regex */ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();

module.exports = function (str) {
	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/webpack/hot sync ^\\.\\/log$":
/*!*************************************************!*\
  !*** (webpack)/hot sync nonrecursive ^\.\/log$ ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./log": "./node_modules/webpack/hot/log.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/webpack/hot sync ^\\.\\/log$";

/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!********************************!*\
  !*** (webpack)/hot/emitter.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");
module.exports = new EventEmitter();


/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!****************************!*\
  !*** (webpack)/hot/log.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
	var shouldLog =
		(logLevel === "info" && level === "info") ||
		(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||
		(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");
	return shouldLog;
}

function logGroup(logFn) {
	return function(level, msg) {
		if (shouldLog(level)) {
			logFn(msg);
		}
	};
}

module.exports = function(level, msg) {
	if (shouldLog(level)) {
		if (level === "info") {
			console.log(msg);
		} else if (level === "warning") {
			console.warn(msg);
		} else if (level === "error") {
			console.error(msg);
		}
	}
};

/* eslint-disable node/no-unsupported-features/node-builtins */
var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
/* eslint-enable node/no-unsupported-features/node-builtins */

module.exports.group = logGroup(group);

module.exports.groupCollapsed = logGroup(groupCollapsed);

module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function(level) {
	logLevel = level;
};

module.exports.formatError = function(err) {
	var message = err.message;
	var stack = err.stack;
	if (!stack) {
		return message;
	} else if (stack.indexOf(message) < 0) {
		return message + "\n" + stack;
	} else {
		return stack;
	}
};


/***/ }),

/***/ "./src/i18n/translation_en.json":
/*!**************************************!*\
  !*** ./src/i18n/translation_en.json ***!
  \**************************************/
/*! exports provided: time, achievements, tournaments, leaderboard, miniLeaderboard, rewards, messages, global, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"time\":{\"days\":\"d\",\"hours\":\"h\",\"minutesShortHand\":\"min\",\"minutes\":\"m\",\"seconds\":\"s\"},\"achievements\":{\"label\":\"Achievements\",\"more\":\"More\",\"complete\":\"complete 100%\"},\"tournaments\":{\"label\":\"Tournaments\",\"enter\":\"Enter Tournament\",\"readyCompetitions\":\"Upcoming Tournaments\",\"activeCompetitions\":\"Active Tournaments\",\"finishedCompetitions\":\"Finished Tournaments\",\"finishing\":\"Finishing\",\"finished\":\"Finished\",\"registered\":\"Registered\",\"noAvailableCompetitions\":\"No available competition\"},\"leaderboard\":{\"rank\":\"Rank\",\"name\":\"Name\",\"points\":\"Points\",\"prize\":\"Prize\",\"you\":\"You\"},\"miniLeaderboard\":{\"highScore\":\"High Score\",\"lastScore\":\"Last Score\",\"rank\":\"Rank\",\"startsIn\":\"Starting In\",\"started\":\"started\",\"starting\":\"starting\",\"finishing\":\"finishing\",\"finished\":\"finished\"},\"rewards\":{\"label\":\"Rewards\",\"claim\":\"Claim Now\",\"claimed\":\"Claimed\",\"availableRewards\":\"Available Rewards\",\"rewards\":\"Claimed Rewards\",\"expiredRewards\":\"Expired Rewards\"},\"messages\":{\"label\":\"Messages\"},\"global\":{\"copy\":\"Powered By CompetitionLabs\"}}");

/***/ }),

/***/ "./src/javascript/gamification-ux-package.v3.js":
/*!******************************************************!*\
  !*** ./src/javascript/gamification-ux-package.v3.js ***!
  \******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _polyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfills */ "./src/javascript/polyfills/index.js");
/* harmony import */ var _polyfills__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_polyfills__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _modules_setTimeoutGlobal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/setTimeoutGlobal */ "./src/javascript/modules/setTimeoutGlobal.js");
/* harmony import */ var _modules_LbWidget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/LbWidget */ "./src/javascript/modules/LbWidget.js");
/*
 COMPETITION LABS LTD v1.0.5
 (c) 2015-2020 Aleksandr Bernotas
 License: www.competitionlabs.com/terms-of-service
*/




if (false) {}

(function () {
  if (typeof window._CLLBV3Opt === 'undefined') {
    window._CLLBV3Opt = {
      autoStart: false
    };
  }

  if (typeof window._clLeaderBoardV3 === 'undefined') {
    window._clLeaderBoardV3 = new _modules_LbWidget__WEBPACK_IMPORTED_MODULE_2__["LbWidget"](window._CLLBV3Opt);
  } else {
    console.warn('window._clLeaderBoardV3 is already defined, widget is configured to run as a single instance');
  }
})();

/***/ }),

/***/ "./src/javascript/modules/Ajax.js":
/*!****************************************!*\
  !*** ./src/javascript/modules/Ajax.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _cLabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cLabs */ "./src/javascript/modules/cLabs.js");
/* harmony import */ var _utils_sizeof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/sizeof */ "./src/javascript/utils/sizeof.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }



/**
 * Ajax method
 *
 * @constructor
 */

_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax = function () {
  this.xhr = new XMLHttpRequest();
};

_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax.prototype.createCORSRequest = function (method, url) {
  var obj = this;

  if ('withCredentials' in obj.xhr) {
    // Most browsers.
    obj.xhr.open(method, url, true);
  } else if (typeof XDomainRequest !== 'undefined') {
    // IE8 & IE9

    /* eslint no-undef: "off" */
    obj.xhr = new XDomainRequest();
    url = url.indexOf('https') > -1 && location.protocol !== 'https:' ? url.replace('https', 'http') : url;
    obj.xhr.open(method, url);
  } else {
    // CORS not supported.
    obj.xhr = null;
  }

  return obj.xhr;
};
/**
 * Abort the request if it has already been sent
 *
 * @memberOf cLabs.Ajax
 * @method abort
 * @return { Object } cLabs.Ajax
 */


_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax.prototype.abort = function () {
  var _this = this;

  if (_this.xhr && typeof _this.xhr.readyState !== 'undefined' && _this.xhr.readyState !== 4 && _this.xhr.readyState > 0) {
    // console.error("aborting Ajax", _this.xhr.readyState, _this.xhr);
    _this.xhr.abort();
  }

  return _this;
};
/**
 * Retrieves data from a URL without page refresh
 *
 * @memberOf cLabs.Ajax
 * @method getData
 * @param {Object} configuration object
 *  - object contains: HTTP method "type: POST, GET", url: to send the request to, data: {object}
 * @return {String} in success object
 */


_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax.prototype.getData = function (data) {
  var obj = this;

  try {
    data.type = data.type !== undefined && typeof data.type === 'string' && data.type.length > 0 ? data.type : 'POST';
    data.data = data.data !== undefined && _typeof(data.data) === 'object' ? data.data : {};
    data.url = data.url !== undefined && typeof data.url === 'string' && data.url.length > 0 ? data.url : '';
    data.success = data.success !== undefined ? data.success : function () {};
    data.error = data.error !== undefined ? data.error : function () {};
    data.headers = data.headers !== undefined ? data.headers : {};
    data.extraCallback = data.extraCallback !== undefined ? data.extraCallback : function () {}; // cross browser CORS support

    obj.xhr = this.createCORSRequest(data.type, data.url);

    obj.xhr.onload = function () {
      data.extraCallback(data, obj.xhr);
      data.success(obj.xhr.responseText, data, obj.xhr);
    };

    obj.xhr.onerror = function () {
      data.error(obj.xhr.status);
    };

    if (typeof XDomainRequest === 'undefined') {
      if (Object(_utils_sizeof__WEBPACK_IMPORTED_MODULE_1__["default"])(data.headers) > 0) {
        var item;

        for (item in data.headers) {
          obj.xhr.setRequestHeader(item, data.headers[item]);
        }
      } else if ((data.type === 'POST' || data.type === 'PUT') && Object(_utils_sizeof__WEBPACK_IMPORTED_MODULE_1__["default"])(data.headers) === 0) {
        obj.xhr.setRequestHeader('Content-Type', 'application/json');
      } else {
        obj.xhr.setRequestHeader('Content-Type', 'text/plain');
      }
    }

    obj.xhr.send(JSON.stringify(data.data));
    return obj.xhr;
  } catch (err) {
    console.log(err);
  }
};

/***/ }),

/***/ "./src/javascript/modules/CanvasAnimation.js":
/*!***************************************************!*\
  !*** ./src/javascript/modules/CanvasAnimation.js ***!
  \***************************************************/
/*! exports provided: CanvasAnimation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CanvasAnimation", function() { return CanvasAnimation; });
/* harmony import */ var _utils_mergeObjects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mergeObjects */ "./src/javascript/utils/mergeObjects.js");
/* harmony import */ var _utils_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/query */ "./src/javascript/utils/query.js");

 // taken reference from https://stackoverflow.com/questions/48234696/how-to-put-a-gif-with-canvas/48348567#answer-48348567

var GIF = function GIF() {
  var timerID; // timer handle for set time out usage

  var st; // holds the stream object when loading.

  var interlaceOffsets = [0, 4, 2, 1]; // used in de-interlacing.

  var interlaceSteps = [8, 8, 4, 2];
  var interlacedBufSize; // this holds a buffer to de interlace. Created on the first frame and when size changed

  var deinterlaceBuf;
  var pixelBufSize; // this holds a buffer for pixels. Created on the first frame and when size changed

  var pixelBuf;
  var GIF_FILE = {
    // gif file data headers
    GCExt: 0xF9,
    COMMENT: 0xFE,
    APPExt: 0xFF,
    UNKNOWN: 0x01,
    // not sure what this is but need to skip it in parser
    IMAGE: 0x2C,
    EOF: 59,
    // This is entered as decimal
    EXT: 0x21
  }; // simple buffered stream used to read from the file

  var Stream = function Stream(data) {
    this.data = new Uint8ClampedArray(data);
    this.pos = 0;
    var len = this.data.length;

    this.getString = function (count) {
      // returns a string from current pos of len count
      var s = '';

      while (count--) {
        s += String.fromCharCode(this.data[this.pos++]);
      }

      return s;
    };

    this.readSubBlocks = function () {
      // reads a set of blocks as a string
      var size;
      var count;
      var data = '';

      do {
        count = size = this.data[this.pos++];

        while (count--) {
          data += String.fromCharCode(this.data[this.pos++]);
        }
      } while (size !== 0 && this.pos < len);

      return data;
    };

    this.readSubBlocksB = function () {
      // reads a set of blocks as binary
      var size;
      var count;
      var data = [];

      do {
        count = size = this.data[this.pos++];

        while (count--) {
          data.push(this.data[this.pos++]);
        }
      } while (size !== 0 && this.pos < len);

      return data;
    };
  }; // LZW decoder uncompressed each frames pixels
  // this needs to be optimised.
  // minSize is the min dictionary as powers of two
  // size and data is the compressed pixels


  function lzwDecode(minSize, data) {
    var i, pixelPos, pos, clear, eod, size, done, dic, code, last, d, len;
    pos = pixelPos = 0;
    dic = [];
    clear = 1 << minSize;
    eod = clear + 1;
    size = minSize + 1;
    done = false;

    while (!done) {
      // JavaScript optimisers like a clear exit though I never use 'done' apart from fooling the optimiser
      last = code;
      code = 0;

      for (i = 0; i < size; i++) {
        if (data[pos >> 3] & 1 << (pos & 7)) {
          code |= 1 << i;
        }

        pos++;
      }

      if (code === clear) {
        // clear and reset the dictionary
        dic = [];
        size = minSize + 1;

        for (i = 0; i < clear; i++) {
          dic[i] = [i];
        }

        dic[clear] = [];
        dic[eod] = null;
      } else {
        if (code === eod) {
          done = true;
          return;
        }

        if (code >= dic.length) {
          dic.push(dic[last].concat(dic[last][0]));
        } else if (last !== clear) {
          dic.push(dic[last].concat(dic[code][0]));
        }

        d = dic[code];
        len = d.length;

        for (i = 0; i < len; i++) {
          pixelBuf[pixelPos++] = d[i];
        }

        if (dic.length === 1 << size && size < 12) {
          size++;
        }
      }
    }
  }

  function parseColourTable(count) {
    // get a colour table of length count  Each entry is 3 bytes, for RGB.
    var colours = [];

    for (var i = 0; i < count; i++) {
      colours.push([st.data[st.pos++], st.data[st.pos++], st.data[st.pos++]]);
    }

    return colours;
  }

  function parse() {
    // read the header. This is the starting point of the decode and async calls parseBlock
    var bitField;
    st.pos += 6;
    gif.width = st.data[st.pos++] + (st.data[st.pos++] << 8);
    gif.height = st.data[st.pos++] + (st.data[st.pos++] << 8);
    bitField = st.data[st.pos++];
    gif.colorRes = (bitField & 112) >> 4;
    gif.globalColourCount = 1 << (bitField & 7) + 1;
    gif.bgColourIndex = st.data[st.pos++];
    st.pos++; // ignoring pixel aspect ratio. if not 0, aspectRatio = (pixelAspectRatio + 15) / 64

    if (bitField & 128) {
      gif.globalColourTable = parseColourTable(gif.globalColourCount);
    } // global colour flag


    setTimeout(parseBlock, 0);
  }

  function parseAppExt() {
    // get application specific data. Netscape added iterations and terminator. Ignoring that
    st.pos += 1;

    if (st.getString(8) === 'NETSCAPE') {
      st.pos += 8;
    } else {
      // ignoring this data. iterations (word) and terminator (byte)
      st.pos += 3; // 3 bytes of string usually "2.0" when identifier is NETSCAPE

      st.readSubBlocks(); // unknown app extension
    }
  }

  function parseGCExt() {
    // get GC data
    var bitField;
    st.pos++;
    bitField = st.data[st.pos++];
    gif.disposalMethod = (bitField & 28) >> 2;
    gif.transparencyGiven = !!(bitField & 1); // ignoring bit two that is marked as  userInput???

    gif.delayTime = st.data[st.pos++] + (st.data[st.pos++] << 8);
    gif.transparencyIndex = st.data[st.pos++];
    st.pos++;
  }

  function parseImg() {
    // decodes image data to create the indexed pixel image
    var deinterlace;
    var frame;
    var bitField;

    deinterlace = function deinterlace(width) {
      // de interlace pixel data if needed
      var lines, fromLine, pass, toLine;
      lines = pixelBufSize / width;
      fromLine = 0;

      if (interlacedBufSize !== pixelBufSize) {
        // create the buffer if size changed or undefined.
        deinterlaceBuf = new Uint8Array(pixelBufSize);
        interlacedBufSize = pixelBufSize;
      }

      for (pass = 0; pass < 4; pass++) {
        for (toLine = interlaceOffsets[pass]; toLine < lines; toLine += interlaceSteps[pass]) {
          deinterlaceBuf.set(pixelBuf.subArray(fromLine, fromLine + width), toLine * width);
          fromLine += width;
        }
      }
    };

    frame = {};
    gif.frames.push(frame);
    frame.disposalMethod = gif.disposalMethod;
    frame.time = gif.length;
    frame.delay = gif.delayTime * 10;
    gif.length += frame.delay;

    if (gif.transparencyGiven) {
      frame.transparencyIndex = gif.transparencyIndex;
    } else {
      frame.transparencyIndex = undefined;
    }

    frame.leftPos = st.data[st.pos++] + (st.data[st.pos++] << 8);
    frame.topPos = st.data[st.pos++] + (st.data[st.pos++] << 8);
    frame.width = st.data[st.pos++] + (st.data[st.pos++] << 8);
    frame.height = st.data[st.pos++] + (st.data[st.pos++] << 8);
    bitField = st.data[st.pos++];
    frame.localColourTableFlag = !!(bitField & 128);

    if (frame.localColourTableFlag) {
      frame.localColourTable = parseColourTable(1 << (bitField & 7) + 1);
    }

    if (pixelBufSize !== frame.width * frame.height) {
      // create a pixel buffer if not yet created or if current frame size is different from previous
      pixelBuf = new Uint8Array(frame.width * frame.height);
      pixelBufSize = frame.width * frame.height;
    }

    lzwDecode(st.data[st.pos++], st.readSubBlocksB()); // decode the pixels

    if (bitField & 64) {
      // de interlace if needed
      frame.interlaced = true;
      deinterlace(frame.width);
    } else {
      frame.interlaced = false;
    }

    processFrame(frame); // convert to canvas image
  }

  function processFrame(frame) {
    // creates a RGBA canvas image from the indexed pixel data.
    var ct;
    var cData;
    var dat;
    var pixCount;
    var ind;
    var useT;
    var i;
    var pixel;
    var pDat;
    var col; // var frame;

    var ti;
    frame.image = document.createElement('canvas');
    frame.image.width = gif.width;
    frame.image.height = gif.height;
    frame.image.ctx = frame.image.getContext('2d');
    ct = frame.localColourTableFlag ? frame.localColourTable : gif.globalColourTable;

    if (gif.lastFrame === null) {
      gif.lastFrame = frame;
    }

    useT = gif.lastFrame.disposalMethod === 2 || gif.lastFrame.disposalMethod === 3;

    if (!useT) {
      frame.image.ctx.drawImage(gif.lastFrame.image, 0, 0, gif.width, gif.height);
    }

    cData = frame.image.ctx.getImageData(frame.leftPos, frame.topPos, frame.width, frame.height);
    ti = frame.transparencyIndex;
    dat = cData.data;

    if (frame.interlaced) {
      pDat = deinterlaceBuf;
    } else {
      pDat = pixelBuf;
    }

    pixCount = pDat.length;
    ind = 0;

    for (i = 0; i < pixCount; i++) {
      pixel = pDat[i];
      col = ct[pixel];

      if (ti !== pixel) {
        dat[ind++] = col[0];
        dat[ind++] = col[1];
        dat[ind++] = col[2];
        dat[ind++] = 255; // Opaque.
      } else if (useT) {
        dat[ind + 3] = 0; // Transparent.

        ind += 4;
      } else {
        ind += 4;
      }
    }

    frame.image.ctx.putImageData(cData, frame.leftPos, frame.topPos);
    gif.lastFrame = frame;

    if (!gif.waitTillDone && typeof gif.onload === 'function') {
      doOnloadEvent();
    } // if !waitTillDone the call onload now after first frame is loaded

  }

  ;

  function finnished() {
    // called when the load has completed
    gif.loading = false;
    gif.frameCount = gif.frames.length;
    st = undefined;
    gif.complete = true;
    gif.disposalMethod = undefined;
    gif.transparencyGiven = undefined;
    gif.delayTime = undefined;
    gif.transparencyIndex = undefined;
    gif.waitTillDone = undefined;
    pixelBuf = undefined; // dereference pixel buffer

    deinterlaceBuf = undefined; // dereference interlace buff (may or may not be used);

    pixelBufSize = undefined;
    deinterlaceBuf = undefined;
    gif.currentFrame = 0;

    if (gif.frames.length > 0) {
      gif.image = gif.frames[0].image;
    }

    doOnloadEvent();

    if (typeof gif.onloadall === 'function') {
      gif.onloadall.bind(gif)({
        type: 'loadall',
        path: [gif]
      });
    }

    if (gif.playOnLoad) {
      gif.play();
    }

    gif.finished(gif, gif.lastFrame); // gif.lastFrame = null;
  }

  function canceled() {
    // called if the load has been cancelled
    finnished();

    if (typeof gif.cancelCallback === 'function') {
      gif.cancelCallback.bind(gif)({
        type: 'canceled',
        path: [gif]
      });
    }
  }

  function parseExt() {
    // parse extended blocks
    var blockID = st.data[st.pos++];

    if (blockID === GIF_FILE.GCExt) {
      parseGCExt();
    } else if (blockID === GIF_FILE.COMMENT) {
      gif.comment += st.readSubBlocks();
    } else if (blockID === GIF_FILE.APPExt) {
      parseAppExt();
    } else {
      if (blockID === GIF_FILE.UNKNOWN) {
        st.pos += 13;
      } // skip unknow block


      st.readSubBlocks();
    }
  }

  function parseBlock() {
    // parsing the blocks
    if (gif.cancel !== undefined && gif.cancel === true) {
      canceled();
      return;
    }

    var blockId = st.data[st.pos++];

    if (blockId === GIF_FILE.IMAGE) {
      // image block
      parseImg();

      if (gif.firstFrameOnly) {
        finnished();
        return;
      }
    } else if (blockId === GIF_FILE.EOF) {
      finnished();
      return;
    } else {
      parseExt();
    }

    if (typeof gif.onprogress === 'function') {
      gif.onprogress({
        bytesRead: st.pos,
        totalBytes: st.data.length,
        frame: gif.frames.length
      });
    }

    setTimeout(parseBlock, 0); // parsing frame async so processes can get some time in.
  }

  function cancelLoad(callback) {
    // cancels the loading. This will cancel the load before the next frame is decoded
    if (gif.complete) {
      return false;
    }

    gif.cancelCallback = callback;
    gif.cancel = true;
    return true;
  }

  function error(type) {
    if (typeof gif.onerror === 'function') {
      gif.onerror.bind(this)({
        type: type,
        path: [this]
      });
    }

    gif.onload = gif.onerror = undefined;
    gif.loading = false;
  }

  function doOnloadEvent() {
    // fire onload event if set
    gif.currentFrame = 0;
    gif.nextFrameAt = gif.lastFrameAt = new Date().valueOf(); // just sets the time now

    if (typeof gif.onload === 'function') {
      gif.onload.bind(gif)({
        type: 'load',
        path: [gif]
      });
    }

    gif.onerror = gif.onload = undefined;
  }

  function dataLoaded(data) {
    // Data loaded create stream and parse
    st = new Stream(data);
    parse();
  }

  function loadGif(filename) {
    // starts the load
    var ajax = new XMLHttpRequest();
    ajax.responseType = 'arraybuffer';

    ajax.onload = function (e) {
      if (e.target.status === 404) {
        error('File not found');
      } else if (e.target.status >= 200 && e.target.status < 300) {
        dataLoaded(ajax.response);
      } else {
        error('Loading error : ' + e.target.status);
      }
    };

    ajax.open('GET', filename, true);
    ajax.send();

    ajax.onerror = function (e) {
      error('File error');
    };

    this.src = filename;
    this.loading = true;
  }

  function play() {
    // starts play if paused
    if (!gif.playing) {
      gif.paused = false;
      gif.playing = true;
      playing();
    }
  }

  function pause() {
    // stops play
    gif.paused = true;
    gif.playing = false;
    clearTimeout(timerID);
  }

  function togglePlay() {
    if (gif.paused || !gif.playing) {
      gif.play();
    } else {
      gif.pause();
    }
  }

  function seekFrame(frame) {
    // seeks to frame number.
    clearTimeout(timerID);
    gif.currentFrame = frame % gif.frames.length;

    if (gif.playing) {
      playing();
    } else {
      gif.image = gif.frames[gif.currentFrame].image;
    }
  }

  function seek(time) {
    // time in Seconds  // seek to frame that would be displayed at time
    clearTimeout(timerID);

    if (time < 0) {
      time = 0;
    }

    time *= 1000; // in ms

    time %= gif.length;
    var frame = 0;

    while (time > gif.frames[frame].time + gif.frames[frame].delay && frame < gif.frames.length) {
      frame += 1;
    }

    gif.currentFrame = frame;

    if (gif.playing) {
      playing();
    } else {
      gif.image = gif.frames[gif.currentFrame].image;
    }
  }

  function playing() {
    var delay;
    var frame;

    if (gif.playSpeed === 0) {
      gif.pause();
    } else {
      if (gif.playSpeed < 0) {
        gif.currentFrame -= 1;

        if (gif.currentFrame < 0) {
          gif.currentFrame = gif.frames.length - 1;
        }

        frame = gif.currentFrame;
        frame -= 1;

        if (frame < 0) {
          frame = gif.frames.length - 1;
        }

        delay = -gif.frames[frame].delay * 1 / gif.playSpeed;
      } else {
        gif.currentFrame += 1;
        gif.currentFrame %= gif.frames.length;
        delay = gif.frames[gif.currentFrame].delay * 1 / gif.playSpeed;
      }

      gif.image = gif.frames[gif.currentFrame].image;
      timerID = setTimeout(playing, delay);
    }
  }

  var gif = {
    // the gif image object
    onload: null,
    // fire on load. Use waitTillDone = true to have load fire at end or false to fire on first frame
    onerror: null,
    // fires on error
    onprogress: null,
    // fires a load progress event
    onloadall: null,
    // event fires when all frames have loaded and gif is ready
    paused: false,
    // true if paused
    playing: false,
    // true if playing
    waitTillDone: true,
    // If true onload will fire when all frames loaded, if false, onload will fire when first frame has loaded
    loading: false,
    // true if still loading
    firstFrameOnly: false,
    // if true only load the first frame
    width: null,
    // width in pixels
    height: null,
    // height in pixels
    frames: [],
    // array of frames
    comment: '',
    // comments if found in file. Note I remember that some gifs have comments per frame if so this will be all comment concatenated
    length: 0,
    // gif length in ms (1/1000 second)
    currentFrame: 0,
    // current frame.
    frameCount: 0,
    // number of frames
    playSpeed: 1,
    // play speed 1 normal, 2 twice 0.5 half, -1 reverse etc...
    lastFrame: null,
    // temp hold last frame loaded so you can display the gif as it loads
    image: null,
    // the current image at the currentFrame
    playOnLoad: true,
    // if true starts playback when loaded
    // functions
    load: loadGif,
    // call this to load a file
    cancel: cancelLoad,
    // call to stop loading
    play: play,
    // call to start play
    pause: pause,
    // call to pause
    seek: seek,
    // call to seek to time
    seekFrame: seekFrame,
    // call to seek to frame
    togglePlay: togglePlay,
    // call to toggle play and pause state
    finished: function finished(instance) {} // call on finish

  };
  return gif;
};

var CanvasAnimation = function CanvasAnimation(options) {
  var _this = this;

  this.settings = {
    container: null,
    containerWrapper: null,
    gifInstance: null,
    lbWidget: null,
    imageSrc: '',
    ctx: null,
    canvasWidth: null,
    canvasHeight: null,
    canvasWidthHalf: null,
    canvasHeightHalf: null,
    updateActive: true
  };

  if (typeof options !== 'undefined') {
    this.settings = Object(_utils_mergeObjects__WEBPACK_IMPORTED_MODULE_0__["default"])(this.settings, options);
  } // main update function


  function update(timer) {
    if (_this.settings.updateActive) {
      _this.settings.ctx.setTransform(1, 0, 0, 1, 0, 0); // reset transform


      if (_this.settings.canvasWidth !== innerWidth || _this.settings.canvasHeight !== innerHeight) {
        _this.settings.canvasWidthHalf = (_this.settings.canvasWidth = _this.settings.container.width = innerWidth) / 2;
        _this.settings.canvasHeightHalf = (_this.settings.canvasHeight = _this.settings.container.height = innerHeight) / 2;
      } else {
        _this.settings.ctx.clearRect(0, 0, _this.settings.canvasWidth, _this.settings.canvasHeight);
      }

      if (_this.settings.gifInstance !== null) {
        // If gif object defined
        if (!_this.settings.gifInstance.loading) {// if loaded
          // can do something here
        } else if (_this.settings.gifInstance.lastFrame !== null) {
          // Shows frames as they load
          _this.settings.ctx.drawImage(_this.settings.gifInstance.lastFrame.image, _this.settings.canvasWidthHalf - _this.settings.gifInstance.width / 2, _this.settings.canvasHeightHalf - _this.settings.gifInstance.height / 2);
        }
      }

      requestAnimationFrame(update);
    }
  } // reset transform


  this.clearCanvas = function () {
    _this.settings.ctx.setTransform(1, 0, 0, 1, 0, 0);
  };

  this.overlayLayout = function () {
    var wrapper = document.createElement('div');
    var canvas = document.createElement('canvas');
    wrapper.setAttribute('class', 'cl-widget-canvas-overlay-wrapper');
    canvas.setAttribute('class', 'cl-widget-canvas');
    wrapper.appendChild(canvas);
    return wrapper;
  };

  this.init = function () {
    if (this.settings.container === null) {
      this.settings.containerWrapper = this.settings.lbWidget.settings.bindContainer.appendChild(_this.overlayLayout());
      this.settings.container = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(this.settings.containerWrapper, '.cl-widget-canvas');
    }

    if (this.settings.container !== null && this.settings.imageSrc.length > 0) {
      _this.settings.containerWrapper.style.display = 'block'; // show container

      _this.settings.containerWrapper.style.opacity = 1; // show container

      _this.settings.ctx = _this.settings.container.getContext('2d');
      _this.settings.updateActive = true; // Can not load gif cross domain unless it has CORS header
      // const gifURL = "https://gateway.competitionlabs.com/alex/assets/Olp_TXUBp93_Cg_BQGsD/skull-animaiton.gif";

      var gifURL = _this.settings.imageSrc; // timeout just waits till script has been parsed and executed
      // then starts loading a gif

      setTimeout(function () {
        _this.settings.gifInstance = GIF(); // creates a new gif

        _this.settings.gifInstance.onerror = function (e) {
          console.log('asset loading error ' + e.type);
        };

        _this.settings.gifInstance.load(gifURL);

        _this.settings.gifInstance.finished = function (instance, lastFrame) {
          _this.settings.updateActive = false; // draw last frame
          // _this.settings.ctx.drawImage(lastFrame.image, 0, 0);
          // _this.settings.ctx.fillStyle = 'black';
          // _this.settings.ctx.fillText('GIF loading frame 22', 10, 20);

          setTimeout(function () {
            _this.settings.containerWrapper.style.opacity = 0;
            setTimeout(function () {
              _this.settings.containerWrapper.style.display = 'none';
            }, 300);
          }, 2000);
        };
      }, 0);
      _this.settings.canvasWidth = _this.settings.container.width;
      _this.settings.canvasHeight = _this.settings.container.height;
      _this.settings.canvasWidthHalf = _this.settings.canvasWidth / 2; // center

      _this.settings.canvasHeightHalf = _this.settings.canvasHeight / 2; // trigger ACH
      // _this.settings.lbWidget.settings.canvasAnimation.settings.imageSrc = 'https://gateway.competitionlabs.com/alex/assets/Olp_TXUBp93_Cg_BQGsD/skull-animaiton.gif';
      // _this.settings.lbWidget.settings.canvasAnimation.init();

      requestAnimationFrame(update);
    }
  };
};

/***/ }),

/***/ "./src/javascript/modules/LbWidget.js":
/*!********************************************!*\
  !*** ./src/javascript/modules/LbWidget.js ***!
  \********************************************/
/*! exports provided: LbWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LbWidget", function() { return LbWidget; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var identicon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! identicon.js */ "./node_modules/identicon.js/identicon.js");
/* harmony import */ var identicon_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(identicon_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jssha__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jssha */ "./node_modules/jssha/dist/sha.mjs");
/* harmony import */ var css_vars_ponyfill__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! css-vars-ponyfill */ "./node_modules/css-vars-ponyfill/dist/css-vars-ponyfill.esm.js");
/* harmony import */ var _utils_mergeObjects__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/mergeObjects */ "./src/javascript/utils/mergeObjects.js");
/* harmony import */ var _utils_mapObject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/mapObject */ "./src/javascript/utils/mapObject.js");
/* harmony import */ var _utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/formatNumberLeadingZeros */ "./src/javascript/utils/formatNumberLeadingZeros.js");
/* harmony import */ var _utils_stringContains__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/stringContains */ "./src/javascript/utils/stringContains.js");
/* harmony import */ var _utils_objectIterator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/objectIterator */ "./src/javascript/utils/objectIterator.js");
/* harmony import */ var _utils_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/query */ "./src/javascript/utils/query.js");
/* harmony import */ var _utils_hasClass__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/hasClass */ "./src/javascript/utils/hasClass.js");
/* harmony import */ var _utils_addClass__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/addClass */ "./src/javascript/utils/addClass.js");
/* harmony import */ var _utils_removeClass__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/removeClass */ "./src/javascript/utils/removeClass.js");
/* harmony import */ var _utils_closest__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/closest */ "./src/javascript/utils/closest.js");
/* harmony import */ var _utils_isMobileTablet__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utils/isMobileTablet */ "./src/javascript/utils/isMobileTablet.js");
/* harmony import */ var _utils_camelToKebabCase__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utils/camelToKebabCase */ "./src/javascript/utils/camelToKebabCase.js");
/* harmony import */ var _cLabs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./cLabs */ "./src/javascript/modules/cLabs.js");
/* harmony import */ var _Ajax__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Ajax */ "./src/javascript/modules/Ajax.js");
/* harmony import */ var _Notifications__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Notifications */ "./src/javascript/modules/Notifications.js");
/* harmony import */ var _MiniScoreBoard__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./MiniScoreBoard */ "./src/javascript/modules/MiniScoreBoard.js");
/* harmony import */ var _MainWidget__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./MainWidget */ "./src/javascript/modules/MainWidget.js");
/* harmony import */ var _CanvasAnimation__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./CanvasAnimation */ "./src/javascript/modules/CanvasAnimation.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
























var translation = __webpack_require__(/*! ../../i18n/translation_en.json */ "./src/i18n/translation_en.json");
/**
 * Main leaderboard widget, controls all actions and initiation logic.
 * Main responsibility is to control the interactions between different widgets/plugins and user even actions
 * @param options {Object} setting parameters used to overwrite the default settings
 * @constructor
 */


var LbWidget = function LbWidget(options) {
  /**
   * LbWidget settings
   * @memberOf LbWidget
   * @constant
   * @type { Object }
   */
  this.settings = {
    debug: true,
    bindContainer: document.body,
    autoStart: true,
    sseMessaging: null,
    notifications: null,
    miniScoreBoard: null,
    canvasAnimation: null,
    enableNotifications: true,
    mainWidget: null,
    globalAjax: new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax(),
    checkAjax: new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax(),
    language: "en",
    currency: '',
    spaceName: '',
    memberId: '',
    groups: '',
    gameId: '',
    enforceGameLookup: false,
    // tournament lookup will include/exclude game only requests
    apiKey: '',
    member: null,
    layout: {
      enableMiniScoreBoardDragging: true,
      // enable/disable dragging with mouse/touch
      miniScoreBoardPosition: {
        // default position of mini scoreboard left/right/bottom/top (Example: top: '20px')
        left: null,
        right: null,
        top: null,
        bottom: null
      },
      allowOrientationChange: true,
      // allows the switch between horizontal/vertical orientation
      miniScoreBoardOrientation: 'horizontal' // vertical/horizontal => default is horizontal

    },
    competition: {
      activeCompetitionId: null,
      activeContestId: null,
      activeCompetition: null,
      activeContest: null,
      refreshInterval: null,
      refreshIntervalMillis: 10000,
      allowNegativeCountdown: false,
      // false: will mark competition as finishing, true: will continue to countdown into negative
      includeMetadata: false,
      extractImageHeader: true // will extract the first found image inside the body tag and move it on top

    },
    achievements: {
      limit: 100,
      totalCount: 0,
      list: [],
      availableRewards: [],
      rewards: [],
      expiredRewards: [],
      extractImageHeader: true // will extract the first found image inside the body tag and move it on top

    },
    rewards: {
      availableRewards: [],
      rewards: [],
      expiredRewards: [],
      rewardFormatter: function rewardFormatter(reward) {
        var defaultRewardValue = reward.value;

        if (typeof reward.unitOfMeasure !== 'undefined' && typeof reward.unitOfMeasure.symbol !== 'undefined' && reward.unitOfMeasure.symbol !== null) {
          defaultRewardValue = reward.unitOfMeasure.symbol + reward.value;
        }

        return defaultRewardValue;
      }
    },
    messages: {
      messages: []
    },
    tournaments: {
      activeCompetitionId: null,
      readyCompetitions: [],
      // statusCode 3
      activeCompetitions: [],
      // statusCode 5
      finishedCompetitions: [] // statusCode 7

    },
    leaderboard: {
      fullLeaderboardSize: 100,
      refreshIntervalMillis: 3000,
      refreshInterval: null,
      refreshLbDataInterval: null,
      leaderboardData: [],
      loadLeaderboardHistory: {},
      layoutSettings: {
        // tournamentList: true,
        imageBanner: true,
        // title: true,
        titleLinkToDetailsPage: false // if set to false will make the description available under title

      },
      miniScoreBoard: {
        enableRankings: true,
        // enabled rankings before after rankings of members [-2 YOU +2]
        rankingsCount: 2
      },
      pointsFormatter: function pointsFormatter(points) {
        return points;
      }
    },
    navigation: {
      // primary navigation items, if all are disabled init will fail, if only 1 is enabled items will be hidden
      tournaments: {
        enable: true,
        navigationClass: 'cl-main-widget-navigation-lb',
        navigationClassIcon: 'cl-main-widget-navigation-lb-icon',
        containerClass: 'cl-main-widget-lb',
        order: 1
      },
      achievements: {
        enable: true,
        navigationClass: 'cl-main-widget-navigation-ach',
        navigationClassIcon: 'cl-main-widget-navigation-ach-icon',
        containerClass: 'cl-main-widget-section-ach',
        order: 2
      },
      rewards: {
        enable: true,
        navigationClass: 'cl-main-widget-navigation-rewards',
        navigationClassIcon: 'cl-main-widget-navigation-rewards-icon',
        containerClass: 'cl-main-widget-section-reward',
        order: 3
      },
      inbox: {
        enable: true,
        navigationClass: 'cl-main-widget-navigation-inbox',
        navigationClassIcon: 'cl-main-widget-navigation-inbox-icon',
        containerClass: 'cl-main-widget-section-inbox',
        order: 4
      }
    },
    uri: {
      gatewayDomain: _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].api.url,
      members: '/api/v1/:space/members/reference/:id',
      assets: '/assets/attachments/:attachmentId',
      memberSSE: '/api/v1/:space/sse/reference/:id',
      memberSSEHeartbeat: '/api/v1/:space/sse/reference/:id/heartbeat',
      competitions: '/api/v1/:space/competitions',
      competitionById: '/api/v1/:space/competitions/:id',
      contestLeaderboard: '/api/v1/:space/contests/:id/leaderboard',
      achievement: '/api/v1/:space/achievements/:id',
      achievements: '/api/v1/:space/achievements/members/reference/:id',
      // achievements: "/api/v1/:space/achievements",
      achievementsProgression: '/api/v1/:space/members/reference/:id/achievements',
      achievementsIssued: '/api/v1/:space/members/reference/:id/achievements/issued',
      messages: '/api/v1/:space/members/reference/:id/messages',
      messageById: '/api/v1/:space/members/reference/:id/messages/:messageId',
      memberReward: '/api/v1/:space/members/reference/:id/award/:awardId',
      memberRewardClaim: '/api/v1/:space/members/reference/:id/award/:awardId/award',
      memberCompetitions: '/api/v1/:space/members/reference/:id/competitions',
      memberCompetitionById: '/api/v1/:space/members/reference/:id/competition/:competitionId',
      memberCompetitionOptIn: '/api/v1/:space/members/reference/:id/competition/:competitionId/optin',
      memberCompetitionOptInCheck: '/api/v1/:space/members/reference/:id/competition/:competitionId/optin-check',
      translationPath: '' // ../i18n/translation_:language.json

    },
    loadTranslations: true,
    showCopyright: true,
    translation: translation,
    resources: [],
    // Example: ["http://example.com/style.css", "http://example.com/my-fonts.css"]
    styles: null,
    // Example: {widgetBgColor: '#1f294a', widgetIcon: 'url(../../../examples/images/logo-icon-3.png)'}
    partialFunctions: {
      startupCallback: function startupCallback(instance) {},
      rewardFormatter: function rewardFormatter(reward) {
        var defaultRewardValue = reward.value;

        if (typeof reward.unitOfMeasure !== 'undefined' && typeof reward.unitOfMeasure.symbol !== 'undefined' && reward.unitOfMeasure.symbol !== null) {
          defaultRewardValue = reward.unitOfMeasure.symbol + reward.value;
        }

        return defaultRewardValue;
      },
      competitionDataAvailableResponseParser: function competitionDataAvailableResponseParser(competitionData, callback) {
        callback(competitionData);
      },
      competitionDataFinishedResponseParser: function competitionDataFinishedResponseParser(competitionData, callback) {
        callback(competitionData);
      },
      activeCompetitionDataResponseParser: function activeCompetitionDataResponseParser(competitionData, callback) {
        callback(competitionData);
      },
      activeContestDataResponseParser: function activeContestDataResponseParser(contestData, callback) {
        callback(contestData);
      },
      leaderboardDataResponseParser: function leaderboardDataResponseParser(leaderboardData, callback) {
        callback(leaderboardData);
      },
      achievementDataForAllResponseParser: function achievementDataForAllResponseParser(achievementData, callback) {
        callback(achievementData);
      },
      achievementDataForMemberGroupResponseParser: function achievementDataForMemberGroupResponseParser(achievementData, callback) {
        callback(achievementData);
      },
      achievementDataResponseParser: function achievementDataResponseParser(achievementData, callback) {
        callback(achievementData);
      },
      rewardDataResponseParser: function rewardDataResponseParser(rewardData, callback) {
        callback(rewardData);
      },
      messageDataResponseParser: function messageDataResponseParser(messageData, callback) {
        callback(messageData);
      },
      claimRewardDataResponseParser: function claimRewardDataResponseParser(claimRewardData, callback) {
        callback(claimRewardData);
      },
      issuedAchievementsDataResponseParser: function issuedAchievementsDataResponseParser(issuedAchievementsData, callback) {
        callback(issuedAchievementsData);
      },
      memberAchievementsProgressionDataResponseParser: function memberAchievementsProgressionDataResponseParser(memberAchievementsProgressionData, callback) {
        callback(memberAchievementsProgressionData);
      },
      claimedRewardsDataResponseParser: function claimedRewardsDataResponseParser(claimedRewardsData, callback) {
        callback(claimedRewardsData);
      },
      notClaimedRewardsDataResponseParser: function notClaimedRewardsDataResponseParser(notClaimedRewardsData, callback) {
        callback(notClaimedRewardsData);
      },
      expiredRewardsDataResponseParser: function expiredRewardsDataResponseParser(expiredRewardsData, callback) {
        callback(expiredRewardsData);
      },
      availableMessagesDataResponseParser: function availableMessagesDataResponseParser(availableMessagesData, callback) {
        callback(availableMessagesData);
      }
    }
  };

  if (typeof options !== 'undefined') {
    this.settings = Object(_utils_mergeObjects__WEBPACK_IMPORTED_MODULE_4__["default"])(this.settings, options);
  } // alias references to modules


  this.CanvasAnimation = _CanvasAnimation__WEBPACK_IMPORTED_MODULE_21__["CanvasAnimation"];
  this.Notifications = _Notifications__WEBPACK_IMPORTED_MODULE_18__["Notifications"];
  this.MiniScoreBoard = _MiniScoreBoard__WEBPACK_IMPORTED_MODULE_19__["MiniScoreBoard"];
  this.MainWidget = _MainWidget__WEBPACK_IMPORTED_MODULE_20__["MainWidget"];

  this.log = function (message) {
    if (this.settings.debug) {
      console.error(message);
    }
  };
  /**
   * Format duration of Date Time from moment() object
   * @memberOf LbWidget
   * @param duration {moment}
   * @returns {string}
   */


  this.formatDateTime = function (duration) {
    var _this = this;

    var largeResult = [];
    var result = [];
    if (duration.days()) largeResult.push(duration.days() + '<span class="time-ind">' + _this.settings.translation.time.days + '</span>');

    if (duration.hours() || duration.days() > 0) {
      result.push(Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_6__["default"])(duration.hours(), 2) + '<span class="time-ind">' + _this.settings.translation.time.hours + '</span>');
    } else result.push('00<span class="time-ind">' + _this.settings.translation.time.hours + '</span>');

    if (duration.minutes() || duration.hours() > 0 || duration.days() > 0) {
      result.push(Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_6__["default"])(duration.minutes(), 2) + (duration.days() > 0 ? '<span class="time-ind">' + _this.settings.translation.time.minutes + '</span>' : '<span class="time-ind">' + _this.settings.translation.time.minutesShortHand + '</span>'));
    } else result.push('00' + (duration.days() > 0 ? '<span class="time-ind">' + _this.settings.translation.time.minutes + '</span>' : '<span class="time-ind">' + _this.settings.translation.time.minutesShortHand + '</span>')); // if (duration.seconds() && duration.days() === 0){ result.push( formatNumberLeadingZeros(duration.seconds(), 2) + '<span class="time-ind">s</span>' ) }else if(duration.days() === 0){result.push( '00<span class="time-ind">s</span>' )};


    result.push(Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_6__["default"])(duration.seconds(), 2) + '<span class="time-ind">' + _this.settings.translation.time.seconds + '</span>');
    return largeResult.length > 0 ? largeResult.join(' ') + ' ' + result.join(':') : result.join(':');
  };

  this.populateIdenticonBase64Image = function (str) {
    if (str.length > 0) {
      /* eslint new-cap: "off" */
      var shaObj = new jssha__WEBPACK_IMPORTED_MODULE_2__["default"]('SHA-512', 'TEXT');
      shaObj.update(str);
      var hash = shaObj.getHash('HEX', 1);
      /**
       * for IE 11 comment out the lines above and use this code with the jsSHA library inside utils
       * import jsSHA from '../utils/jsSHA';
      var shaObj = new jsSHA(str, 'TEXT');
      var hash = shaObj.getHash('SHA-512', 'HEX', 1);
      */

      var data = new identicon_js__WEBPACK_IMPORTED_MODULE_1___default.a(hash, {
        background: [255, 255, 255, 255],
        // rgba white
        margin: 0.1,
        // 20% margin
        size: 22,
        // 420px square
        format: 'svg' // use SVG instead of PNG

      }).toString();
      var icon = 'data:image/svg+xml;base64,' + data;
      return icon;
    } else {
      return '';
    }
  };
  /**
   * get a list of available competition filtered by provided global criteria
   * @param callback {Function}
   */


  var competitionCheckAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.checkForAvailableCompetitions = function (callback, ajaxInstance) {
    var _this = this;

    var url = _this.settings.memberId.length === 0 ? _this.settings.uri.competitions.replace(':space', _this.settings.spaceName) : _this.settings.uri.memberCompetitions.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId);
    var filters = ['statusCode>==3', 'statusCode<==5', '_sortByFields=options.scheduledDates.end:desc', '_lang=' + _this.settings.language];
    var ajaxInstanceToUse = typeof ajaxInstance !== 'undefined' && ajaxInstance !== null ? ajaxInstance : competitionCheckAjax;

    if (typeof _this.settings.currency === 'string' && _this.settings.currency.length > 0) {
      filters.push('_uomKey=' + _this.settings.currency);
    }

    if (_this.settings.gameId.length > 0 && _this.settings.enforceGameLookup) {
      filters.push('options.products.productRefId=' + _this.settings.gameId);
    }

    if (_this.settings.groups.length > 0 && _this.settings.memberId.length === 0) {
      filters.push('options.limitEntrantsTo=' + _this.settings.groups);
    }

    ajaxInstanceToUse.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?' + filters.join('&'),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);

          _this.settings.partialFunctions.competitionDataAvailableResponseParser(json.data, function (compData) {
            _this.settings.tournaments.readyCompetitions = [];
            _this.settings.tournaments.activeCompetitions = [];
            Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(compData, function (comp) {
              if (comp.statusCode === 3) {
                _this.settings.tournaments.readyCompetitions.push(comp);
              } else if (comp.statusCode === 5) {
                _this.settings.tournaments.activeCompetitions.push(comp);
              }
            });

            _this.checkForFinishedCompetitions(callback, ajaxInstance);
          });
        } else {
          _this.log('failed to checkForActiveCompetitions ' + response);
        }
      }
    });
  };
  /**
   * get a list of finished competition filtered by provided global criteria
   * @param callback {Function}
   */


  var competitionFinishedCheckAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.checkForFinishedCompetitions = function (callback, ajaxInstance) {
    var _this = this;

    var url = _this.settings.memberId.length === 0 ? _this.settings.uri.competitions.replace(':space', _this.settings.spaceName) : _this.settings.uri.memberCompetitions.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId);
    var filters = ['statusCode=7', '_limit=10', '_sortByFields=options.scheduledDates.end:desc', '_lang=' + _this.settings.language];
    var ajaxInstanceToUse = typeof ajaxInstance !== 'undefined' && ajaxInstance !== null ? ajaxInstance : competitionFinishedCheckAjax;

    if (typeof _this.settings.currency === 'string' && _this.settings.currency.length > 0) {
      filters.push('_uomKey=' + _this.settings.currency);
    }

    if (_this.settings.gameId.length > 0 && _this.settings.enforceGameLookup) {
      filters.push('options.products.productRefId=' + _this.settings.gameId);
    }

    if (_this.settings.groups.length > 0 && _this.settings.memberId.length === 0) {
      filters.push('options.limitEntrantsTo=' + _this.settings.groups);
    }

    ajaxInstanceToUse.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?' + filters.join('&'),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);

          _this.settings.partialFunctions.competitionDataFinishedResponseParser(json.data, function (compData) {
            _this.settings.tournaments.finishedCompetitions = [];
            Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(compData, function (comp) {
              if (comp.statusCode === 7) {
                _this.settings.tournaments.finishedCompetitions.push(comp);
              }
            });

            if (typeof callback === 'function') {
              callback();
            }
          });
        } else {
          _this.log('failed to checkForActiveCompetitions ' + response);
        }
      }
    });
  };

  this.prepareActiveCompetition = function (callback) {
    var _this = this;

    var activeCompetition = null;
    var activeCompetitionId = null;

    if (_this.settings.tournaments.activeCompetitionId !== null) {
      Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.tournaments.activeCompetitions, function (comp) {
        if (comp.id === _this.settings.tournaments.activeCompetitionId) {
          activeCompetition = comp;
        }
      });
      Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.tournaments.readyCompetitions, function (comp) {
        if (comp.id === _this.settings.tournaments.activeCompetitionId) {
          activeCompetition = comp;
        }
      });
      Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.tournaments.finishedCompetitions, function (comp) {
        if (comp.id === _this.settings.tournaments.activeCompetitionId) {
          activeCompetition = comp;
        }
      });

      if (activeCompetition !== null) {
        activeCompetitionId = _this.settings.tournaments.activeCompetitionId;
      } else {
        _this.settings.tournaments.activeCompetitionId = null;
      }
    }

    if (activeCompetition === null && _this.settings.tournaments.activeCompetitions.length > 0) {
      activeCompetition = _this.settings.tournaments.activeCompetitions[0];
      activeCompetitionId = activeCompetition.id;
    } else if (activeCompetition === null && _this.settings.tournaments.readyCompetitions.length > 0) {
      activeCompetition = _this.settings.tournaments.readyCompetitions[0];
      activeCompetitionId = activeCompetition.id;
    }

    if (activeCompetitionId === null) {
      // no active or ready competitions found
      _this.deactivateCompetitionsAndLeaderboards();
    } else {
      if (_this.settings.competition.activeCompetitionId !== activeCompetitionId && activeCompetitionId !== null) {
        _this.settings.competition.activeCompetition = activeCompetition;
        _this.settings.competition.activeCompetitionId = activeCompetitionId;
      }

      if (activeCompetitionId !== null) {
        _this.loadActiveCompetition(function (json) {
          _this.setActiveCompetition(json, callback);
        });
      } else if (typeof callback === 'function') {
        callback();
      }
    }
  };

  this.loadActiveCompetition = function (callback) {
    var _this = this;

    var url = _this.settings.memberId.length === 0 ? _this.settings.uri.competitionById.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.competition.activeCompetitionId) : _this.settings.uri.memberCompetitionById.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId).replace(':competitionId', _this.settings.competition.activeCompetitionId);
    var filters = ['_include=strategy' + (_this.settings.competition.includeMetadata ? ',metadata' : ''), '_lang=' + _this.settings.language];

    if (typeof _this.settings.currency === 'string' && _this.settings.currency.length > 0) {
      filters.push('_uomKey=' + _this.settings.currency);
    }

    _this.settings.globalAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?' + filters.join('&'),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);

          _this.settings.partialFunctions.activeCompetitionDataResponseParser(json, function (compData) {
            if (typeof callback === 'function') {
              callback(compData);
            }
          });
        } else {
          _this.log('failed to loadActiveCompetition ' + response);
        }
      }
    });
  };

  this.setActiveCompetition = function (json, callback) {
    var _this = this;

    _this.settings.competition.activeCompetition = json.data;
    _this.settings.competition.activeContest = null;
    _this.settings.competition.activeContestId = null;

    if (typeof json.data.contests !== 'undefined' && json.data.contests.length > 0) {
      _this.settings.partialFunctions.activeContestDataResponseParser(json.data.contests, function (contests) {
        Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(contests, function (contest) {
          if (contest.statusCode < 7 && _this.settings.competition.activeContest === null) {
            _this.settings.competition.activeContest = contest;
            _this.settings.competition.activeContestId = contest.id;

            if (typeof _this.settings.competition.activeContest.rewards === 'undefined') {
              _this.settings.competition.activeContest.rewards = [];
            }

            var rewards = [];
            Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.competition.activeContest.rewards, function (reward) {
              if (typeof reward.rewardRank === 'string') {
                var rankParts = reward.rewardRank.split(',');
                var rewardRank = [];
                Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(rankParts, function (part) {
                  if (Object(_utils_stringContains__WEBPACK_IMPORTED_MODULE_7__["default"])(part, '-')) {
                    var rankRange = part.split('-');
                    var rageStart = parseInt(rankRange[0]);
                    var rangeEnd = parseInt(rankRange[1]);

                    for (var i = rageStart; i <= rangeEnd; i++) {
                      rewardRank.push(i);
                    }
                  } else {
                    rewardRank.push(parseInt(part));
                  }
                });
                reward.rewardRank = rewardRank;
              }

              rewards.push(reward);
            });
            _this.settings.competition.activeContest.rewards = rewards;
          }
        });
      });
    }

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.getLeaderboardData = function (count, callback) {
    if (this.settings.competition.activeContestId !== null) {
      var _this = this;

      var url = _this.settings.uri.contestLeaderboard.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.competition.activeContestId);

      var filters = ['_limit=' + count];

      if (_this.settings.leaderboard.miniScoreBoard.enableRankings) {
        filters.push('rankings=' + _this.settings.leaderboard.miniScoreBoard.rankingsCount);
      }

      if (typeof _this.settings.memberId === 'string' && _this.settings.memberId.length > 0) {
        filters.push('memberId=' + _this.settings.memberId);
      }

      _this.settings.globalAjax.abort().getData({
        type: 'GET',
        url: _this.settings.uri.gatewayDomain + url + '?' + filters.join('&'),
        headers: {
          'X-API-KEY': _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var json = JSON.parse(response); // if(
            //   typeof _this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] === "undefined"
            //   ||
            //   (
            //     typeof _this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] !== "undefined"
            //     &&
            //     _this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] !== data
            //   )
            // ) {
            //   _this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] = {
            //     changed: true,
            //     data: JSON.stringify(json.data)
            //   };
            // }

            _this.settings.partialFunctions.leaderboardDataResponseParser(json.data, function (lbData) {
              _this.settings.leaderboard.leaderboardData = lbData;
              callback(lbData);
            });
          } else {
            _this.log('failed to getLeaderboardData ' + response);
          }
        }
      });
    } else {
      callback();
    }
  };

  this.updateLeaderboardNavigationCounts = function () {
    var _this = this;

    if (_this.settings.mainWidget.settings.navigation !== null) {
      var menuItemCount = Object(_utils_query__WEBPACK_IMPORTED_MODULE_9__["default"])(_this.settings.mainWidget.settings.navigation, '.' + _this.settings.navigation.tournaments.navigationClass + ' .cl-main-navigation-item-count');
      menuItemCount.innerHTML = _this.settings.tournaments.activeCompetitions.length;
    }
  };

  this.updateAchievementNavigationCounts = function () {
    var _this = this;

    if (_this.settings.mainWidget.settings.navigation !== null) {
      var menuItemCount = Object(_utils_query__WEBPACK_IMPORTED_MODULE_9__["default"])(_this.settings.mainWidget.settings.navigation, '.' + _this.settings.navigation.achievements.navigationClass + ' .cl-main-navigation-item-count');
      menuItemCount.innerHTML = _this.settings.achievements.totalCount;
    }
  };

  this.updateRewardsNavigationCounts = function () {
    var _this = this;

    if (_this.settings.mainWidget.settings.navigation !== null) {
      var menuItemCount = Object(_utils_query__WEBPACK_IMPORTED_MODULE_9__["default"])(_this.settings.mainWidget.settings.navigation, '.' + _this.settings.navigation.rewards.navigationClass + ' .cl-main-navigation-item-count');
      menuItemCount.innerHTML = _this.settings.rewards.availableRewards.length;
    }
  };

  this.updateMessagesNavigationCounts = function () {
    var _this = this;

    if (_this.settings.mainWidget.settings.navigation !== null) {
      var menuItemCount = Object(_utils_query__WEBPACK_IMPORTED_MODULE_9__["default"])(_this.settings.mainWidget.settings.navigation, '.' + _this.settings.navigation.inbox.navigationClass + ' .cl-main-navigation-item-count');
      menuItemCount.innerHTML = _this.settings.messages.messages.length;
    }
  };

  var checkAchievementsAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.checkForAvailableAchievements = function (callback) {
    var _this = this;

    var url = _this.settings.uri.achievements.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId); // var date = new Date();
    // var createdDateFilter = date.toISOString();


    var filters = ['_limit=' + _this.settings.achievements.limit, '_include=rewards', // 'scheduledEnd>==' + createdDateFilter,
    '_lang=' + _this.settings.language];
    var withGroups = false;

    if (typeof _this.settings.currency === 'string' && _this.settings.currency.length > 0) {
      filters.push('_uomKey=' + _this.settings.currency);
    }

    if (typeof _this.settings.member.groups !== 'undefined' && _this.settings.member.groups.length > 0) {
      withGroups = true;
      filters.push('memberGroups=' + _this.settings.member.groups.join(','));
    } // '&scheduledEnd>==' + createdDateFilter +


    checkAchievementsAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?_lang=' + _this.settings.language + '&_uomKey=' + _this.settings.currency,
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var jsonData = JSON.parse(response);

          _this.settings.partialFunctions.achievementDataForAllResponseParser(jsonData, function (jsonForAll) {
            _this.settings.achievements.totalCount = parseInt(jsonForAll.meta.totalRecordsFound);
            _this.settings.achievements.list = [];
            Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(jsonForAll.data, function (ach) {
              _this.settings.achievements.list.push(ach);
            });

            if (withGroups) {
              checkAchievementsAjax.abort().getData({
                type: 'GET',
                url: _this.settings.uri.gatewayDomain + url + '?' + filters.join('&'),
                headers: {
                  'X-API-KEY': _this.settings.apiKey
                },
                success: function success(response, dataObj, xhr) {
                  if (xhr.status === 200) {
                    var json = JSON.parse(response);

                    _this.settings.partialFunctions.achievementDataForMemberGroupResponseParser(json, function (achievmentMemberGroupData) {
                      Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(achievmentMemberGroupData.data, function (ach) {
                        var found = false;
                        Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.achievements.list, function (achCheck) {
                          if (achCheck.id === ach.id) {
                            found = true;
                          }
                        });

                        if (!found) {
                          _this.settings.achievements.list.push(ach);
                        }
                      });
                      _this.settings.achievements.totalCount = _this.settings.achievements.list.length;
                      if (typeof callback === 'function') callback(_this.settings.achievements.list);
                    });
                  } else {
                    _this.log('failed to checkForAvailableAchievements ' + response);
                  }
                }
              });
            } else {
              if (typeof callback === 'function') callback(jsonForAll.data);
            }
          });
        } else {
          _this.log('failed to checkForAvailableAchievements ' + response);
        }
      }
    });
  };

  var getAchievementsAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.getAchievement = function (achievementId, callback) {
    var _this = this;

    getAchievementsAjax.abort().getData({
      url: _this.settings.uri.gatewayDomain + _this.settings.uri.achievement.replace(':space', _this.settings.spaceName).replace(':id', achievementId) + '?_lang=' + _this.settings.language + '&_uomKey=' + _this.settings.currency,
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      type: 'GET',
      success: function success(response, dataObj, xhr) {
        var json = null;

        if (xhr.status === 200) {
          try {
            json = JSON.parse(response);
          } catch (e) {}
        }

        if (typeof callback === 'function') {
          _this.settings.partialFunctions.achievementDataResponseParser(json, function (achievementData) {
            callback(achievementData);
          });
        }
      },
      error: function error() {
        if (typeof callback === 'function') {
          callback(null);
        }
      }
    });
  };

  var getRewardAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.getReward = function (rewardId, callback) {
    var _this = this;

    getRewardAjax.abort().getData({
      url: _this.settings.uri.gatewayDomain + _this.settings.uri.memberReward.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId).replace(':awardId', rewardId),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      type: 'GET',
      success: function success(response, dataObj, xhr) {
        var json = null;

        if (xhr.status === 200) {
          try {
            json = JSON.parse(response);
          } catch (e) {}
        }

        if (typeof callback === 'function') {
          _this.settings.partialFunctions.rewardDataResponseParser(json, function (rewardData) {
            callback(rewardData);
          });
        }
      },
      error: function error() {
        if (typeof callback === 'function') {
          callback(null);
        }
      }
    });
  };

  var getMessageAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.getMessage = function (messageId, callback) {
    var _this = this;

    getMessageAjax.abort().getData({
      url: _this.settings.uri.gatewayDomain + _this.settings.uri.messageById.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId).replace(':messageId', messageId),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      type: 'GET',
      success: function success(response, dataObj, xhr) {
        var json = null;

        if (xhr.status === 200) {
          try {
            json = JSON.parse(response);
          } catch (e) {}
        }

        if (typeof callback === 'function') {
          _this.settings.partialFunctions.messageDataResponseParser(json, function (messageData) {
            callback(messageData);
          });
        }
      },
      error: function error() {
        if (typeof callback === 'function') {
          callback(null);
        }
      }
    });
  };

  var claimRewardAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.claimReward = function (rewardId, callback) {
    var _this = this;

    claimRewardAjax.abort().getData({
      url: _this.settings.uri.gatewayDomain + _this.settings.uri.memberRewardClaim.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId).replace(':awardId', rewardId),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      type: 'POST',
      success: function success(response, dataObj, xhr) {
        var json = null;

        if (xhr.status === 200) {
          try {
            json = JSON.parse(response);
          } catch (e) {}
        }

        if (typeof callback === 'function') {
          _this.settings.partialFunctions.claimRewardDataResponseParser(json, function (claimRewardData) {
            callback(claimRewardData);
          });
        }
      },
      error: function error() {
        if (typeof callback === 'function') {
          callback(null);
        }
      }
    });
  };

  var checkForMemberAchievementsAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.checkForMemberAchievementsIssued = function (callback) {
    var _this = this;

    var url = _this.settings.uri.achievementsIssued.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId);

    checkForMemberAchievementsAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url,
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);

          _this.settings.partialFunctions.issuedAchievementsDataResponseParser(json, function (issuedAchievementsData) {
            var idList = [];

            if (typeof issuedAchievementsData.aggregations !== 'undefined' && issuedAchievementsData.aggregations.length > 0) {
              Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(issuedAchievementsData.aggregations[0].items, function (item) {
                idList.push(item.value);
              });
            }

            if (typeof callback === 'function') callback(idList);
          });
        } else {
          _this.log('failed to checkForMemberAchievementsIssued ' + response);
        }
      }
    });
  };

  var checkForMemberAchievementsProgressionAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.checkForMemberAchievementsProgression = function (idList, callback) {
    var _this = this;

    var url = _this.settings.uri.achievementsProgression.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId);

    checkForMemberAchievementsProgressionAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + (idList.length > 0 ? '?id=' + idList.join(',') : ''),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);

          if (typeof callback === 'function') {
            _this.settings.partialFunctions.memberAchievementsProgressionDataResponseParser(json.data, function (memberAchievementsProgressionData) {
              callback(memberAchievementsProgressionData);
            });
          }
        } else {
          _this.log('failed to checkForMemberAchievementsProgression ' + response);
        }
      }
    });
  };

  var checkForAvailableRewardsAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.checkForAvailableRewards = function (callback) {
    var _this = this;

    var url = _this.settings.uri.messages.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId); // claimed rewards


    checkForAvailableRewardsAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?_sortByFields=created:desc&messageType=Reward&prize.claimed=true&_hasValuesFor=prize&_limit=100',
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var jsonClaimedPrizes = JSON.parse(response);
          _this.settings.rewards.rewards = [];
          _this.settings.rewards.availableRewards = [];
          _this.settings.rewards.expiredRewards = [];

          _this.settings.partialFunctions.claimedRewardsDataResponseParser(jsonClaimedPrizes.data, function (claimedRewardsData) {
            Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(claimedRewardsData, function (message) {
              var expired = typeof message.expiry === 'undefined' ? false : moment__WEBPACK_IMPORTED_MODULE_0___default()(message.expiry).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()()) < 0;

              if (!expired) {
                _this.settings.rewards.rewards.push(message);
              }
            }); // not-claimed rewards

            checkForAvailableRewardsAjax.abort().getData({
              type: 'GET',
              url: _this.settings.uri.gatewayDomain + url + '?_sortByFields=created:desc&messageType=Reward&prize.claimed=false&_hasValuesFor=prize&_limit=100',
              headers: {
                'X-API-KEY': _this.settings.apiKey
              },
              success: function success(response, dataObj, xhr) {
                if (xhr.status === 200) {
                  var jsonNotClaimed = JSON.parse(response);

                  _this.settings.partialFunctions.notClaimedRewardsDataResponseParser(jsonNotClaimed.data, function (notClaimedRewardsData) {
                    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(notClaimedRewardsData, function (message) {
                      var expired = typeof message.expiry === 'undefined' ? false : moment__WEBPACK_IMPORTED_MODULE_0___default()(message.expiry).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()()) < 0;

                      if (!expired) {
                        _this.settings.rewards.availableRewards.push(message);
                      }
                    }); // expired rewards

                    var date = new Date();
                    var utcDate = date.getUTCFullYear() + '-' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_6__["default"])(date.getUTCMonth() + 1, 2) + '-' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_6__["default"])(date.getUTCDate(), 2) + 'T' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_6__["default"])(date.getUTCHours(), 2) + ':' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_6__["default"])(date.getUTCMinutes(), 2) + ':00';
                    checkForAvailableRewardsAjax.abort().getData({
                      type: 'GET',
                      url: _this.settings.uri.gatewayDomain + url + '?_sortByFields=created:desc&_limit=100&messageType=Reward&_hasValuesFor=expiry&expiry<==' + utcDate,
                      headers: {
                        'X-API-KEY': _this.settings.apiKey
                      },
                      success: function success(response, dataObj, xhr) {
                        if (xhr.status === 200) {
                          var jsonExpiredRewards = JSON.parse(response);

                          _this.settings.partialFunctions.expiredRewardsDataResponseParser(jsonExpiredRewards.data, function (expiredRewardsData) {
                            Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(expiredRewardsData, function (message) {
                              _this.settings.rewards.expiredRewards.push(message);
                            });
                            if (typeof callback === 'function') callback(_this.settings.rewards.rewards, _this.settings.rewards.availableRewards, _this.settings.rewards.expiredRewards);
                          });
                        } else {
                          _this.log('failed to checkForAvailableRewards expired ' + response);
                        }
                      }
                    });
                  });
                } else {
                  _this.log('failed to checkForAvailableRewards not-claimed ' + response);
                }
              }
            });
          });
        } else {
          _this.log('failed to checkForAvailableRewards claimed ' + response);
        }
      }
    });
  };

  var checkForAvailableMessagesAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.checkForAvailableMessages = function (callback) {
    var _this = this;

    var url = _this.settings.uri.messages.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId);

    var date = new Date();
    date.setDate(date.getMonth() - 1);
    var createdDateFilter = date.getFullYear() + '-' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_6__["default"])(date.getMonth() + 1, 2) + '-' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_6__["default"])(date.getDate(), 2);
    checkForAvailableMessagesAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?_sortByFields=created:desc&_hasNoValuesFor=prize&_limit=100&created>==' + createdDateFilter,
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var jsonAvailableMessages = JSON.parse(response);

          _this.settings.partialFunctions.availableMessagesDataResponseParser(jsonAvailableMessages.data, function (availableMessagesData) {
            _this.settings.messages.messages = [];
            Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(availableMessagesData, function (message) {
              _this.settings.messages.messages.push(message);
            });
            if (typeof callback === 'function') callback(_this.settings.messages.messages);
          });
        } else {
          _this.log('failed to checkForAvailableMessages ' + response);
        }
      }
    });
  };

  var optInMemberAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.optInMemberToActiveCompetition = function (callback) {
    var _this = this;

    var url = _this.settings.uri.memberCompetitionOptIn.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId).replace(':competitionId', _this.settings.competition.activeCompetitionId);

    optInMemberAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url,
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          callback();
        } else {
          _this.log('failed to optInMemberToActiveCompetition ' + response);
        }
      }
    });
  };

  var revalidationCount = 0;

  this.revalidateIfSuccessfullOptIn = function (callback) {
    var _this = this;

    _this.loadActiveCompetition(function (competitionJson) {
      if (typeof competitionJson.data.optin === 'boolean' && !competitionJson.data.optin) {
        revalidationCount++;

        if (revalidationCount < 5) {
          setTimeout(function () {
            _this.revalidateIfSuccessfullOptIn(callback);
          }, 100);
        } else {
          revalidationCount = 0;
        }
      } else if (typeof competitionJson.data.optin === 'boolean' && competitionJson.data.optin) {
        callback(competitionJson);
      }
    });
  };

  this.leaderboardDataRefresh = function () {
    var _this = this;

    if (_this.settings.leaderboard.refreshLbDataInterval) {
      clearTimeout(_this.settings.leaderboard.refreshLbDataInterval);
    }

    if (_this.settings.competition.activeCompetition !== null && typeof _this.settings.competition.activeCompetition.optinRequired === 'boolean' && !_this.settings.competition.activeCompetition.optinRequired || typeof _this.settings.competition.activeCompetition.optin === 'boolean' && _this.settings.competition.activeCompetition.optin) {
      var count = _this.settings.miniScoreBoard.settings.active ? 0 : _this.settings.leaderboard.fullLeaderboardSize;

      _this.getLeaderboardData(count, function (data) {
        if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();
        if (_this.settings.mainWidget.settings.active) _this.settings.mainWidget.loadLeaderboard();
      });
    }

    _this.settings.leaderboard.refreshLbDataInterval = setTimeout(function () {
      _this.leaderboardDataRefresh();
    }, _this.settings.leaderboard.refreshIntervalMillis);
  };

  this.activeDataRefresh = function (callback) {
    var _this = this;

    if (_this.settings.competition.refreshInterval) {
      clearTimeout(_this.settings.competition.refreshInterval);
    }

    _this.checkForAvailableCompetitions(function () {
      _this.updateLeaderboardNavigationCounts();

      _this.prepareActiveCompetition(function () {
        var count = _this.settings.miniScoreBoard.settings.active ? 0 : _this.settings.leaderboard.fullLeaderboardSize; // clear to not clash with LB refresh that could happen at same time

        if (_this.settings.leaderboard.refreshInterval) {
          clearTimeout(_this.settings.leaderboard.refreshInterval);
        }

        if (_this.settings.miniScoreBoard.settings.active || _this.settings.mainWidget.settings.active) {
          if (_this.settings.competition.activeCompetition !== null && typeof _this.settings.competition.activeCompetition.optinRequired === 'boolean' && !_this.settings.competition.activeCompetition.optinRequired || _this.settings.competition.activeCompetition !== null && typeof _this.settings.competition.activeCompetition.optin === 'boolean' && _this.settings.competition.activeCompetition.optin) {
            _this.getLeaderboardData(count, function (data) {
              if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();
              if (_this.settings.mainWidget.settings.active) _this.settings.mainWidget.loadLeaderboard(); // re-start leaderboard refresh

              _this.leaderboardDataRefresh();

              if (typeof callback === 'function') {
                callback();
              }
            });
          } else {
            if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();

            if (_this.settings.mainWidget.settings.active) {
              _this.getLeaderboardData(count, function (data) {
                _this.settings.mainWidget.loadLeaderboard();
              });
            } // restart leaderboard refresh


            _this.leaderboardDataRefresh();

            if (typeof callback === 'function') {
              callback();
            }
          }
        } else {
          if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();

          if (typeof callback === 'function') {
            callback();
          }
        }
      });
    });

    _this.settings.competition.refreshInterval = setTimeout(function () {
      _this.activeDataRefresh();
    }, _this.settings.competition.refreshIntervalMillis);
  };

  this.deactivateCompetitionsAndLeaderboards = function (callback) {
    var _this = this;

    if (_this.settings.leaderboard.refreshInterval) {
      clearTimeout(_this.settings.leaderboard.refreshInterval);
    }

    _this.settings.miniScoreBoard.clearAll();

    _this.settings.mainWidget.clearAll();

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.stopActivity = function (callback) {
    var _this = this;

    if (_this.settings.leaderboard.refreshInterval) {
      clearTimeout(_this.settings.leaderboard.refreshInterval);
      clearInterval(_this.settings.leaderboard.refreshInterval);
    }

    if (_this.settings.competition.refreshInterval) {
      clearTimeout(_this.settings.competition.refreshInterval);
      clearInterval(_this.settings.competition.refreshInterval);
    }

    if (_this.settings.leaderboard.refreshLbDataInterval) {
      clearTimeout(_this.settings.leaderboard.refreshLbDataInterval);
      clearInterval(_this.settings.leaderboard.refreshLbDataInterval);
    }

    if (_this.settings.miniScoreBoard.settings.updateInterval) {
      clearTimeout(_this.settings.miniScoreBoard.settings.updateInterval);
      clearInterval(_this.settings.leaderboard.refreshInterval);
    }

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.restartActivity = function (callback) {
    var _this = this;

    _this.activeDataRefresh();

    _this.settings.miniScoreBoard.updateScoreBoard();

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.loadMember = function (callback) {
    var _this = this;

    _this.settings.globalAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + _this.settings.uri.members.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);
          _this.settings.member = json.data;
          callback(json.data);
        } else {
          _this.log('failed to loadMember ' + response);
        }
      }
    });
  };

  this.loadWidgetTranslations = function (callback) {
    var _this = this;

    if (typeof _this.settings.uri.translationPath === 'string' && _this.settings.uri.translationPath.length > 0 && _this.settings.loadTranslations) {
      var url = Object(_utils_stringContains__WEBPACK_IMPORTED_MODULE_7__["default"])(_this.settings.uri.translationPath, 'http') ? _this.settings.uri.translationPath.replace(':language', _this.settings.language) : _this.settings.uri.gatewayDomain + _this.settings.uri.translationPath.replace(':language', _this.settings.language);

      _this.settings.globalAjax.abort().getData({
        type: 'GET',
        url: url,
        headers: {
          'X-API-KEY': _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var json = JSON.parse(response);
            _this.settings.translation = Object(_utils_mergeObjects__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.translation, json);
            callback();
          } else {
            _this.log('no translation foound ' + response);

            callback();
          }
        }
      });
    } else {
      callback();
    }
  };

  this.startup = function () {
    var _this = this;

    _this.settings.miniScoreBoard.initLayout(function () {
      _this.settings.miniScoreBoard.settings.active = true;

      _this.activeDataRefresh(function () {
        _this.settings.partialFunctions.startupCallback(_this);
      });

      if (_this.settings.enableNotifications) {
        _this.settings.notifications.init();

        _this.settings.canvasAnimation.init();
      }

      _this.cleanup();
    });
  };

  var _cleanupInstance;

  this.cleanup = function () {
    var _this = this;

    if (_cleanupInstance) {
      clearTimeout(_cleanupInstance);
    }

    _cleanupInstance = setTimeout(function () {
      _this.settings.mainWidget.preLoaderRerun();

      _this.cleanup();
    }, 3000);
  };

  this.loadStylesheet = function (callback) {
    var _this = this;

    var createdResources = false;
    var availableLinks = [];
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_8__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_9__["default"])('link'), function (link) {
      if (link !== null) {
        availableLinks.push(new URL(link.href, document.baseURI).href);
      }
    });
    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.resources, function (resource, key, count) {
      var exists = false;
      Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_5__["default"])(availableLinks, function (link) {
        if (link === new URL(resource, document.baseURI).href) {
          exists = true;
        }
      });

      if (!exists) {
        var link = document.createElement('link');
        link.setAttribute('rel', 'stylesheet');
        link.setAttribute('type', 'text/css');
        link.setAttribute('href', resource);

        if (count === 0) {
          link.onload = function () {
            if (typeof callback === 'function') {
              callback();
            }
          };

          link.onerror = function (e) {
            if (typeof callback === 'function') {
              callback();
            }
          };
        }

        document.body.appendChild(link);
        createdResources = true;
      }
    });

    if (!createdResources && typeof callback === 'function') {
      callback();
    }
  };

  this.clickedMiniScoreBoard = function () {
    var _this = this;

    if (!_this.settings.miniScoreBoard.settings.dragging) {
      _this.deactivateCompetitionsAndLeaderboards(function () {
        _this.settings.leaderboard.leaderboardData = [];

        _this.settings.mainWidget.initLayout(function () {
          // load tournaments data
          if (_this.settings.navigation.tournaments.enable) {
            _this.activeDataRefresh();
          } // load achievement data


          if (_this.settings.navigation.achievements.enable) {
            _this.checkForAvailableAchievements(function (achievementData) {
              _this.updateAchievementNavigationCounts();
            });
          } // load initial available reward data


          if (_this.settings.navigation.rewards.enable) {
            _this.checkForAvailableRewards(function () {
              _this.updateRewardsNavigationCounts();
            });
          } // load initial available messages data


          if (_this.settings.navigation.inbox.enable) {
            _this.checkForAvailableMessages(function () {
              _this.updateMessagesNavigationCounts();
            });
          }
        });

        setTimeout(function () {
          _this.settings.miniScoreBoard.settings.container.style.display = 'none';
        }, 200);
      });
    }
  };
  /**
   * Open main widget and open specific tab and loads relevant action
   * @memberOf LbWidget
   * @param tab String
   * @param actionCallback Function
   */


  this.openWithTabAndAction = function (tab, actionCallback) {
    var _this = this;

    if (_this.settings.mainWidget.settings.active) {
      var loadTab = Object(_utils_query__WEBPACK_IMPORTED_MODULE_9__["default"])(_this.settings.mainWidget.settings.container, tab);

      _this.settings.mainWidget.navigationSwitch(loadTab, function () {
        _this.activeDataRefresh();

        if (typeof actionCallback === 'function') {
          actionCallback();
        }
      });

      setTimeout(function () {
        _this.settings.miniScoreBoard.settings.container.style.display = 'none';
      }, 200);
    } else {
      _this.deactivateCompetitionsAndLeaderboards(function () {
        _this.settings.mainWidget.initLayout(function () {
          _this.settings.mainWidget.navigationSwitch(Object(_utils_query__WEBPACK_IMPORTED_MODULE_9__["default"])(_this.settings.mainWidget.settings.container, tab), function () {
            _this.activeDataRefresh();

            if (typeof actionCallback === 'function') {
              actionCallback();
            }
          });
        });

        setTimeout(function () {
          _this.settings.miniScoreBoard.settings.container.style.display = 'none';
        }, 200);
      });
    }
  };

  this.onUIChange = function (el) {
    var _this = this;

    setTimeout(function () {
      var currentWidgetStatus = new CustomEvent('onWidgetChange', {
        detail: {
          mainWidget: _this.settings.mainWidget.settings.active,
          miniScoreBoard: _this.settings.miniScoreBoard.settings.active
        }
      });

      _this.settings.bindContainer.dispatchEvent(currentWidgetStatus);
    }, 300);
  };

  var loadCompetitionListAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_16__["default"].Ajax();

  this.eventHandlers = function (el) {
    var _this = this; // mini scoreboard opt-in action


    if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-widget-ms-optin-action') && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'checking')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_11__["default"])(el, 'checking');

      _this.optInMemberToActiveCompetition(function () {
        _this.revalidateIfSuccessfullOptIn(function (competitionJson) {
          _this.settings.competition.activeCompetition = competitionJson.data; // _this.getLeaderboardData(1, function( data ){
          //  _this.settings.miniScoreBoard.loadScoreBoard( data );
          // });
          // extra action to load competition details on mini scoreboard opt-in - Product request

          _this.deactivateCompetitionsAndLeaderboards(function () {
            _this.settings.leaderboard.leaderboardData = [];

            _this.settings.mainWidget.initLayout(function () {
              _this.activeDataRefresh();

              _this.settings.mainWidget.loadCompetitionDetails(function () {});
            });

            setTimeout(function () {
              _this.settings.miniScoreBoard.settings.container.style.display = 'none';
            }, 200);
          });

          Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_12__["default"])(el, 'checking');
        });
      }); // Leaderboard details opt-in action

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-lb-details-optin-action') && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'checking')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_11__["default"])(el, 'checking');

      _this.optInMemberToActiveCompetition(function () {
        _this.revalidateIfSuccessfullOptIn(function (competitionJson) {
          _this.settings.competition.activeCompetition = competitionJson.data;

          _this.settings.mainWidget.competitionDetailsOptInButtonState();

          Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_12__["default"])(el, 'checking');
        });
      }); // Leaderboard details opt-in action

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-lb-optin-action') && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'checking')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_11__["default"])(el, 'checking');

      _this.optInMemberToActiveCompetition(function () {
        _this.revalidateIfSuccessfullOptIn(function (competitionJson) {
          _this.settings.competition.activeCompetition = competitionJson.data;

          _this.settings.mainWidget.loadCompetitionDetails(function () {});

          Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_12__["default"])(el, 'checking');
          el.parentNode.style.display = 'none';
        });
      }); // close mini scoreboard info area

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-widget-ms-information-close') && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'checking')) {
      _this.settings.miniScoreBoard.clearAll(); // close notification window

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-widget-notif-information-close') && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'checking')) {
      _this.settings.notifications.hideNotification(); // close leaderboard window

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-lb-header-close') || Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-ach-header-close') || Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-reward-header-close') || Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-inbox-header-close') || Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-widget-main-widget-overlay-wrapper')) {
      _this.settings.mainWidget.hide(function () {
        _this.settings.miniScoreBoard.settings.active = true;
        _this.settings.miniScoreBoard.settings.container.style.display = 'block';

        _this.activeDataRefresh();
      }); // load embedded competition details

    } else if (!_this.settings.leaderboard.layoutSettings.titleLinkToDetailsPage && (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-lb-details-content-label') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-main-widget-lb-details-content-label') !== null)) {
      _this.settings.mainWidget.showEmbeddedCompetitionDetailsContent(function () {}); // hide embedded competition details

    } else if (!_this.settings.leaderboard.layoutSettings.titleLinkToDetailsPage && Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-lb-details-description-close')) {
      _this.settings.mainWidget.hideEmbeddedCompetitionDetailsContent(function () {}); // load competition details

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-lb-details-content-label') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-main-widget-lb-details-content-label') !== null) {
      if (_this.settings.competition.activeContest !== null) {
        _this.settings.mainWidget.loadCompetitionDetails(function () {});
      } // load achievement details

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-ach-list-more')) {
      _this.getAchievement(el.dataset.id, function (data) {
        _this.settings.mainWidget.loadAchievementDetails(data, function () {});
      }); // leaderboard details back button

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-lb-details-back-btn')) {
      _this.settings.mainWidget.hideCompetitionDetails(); // achievements details back button

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-ach-details-back-btn')) {
      _this.settings.mainWidget.hideAchievementDetails(function () {}); // rewards details back button

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-reward-details-back-btn')) {
      _this.settings.mainWidget.hideRewardDetails(function () {}); // messages details back button

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-inbox-details-back-btn')) {
      _this.settings.mainWidget.hideMessageDetails(function () {}); // load rewards details

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-rew-list-item') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-rew-list-item') !== null) {
      var rewardId = Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-rew-list-item') ? el.dataset.rewardId : Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-rew-list-item').dataset.rewardId;

      _this.getReward(rewardId, function (data) {
        _this.settings.mainWidget.loadRewardDetails(data, function () {});
      }); // load inbox details

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-inbox-list-item') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-inbox-list-item') !== null) {
      var messageId = Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-inbox-list-item') ? el.dataset.rewardId : Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-inbox-list-item').dataset.id;

      _this.getMessage(messageId, function (data) {
        _this.settings.mainWidget.loadMessageDetails(data, function () {});
      }); // claim reward

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-reward-claim-btn')) {
      _this.claimReward(el.dataset.id, function (data) {
        if (data.data.claimed) {
          _this.settings.mainWidget.loadRewards();

          Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_11__["default"])(el, 'cl-claimed');
          el.innerHTML = _this.settings.translation.rewards.claimed;
        } else {
          Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_12__["default"])(el, 'cl-claimed');
          el.innerHTML = _this.settings.translation.rewards.claim;
        }
      }); // load achievement details window from notification window

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-widget-notif-information-details-wrapper') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-widget-notif-information-details-wrapper') !== null) {
      _this.openWithTabAndAction('.cl-main-widget-navigation-ach-icon', function () {
        var id = Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-widget-notif-information-details-wrapper') ? el.dataset.id : Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-widget-notif-information-details-wrapper').dataset.id;

        _this.settings.notifications.hideNotification();

        _this.settings.mainWidget.hideAchievementDetails(function () {
          _this.getAchievement(id, function (data) {
            _this.settings.mainWidget.loadAchievementDetails(data);
          });
        });
      }); // primary widget navigation

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-navigation-item')) {
      _this.settings.mainWidget.navigationSwitch(el); // competition list

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-lb-header-list-icon')) {
      if (_this.settings.leaderboard.refreshInterval) {
        clearTimeout(_this.settings.leaderboard.refreshInterval);
      }

      _this.settings.mainWidget.loadCompetitionList(function () {
        _this.activeDataRefresh();
      }, loadCompetitionListAjax); // load competition

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-tour-list-item') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-tour-list-item') !== null) {
      var tournamentId = Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-tour-list-item') ? el.dataset.id : Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-tour-list-item').dataset.id;

      var preLoader = _this.settings.mainWidget.preloader();

      preLoader.show(function () {
        _this.settings.mainWidget.settings.active = true;
        _this.settings.tournaments.activeCompetitionId = tournamentId;

        _this.activeDataRefresh(function () {
          _this.settings.mainWidget.hideCompetitionList(function () {
            if (!_this.settings.leaderboard.layoutSettings.titleLinkToDetailsPage) {
              _this.settings.mainWidget.showEmbeddedCompetitionDetailsContent(function () {});
            } else if (_this.settings.competition.activeContest !== null) {
              _this.settings.mainWidget.loadCompetitionDetails(function () {});
            }

            preLoader.hide();
          });
        });
      }); // hide competition list view
    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-main-widget-tournaments-back-btn')) {
      _this.settings.mainWidget.hideCompetitionList(); // mini scoreboard action to open primary widget

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-widget-ms-icon-wrapper') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-widget-ms-icon-wrapper') !== null || Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-widget-ms-information-wrapper') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_13__["default"])(el, '.cl-widget-ms-information-wrapper') !== null) {
      _this.clickedMiniScoreBoard(); // accordion navigation

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-accordion-label')) {
      _this.settings.mainWidget.accordionNavigation(el);
    } // Dispatch Custom Event


    this.onUIChange();
  };

  this.eventListeners = function () {
    var _this = this;

    document.body.addEventListener('keyup', function (event) {
      switch (event.keyCode) {
        case 27:
          // on escape
          if (_this.settings.mainWidget.settings.active) {
            _this.settings.mainWidget.hide(function () {
              _this.settings.miniScoreBoard.settings.active = true;
              _this.settings.miniScoreBoard.settings.container.style.display = 'block';

              _this.activeDataRefresh();
            });
          }

          break;
      }
    });

    if (_this.isMobile()) {
      document.body.addEventListener('touchend', function (event) {
        var el = event.target;

        if (!_this.settings.miniScoreBoard.settings.dragging) {
          _this.eventHandlers(el);
        }
      });
    } else {
      document.body.addEventListener('click', function (event) {
        var el = event.target;

        _this.eventHandlers(el);
      });
    }
  };

  this.closeEverything = function () {
    var _this = this;

    _this.deactivateCompetitionsAndLeaderboards(function () {
      _this.settings.leaderboard.leaderboardData = [];
      setTimeout(function () {
        _this.settings.miniScoreBoard.settings.container.style.display = 'none';
      }, 200);
    });

    _this.settings.mainWidget.hide();

    _this.settings.mainWidget.settings.preLoader.preLoaderActive = false;
  };

  var restartReloadInterval;

  this.restart = function () {
    var _this = this;

    _this.settings.mainWidget.hide(function () {
      _this.deactivateCompetitionsAndLeaderboards(function () {
        _this.stopActivity(function () {
          _this.loadMember(function (member) {
            _this.loadWidgetTranslations(function () {
              if (restartReloadInterval) {
                clearTimeout(restartReloadInterval);
              }

              _this.settings.mainWidget.destroyLayout();

              restartReloadInterval = setTimeout(function () {
                _this.settings.miniScoreBoard.settings.active = true;
                _this.settings.miniScoreBoard.settings.container.style.display = 'block';

                _this.startup();
              }, 300);
            });
          });
        });
      });
    });
  };

  this.isMobile = function () {
    return Object(_utils_isMobileTablet__WEBPACK_IMPORTED_MODULE_14__["default"])();
  };

  this.applyAppearance = function () {
    var _this2 = this;

    if (this.settings.styles !== null) {
      var styles = Object.keys(this.settings.styles).reduce(function (accumulator, currentValue) {
        return _objectSpread(_objectSpread({}, accumulator), {}, _defineProperty({}, "--lb3-".concat(Object(_utils_camelToKebabCase__WEBPACK_IMPORTED_MODULE_15__["default"])(currentValue)), _this2.settings.styles[currentValue]));
      }, {});
      Object(css_vars_ponyfill__WEBPACK_IMPORTED_MODULE_3__["default"])({
        include: 'link[rel=stylesheet],style',
        watch: true,
        onlyLegacy: false,
        variables: _objectSpread({}, styles)
      });
    }
  };
  /**
   * Init LbWidget method
   * @method
   * @memberOf LbWidget
   * @return {undefined}
   */


  this.init = function () {
    var _this3 = this;

    this.loadStylesheet(function () {
      _this3.applyAppearance();

      _this3.loadMember(function (member) {
        _this3.loadWidgetTranslations(function () {
          if (_this3.settings.miniScoreBoard === null) {
            _this3.settings.canvasAnimation = new _CanvasAnimation__WEBPACK_IMPORTED_MODULE_21__["CanvasAnimation"]();
            _this3.settings.notifications = new _Notifications__WEBPACK_IMPORTED_MODULE_18__["Notifications"]({
              canvasInstance: _this3.settings.canvasAnimation
            });
            _this3.settings.miniScoreBoard = new _MiniScoreBoard__WEBPACK_IMPORTED_MODULE_19__["MiniScoreBoard"]({
              active: true
            });
            _this3.settings.mainWidget = new _MainWidget__WEBPACK_IMPORTED_MODULE_20__["MainWidget"]();
            _this3.settings.notifications.settings.lbWidget = _this3;
            _this3.settings.miniScoreBoard.settings.lbWidget = _this3;
            _this3.settings.mainWidget.settings.lbWidget = _this3;
            _this3.settings.canvasAnimation.settings.lbWidget = _this3;

            _this3.startup();

            _this3.eventListeners();
          } else {
            _this3.settings.mainWidget.hide(function () {
              _this3.deactivateCompetitionsAndLeaderboards(function () {
                _this3.settings.miniScoreBoard.settings.active = true;
                _this3.settings.miniScoreBoard.settings.container.style.display = 'block';

                _this3.startup();
              });
            });
          }
        });
      });
    });
  };

  if (this.settings.autoStart) {
    this.init();
  }
};

/***/ }),

/***/ "./src/javascript/modules/MainWidget.js":
/*!**********************************************!*\
  !*** ./src/javascript/modules/MainWidget.js ***!
  \**********************************************/
/*! exports provided: MainWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MainWidget", function() { return MainWidget; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_mapObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/mapObject */ "./src/javascript/utils/mapObject.js");
/* harmony import */ var _utils_hasClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/hasClass */ "./src/javascript/utils/hasClass.js");
/* harmony import */ var _utils_removeClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/removeClass */ "./src/javascript/utils/removeClass.js");
/* harmony import */ var _utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/objectIterator */ "./src/javascript/utils/objectIterator.js");
/* harmony import */ var _utils_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/query */ "./src/javascript/utils/query.js");
/* harmony import */ var _utils_closest__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/closest */ "./src/javascript/utils/closest.js");
/* harmony import */ var _utils_addClass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/addClass */ "./src/javascript/utils/addClass.js");
/* harmony import */ var _utils_remove__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/remove */ "./src/javascript/utils/remove.js");
/* harmony import */ var _utils_appendNext__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/appendNext */ "./src/javascript/utils/appendNext.js");
/* harmony import */ var _utils_stripHtml__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/stripHtml */ "./src/javascript/utils/stripHtml.js");











/**
 * MainWidget
 * @param options {Object}
 * @constructor
 */

var MainWidget = function MainWidget(options) {
  /**
   * MainWidget settings
   * @memberOf MainWidget
   * @constant
   * @type { Object }
   */
  this.settings = {
    lbWidget: null,
    container: null,
    overlayContainer: null,
    navigation: null,
    section: null,
    detailsContainer: null,
    tournamentListContainer: null,
    headerDate: null,
    labelDate: null,
    preLoader: {
      preLoaderActive: false,
      preLoaderlastAttempt: null,
      preloaderCallbackRecovery: function preloaderCallbackRecovery() {}
    },
    achievement: {
      container: null,
      detailsContainer: null
    },
    reward: {
      container: null,
      detailsContainer: null
    },
    messages: {
      container: null,
      detailsContainer: null
    },
    leaderboard: {
      defaultEmptyList: 20,
      topResultSize: 3,
      header: null,
      container: null,
      resultContainer: null,
      list: null,
      topResults: null,
      timerInterval: null
    },
    tournamentsSection: {
      accordionLayout: [{
        label: 'Upcoming Tournaments',
        type: 'readyCompetitions',
        show: false,
        showTopResults: 1
      }, {
        label: 'Active Tournaments',
        type: 'activeCompetitions',
        show: true,
        showTopResults: 1
      }, {
        label: 'Finished Tournaments',
        type: 'finishedCompetitions',
        show: false,
        showTopResults: 1
      }]
    },
    rewardsSection: {
      accordionLayout: [{
        label: 'Available Rewards',
        type: 'availableRewards',
        show: true,
        showTopResults: 1
      }, {
        label: 'Claimed Rewards',
        type: 'rewards',
        show: false,
        showTopResults: 1
      }, {
        label: 'Expired Rewards',
        type: 'expiredRewards',
        show: false,
        showTopResults: 1
      }]
    },
    active: false,
    navigationSwitchLastAtempt: new Date().getTime(),
    navigationSwitchInProgress: false
  };

  if (typeof options !== 'undefined') {
    for (var opt in options) {
      if (options.hasOwnProperty(opt)) {
        this.settings[opt] = options[opt];
      }
    }
  }
  /**
   * Accordion style layout
   * - parameters:
   *      - label: String "Available rewards"
   *      - type: String "available-rewards"
   *      - shown: Boolean true/false
   *
   * @memberOf MainWidget
   * @param data { Array }
   * @param onLayout { Function }
   */


  this.accordionStyle = function (data, onLayout) {
    var _this = this;

    var accordionWrapper = document.createElement('div');
    accordionWrapper.setAttribute('class', 'cl-main-accordion-container');
    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(data, function (entry) {
      var accordionSection = document.createElement('div');
      var accordionLabel = document.createElement('div');
      var topShownEntry = document.createElement('div');
      var accordionListContainer = document.createElement('div');
      var accordionList = document.createElement('div');
      accordionSection.setAttribute('class', 'cl-accordion ' + entry.type + (typeof entry.show === 'boolean' && entry.show ? ' cl-shown' : ''));
      accordionLabel.setAttribute('class', 'cl-accordion-label');
      topShownEntry.setAttribute('class', 'cl-accordion-entry');
      accordionListContainer.setAttribute('class', 'cl-accordion-list-container');
      accordionList.setAttribute('class', 'cl-accordion-list');

      if (typeof _this.settings.lbWidget.settings.translation.rewards[entry.type] !== 'undefined') {
        accordionLabel.innerHTML = _this.settings.lbWidget.settings.translation.rewards[entry.type];
      } else if (typeof _this.settings.lbWidget.settings.translation.tournaments[entry.type] !== 'undefined') {
        accordionLabel.innerHTML = _this.settings.lbWidget.settings.translation.tournaments[entry.type];
      } else {
        accordionLabel.innerHTML = entry.label;
      }

      if (typeof onLayout === 'function') {
        onLayout(accordionSection, accordionList, topShownEntry, entry);
      }

      accordionListContainer.appendChild(accordionList);
      accordionSection.appendChild(accordionLabel);
      accordionSection.appendChild(topShownEntry);
      accordionSection.appendChild(accordionListContainer);
      accordionWrapper.appendChild(accordionSection);
    });
    return accordionWrapper;
  };

  this.accordionNavigation = function (element) {
    // var _this = this;
    var parentEl = element.parentNode;

    if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_2__["default"])(parentEl, 'cl-shown')) {
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(parentEl, 'cl-shown');
    } else {
      Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(Object(_utils_closest__WEBPACK_IMPORTED_MODULE_6__["default"])(parentEl, '.cl-main-accordion-container'), '.cl-shown'), function (obj) {
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(obj, 'cl-shown');
      });
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(parentEl, 'cl-shown');
    }
  };

  this.navigationSorter = function (a, b) {
    if (a.order < b.order) {
      return -1;
    }

    if (a.order > b.order) {
      return 1;
    }

    return 0;
  };

  this.navigationItems = function (container, navigationList) {
    var _this = this; // sorting navigation by order number


    navigationList.sort(_this.navigationSorter);
    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(navigationList, function (val, key) {
      var navigationItem = document.createElement('div');
      var navigationItemIcon = document.createElement('div');
      var navigationItemCount = document.createElement('div');
      navigationItem.setAttribute('class', _this.settings.lbWidget.settings.navigation[val.key].navigationClass + ' cl-main-widget-navigation-item' + (_this.settings.lbWidget.settings.navigation[val.key].enable ? '' : ' cl-hidden-navigation-item'));
      navigationItemIcon.setAttribute('class', _this.settings.lbWidget.settings.navigation[val.key].navigationClassIcon + ' cl-main-navigation-item');
      navigationItemCount.setAttribute('class', 'cl-main-navigation-item-count');
      navigationItemIcon.appendChild(navigationItemCount);
      navigationItem.appendChild(navigationItemIcon);
      container.appendChild(navigationItem);
    });
  };

  this.overlayLayout = function () {
    var wrapper = document.createElement('div');
    wrapper.setAttribute('class', 'cl-widget-main-widget-overlay-wrapper');
    return wrapper;
  };

  this.layout = function () {
    var _this = this;

    var wrapper = document.createElement('div');
    var innerWrapper = document.createElement('div');
    var navigationContainer = document.createElement('div');
    var navigationItems = document.createElement('div');
    var mainSectionContainer = document.createElement('div');
    var preLoaderContainer = document.createElement('div');
    var preLoaderContent = document.createElement('div');
    var preLoaderBar1 = document.createElement('div');
    var preLoaderBar2 = document.createElement('div');
    var preLoaderBar3 = document.createElement('div');

    var sectionLB = _this.leaderboardAreaLayout();

    var sectionACH = _this.achievementsAreaLayout();

    var sectionRewards = _this.rewardsAreaLayout();

    var sectionInbox = _this.inboxAreaLayout();

    var navigationItemList = [];
    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.lbWidget.settings.navigation, function (val, key) {
      navigationItemList.push({
        key: key,
        order: parseInt(val.order)
      });
    });

    _this.navigationItems(navigationItems, navigationItemList); // populate sorted navigation


    wrapper.setAttribute('class', 'cl-main-widget-wrapper');
    innerWrapper.setAttribute('class', 'cl-main-widget-inner-wrapper');
    navigationContainer.setAttribute('class', 'cl-main-widget-navigation-container');
    navigationItems.setAttribute('class', 'cl-main-widget-navigation-items');
    mainSectionContainer.setAttribute('class', 'cl-main-widget-section-container' + (_this.settings.lbWidget.settings.showCopyright ? '' : ' cl-hidden-copyright'));
    preLoaderContainer.setAttribute('class', 'cl-main-widget-pre-loader');
    preLoaderContent.setAttribute('class', 'cl-main-widget-pre-loader-content');
    preLoaderBar1.setAttribute('class', 'cl-pre-loader-bar');
    preLoaderBar2.setAttribute('class', 'cl-pre-loader-bar');
    preLoaderBar3.setAttribute('class', 'cl-pre-loader-bar');
    preLoaderContent.appendChild(preLoaderBar1);
    preLoaderContent.appendChild(preLoaderBar2);
    preLoaderContent.appendChild(preLoaderBar3);
    preLoaderContainer.appendChild(preLoaderContent);
    navigationContainer.appendChild(navigationItems);
    mainSectionContainer.appendChild(sectionLB);
    mainSectionContainer.appendChild(sectionACH);
    mainSectionContainer.appendChild(sectionRewards);
    mainSectionContainer.appendChild(sectionInbox);
    mainSectionContainer.appendChild(preLoaderContainer);
    innerWrapper.appendChild(navigationContainer);
    innerWrapper.appendChild(mainSectionContainer);
    wrapper.appendChild(innerWrapper);
    return wrapper;
  };

  this.mainNavigationCheck = function () {
    var _this = this;

    var navItems = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-navigation-item');
    var checkEnabled = 0;
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(navItems, function (navItem) {
      if (!Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_2__["default"])(navItem, 'cl-hidden-navigation-item')) {
        checkEnabled++;
      }
    });

    if (checkEnabled === 1) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-inner-wrapper'), 'cl-hidden-navigation');
    } else if (checkEnabled === 0) {
      _this.settings.lbWidget.log('All navigation items disabled, check [this.settings.lbWidget.settings.navigation]');
    }
  };

  this.leaderboardAreaLayout = function () {
    var _this = this;

    var sectionLB = document.createElement('div');
    var sectionLBHeader = document.createElement('div');
    var sectionLBHeaderList = document.createElement('div');
    var sectionLBHeaderListIcon = document.createElement('div');
    var sectionLBHeaderLabel = document.createElement('div');
    var sectionLBHeaderDate = document.createElement('div');
    var sectionLBHeaderClose = document.createElement('div');
    var sectionLBDetails = document.createElement('div');
    var sectionLBDetailsInfo = document.createElement('div');
    var sectionLBDetailsInfoIcon = document.createElement('div');
    var sectionLBDetailsImageContainer = document.createElement('div');
    var sectionLBDetailsContentContainer = document.createElement('div');
    var sectionLBDetailsContentContainerLabel = document.createElement('div');
    var sectionLBDetailsContentContainerLabelText = document.createElement('span');
    var sectionLBDetailsContentContainerDate = document.createElement('span');
    var sectionLBDetailsDescriptionContainer = document.createElement('div');
    var sectionLBDetailsDescription = document.createElement('div');
    var sectionLBDetailsDescriptionClose = document.createElement('span');
    var sectionLBLeaderboard = document.createElement('div');
    var sectionLBLeaderboardHeader = document.createElement('div');
    var sectionLBLeaderboardHeaderLabels = document.createElement('div');
    var sectionLBLeaderboardResultsContainer = document.createElement('div');
    var sectionLBLeaderboardHeaderTopResults = document.createElement('div');
    var sectionLBLeaderboardBody = document.createElement('div');
    var sectionLBLeaderboardBodyResults = document.createElement('div');
    var sectionLBMissingMember = document.createElement('div');
    var sectionLBOptInContainer = document.createElement('div');
    var sectionLBOptInAction = document.createElement('a');
    var sectionLBFooter = document.createElement('div');
    var sectionLBFooterContent = document.createElement('div');
    var sectionTournamentDetailsContainer = document.createElement('div');
    var sectionTournamentDetailsHeader = document.createElement('div');
    var sectionTournamentDetailsHeaderLabel = document.createElement('div');
    var sectionTournamentDetailsHeaderDate = document.createElement('div');
    var sectionTournamentDetailsBackBtn = document.createElement('a');
    var sectionTournamentDetailsBodyContainer = document.createElement('div');
    var sectionTournamentDetailsBodyImageContainer = document.createElement('div');
    var sectionTournamentDetailsBody = document.createElement('div');
    var sectionTournamentDetailsOptInContainer = document.createElement('div');
    var sectionTournamentDetailsOptInAction = document.createElement('a');
    var sectionTournamentList = document.createElement('div');
    var sectionTournamentListBody = document.createElement('div');
    var sectionTournamentListBodyResults = document.createElement('div');
    var sectionTournamentBackAction = document.createElement('a');
    sectionLB.setAttribute('class', _this.settings.lbWidget.settings.navigation.tournaments.containerClass + ' cl-main-section-item cl-main-active-section' + (_this.settings.lbWidget.settings.leaderboard.layoutSettings.imageBanner ? ' cl-main-section-image-banner-active' : ''));
    sectionLBHeader.setAttribute('class', 'cl-main-widget-lb-header');
    sectionLBHeaderList.setAttribute('class', 'cl-main-widget-lb-header-list');
    sectionLBHeaderListIcon.setAttribute('class', 'cl-main-widget-lb-header-list-icon');
    sectionLBHeaderLabel.setAttribute('class', 'cl-main-widget-lb-header-label');
    sectionLBHeaderDate.setAttribute('class', 'cl-main-widget-lb-header-date');
    sectionLBHeaderClose.setAttribute('class', 'cl-main-widget-lb-header-close');
    sectionLBDetails.setAttribute('class', 'cl-main-widget-lb-details');
    sectionLBDetailsInfo.setAttribute('class', 'cl-main-widget-lb-details-info');
    sectionLBDetailsInfoIcon.setAttribute('class', 'cl-main-widget-lb-details-info-icon');
    sectionLBDetailsImageContainer.setAttribute('class', 'cl-main-widget-lb-details-image-container');
    sectionLBDetailsContentContainer.setAttribute('class', 'cl-main-widget-lb-details-content');
    sectionLBDetailsContentContainerLabel.setAttribute('class', 'cl-main-widget-lb-details-content-label');
    sectionLBDetailsContentContainerLabelText.setAttribute('class', 'cl-main-widget-lb-details-content-label-text');
    sectionLBDetailsContentContainerDate.setAttribute('class', 'cl-main-widget-lb-details-content-date');
    sectionLBDetailsDescriptionContainer.setAttribute('class', 'cl-main-widget-lb-details-description-container');
    sectionLBDetailsDescription.setAttribute('class', 'cl-main-widget-lb-details-description');
    sectionLBDetailsDescriptionClose.setAttribute('class', 'cl-main-widget-lb-details-description-close'); // Leaderboard result container

    sectionLBLeaderboard.setAttribute('class', 'cl-main-widget-lb-leaderboard');
    sectionLBLeaderboardHeader.setAttribute('class', 'cl-main-widget-lb-leaderboard-header');
    sectionLBLeaderboardHeaderLabels.setAttribute('class', 'cl-main-widget-lb-leaderboard-header-labels');
    sectionLBLeaderboardResultsContainer.setAttribute('class', 'cl-main-widget-lb-leaderboard-res-container');
    sectionLBLeaderboardHeaderTopResults.setAttribute('class', 'cl-main-widget-lb-leaderboard-header-top-res');
    sectionLBLeaderboardBody.setAttribute('class', 'cl-main-widget-lb-leaderboard-body');
    sectionLBLeaderboardBodyResults.setAttribute('class', 'cl-main-widget-lb-leaderboard-body-res');
    sectionLBMissingMember.setAttribute('class', 'cl-main-widget-lb-missing-member'); // footer

    sectionLBFooter.setAttribute('class', 'cl-main-widget-lb-footer');
    sectionLBFooterContent.setAttribute('class', 'cl-main-widget-lb-footer-content'); // details section

    sectionTournamentDetailsContainer.setAttribute('class', 'cl-main-widget-lb-details-container');
    sectionTournamentDetailsHeader.setAttribute('class', 'cl-main-widget-lb-details-header');
    sectionTournamentDetailsHeaderLabel.setAttribute('class', 'cl-main-widget-lb-details-header-label');
    sectionTournamentDetailsHeaderDate.setAttribute('class', 'cl-main-widget-lb-details-header-date');
    sectionTournamentDetailsBackBtn.setAttribute('class', 'cl-main-widget-lb-details-back-btn');
    sectionTournamentDetailsBodyContainer.setAttribute('class', 'cl-main-widget-lb-details-body-container');
    sectionTournamentDetailsBodyImageContainer.setAttribute('class', 'cl-main-widget-lb-details-body-image-cont');
    sectionTournamentDetailsBody.setAttribute('class', 'cl-main-widget-lb-details-body');
    sectionTournamentDetailsOptInContainer.setAttribute('class', 'cl-main-widget-lb-details-optin-container');
    sectionTournamentDetailsOptInAction.setAttribute('class', 'cl-main-widget-lb-details-optin-action');
    sectionTournamentList.setAttribute('class', 'cl-main-widget-tournaments-list');
    sectionTournamentBackAction.setAttribute('class', 'cl-main-widget-tournaments-back-btn');
    sectionTournamentListBody.setAttribute('class', 'cl-main-widget-tournaments-list-body');
    sectionTournamentListBodyResults.setAttribute('class', 'cl-main-widget-tournaments-list-body-res');
    sectionLBOptInContainer.setAttribute('class', 'cl-main-widget-lb-optin-container');
    sectionLBOptInAction.setAttribute('class', 'cl-main-widget-lb-optin-action');
    sectionLBHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.label;
    sectionLBFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
    sectionTournamentDetailsOptInAction.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
    sectionTournamentDetailsOptInAction.href = 'javascript:void(0);';
    sectionLBOptInAction.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
    sectionLBOptInAction.href = 'javascript:void(0);';
    sectionLBHeaderList.appendChild(sectionLBHeaderListIcon);
    sectionLBHeader.appendChild(sectionLBHeaderList);
    sectionLBHeader.appendChild(sectionLBHeaderLabel);
    sectionLBHeader.appendChild(sectionLBHeaderDate);
    sectionLBHeader.appendChild(sectionLBHeaderClose);
    sectionLBDetailsInfo.appendChild(sectionLBDetailsInfoIcon);
    sectionLBDetailsContentContainerLabel.appendChild(sectionLBDetailsContentContainerLabelText);
    sectionLBDetailsContentContainerLabel.appendChild(sectionLBDetailsContentContainerDate);
    sectionLBDetailsContentContainer.appendChild(sectionLBDetailsContentContainerLabel);
    sectionLBDetails.appendChild(sectionLBDetailsInfo);

    if (_this.settings.lbWidget.settings.leaderboard.layoutSettings.imageBanner) {
      sectionLBDetails.appendChild(sectionLBDetailsImageContainer);
    }

    sectionLBDetails.appendChild(sectionLBDetailsContentContainer);

    if (!_this.settings.lbWidget.settings.leaderboard.layoutSettings.titleLinkToDetailsPage) {
      sectionLBDetailsDescriptionContainer.appendChild(sectionLBDetailsDescription);
      sectionLBDetailsDescriptionContainer.appendChild(sectionLBDetailsDescriptionClose);
      sectionLBDetails.appendChild(sectionLBDetailsDescriptionContainer);
    }

    sectionLBLeaderboardHeader.appendChild(sectionLBLeaderboardHeaderLabels);
    sectionLBLeaderboard.appendChild(sectionLBLeaderboardHeader); // sectionLBLeaderboard.appendChild(sectionLBLeaderboardHeaderTopResults);
    // sectionLBLeaderboardBody.appendChild(sectionLBLeaderboardBodyResults);
    // sectionLBLeaderboard.appendChild(sectionLBLeaderboardBody);

    sectionLBLeaderboardResultsContainer.appendChild(sectionLBLeaderboardHeaderTopResults);
    sectionLBLeaderboardBody.appendChild(sectionLBLeaderboardBodyResults);
    sectionLBLeaderboardResultsContainer.appendChild(sectionLBLeaderboardBody);
    sectionLBLeaderboard.appendChild(sectionLBLeaderboardResultsContainer);
    sectionLBFooter.appendChild(sectionLBFooterContent);
    sectionTournamentListBody.appendChild(sectionTournamentListBodyResults);
    sectionTournamentList.appendChild(sectionTournamentListBody);
    sectionTournamentList.appendChild(sectionTournamentBackAction);
    sectionTournamentDetailsHeader.appendChild(sectionTournamentDetailsHeaderLabel);
    sectionTournamentDetailsHeader.appendChild(sectionTournamentDetailsHeaderDate);
    sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsHeader);
    sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsBackBtn);
    sectionTournamentDetailsBodyContainer.appendChild(sectionTournamentDetailsBodyImageContainer);
    sectionTournamentDetailsBodyContainer.appendChild(sectionTournamentDetailsBody);
    sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsBodyContainer);
    sectionTournamentDetailsOptInContainer.appendChild(sectionTournamentDetailsOptInAction);
    sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsOptInContainer);
    sectionLBOptInContainer.appendChild(sectionLBOptInAction);
    sectionLB.appendChild(sectionLBHeader);
    sectionLB.appendChild(sectionLBDetails);
    sectionLB.appendChild(sectionLBLeaderboard);
    sectionLB.appendChild(sectionLBMissingMember);
    sectionLB.appendChild(sectionLBOptInContainer);
    sectionLB.appendChild(sectionLBFooter);
    sectionLB.appendChild(sectionTournamentDetailsContainer);
    sectionLB.appendChild(sectionTournamentList);
    return sectionLB;
  };

  this.achievementsAreaLayout = function () {
    var _this = this;

    var sectionACH = document.createElement('div');
    var sectionACHHeader = document.createElement('div');
    var sectionACHHeaderLabel = document.createElement('div');
    var sectionACHHeaderDate = document.createElement('div');
    var sectionACHHeaderClose = document.createElement('div');
    var sectionACHDetails = document.createElement('div');
    var sectionACHDetailsInfo = document.createElement('div');
    var sectionACHDetailsInfoIcon = document.createElement('div');
    var sectionACHDetailsContentContainer = document.createElement('div');
    var sectionACHDetailsContentContainerLabel = document.createElement('div');
    var sectionACHDetailsContentContainerDate = document.createElement('div');
    var sectionACHList = document.createElement('div');
    var sectionACHListBody = document.createElement('div');
    var sectionACHListBodyResults = document.createElement('div');
    var sectionACHFooter = document.createElement('div');
    var sectionACHFooterContent = document.createElement('div');
    var sectionAchievementDetailsContainer = document.createElement('div');
    var sectionAchievementDetailsHeader = document.createElement('div');
    var sectionAchievementDetailsHeaderLabel = document.createElement('div');
    var sectionAchievementDetailsHeaderDate = document.createElement('div');
    var sectionAchievementDetailsBackBtn = document.createElement('a');
    var sectionAchievementDetailsBodyContainer = document.createElement('div');
    var sectionAchievementDetailsBodyImageContainer = document.createElement('div');
    var sectionAchievementDetailsBody = document.createElement('div');
    sectionACH.setAttribute('class', _this.settings.lbWidget.settings.navigation.achievements.containerClass + ' cl-main-section-item');
    sectionACHHeader.setAttribute('class', 'cl-main-widget-ach-header');
    sectionACHHeaderLabel.setAttribute('class', 'cl-main-widget-ach-header-label');
    sectionACHHeaderDate.setAttribute('class', 'cl-main-widget-ach-header-date');
    sectionACHHeaderClose.setAttribute('class', 'cl-main-widget-ach-header-close');
    sectionACHDetails.setAttribute('class', 'cl-main-widget-ach-details');
    sectionACHDetailsInfo.setAttribute('class', 'cl-main-widget-ach-details-info');
    sectionACHDetailsInfoIcon.setAttribute('class', 'cl-main-widget-ach-details-info-icon');
    sectionACHDetailsContentContainer.setAttribute('class', 'cl-main-widget-ach-details-content');
    sectionACHDetailsContentContainerLabel.setAttribute('class', 'cl-main-widget-ach-details-content-label');
    sectionACHDetailsContentContainerDate.setAttribute('class', 'cl-main-widget-ach-details-content-date'); // Leaderboard result container

    sectionACHList.setAttribute('class', 'cl-main-widget-ach-list');
    sectionACHListBody.setAttribute('class', 'cl-main-widget-ach-list-body');
    sectionACHListBodyResults.setAttribute('class', 'cl-main-widget-ach-list-body-res'); // footer

    sectionACHFooter.setAttribute('class', 'cl-main-widget-ach-footer');
    sectionACHFooterContent.setAttribute('class', 'cl-main-widget-ach-footer-content'); // details section

    sectionAchievementDetailsContainer.setAttribute('class', 'cl-main-widget-ach-details-container');
    sectionAchievementDetailsHeader.setAttribute('class', 'cl-main-widget-ach-details-header');
    sectionAchievementDetailsHeaderLabel.setAttribute('class', 'cl-main-widget-ach-details-header-label');
    sectionAchievementDetailsHeaderDate.setAttribute('class', 'cl-main-widget-ach-details-header-date');
    sectionAchievementDetailsBackBtn.setAttribute('class', 'cl-main-widget-ach-details-back-btn');
    sectionAchievementDetailsBodyContainer.setAttribute('class', 'cl-main-widget-ach-details-body-container');
    sectionAchievementDetailsBodyImageContainer.setAttribute('class', 'cl-main-widget-ach-details-body-image-cont');
    sectionAchievementDetailsBody.setAttribute('class', 'cl-main-widget-ach-details-body');
    sectionACHHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.achievements.label;
    sectionACHFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
    sectionAchievementDetailsHeader.appendChild(sectionAchievementDetailsHeaderLabel);
    sectionAchievementDetailsHeader.appendChild(sectionAchievementDetailsHeaderDate);
    sectionAchievementDetailsContainer.appendChild(sectionAchievementDetailsHeader);
    sectionAchievementDetailsContainer.appendChild(sectionAchievementDetailsBackBtn);
    sectionAchievementDetailsBodyContainer.appendChild(sectionAchievementDetailsBodyImageContainer);
    sectionAchievementDetailsBodyContainer.appendChild(sectionAchievementDetailsBody);
    sectionAchievementDetailsContainer.appendChild(sectionAchievementDetailsBodyContainer);
    sectionACHHeader.appendChild(sectionACHHeaderLabel);
    sectionACHHeader.appendChild(sectionACHHeaderDate);
    sectionACHHeader.appendChild(sectionACHHeaderClose);
    sectionACHDetailsInfo.appendChild(sectionACHDetailsInfoIcon);
    sectionACHDetailsContentContainer.appendChild(sectionACHDetailsContentContainerLabel);
    sectionACHDetailsContentContainer.appendChild(sectionACHDetailsContentContainerDate);
    sectionACHDetails.appendChild(sectionACHDetailsInfo);
    sectionACHDetails.appendChild(sectionACHDetailsContentContainer);
    sectionACHListBody.appendChild(sectionACHListBodyResults);
    sectionACHList.appendChild(sectionACHListBody);
    sectionACHFooter.appendChild(sectionACHFooterContent);
    sectionACH.appendChild(sectionACHHeader);
    sectionACH.appendChild(sectionACHDetails);
    sectionACH.appendChild(sectionACHList);
    sectionACH.appendChild(sectionACHFooter);
    sectionACH.appendChild(sectionAchievementDetailsContainer);
    return sectionACH;
  };

  this.rewardsAreaLayout = function () {
    var _this = this;

    var sectionRewards = document.createElement('div');
    var sectionRewardsHeader = document.createElement('div');
    var sectionRewardsHeaderLabel = document.createElement('div');
    var sectionRewardsHeaderDate = document.createElement('div');
    var sectionRewardsHeaderClose = document.createElement('div');
    var sectionRewardsDetails = document.createElement('div');
    var sectionRewardsDetailsInfo = document.createElement('div');
    var sectionRewardsDetailsInfoIcon = document.createElement('div');
    var sectionRewardsDetailsContentContainer = document.createElement('div');
    var sectionRewardsDetailsContentContainerLabel = document.createElement('div');
    var sectionRewardsDetailsContentContainerDate = document.createElement('div');
    var sectionRewardsList = document.createElement('div');
    var sectionRewardsListBody = document.createElement('div');
    var sectionRewardsListBodyResults = document.createElement('div');
    var sectionRewardsFooter = document.createElement('div');
    var sectionRewardsFooterContent = document.createElement('div');
    var sectionRewardsDetailsContainer = document.createElement('div');
    var sectionRewardsDetailsHeader = document.createElement('div');
    var sectionRewardsDetailsHeaderLabel = document.createElement('div');
    var sectionRewardsDetailsHeaderDate = document.createElement('div');
    var sectionRewardsDetailsBackBtn = document.createElement('a');
    var sectionRewardsDetailsBodyContainer = document.createElement('div');
    var sectionRewardsDetailsBodyImageContainer = document.createElement('div');
    var sectionRewardsDetailsBody = document.createElement('div');
    var sectionRewardsWinningsContainer = document.createElement('div');
    var sectionRewardsWinningsIcon = document.createElement('div');
    var sectionRewardsWinningsValue = document.createElement('div');
    var sectionRewardsClaimContainer = document.createElement('div');
    var sectionRewardsClaimBtn = document.createElement('a');
    sectionRewards.setAttribute('class', _this.settings.lbWidget.settings.navigation.rewards.containerClass + ' cl-main-section-item');
    sectionRewardsHeader.setAttribute('class', 'cl-main-widget-reward-header');
    sectionRewardsHeaderLabel.setAttribute('class', 'cl-main-widget-reward-header-label');
    sectionRewardsHeaderDate.setAttribute('class', 'cl-main-widget-reward-header-date');
    sectionRewardsHeaderClose.setAttribute('class', 'cl-main-widget-reward-header-close');
    sectionRewardsDetails.setAttribute('class', 'cl-main-widget-reward-details');
    sectionRewardsDetailsInfo.setAttribute('class', 'cl-main-widget-reward-details-info');
    sectionRewardsDetailsInfoIcon.setAttribute('class', 'cl-main-widget-reward-details-info-icon');
    sectionRewardsDetailsContentContainer.setAttribute('class', 'cl-main-widget-reward-details-content');
    sectionRewardsDetailsContentContainerLabel.setAttribute('class', 'cl-main-widget-reward-details-content-label');
    sectionRewardsDetailsContentContainerDate.setAttribute('class', 'cl-main-widget-reward-details-content-date'); // Leaderboard result container

    sectionRewardsList.setAttribute('class', 'cl-main-widget-reward-list');
    sectionRewardsListBody.setAttribute('class', 'cl-main-widget-reward-list-body');
    sectionRewardsListBodyResults.setAttribute('class', 'cl-main-widget-reward-list-body-res'); // footer

    sectionRewardsFooter.setAttribute('class', 'cl-main-widget-reward-footer');
    sectionRewardsFooterContent.setAttribute('class', 'cl-main-widget-reward-footer-content'); // details section

    sectionRewardsDetailsContainer.setAttribute('class', 'cl-main-widget-reward-details-container');
    sectionRewardsDetailsHeader.setAttribute('class', 'cl-main-widget-reward-details-header');
    sectionRewardsDetailsHeaderLabel.setAttribute('class', 'cl-main-widget-reward-details-header-label');
    sectionRewardsDetailsHeaderDate.setAttribute('class', 'cl-main-widget-reward-details-header-date');
    sectionRewardsDetailsBackBtn.setAttribute('class', 'cl-main-widget-reward-details-back-btn');
    sectionRewardsDetailsBodyContainer.setAttribute('class', 'cl-main-widget-reward-details-body-container');
    sectionRewardsDetailsBodyImageContainer.setAttribute('class', 'cl-main-widget-reward-details-body-image-cont');
    sectionRewardsDetailsBody.setAttribute('class', 'cl-main-widget-reward-details-body');
    sectionRewardsWinningsContainer.setAttribute('class', 'cl-main-widget-reward-winnings-container');
    sectionRewardsWinningsIcon.setAttribute('class', 'cl-main-widget-reward-winnings-icon');
    sectionRewardsWinningsValue.setAttribute('class', 'cl-main-widget-reward-winnings-value');
    sectionRewardsClaimContainer.setAttribute('class', 'cl-main-widget-reward-claim-container');
    sectionRewardsClaimBtn.setAttribute('class', 'cl-main-widget-reward-claim-btn');
    sectionRewardsHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.rewards.label;
    sectionRewardsFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
    sectionRewardsClaimBtn.innerHTML = _this.settings.lbWidget.settings.translation.rewards.claim;
    sectionRewardsWinningsContainer.appendChild(sectionRewardsWinningsIcon);
    sectionRewardsWinningsContainer.appendChild(sectionRewardsWinningsValue);
    sectionRewardsClaimContainer.appendChild(sectionRewardsClaimBtn);
    sectionRewardsDetailsHeader.appendChild(sectionRewardsDetailsHeaderLabel);
    sectionRewardsDetailsHeader.appendChild(sectionRewardsDetailsHeaderDate);
    sectionRewardsDetailsContainer.appendChild(sectionRewardsDetailsHeader);
    sectionRewardsDetailsContainer.appendChild(sectionRewardsDetailsBackBtn);
    sectionRewardsDetailsBodyContainer.appendChild(sectionRewardsDetailsBodyImageContainer);
    sectionRewardsDetailsBodyContainer.appendChild(sectionRewardsDetailsBody);
    sectionRewardsDetailsBodyContainer.appendChild(sectionRewardsWinningsContainer);
    sectionRewardsDetailsContainer.appendChild(sectionRewardsDetailsBodyContainer);
    sectionRewardsDetailsContainer.appendChild(sectionRewardsClaimContainer);
    sectionRewardsHeader.appendChild(sectionRewardsHeaderLabel);
    sectionRewardsHeader.appendChild(sectionRewardsHeaderDate);
    sectionRewardsHeader.appendChild(sectionRewardsHeaderClose);
    sectionRewardsDetailsInfo.appendChild(sectionRewardsDetailsInfoIcon);
    sectionRewardsDetailsContentContainer.appendChild(sectionRewardsDetailsContentContainerLabel);
    sectionRewardsDetailsContentContainer.appendChild(sectionRewardsDetailsContentContainerDate);
    sectionRewardsDetails.appendChild(sectionRewardsDetailsInfo);
    sectionRewardsDetails.appendChild(sectionRewardsDetailsContentContainer);
    sectionRewardsListBody.appendChild(sectionRewardsListBodyResults);
    sectionRewardsList.appendChild(sectionRewardsListBody);
    sectionRewardsFooter.appendChild(sectionRewardsFooterContent);
    sectionRewards.appendChild(sectionRewardsHeader);
    sectionRewards.appendChild(sectionRewardsDetails);
    sectionRewards.appendChild(sectionRewardsList);
    sectionRewards.appendChild(sectionRewardsFooter);
    sectionRewards.appendChild(sectionRewardsDetailsContainer);
    return sectionRewards;
  };

  this.inboxAreaLayout = function () {
    var _this = this;

    var sectionInbox = document.createElement('div');
    var sectionInboxHeader = document.createElement('div');
    var sectionInboxHeaderLabel = document.createElement('div');
    var sectionInboxHeaderDate = document.createElement('div');
    var sectionInboxHeaderClose = document.createElement('div');
    var sectionInboxDetails = document.createElement('div');
    var sectionInboxDetailsInfo = document.createElement('div');
    var sectionInboxDetailsInfoIcon = document.createElement('div');
    var sectionInboxDetailsContentContainer = document.createElement('div');
    var sectionInboxDetailsContentContainerLabel = document.createElement('div');
    var sectionInboxDetailsContentContainerDate = document.createElement('div');
    var sectionInboxList = document.createElement('div');
    var sectionInboxListBody = document.createElement('div');
    var sectionInboxListBodyResults = document.createElement('div');
    var sectionInboxFooter = document.createElement('div');
    var sectionInboxFooterContent = document.createElement('div');
    var sectionInboxDetailsContainer = document.createElement('div');
    var sectionInboxDetailsHeader = document.createElement('div');
    var sectionInboxDetailsHeaderLabel = document.createElement('div');
    var sectionInboxDetailsHeaderDate = document.createElement('div');
    var sectionInboxDetailsBackBtn = document.createElement('a');
    var sectionInboxDetailsBodyContainer = document.createElement('div');
    var sectionInboxDetailsBody = document.createElement('div');
    sectionInbox.setAttribute('class', _this.settings.lbWidget.settings.navigation.inbox.containerClass + ' cl-main-section-item');
    sectionInboxHeader.setAttribute('class', 'cl-main-widget-inbox-header');
    sectionInboxHeaderLabel.setAttribute('class', 'cl-main-widget-inbox-header-label');
    sectionInboxHeaderDate.setAttribute('class', 'cl-main-widget-inbox-header-date');
    sectionInboxHeaderClose.setAttribute('class', 'cl-main-widget-inbox-header-close');
    sectionInboxDetails.setAttribute('class', 'cl-main-widget-inbox-details');
    sectionInboxDetailsInfo.setAttribute('class', 'cl-main-widget-inbox-details-info');
    sectionInboxDetailsInfoIcon.setAttribute('class', 'cl-main-widget-inbox-details-info-icon');
    sectionInboxDetailsContentContainer.setAttribute('class', 'cl-main-widget-inbox-details-content');
    sectionInboxDetailsContentContainerLabel.setAttribute('class', 'cl-main-widget-inbox-details-content-label');
    sectionInboxDetailsContentContainerDate.setAttribute('class', 'cl-main-widget-inbox-details-content-date'); // Leaderboard result container

    sectionInboxList.setAttribute('class', 'cl-main-widget-inbox-list');
    sectionInboxListBody.setAttribute('class', 'cl-main-widget-inbox-list-body');
    sectionInboxListBodyResults.setAttribute('class', 'cl-main-widget-inbox-list-body-res'); // footer

    sectionInboxFooter.setAttribute('class', 'cl-main-widget-inbox-footer');
    sectionInboxFooterContent.setAttribute('class', 'cl-main-widget-inbox-footer-content'); // details section

    sectionInboxDetailsContainer.setAttribute('class', 'cl-main-widget-inbox-details-container');
    sectionInboxDetailsHeader.setAttribute('class', 'cl-main-widget-inbox-details-header');
    sectionInboxDetailsHeaderLabel.setAttribute('class', 'cl-main-widget-inbox-details-header-label');
    sectionInboxDetailsHeaderDate.setAttribute('class', 'cl-main-widget-inbox-details-header-date');
    sectionInboxDetailsBackBtn.setAttribute('class', 'cl-main-widget-inbox-details-back-btn');
    sectionInboxDetailsBodyContainer.setAttribute('class', 'cl-main-widget-inbox-details-body-container');
    sectionInboxDetailsBody.setAttribute('class', 'cl-main-widget-inbox-details-body');
    sectionInboxHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.messages.label;
    sectionInboxFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
    sectionInboxHeader.appendChild(sectionInboxHeaderLabel);
    sectionInboxHeader.appendChild(sectionInboxHeaderDate);
    sectionInboxHeader.appendChild(sectionInboxHeaderClose);
    sectionInboxDetailsInfo.appendChild(sectionInboxDetailsInfoIcon);
    sectionInboxDetailsContentContainer.appendChild(sectionInboxDetailsContentContainerLabel);
    sectionInboxDetailsContentContainer.appendChild(sectionInboxDetailsContentContainerDate);
    sectionInboxDetails.appendChild(sectionInboxDetailsInfo);
    sectionInboxDetails.appendChild(sectionInboxDetailsContentContainer);
    sectionInboxListBody.appendChild(sectionInboxListBodyResults);
    sectionInboxList.appendChild(sectionInboxListBody);
    sectionInboxDetailsHeader.appendChild(sectionInboxDetailsHeaderLabel);
    sectionInboxDetailsHeader.appendChild(sectionInboxDetailsHeaderDate);
    sectionInboxDetailsContainer.appendChild(sectionInboxDetailsHeader);
    sectionInboxDetailsContainer.appendChild(sectionInboxDetailsBackBtn);
    sectionInboxDetailsBodyContainer.appendChild(sectionInboxDetailsBody);
    sectionInboxDetailsContainer.appendChild(sectionInboxDetailsBodyContainer);
    sectionInboxFooter.appendChild(sectionInboxFooterContent);
    sectionInbox.appendChild(sectionInboxHeader);
    sectionInbox.appendChild(sectionInboxDetails);
    sectionInbox.appendChild(sectionInboxList);
    sectionInbox.appendChild(sectionInboxFooter);
    sectionInbox.appendChild(sectionInboxDetailsContainer);
    return sectionInbox;
  };

  this.leaderboardHeader = function () {
    var _this = this;

    var rankCol = document.createElement('div');
    var iconCol = document.createElement('div');
    var nameCol = document.createElement('div');
    var growthCol = document.createElement('div');
    var pointsCol = document.createElement('div');
    rankCol.setAttribute('class', 'cl-rank-col cl-col');
    iconCol.setAttribute('class', 'cl-icon-col cl-col');
    nameCol.setAttribute('class', 'cl-name-col cl-col');
    growthCol.setAttribute('class', 'cl-growth-col cl-col');
    pointsCol.setAttribute('class', 'cl-points-col cl-col');
    rankCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.rank;
    iconCol.innerHTML = '';
    nameCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.name;
    growthCol.innerHTML = '';
    pointsCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.points;

    _this.settings.leaderboard.header.appendChild(rankCol);

    _this.settings.leaderboard.header.appendChild(iconCol);

    _this.settings.leaderboard.header.appendChild(nameCol);

    _this.settings.leaderboard.header.appendChild(growthCol);

    _this.settings.leaderboard.header.appendChild(pointsCol);

    var rewardCol = document.createElement('div');
    var rewardEnabled = typeof _this.settings.lbWidget.settings.competition.activeContest !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest !== null && typeof _this.settings.lbWidget.settings.competition.activeContest.rewards !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest.rewards.length > 0;
    rewardCol.setAttribute('class', 'cl-reward-col cl-col' + (rewardEnabled ? ' cl-col-reward-enabled' : ''));
    rewardCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.prize;
    Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(_this.settings.leaderboard.header, 'cl-reward-enabled');

    _this.settings.leaderboard.header.appendChild(rewardCol);
  };

  this.leaderboardRow = function (rank, icon, name, change, growth, points, reward, count, memberFound) {
    var _this = this;

    var cellWrapper = document.createElement('div');
    var rankCel = document.createElement('div');
    var rankCelValue = document.createElement('div');
    var iconCel = document.createElement('div');
    var iconCelImg = new Image();
    var nameCel = document.createElement('div');
    var growthCel = document.createElement('div');
    var pointsCel = document.createElement('div');
    var memberFoundClass = memberFound ? ' cl-lb-member-row' : '';
    cellWrapper.setAttribute('class', 'cl-lb-row cl-lb-rank-' + rank + ' cl-lb-count-' + count + memberFoundClass);
    rankCel.setAttribute('class', 'cl-rank-col cl-col cl-rank-' + rank);
    rankCelValue.setAttribute('class', 'cl-rank-col-value');
    iconCel.setAttribute('class', 'cl-icon-col cl-col');
    iconCelImg.setAttribute('class', 'cl-icon-col-img');
    nameCel.setAttribute('class', 'cl-name-col cl-col');
    growthCel.setAttribute('class', 'cl-growth-col cl-col');
    pointsCel.setAttribute('class', 'cl-points-col cl-col');
    cellWrapper.dataset.rank = rank;
    rankCelValue.innerHTML = rank;
    nameCel.innerHTML = name;
    growthCel.dataset.growth = change < 0 ? 'down' : change > 0 ? 'up' : 'same';
    growthCel.dataset.change = change;
    growthCel.innerHTML = growth;
    pointsCel.innerHTML = points;

    if (icon.length > 0) {
      iconCelImg.src = icon;
      iconCelImg.alt = name;
    } else {
      iconCelImg.style.display = 'none';
    }

    rankCel.appendChild(rankCelValue);
    cellWrapper.appendChild(rankCel);
    iconCel.appendChild(iconCelImg);
    cellWrapper.appendChild(iconCel);
    cellWrapper.appendChild(nameCel);
    cellWrapper.appendChild(growthCel);
    cellWrapper.appendChild(pointsCel);
    var rewardCel = document.createElement('div');
    var rewardEnabled = typeof _this.settings.lbWidget.settings.competition.activeContest !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest !== null && typeof _this.settings.lbWidget.settings.competition.activeContest.rewards !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest.rewards.length > 0;
    rewardCel.setAttribute('class', 'cl-reward-col cl-col' + (rewardEnabled ? ' cl-col-reward-enabled' : ''));
    rewardCel.innerHTML = typeof reward !== 'undefined' && reward !== null ? reward : '';
    Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(cellWrapper, 'cl-reward-enabled');
    cellWrapper.appendChild(rewardCel);
    return cellWrapper;
  };

  this.leaderboardRowUpdate = function (rank, icon, name, change, growth, points, reward, count, memberFound, onMissing) {
    var _this = this;

    var cellRow = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.container, '.cl-lb-rank-' + rank + '.cl-lb-count-' + count);

    if (cellRow === null) {
      onMissing(rank, icon, name, change, growth, points, reward, count, memberFound);
    } else {
      var rankCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(cellRow, '.cl-rank-col-value');
      var iconCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(cellRow, '.cl-icon-col-img');
      var nameCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(cellRow, '.cl-name-col');
      var growthCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(cellRow, '.cl-growth-col');
      var pointsCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(cellRow, '.cl-points-col');
      var memberFoundClass = 'cl-lb-member-row';
      var rowHasClass = Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_2__["default"])(cellRow, memberFoundClass);

      if (count > 0 && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_2__["default"])(cellRow, 'cl-shared-rank')) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(cellRow, 'cl-shared-rank');
      }

      if (memberFound && !rowHasClass) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(cellRow, memberFoundClass);
      } else if (!memberFound && rowHasClass) {
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(cellRow, memberFoundClass);
      }

      cellRow.dataset.rank = rank;
      rankCel.innerHTML = rank;
      nameCel.innerHTML = name;
      growthCel.dataset.growth = change < 0 ? 'down' : change > 0 ? 'up' : 'same';
      growthCel.dataset.change = change;
      growthCel.innerHTML = growth;
      pointsCel.innerHTML = points;

      if (icon.length > 0) {
        iconCel.src = icon;
        iconCel.alt = name;
        iconCel.style.display = 'block';
      } else {
        iconCel.style.display = 'none';
      }

      if (typeof _this.settings.lbWidget.settings.competition.activeContest !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest !== null && typeof _this.settings.lbWidget.settings.competition.activeContest.rewards !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest.rewards.length > 0) {
        var rewardCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(cellRow, '.cl-reward-col');

        if (rewardCel !== null) {
          rewardCel.innerHTML = typeof reward !== 'undefined' && reward !== null ? reward : '';
        }
      }
    }
  };

  this.populateLeaderboardResultsWithDefaultEntries = function () {
    var _this = this;

    var topResults = [];
    var remainingResults = [];

    for (var i = 0; i < _this.settings.leaderboard.topResultSize; i++) {
      var rank = i + 1;
      topResults.push({
        name: '--',
        rank: rank,
        points: '--',
        memberId: '',
        memberRefId: ''
      });
    }

    for (var s = _this.settings.leaderboard.topResultSize; s < _this.settings.leaderboard.defaultEmptyList; s++) {
      var _rank = s + 1;

      remainingResults.push({
        name: '--',
        rank: _rank,
        points: '--',
        memberId: '',
        memberRefId: ''
      });
    }

    _this.updateLeaderboardTopResults(topResults);

    _this.updateLeaderboardResults(remainingResults);
  };

  this.updateLeaderboardTopResults = function (topResults) {
    var _this = this;

    var rankCheck = [];
    var cleanupRankCheck = []; // cleanup

    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(topResults, function (lb) {
      cleanupRankCheck.push(lb.rank);
      Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.topResults, '.cl-lb-rank-' + lb.rank + '.cl-shared-rank'), function (obj) {
        Object(_utils_remove__WEBPACK_IMPORTED_MODULE_8__["default"])(obj);
      });
    });
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.topResults, '.cl-lb-row'), function (obj) {
      var rank = parseInt(obj.dataset.rank);

      if (cleanupRankCheck.indexOf(rank) === -1 && rank > _this.settings.leaderboard.defaultEmptyList) {
        Object(_utils_remove__WEBPACK_IMPORTED_MODULE_8__["default"])(obj);
      }
    });
    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(topResults, function (lb) {
      var count = 0;

      var icon = _this.settings.lbWidget.populateIdenticonBase64Image(lb.memberId);

      var memberFound = _this.settings.lbWidget.settings.memberId === lb.memberId || _this.settings.lbWidget.settings.memberId === lb.memberRefId;
      var memberName = memberFound ? _this.settings.lbWidget.settings.translation.leaderboard.you : lb.name;

      var reward = _this.getReward(lb.rank);

      var change = typeof lb.change === 'undefined' ? 0 : lb.change;
      var growthType = change < 0 ? 'down' : change > 0 ? 'up' : 'same';
      var growthIcon = "<span class='cl-growth-icon cl-growth-" + growthType + "'></span>";

      var formattedPoints = _this.settings.lbWidget.settings.leaderboard.pointsFormatter(lb.points);

      if (rankCheck.indexOf(lb.rank) !== -1) {
        for (var rc = 0; rc < rankCheck.length; rc++) {
          if (lb.rank === rankCheck[rc]) {
            count++;
          }
        }
      }

      _this.leaderboardRowUpdate(lb.rank, icon, // icon
      memberName, change, growthIcon, // growth
      formattedPoints, reward, // reward
      count, memberFound, function (rank, icon, name, change, growth, points, reward, count, memberFound) {
        var newRow = _this.leaderboardRow(rank, icon, name, change, growth, points, reward, count, memberFound);

        var prevCellRow = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.container, '.cl-lb-rank-' + rank + '.cl-lb-count-' + (count - 1));

        if (prevCellRow !== null && typeof prevCellRow.length === 'undefined') {
          Object(_utils_appendNext__WEBPACK_IMPORTED_MODULE_9__["default"])(prevCellRow, newRow);
        } else {
          _this.settings.leaderboard.topResults.appendChild(newRow);
        }
      });

      rankCheck.push(lb.rank);
    });
  };

  this.getReward = function (rank) {
    var _this = this;

    var rewardResponse = [];

    if (typeof _this.settings.lbWidget.settings.competition.activeContest !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest !== null) {
      Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.lbWidget.settings.competition.activeContest.rewards, function (reward) {
        if (reward.rewardRank instanceof Array && reward.rewardRank.indexOf(rank) !== -1) {
          rewardResponse.push(_this.settings.lbWidget.settings.partialFunctions.rewardFormatter(reward));
        }
      });
    }

    return rewardResponse.join(', ');
  };

  this.updateLeaderboardResults = function (remainingResults) {
    var _this = this;

    var rankCheck = [];
    var cleanupRankCheck = []; // cleanup

    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(remainingResults, function (lb) {
      cleanupRankCheck.push(lb.rank);
      Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.list, '.cl-lb-rank-' + lb.rank + '.cl-shared-rank'), function (obj) {
        Object(_utils_remove__WEBPACK_IMPORTED_MODULE_8__["default"])(obj);
      });
    });
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.container, '.cl-lb-row'), function (obj) {
      var rank = parseInt(obj.dataset.rank);

      if (cleanupRankCheck.indexOf(rank) === -1 && rank > _this.settings.leaderboard.defaultEmptyList) {
        Object(_utils_remove__WEBPACK_IMPORTED_MODULE_8__["default"])(obj);
      }
    });
    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(remainingResults, function (lb) {
      var count = 0;

      var icon = _this.settings.lbWidget.populateIdenticonBase64Image(lb.memberId);

      var memberFound = _this.settings.lbWidget.settings.memberId === lb.memberId || _this.settings.lbWidget.settings.memberId === lb.memberRefId;
      var memberName = memberFound ? _this.settings.lbWidget.settings.translation.leaderboard.you : lb.name;

      var reward = _this.getReward(lb.rank);

      var change = typeof lb.change === 'undefined' ? 0 : lb.change;
      var growthType = change < 0 ? 'down' : change > 0 ? 'up' : 'same';
      var growthIcon = "<span class='cl-growth-icon cl-growth-" + growthType + "'></span>";

      var formattedPoints = _this.settings.lbWidget.settings.leaderboard.pointsFormatter(lb.points);

      if (rankCheck.indexOf(lb.rank) !== -1) {
        for (var rc = 0; rc < rankCheck.length; rc++) {
          if (lb.rank === rankCheck[rc]) {
            count++;
          }
        }
      }

      _this.leaderboardRowUpdate(lb.rank, icon, // icon
      memberName, change, growthIcon, // growth
      formattedPoints, reward, count, memberFound, function (rank, icon, name, change, growth, points, reward, count, memberFound) {
        var newRow = _this.leaderboardRow(rank, icon, name, name, growth, points, reward, count, memberFound);

        var prevCellRow = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.container, '.cl-lb-rank-' + rank + '.cl-lb-count-' + (count - 1));

        if (prevCellRow !== null && typeof prevCellRow.length === 'undefined') {
          Object(_utils_appendNext__WEBPACK_IMPORTED_MODULE_9__["default"])(prevCellRow, newRow);
        } else {
          _this.settings.leaderboard.list.appendChild(newRow);
        }
      });

      rankCheck.push(lb.rank);
    });
  };

  this.updateLeaderboard = function () {
    var _this = this;

    var topResults = [];
    var remainingResults = [];

    _this.populateLeaderboardResultsWithDefaultEntries();

    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lb) {
      if (lb.rank <= _this.settings.leaderboard.topResultSize) {
        topResults.push(lb);
      } else {
        remainingResults.push(lb);
      }
    });

    _this.updateLeaderboardTopResults(topResults);

    _this.updateLeaderboardResults(remainingResults);

    var member = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.list, '.cl-lb-member-row');

    if (member !== null) {
      _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.list.parentNode));

      _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.resultContainer));
    } else {
      _this.missingMemberReset();
    }
  };

  this.updateLeaderboardTime = function () {
    var _this = this;

    var diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledStart).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());

    var date = _this.settings.lbWidget.settings.translation.miniLeaderboard.startsIn + ': ' + _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));

    if (_this.settings.leaderboard.timerInterval) {
      clearTimeout(_this.settings.leaderboard.timerInterval);
    }

    if (diff <= 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode === 0) {
      date = _this.settings.lbWidget.settings.translation.miniLeaderboard.starting;
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 1) {
      date = _this.settings.lbWidget.settings.translation.tournaments.starting;
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 2) {
      diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledEnd).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());
      date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));

      if (diff <= 0) {
        date = _this.settings.lbWidget.settings.translation.tournaments.finishing;
      }
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 3) {
      date = _this.settings.lbWidget.settings.translation.tournaments.finishing;
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode >= 4) {
      date = _this.settings.lbWidget.settings.translation.tournaments.finished;
    }

    _this.settings.headerDate.innerHTML = date;
    _this.settings.labelDate.innerHTML = date;
    _this.settings.detailsContainerDate.innerHTML = date;
    _this.settings.leaderboard.timerInterval = setTimeout(function () {
      _this.updateLeaderboardTime();
    }, 1000);
  };

  this.getActiveCompetitionDescription = function () {
    return this.settings.lbWidget.settings.competition.activeContest !== null && this.settings.lbWidget.settings.competition.activeContest.description.length > 0 ? this.settings.lbWidget.settings.competition.activeContest.description : this.settings.lbWidget.settings.competition.activeCompetition !== null ? this.settings.lbWidget.settings.competition.activeCompetition.description : '';
  };

  this.extractImage = function (body, imageContainer, isBodyVirtualOpt) {
    var _this = this;

    var activeImageContainer = Object(_utils_closest__WEBPACK_IMPORTED_MODULE_6__["default"])(body, '.cl-main-section-image-banner-active');
    var imageFound = false;
    var isBodyVirtual = typeof isBodyVirtualOpt === 'boolean' ? isBodyVirtualOpt : false;

    if (_this.settings.lbWidget.settings.competition.extractImageHeader) {
      Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(body, 'img'), function (img, key, count) {
        if (count === 0) {
          imageFound = true;
          var newImg = img.cloneNode(true);
          Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(newImg, 'cl-main-widget-lb-details-image');
          imageContainer.appendChild(newImg);
          Object(_utils_remove__WEBPACK_IMPORTED_MODULE_8__["default"])(img);
        }
      });
    }

    if (!imageFound && activeImageContainer !== null) {
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(activeImageContainer, 'cl-main-section-image-banner-active');
    } else if (imageFound && activeImageContainer === null && _this.settings.lbWidget.settings.leaderboard.layoutSettings.imageBanner && !isBodyVirtual) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(Object(_utils_closest__WEBPACK_IMPORTED_MODULE_6__["default"])(body, '.cl-main-section-item'), 'cl-main-section-image-banner-active');
    }
  };

  this.leaderboardDetailsUpdate = function () {
    var _this = this;

    var mainLabel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.section, '.cl-main-widget-lb-details-content-label-text');
    var body = null;

    if (!_this.settings.lbWidget.settings.leaderboard.layoutSettings.titleLinkToDetailsPage) {
      body = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.section, '.cl-main-widget-lb-details-description');
      body.innerHTML = _this.getActiveCompetitionDescription();
    }

    if (_this.settings.lbWidget.settings.leaderboard.layoutSettings.imageBanner) {
      var image = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.section, '.cl-main-widget-lb-details-image-container');
      image.innerHTML = '';

      if (body === null) {
        body = document.createElement('div');
        body.innerHTML = _this.getActiveCompetitionDescription();

        _this.extractImage(body, image, true);
      } else {
        _this.extractImage(body, image, false);
      }
    }

    mainLabel.innerHTML = _this.settings.lbWidget.settings.competition.activeContest !== null ? _this.settings.lbWidget.settings.competition.activeContest.label : _this.settings.lbWidget.settings.translation.tournaments.noAvailableCompetitions;
  };

  this.showEmbeddedCompetitionDetailsContent = function (callback) {
    if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_2__["default"])(this.settings.section, 'cl-main-active-embedded-description')) {
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(this.settings.section, 'cl-main-active-embedded-description');
    } else {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(this.settings.section, 'cl-main-active-embedded-description');
    }

    if (typeof callback === 'function') callback();
  };

  this.hideEmbeddedCompetitionDetailsContent = function (callback) {
    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(this.settings.section, 'cl-main-active-embedded-description');
    if (typeof callback === 'function') callback();
  };

  this.leaderboardOptInCheck = function () {
    var _this = this;

    var optIn = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.section, '.cl-main-widget-lb-optin-action');

    if (typeof _this.settings.lbWidget.settings.competition.activeCompetition !== 'undefined' && _this.settings.lbWidget.settings.competition.activeCompetition !== null && typeof _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired === 'boolean' && _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired) {
      if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optin === 'boolean' && !_this.settings.lbWidget.settings.competition.activeCompetition.optin) {
        optIn.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
        optIn.parentNode.style.display = 'block';
      } else {
        optIn.parentNode.style.display = 'none';
      }
    } else {
      optIn.parentNode.style.display = 'none';
    }
  }; // cleanup/recover activity


  this.preLoaderRerun = function () {
    var _this = this;

    if (_this.settings.preLoader.preLoaderActive && _this.settings.preLoader.preloaderCallbackRecovery !== null && _this.settings.preLoader.preLoaderlastAttempt !== null && typeof _this.settings.preLoader.preLoaderlastAttempt === 'number' && _this.settings.preLoader.preLoaderlastAttempt + 8000 < new Date().getTime()) {
      _this.settings.preLoader.preloaderCallbackRecovery();
    }
  };

  this.preloader = function () {
    var _this = this;

    var preLoader = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.section, '.cl-main-widget-pre-loader'); // var content = query(_this.settings.section, '.cl-main-widget-pre-loader-content');

    return {
      show: function show(callback) {
        _this.settings.preLoader.preLoaderActive = true;
        _this.settings.preLoader.preLoaderlastAttempt = new Date().getTime();
        preLoader.style.display = 'block';
        setTimeout(function () {
          preLoader.style.opacity = 1;
        }, 20);

        if (_this.settings.preLoader.preloaderCallbackRecovery === null && typeof callback === 'function') {
          _this.settings.preLoader.preloaderCallbackRecovery = callback;
        }

        callback();
      },
      hide: function hide() {
        _this.settings.preLoader.preLoaderActive = false;
        _this.settings.preLoader.preLoaderlastAttempt = null;
        preLoader.style.opacity = 0;

        if (_this.settings.preLoader.preloaderCallbackRecovery !== null) {
          _this.settings.preLoader.preloaderCallbackRecovery = null;
        }

        setTimeout(function () {
          preLoader.style.display = 'none';
        }, 200);
      }
    };
  };

  this.destroyLayout = function () {
    var _this = this;

    if (_this.settings.container !== null) {
      Object(_utils_remove__WEBPACK_IMPORTED_MODULE_8__["default"])(_this.settings.container);
      Object(_utils_remove__WEBPACK_IMPORTED_MODULE_8__["default"])(_this.settings.overlayContainer);
    }

    _this.settings.container = null;
    _this.settings.overlayContainer = null;
  };

  this.loadLeaderboard = function (callback) {
    var _this = this;

    if (_this.settings.container === null) {
      _this.settings.container = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.layout());
      _this.settings.overlayContainer = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.overlayLayout());
      _this.settings.navigation = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-navigation-container');
      _this.settings.section = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-section-container');
      _this.settings.leaderboard.container = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.section, '.cl-main-widget-lb-leaderboard');
      _this.settings.leaderboard.header = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.container, '.cl-main-widget-lb-leaderboard-header-labels');
      _this.settings.leaderboard.resultContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.container, '.cl-main-widget-lb-leaderboard-res-container');
      _this.settings.leaderboard.list = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.container, '.cl-main-widget-lb-leaderboard-body-res');
      _this.settings.leaderboard.topResults = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.container, '.cl-main-widget-lb-leaderboard-header-top-res');
      _this.settings.detailsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-lb-details-container');
      _this.settings.tournamentListContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-tournaments-list');
      _this.settings.detailsContainerDate = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-lb-details-header-date');
      _this.settings.headerDate = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-lb-header-date');
      _this.settings.labelDate = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-lb-details-content-date');
      _this.settings.achievement.container = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.' + _this.settings.lbWidget.settings.navigation.achievements.containerClass);
      _this.settings.achievement.detailsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-ach-details-container');
      _this.settings.reward.container = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.' + _this.settings.lbWidget.settings.navigation.rewards.containerClass);
      _this.settings.reward.detailsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-reward-details-container');
      _this.settings.messages.container = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.' + _this.settings.lbWidget.settings.navigation.inbox.containerClass);
      _this.settings.messages.detailsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-inbox-details-container');

      _this.mainNavigationCheck();

      _this.leaderboardHeader();
    }

    _this.eventListeners();

    _this.leaderboardOptInCheck();

    _this.leaderboardDetailsUpdate();

    _this.updateLeaderboard();

    if (_this.settings.lbWidget.settings.competition.activeContest !== null) {
      _this.updateLeaderboardTime();
    }

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.clearAll = function () {
    var _this = this;

    _this.settings.active = false;

    if (_this.settings.leaderboard.timerInterval) {
      clearTimeout(_this.settings.leaderboard.timerInterval);
    }

    _this.settings.preLoader.preLoaderActive = false;
  };

  this.hide = function (callback) {
    var _this = this;

    _this.clearAll();

    if (_this.settings.container !== null) {
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.container, 'cl-show');
      setTimeout(function () {
        _this.settings.container.style.display = 'none';
        _this.settings.overlayContainer.style.display = 'none';

        _this.hideCompetitionDetails();

        _this.hideAchievementDetails();

        if (typeof callback === 'function') {
          callback();
        }
      }, 30);
    } else if (typeof callback === 'function') {
      callback();
    }
  };

  this.missingMember = function (isVisible) {
    var _this = this;

    var area = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-lb-missing-member');
    var member = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.list, '.cl-lb-member-row');

    if (area !== null && member !== null) {
      area.innerHTML = member.innerHTML;
    }

    if (!isVisible) {
      if (area !== null && member !== null) {
        area.style.display = 'block';
      } else {
        area.style.display = 'none';
      }
    } else {
      area.style.display = 'none';
    }
  };

  this.missingMemberReset = function () {
    var _this = this;

    var area = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-lb-missing-member');
    area.innerHTML = '';
  };

  this.isElementVisibleInView = function (el, container) {
    var position = el.getBoundingClientRect();
    var elemContainer = container.getBoundingClientRect();
    var elemTop = position.top;
    var elemBottom = position.bottom;
    var elemHeight = position.height;
    return elemTop <= elemContainer.top ? elemContainer.top - elemTop <= elemHeight : elemBottom - elemContainer.bottom <= elemHeight;
  };

  var onresizeInitialised = false;

  this.eventListeners = function () {
    var _this = this; // unique solution to support horizontal mobile orientation


    if (_this.settings.leaderboard.resultContainer !== null && _this.settings.leaderboard.resultContainer.onscroll === null) {
      _this.settings.leaderboard.resultContainer.onscroll = function (evt) {
        evt.preventDefault();
        var member = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.list, '.cl-lb-member-row');

        if (member !== null) {
          _this.missingMember(_this.isElementVisibleInView(member, evt.target));
        }
      };
    }

    if (_this.settings.leaderboard.list !== null && _this.settings.leaderboard.list.parentNode.onscroll === null) {
      _this.settings.leaderboard.list.parentNode.onscroll = function (evt) {
        evt.preventDefault();
        var member = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.list, '.cl-lb-member-row');

        if (member !== null) {
          _this.missingMember(_this.isElementVisibleInView(member, evt.target));
        }
      };
    }

    if (!onresizeInitialised) {
      onresizeInitialised = true;

      window.onresize = function (evt) {
        var member = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.list, '.cl-lb-member-row');

        if (member !== null) {
          _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.list.parentNode));

          _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.resultContainer));
        }
      };
    }
  }; // this.checkLeaderboardScrollContainer = function(){
  //  var _this = this,
  //    lbScrollContainer = query(_this.settings.leaderboard.container, ".cl-main-widget-lb-leaderboard-body");
  //
  //  if( scrollEnabled(lbScrollContainer) ){
  //    addClass(lbScrollContainer, "cl-element-scrollable");
  //  }else{
  //    removeClass(lbScrollContainer, "cl-element-scrollable");
  //  }
  // };


  this.competitionDetailsOptInButtonState = function () {
    var _this = this;

    var optIn = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.detailsContainer, '.cl-main-widget-lb-details-optin-action');

    if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired === 'boolean' && _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired) {
      if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optin === 'boolean' && !_this.settings.lbWidget.settings.competition.activeCompetition.optin) {
        optIn.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(optIn, 'cl-disabled');
      } else {
        optIn.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.registered;
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(optIn, 'cl-disabled');
      }

      optIn.parentNode.style.display = 'block';
    } else {
      optIn.parentNode.style.display = 'none';
    }
  };

  this.loadCompetitionDetails = function (callback) {
    var _this = this;

    var label = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.detailsContainer, '.cl-main-widget-lb-details-header-label'); // var date = query(_this.settings.detailsContainer, '.cl-main-widget-lb-details-header-date');

    var body = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.detailsContainer, '.cl-main-widget-lb-details-body');
    var image = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.detailsContainer, '.cl-main-widget-lb-details-body-image-cont');
    image.innerHTML = '';
    label.innerHTML = _this.settings.lbWidget.settings.competition.activeContest.label.length > 0 ? _this.settings.lbWidget.settings.competition.activeContest.label : _this.settings.lbWidget.settings.competition.activeCompetition.label;
    body.innerHTML = _this.settings.lbWidget.settings.competition.activeContest.description.length > 0 ? _this.settings.lbWidget.settings.competition.activeContest.description : _this.settings.lbWidget.settings.competition.activeCompetition.description;

    _this.competitionDetailsOptInButtonState();

    _this.settings.detailsContainer.style.display = 'block';
    _this.settings.headerDate.style.display = 'none';

    _this.extractImage(body, image);

    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(_this.settings.detailsContainer, 'cl-show');
      if (typeof callback === 'function') callback();
    }, 50);
  };

  this.loadCompetitionList = function (callback, ajaxInstance) {
    var _this = this;

    var listResContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.tournamentListContainer, '.cl-main-widget-tournaments-list-body-res');
    var listIcon = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-lb-header-list-icon');

    var preLoader = _this.preloader();

    preLoader.show(function () {
      listIcon.style.opacity = '0';

      _this.settings.lbWidget.checkForAvailableCompetitions(function () {
        var accordionObj = _this.accordionStyle(_this.settings.tournamentsSection.accordionLayout, function (accordionSection, listContainer, topEntryContainer, layout) {
          var tournamentData = _this.settings.lbWidget.settings.tournaments[layout.type];

          if (typeof tournamentData !== 'undefined') {
            if (tournamentData.length === 0) {
              accordionSection.style.display = 'none';
            }

            Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(tournamentData, function (tournament, key, count) {
              if (count + 1 <= layout.showTopResults && Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(topEntryContainer, '.cl-tournament-' + tournament.id) === null) {
                var topEntryContaineRlistItem = _this.tournamentItem(tournament);

                topEntryContainer.appendChild(topEntryContaineRlistItem);
              }

              if (Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(listContainer, '.cl-tournament-' + tournament.id) === null) {
                var listItem = _this.tournamentItem(tournament);

                listContainer.appendChild(listItem);
              }
            });
          }
        });

        listResContainer.innerHTML = '';
        listResContainer.appendChild(accordionObj);
        _this.settings.tournamentListContainer.style.display = 'block';
        setTimeout(function () {
          Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(_this.settings.tournamentListContainer, 'cl-show');
          if (typeof callback === 'function') callback();
          preLoader.hide();
        }, 50);
      }, ajaxInstance);
    });
  };

  this.hideCompetitionList = function (callback) {
    var _this = this;

    var listIcon = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-lb-header-list-icon');
    listIcon.style.opacity = '1';

    _this.hideEmbeddedCompetitionDetailsContent();

    _this.missingMemberReset();

    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.tournamentListContainer, 'cl-show');
    setTimeout(function () {
      _this.settings.tournamentListContainer.style.display = 'none';
      if (typeof callback === 'function') callback();
    }, 200);
  };

  this.hideCompetitionDetails = function (callback) {
    var _this = this;

    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.detailsContainer, 'cl-show');
    setTimeout(function () {
      _this.settings.detailsContainer.style.display = 'none';
      _this.settings.headerDate.style.display = 'block';
      if (typeof callback === 'function') callback();
    }, 200);
  };

  this.achievementItem = function (ach, achieved, perc) {
    var _this = this;

    var listItem = document.createElement('div');
    var detailsContainer = document.createElement('div');
    var detailsWrapper = document.createElement('div');
    var label = document.createElement('div');
    var category = document.createElement('div');
    var description = document.createElement('div');
    var progressionWrapper = document.createElement('div');
    var progressionCont = document.createElement('div');
    var progressionBar = document.createElement('div');
    var moreButton = document.createElement('a');
    var cpomntainsImage = typeof ach.icon !== 'undefined' && ach.icon.length > 0;
    listItem.setAttribute('class', 'cl-ach-list-item cl-ach-' + ach.id + (cpomntainsImage ? ' cl-ach-with-image' : ''));
    detailsContainer.setAttribute('class', 'cl-ach-list-details-cont');
    detailsWrapper.setAttribute('class', 'cl-ach-list-details-wrap');
    label.setAttribute('class', 'cl-ach-list-details-label');
    category.setAttribute('class', 'cl-ach-list-details-category');
    description.setAttribute('class', 'cl-ach-list-details-description');
    progressionWrapper.setAttribute('class', 'cl-ach-list-progression');
    progressionCont.setAttribute('class', 'cl-ach-list-progression-cont');
    progressionBar.setAttribute('class', 'cl-ach-list-progression-bar');
    moreButton.setAttribute('class', 'cl-ach-list-more');
    moreButton.dataset.id = ach.id;
    moreButton.innerHTML = _this.settings.lbWidget.settings.translation.achievements.more;
    moreButton.href = 'javascript:void(0);';
    listItem.dataset.id = ach.id;
    label.innerHTML = ach.name;
    category.innerHTML = ach.category.join(', ');
    detailsWrapper.appendChild(label);
    detailsWrapper.appendChild(category);
    detailsWrapper.appendChild(description);

    if (cpomntainsImage) {
      var image = new Image();
      var imageIconWrapper = document.createElement('div');
      imageIconWrapper.setAttribute('class', 'cl-ach-list-item-img-wrapper');
      image.setAttribute('class', 'cl-ach-list-item-img');
      image.src = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.assets.replace(':attachmentId', ach.icon);
      image.alt = ach.name; // image.onload = function(){
      // };

      imageIconWrapper.appendChild(image);
      detailsContainer.appendChild(imageIconWrapper);
    }

    detailsContainer.appendChild(detailsWrapper);
    progressionCont.appendChild(progressionBar);
    progressionWrapper.appendChild(progressionCont);
    progressionWrapper.appendChild(moreButton);
    listItem.appendChild(detailsContainer);
    listItem.appendChild(progressionWrapper);
    return listItem;
  };

  this.achievementListLayout = function (achievementData) {
    var _this = this;

    var achList = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.section, '.' + _this.settings.lbWidget.settings.navigation.achievements.containerClass + ' .cl-main-widget-ach-list-body-res');
    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(achievementData, function (ach) {
      if (Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(achList, '.cl-ach-' + ach.id) === null) {
        var listItem = _this.achievementItem(ach);

        achList.appendChild(listItem);
      }
    });
  };

  this.loadAchievementDetails = function (data, callback) {
    var _this = this;

    var label = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.achievement.detailsContainer, '.cl-main-widget-ach-details-header-label');
    var body = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.achievement.detailsContainer, '.cl-main-widget-ach-details-body');
    var image = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.achievement.detailsContainer, '.cl-main-widget-ach-details-body-image-cont');
    image.innerHTML = '';
    label.innerHTML = data.data.name;
    body.innerHTML = data.data.description;

    if (_this.settings.lbWidget.settings.achievements.extractImageHeader) {
      var imageLookup = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(body, 'img');
      Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(imageLookup, function (img, key, count) {
        if (count === 0) {
          var newImg = img.cloneNode(true);
          image.appendChild(newImg);
          Object(_utils_remove__WEBPACK_IMPORTED_MODULE_8__["default"])(img);
        }
      });
    }

    _this.settings.achievement.detailsContainer.style.display = 'block';
    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(_this.settings.achievement.detailsContainer, 'cl-show');
      if (typeof callback === 'function') callback();
    }, 50);
  };

  this.hideAchievementDetails = function (callback) {
    var _this = this;

    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.achievement.detailsContainer, 'cl-show');
    setTimeout(function () {
      _this.settings.achievement.detailsContainer.style.display = 'none';
      if (typeof callback === 'function') callback();
    }, 200);
  };

  this.loadRewardDetails = function (data, callback) {
    var _this = this;

    var label = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-details-header-label');
    var body = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-details-body');
    var image = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-details-body-image-cont');
    var claimBtn = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-claim-btn');
    var icon = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-winnings-icon');
    var value = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-winnings-value');
    label.innerHTML = data.data.reward.rewardName;
    body.innerHTML = data.data.reward.description;
    value.innerHTML = _this.settings.lbWidget.settings.partialFunctions.rewardFormatter(data.data.reward);
    claimBtn.dataset.id = data.data.id;

    if (data.data.claimed) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(claimBtn, 'cl-claimed');
      claimBtn.innerHTML = _this.settings.lbWidget.settings.translation.rewards.claimed;
    } else {
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(claimBtn, 'cl-claimed');
      claimBtn.innerHTML = _this.settings.lbWidget.settings.translation.rewards.claim;
    }

    if (typeof data.data.reward.icon !== 'undefined') {
      icon.innerHTML = '';

      var _image = new Image();

      var imageIconWrapper = document.createElement('div');
      imageIconWrapper.setAttribute('class', 'cl-reward-list-item-img-wrapper');

      _image.setAttribute('class', 'cl-reward-list-item-img');

      _image.src = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.assets.replace(':attachmentId', data.data.reward.icon);
      _image.alt = _this.settings.lbWidget.settings.partialFunctions.rewardFormatter(data.data.reward);
      icon.appendChild(_image);
    } else {
      icon.innerHTML = "<span class='cl-place-holder-reward-image'></span>";
    }

    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(body, 'img'), function (img, key, count) {
      if (count === 0) {
        var newImg = img.cloneNode(true);
        image.innerHTML = '';
        image.appendChild(newImg);
        Object(_utils_remove__WEBPACK_IMPORTED_MODULE_8__["default"])(img);
      }
    });
    _this.settings.reward.detailsContainer.style.display = 'block';
    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(_this.settings.reward.detailsContainer, 'cl-show');
      if (typeof callback === 'function') callback();
    }, 50);
  };

  this.loadMessageDetails = function (data, callback) {
    var _this = this;

    var label = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.messages.detailsContainer, '.cl-main-widget-inbox-details-header-label');
    var body = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.messages.detailsContainer, '.cl-main-widget-inbox-details-body');
    label.innerHTML = data.data.subject;
    body.innerHTML = data.data.body;
    _this.settings.messages.detailsContainer.style.display = 'block';
    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(_this.settings.messages.detailsContainer, 'cl-show');
      if (typeof callback === 'function') callback();
    }, 50);
  };

  this.hideRewardDetails = function (callback) {
    var _this = this;

    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.reward.detailsContainer, 'cl-show');
    setTimeout(function () {
      _this.settings.reward.detailsContainer.style.display = 'none';
      if (typeof callback === 'function') callback();
    }, 200);
  };

  this.hideMessageDetails = function (callback) {
    var _this = this;

    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.messages.detailsContainer, 'cl-show');
    setTimeout(function () {
      _this.settings.messages.detailsContainer.style.display = 'none';
      if (typeof callback === 'function') callback();
    }, 200);
  };

  this.updateAchievementProgressionAndIssued = function (issued, progression) {
    var _this = this;

    var achList = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.section, '.' + _this.settings.lbWidget.settings.navigation.achievements.containerClass + ' .cl-main-widget-ach-list-body-res');
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(achList, '.cl-ach-list-item'), function (ach) {
      var id = ach.dataset.id;
      var issuedStatus = issued.indexOf(id) !== -1;
      var perc = 0;
      Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(progression, function (pr) {
        if (pr.achievementId === id) {
          perc = (parseFloat(pr.goalPercentageComplete) * 100).toFixed(1);
        }
      });

      if (ach !== null) {
        var bar = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(ach, '.cl-ach-list-progression-bar');

        if (issuedStatus) {
          Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(bar, 'cl-ach-complete');
          bar.innerHTML = _this.settings.lbWidget.settings.translation.achievements.complete;
          bar.style.width = '100%';
        } else {
          var percValue = (perc > 1 || perc === 0 ? perc : 1) + '%';
          bar.innerHTML = perc > 25 || perc > 15 && parseInt(_this.settings.section.offsetWidth) > 450 ? percValue : '';
          bar.style.width = percValue;
        }
      }
    });
  };

  this.loadAchievements = function (callback) {
    var _this = this;

    _this.settings.lbWidget.checkForAvailableAchievements(function (achievementData) {
      _this.settings.lbWidget.updateAchievementNavigationCounts();

      _this.achievementListLayout(achievementData);

      var idList = [];
      Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.lbWidget.settings.achievements.list, function (ach) {
        idList.push(ach.id);
      });
      setTimeout(function () {
        _this.settings.lbWidget.checkForMemberAchievementsIssued(function (issued) {
          _this.settings.lbWidget.checkForMemberAchievementsProgression(idList, function (progression) {
            _this.updateAchievementProgressionAndIssued(issued, progression);
          });
        });
      }, 400);

      if (typeof callback === 'function') {
        callback();
      }
    });
  };

  this.rewardItem = function (rew) {
    var _this = this;

    var listItem = document.createElement('div');
    var detailsContainer = document.createElement('div');
    var detailsWrapper = document.createElement('div');
    var label = document.createElement('div');
    var description = document.createElement('div');
    listItem.setAttribute('class', 'cl-rew-list-item cl-rew-' + rew.id);
    detailsContainer.setAttribute('class', 'cl-rew-list-details-cont');
    detailsWrapper.setAttribute('class', 'cl-rew-list-details-wrap');
    label.setAttribute('class', 'cl-rew-list-details-label');
    description.setAttribute('class', 'cl-rew-list-details-description');
    listItem.dataset.id = rew.id;
    var labelText = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_10__["default"])(rew.subject);
    var descriptionText = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_10__["default"])(rew.body);

    if (typeof rew.prize !== 'undefined') {
      listItem.dataset.rewardId = rew.prize.id;
      labelText = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_10__["default"])(rew.subject + ' - ' + rew.prize.reward.rewardName + ' (' + _this.settings.lbWidget.settings.partialFunctions.rewardFormatter(rew.prize.reward) + ')');
      descriptionText = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_10__["default"])(typeof rew.prize.reward.description !== 'undefined' && rew.prize.reward.description.length > 0 ? rew.prize.reward.description : rew.body);
    }

    label.innerHTML = labelText.length > 80 ? labelText.substr(0, 80) + '...' : labelText;
    description.innerHTML = descriptionText.length > 200 ? descriptionText.substr(0, 200) + '...' : descriptionText;
    detailsWrapper.appendChild(label);
    detailsWrapper.appendChild(description);
    detailsContainer.appendChild(detailsWrapper);
    listItem.appendChild(detailsContainer);
    return listItem;
  };

  this.messageItem = function (inbox) {
    // var _this = this;
    var listItem = document.createElement('div');
    var detailsContainer = document.createElement('div');
    var detailsWrapper = document.createElement('div');
    var label = document.createElement('div');
    var description = document.createElement('div');
    var content = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_10__["default"])(inbox.body);
    listItem.setAttribute('class', 'cl-inbox-list-item cl-inbox-' + inbox.id);
    detailsContainer.setAttribute('class', 'cl-inbox-list-details-cont');
    detailsWrapper.setAttribute('class', 'cl-inbox-list-details-wrap');
    label.setAttribute('class', 'cl-inbox-list-details-label');
    description.setAttribute('class', 'cl-inbox-list-details-description');
    listItem.dataset.id = inbox.id;
    label.innerHTML = inbox.subject.length > 36 ? inbox.subject.substr(0, 36) + '...' : inbox.subject;
    description.innerHTML = content.length > 60 ? content.substr(0, 60) + '...' : content;
    detailsWrapper.appendChild(label);
    detailsWrapper.appendChild(description);
    detailsContainer.appendChild(detailsWrapper);
    listItem.appendChild(detailsContainer);
    return listItem;
  };

  this.tournamentItem = function (tournament) {
    // var _this = this;
    var listItem = document.createElement('div');
    var detailsContainer = document.createElement('div');
    var detailsWrapper = document.createElement('div');
    var label = document.createElement('div');
    var description = document.createElement('div');
    var descriptionContent = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_10__["default"])(tournament.description);
    listItem.setAttribute('class', 'cl-tour-list-item cl-tour-' + tournament.id);
    detailsContainer.setAttribute('class', 'cl-tour-list-details-cont');
    detailsWrapper.setAttribute('class', 'cl-tour-list-details-wrap');
    label.setAttribute('class', 'cl-tour-list-details-label');
    description.setAttribute('class', 'cl-tour-list-details-description');
    listItem.dataset.id = tournament.id;
    label.innerHTML = tournament.label;
    description.innerHTML = descriptionContent.length > 100 ? descriptionContent.substr(0, 100) + '...' : descriptionContent;
    detailsWrapper.appendChild(label);
    detailsWrapper.appendChild(description);
    detailsContainer.appendChild(detailsWrapper);
    listItem.appendChild(detailsContainer);
    return listItem;
  };

  this.rewardsListLayout = function (rewards, availableRewards, expiredRewards) {
    var _this = this;

    var rewardList = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.section, '.' + _this.settings.lbWidget.settings.navigation.rewards.containerClass + ' .cl-main-widget-reward-list-body-res');

    var accordionObj = _this.accordionStyle(_this.settings.rewardsSection.accordionLayout, function (accordionSection, listContainer, topEntryContainer, layout) {
      var rewardData = _this.settings.lbWidget.settings.rewards[layout.type];

      if (typeof rewardData !== 'undefined') {
        if (rewardData.length === 0) {
          accordionSection.style.display = 'none';
        }

        Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(rewardData, function (rew, key, count) {
          if (count + 1 <= layout.showTopResults && Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(topEntryContainer, '.cl-reward-' + rew.id) === null) {
            var topEntryContaineRlistItem = _this.rewardItem(rew);

            topEntryContainer.appendChild(topEntryContaineRlistItem);
          }

          if (Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(listContainer, '.cl-reward-' + rew.id) === null) {
            var listItem = _this.rewardItem(rew);

            listContainer.appendChild(listItem);
          }
        });
      }
    });

    rewardList.innerHTML = '';
    rewardList.appendChild(accordionObj); // mapObject(rewardData, function(rew){
    //   if( query(rewardList, ".cl-reward-" + rew.id) === null ) {
    //     var listItem = _this.rewardItem(rew);
    //
    //     rewardList.appendChild(listItem);
    //   }
    // });
  };

  this.messagesListLayout = function (rewards, availableRewards, expiredRewards) {
    var _this = this;

    var messageList = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.section, '.' + _this.settings.lbWidget.settings.navigation.inbox.containerClass + ' .cl-main-widget-inbox-list-body-res');
    messageList.innerHTML = '';
    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.lbWidget.settings.messages.messages, function (inboxItem, key, count) {
      var listItem = _this.messageItem(inboxItem);

      messageList.appendChild(listItem);
    });
  };

  this.loadRewards = function (callback) {
    var _this = this;

    _this.settings.lbWidget.checkForAvailableRewards(function (rewards, availableRewards, expiredRewards) {
      _this.settings.lbWidget.updateRewardsNavigationCounts();

      _this.rewardsListLayout(rewards, availableRewards, expiredRewards);

      if (typeof callback === 'function') {
        callback();
      }
    });
  };

  this.loadMessages = function (callback) {
    var _this = this;

    _this.settings.lbWidget.checkForAvailableMessages(function (rewards, availableRewards, expiredRewards) {
      _this.messagesListLayout(rewards, availableRewards, expiredRewards);

      if (typeof callback === 'function') {
        callback();
      }
    });
  };

  var changeInterval;
  var changeContainerInterval;

  this.navigationSwitch = function (target, callback) {
    var _this = this;

    var preLoader = _this.preloader();

    if (_this.settings.navigationSwitchInProgress && _this.settings.navigationSwitchLastAtempt + 3000 < new Date().getTime()) {
      _this.settings.navigationSwitchInProgress = false;
    }

    if (!_this.settings.navigationSwitchInProgress) {
      _this.settings.navigationSwitchInProgress = true;
      _this.settings.navigationSwitchLastAtempt = new Date().getTime();

      if (!Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_2__["default"])(target.parentNode, 'cl-active-nav')) {
        preLoader.show(function () {
          if (changeInterval) clearTimeout(changeInterval);
          if (changeContainerInterval) clearTimeout(changeContainerInterval);
          Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-navigation-items .cl-active-nav'), function (obj) {
            Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(obj, 'cl-active-nav');
          });
          Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-section-container .cl-main-active-section'), function (obj) {
            Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(obj, 'cl-main-active-section');
            setTimeout(function () {
              obj.style.display = 'none';
            }, 150);
          });
          changeContainerInterval = setTimeout(function () {
            if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_2__["default"])(target, 'cl-main-widget-navigation-lb-icon')) {
              _this.loadLeaderboard(function () {
                var lbContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-section-container .' + _this.settings.lbWidget.settings.navigation.tournaments.containerClass);
                lbContainer.style.display = 'block';
                changeInterval = setTimeout(function () {
                  Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(lbContainer, 'cl-main-active-section');
                }, 30);

                if (typeof callback === 'function') {
                  callback();
                }

                preLoader.hide();
                _this.settings.navigationSwitchInProgress = false;
              });
            } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_2__["default"])(target, 'cl-main-widget-navigation-ach-icon')) {
              _this.loadAchievements(function () {
                var achContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-section-container .' + _this.settings.lbWidget.settings.navigation.achievements.containerClass);
                _this.settings.achievement.detailsContainer.style.display = 'none';
                achContainer.style.display = 'block';
                changeInterval = setTimeout(function () {
                  Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(achContainer, 'cl-main-active-section');

                  if (typeof callback === 'function') {
                    callback();
                  }
                }, 30);
                preLoader.hide();
                _this.settings.navigationSwitchInProgress = false;
              });
            } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_2__["default"])(target, 'cl-main-widget-navigation-rewards-icon')) {
              _this.loadRewards(function () {
                var rewardsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-section-container .' + _this.settings.lbWidget.settings.navigation.rewards.containerClass);
                rewardsContainer.style.display = 'block';
                changeInterval = setTimeout(function () {
                  Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(rewardsContainer, 'cl-main-active-section');
                }, 30);

                if (typeof callback === 'function') {
                  callback();
                }

                preLoader.hide();
                _this.settings.navigationSwitchInProgress = false;
              });
            } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_2__["default"])(target, 'cl-main-widget-navigation-inbox-icon')) {
              _this.loadMessages(function () {
                var inboxContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-section-container .' + _this.settings.lbWidget.settings.navigation.inbox.containerClass);
                inboxContainer.style.display = 'block';
                changeInterval = setTimeout(function () {
                  Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(inboxContainer, 'cl-main-active-section');
                }, 30);
                preLoader.hide();
                _this.settings.navigationSwitchInProgress = false;
              });
            }
          }, 250);
          Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(target.parentNode, 'cl-active-nav');
        });
      } else if (typeof callback === 'function') {
        _this.settings.navigationSwitchInProgress = false;
        callback();
      }
    }
  };

  this.resetNavigation = function (callback) {
    var _this = this;

    var listIcon = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-lb-header-list-icon');
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-navigation-items .cl-active-nav'), function (obj) {
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(obj, 'cl-active-nav');
    });
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-section-container .cl-main-active-section'), function (obj) {
      obj.style.display = 'none';
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_3__["default"])(obj, 'cl-main-active-section');
    });
    var activeNave = false;
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, '.cl-main-widget-navigation-container .cl-main-widget-navigation-item'), function (navItem, key, count) {
      if (!activeNave && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_2__["default"])(navItem, 'cl-hidden-navigation-item')) {
        _this.navigationSwitch(Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(navItem, '.cl-main-navigation-item'));

        activeNave = true;
      }
    });
    listIcon.style.opacity = '1';

    _this.hideEmbeddedCompetitionDetailsContent();

    _this.hideCompetitionList();

    setTimeout(function () {
      if (typeof callback !== 'undefined') callback();
    }, 70);
  };

  this.initLayout = function (callback) {
    var _this = this;

    _this.settings.active = true;

    _this.loadLeaderboard();

    _this.settings.container.style.display = 'block';
    _this.settings.overlayContainer.style.display = 'block';
    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_7__["default"])(_this.settings.container, 'cl-show');
      var member = Object(_utils_query__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.leaderboard.list, '.cl-lb-member-row');

      if (member !== null) {
        _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.list.parentNode));

        _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.resultContainer));
      } else {
        _this.missingMemberReset();
      }

      _this.resetNavigation(callback);
    }, 30);
  };
};

/***/ }),

/***/ "./src/javascript/modules/Messaging.js":
/*!*********************************************!*\
  !*** ./src/javascript/modules/Messaging.js ***!
  \*********************************************/
/*! exports provided: Messaging */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Messaging", function() { return Messaging; });
/* harmony import */ var _cLabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cLabs */ "./src/javascript/modules/cLabs.js");

/**
 * SSE Messaging
 * @param options {Object}
 * @constructor
 */

var Messaging = function Messaging(options) {
  /**
   * Messaging settings
   * @memberOf Messaging
   * @constant
   * @type { Object }
   */
  this.settings = {
    source: null,
    ajax: {
      url: null,
      apiKey: undefined,
      errorCallback: function errorCallback() {}
    },
    sseUrl: null,
    heartbeat: null,
    lastHeartbeat: null,
    mainAjax: new _cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax(),
    heartBeatAjax: new _cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax(),
    heartWaitTime: 25000,
    messageQueue: [],
    messageInterval: 1000,
    startupCheck: true,
    active: false,
    debug: false,
    callback: function callback(data) {},
    onStartupError: function onStartupError() {}
  };

  if (typeof options !== 'undefined') {
    for (var opt in options) {
      if (options.hasOwnProperty(opt)) {
        this.settings[opt] = options[opt];
      }
    }
  }

  this.intervalInstance = null;
  this.heartbeatIntervalInstance = null;

  this.lookupData = function () {
    var _this = this;

    if (_this.settings.messageQueue.length > 0) {
      var data = _this.settings.messageQueue[0];

      var index = _this.settings.messageQueue.indexOf(data);

      if (index > -1) {
        _this.settings.messageQueue.splice(index, 1);
      }

      if (typeof _this.settings.ajax.url === 'string' && _this.settings.ajax.url.length > 0) {
        _this.getData(data);
      } else {
        _this.settings.callback(data);
      }
    }
  };

  this.setInterval = function () {
    var _this = this;

    _this.intervalInstance = setInterval(function () {
      _this.lookupData();
    }, _this.settings.messageInterval);

    if (_this.settings.heartbeat !== null) {
      _this.settings.lastHeartbeat = new Date();
      _this.heartbeatIntervalInstance = setInterval(function () {
        var currentTime = new Date();
        var diff = _this.settings.lastHeartbeat.getTime() - currentTime.getTime();

        if (_this.settings.source.readyState === 0 && diff > _this.settings.heartWaitTime) {
          _this.closeChanel();
        }

        _this.hearBeatCheck();
      }, _this.settings.heartWaitTime);
    }
  };
  /**
   * Request a heartbeat
   * - if the request is failing close the connection
   * - if the request is successful but the connection is closed reopen and call for a heartbeat again
   *
   * @memberOf Messaging
   * @return {undefined}
   */


  this.hearBeatCheck = function () {
    var _this = this;

    var dataObj = {
      url: _this.settings.heartbeat,
      headers: _this.settings.ajax.apiKey,
      type: 'GET',
      success: function success(response, dataObject, xhr) {
        if (xhr.status !== 200 && _this.settings.source.readyState === 0) {
          if (_this.settings.debug) console.log('[Msg] SSE Closing connection');

          _this.closeChanel();
        } else if (xhr.status === 200 && _this.settings.source.readyState === 2) {
          if (_this.settings.debug) console.log('[Msg] SSE Trying to re-open the connection');

          _this.openChanel();

          setTimeout(function () {
            _this.hearBeatCheck();
          }, 200);
        }
      }
    };

    if (typeof _this.settings.ajax.apiKey !== 'undefined') {
      dataObj.headers = _this.settings.ajax.apiKey;
    }

    _this.settings.heartBeatAjax.abort().getData(dataObj);
  };

  this.getData = function () {
    var _this = this;

    var dataObj = {
      url: _this.settings.ajax.url,
      type: 'GET',
      success: function success(response, dataObject, xhr) {
        var json = {};

        try {
          json = JSON.parse(response);
        } catch (e) {
          if (_this.settings.debug) console.log(e, _this.settings);
        }

        if (xhr.status === 200) {
          _this.settings.callback(json);
        } else {
          _this.settings.ajax.errorCallback(json);
        }
      }
    };

    if (typeof _this.settings.ajax.apiKey !== 'undefined') {
      dataObj.headers = _this.settings.ajax.apiKey;
    }

    _this.settings.mainAjax.abort().getData(dataObj);
  };

  this.openChanel = function () {
    var _this = this;

    _this.settings.source = new EventSource(_this.settings.sseUrl, {
      withCredentials: true
    });

    _this.serverSideEventListeners(_this.settings.source);
  };

  this.serverSideEventListeners = function (source) {
    var _this = this;

    source.addEventListener('open', function (e) {
      _this.settings.active = true;
      if (_this.settings.debug) console.log('[Msg] connection opened', e);
    }, false);
    source.addEventListener('message', function (e) {
      if (_this.settings.debug) {
        console.log('[Msg] message check', _this.settings.sseUrl);
        console.log(e.data);
      }

      var data = e.data;
      var json = null;

      try {
        json = JSON.parse(data);
      } catch (e) {}

      if (_this.settings.heartbeat !== null) {
        _this.settings.lastHeartbeat = new Date();
      }

      if (json !== null && typeof json.heartbeat === 'undefined') {
        _this.settings.messageQueue.push(json);
      }
    }, false);
    source.addEventListener('error', function (e) {
      if (_this.settings.debug) {
        console.log('[Msg] error check', _this.settings.sseUrl);
      }
      /* eslint eqeqeq: "off" */


      if (e.readyState == EventSource.CLOSED) {
        if (_this.settings.debug) console.warn('[Msg] connection closed', e);
      } else {
        if (_this.settings.debug) console.log(e, e.readyState);
      }

      _this.closeChanel();

      _this.settings.startupCheck = false;
    }, false);
  };

  this.closeChanel = function () {
    this.settings.active = false;
    this.settings.source.close();
  };

  this.sseFailed = function () {
    var _this = this;

    _this.settings.heartbeat = null;
    _this.settings.active = false;

    if (_this.heartbeatIntervalInstance !== null) {
      clearInterval(_this.heartbeatIntervalInstance);
    }

    _this.settings.onStartupError(_this.settings);
  };

  this.windowActivity = function () {
    var _this = this;

    (function () {
      var hidden = 'hidden'; // Standards:

      if (hidden in document) {
        document.addEventListener('visibilitychange', onchange);
      } else if ((hidden = 'mozHidden') in document) {
        document.addEventListener('mozvisibilitychange', onchange);
      } else if ((hidden = 'webkitHidden') in document) {
        document.addEventListener('webkitvisibilitychange', onchange);
      } else if ((hidden = 'msHidden') in document) {
        document.addEventListener('msvisibilitychange', onchange);
      } else if ('onfocusin' in document) {
        // IE 9 and lower:
        document.onfocusin = document.onfocusout = onchange;
      } else {
        // All others:
        window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;
      }

      function onchange(evt) {
        var status = '';
        var v = 'visible';
        var h = 'hidden';
        var evtMap = {
          focus: v,
          focusin: v,
          pageshow: v,
          blur: h,
          focusout: h,
          pagehide: h
        };
        evt = evt || window.event;

        if (evt.type in evtMap) {
          status = evtMap[evt.type];
        } else {
          status = this[hidden] ? 'hidden' : 'visible';
        }

        if (status === 'visible' && _this.settings.source.readyState !== 0 && _this.settings.source.readyState !== 1) {
          _this.openChanel();
        } else if (status === 'hidden' && (_this.settings.source.readyState === 0 || _this.settings.source.readyState === 1)) {
          _this.closeChanel();
        }
      } // set the initial state (but only if browser supports the Page Visibility API)


      if (document[hidden] !== undefined) {
        onchange({
          type: document[hidden] ? 'blur' : 'focus'
        });
      }
    })();
  };

  this.init = function () {
    var _this = this;

    try {
      if (_this.settings.debug) console.log('[Msg] SSE starting', _this.settings.sseUrl, new Date());

      _this.openChanel();

      if (_this.settings.debug) console.log('[Msg] SSE started', _this.settings.sseUrl, new Date(), _this.settings.source.readyState);

      _this.setInterval();

      _this.windowActivity();

      setTimeout(function () {
        if (!_this.settings.startupCheck) {
          console.log('sse failed');

          _this.sseFailed();
        }
      }, 2000);
      window.addEventListener('unload', function (event) {
        if (_this.settings.debug) console.log('[Msg] closing messaging service', new Date());

        _this.settings.source.close();

        _this.settings.active = false;

        _this.settings.heartBeatAjax.abort();

        if (_this.intervalInstance) {
          clearInterval(_this.intervalInstance);
        }
      });
      window.addEventListener('beforeunload', function (event) {
        if (_this.settings.debug) console.log('[Msg] closing messaging service');

        _this.settings.source.close();

        _this.settings.heartBeatAjax.abort();

        if (_this.intervalInstance) {
          clearInterval(_this.intervalInstance);
        }
      });
    } catch (e) {
      if (_this.settings.debug) console.log('EventSource failed');

      _this.sseFailed();
    }
  };

  this.init();
};

/***/ }),

/***/ "./src/javascript/modules/MiniScoreBoard.js":
/*!**************************************************!*\
  !*** ./src/javascript/modules/MiniScoreBoard.js ***!
  \**************************************************/
/*! exports provided: MiniScoreBoard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MiniScoreBoard", function() { return MiniScoreBoard; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/query */ "./src/javascript/utils/query.js");
/* harmony import */ var _utils_mapObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/mapObject */ "./src/javascript/utils/mapObject.js");
/* harmony import */ var _utils_addClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/addClass */ "./src/javascript/utils/addClass.js");
/* harmony import */ var _utils_hasClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/hasClass */ "./src/javascript/utils/hasClass.js");
/* harmony import */ var _utils_removeClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/removeClass */ "./src/javascript/utils/removeClass.js");
/* harmony import */ var _utils_remove__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/remove */ "./src/javascript/utils/remove.js");
/* harmony import */ var _dragElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dragElement */ "./src/javascript/modules/dragElement.js");








/**
 * MiniScoreBoard
 * @param options {Object}
 * @constructor
 */

var MiniScoreBoard = function MiniScoreBoard(options) {
  /**
   * MiniScoreBoard settings
   * @memberOf MiniScoreBoard
   * @constant
   * @type { Object }
   */
  this.settings = {
    lbWidget: null,
    container: null,
    overlayContainer: null,
    infoContainer: null,
    updateInterval: null,
    updateIntervalTime: 1000,
    active: false,
    enableDragging: true,
    dragging: false,
    verticalClass: 'cl-vertical-mini'
  };

  if (typeof options !== 'undefined') {
    for (var opt in options) {
      if (options.hasOwnProperty(opt)) {
        this.settings[opt] = options[opt];
      }
    }
  }

  this.layout = function () {
    var wrapper = document.createElement('div');
    var iconWrapper = document.createElement('div');
    var icon = document.createElement('div');
    var informationWrapper = document.createElement('div');
    var informationTopWrapper = document.createElement('div');
    var informationWrapperClose = document.createElement('div');
    var informationClose = document.createElement('a');
    wrapper.setAttribute('class', 'cl-widget-ms-wrapper');
    iconWrapper.setAttribute('class', 'cl-widget-ms-icon-wrapper');
    icon.setAttribute('class', 'cl-widget-ms-icon');
    informationTopWrapper.setAttribute('class', 'cl-widget-ms-information-top-wrapper');
    informationWrapper.setAttribute('class', 'cl-widget-ms-information-wrapper');
    informationWrapperClose.setAttribute('class', 'cl-widget-ms-information-close-wrapper');
    informationClose.setAttribute('class', 'cl-widget-ms-information-close');
    informationClose.href = 'javascript:void(0);';
    informationClose.innerHTML = 'x';
    this.initialLayoutPosition(wrapper);
    informationWrapperClose.appendChild(informationClose);
    informationWrapper.appendChild(informationWrapperClose);
    informationTopWrapper.appendChild(informationWrapper);
    iconWrapper.appendChild(icon);
    wrapper.appendChild(iconWrapper);
    wrapper.appendChild(informationTopWrapper);
    return wrapper;
  };

  this.initialLayoutPosition = function (wrapper) {
    var _this = this;

    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.lbWidget.settings.layout.miniScoreBoardPosition, function (position, positionKey) {
      if (position !== null) {
        wrapper.style[positionKey] = position;
      }
    });

    if (typeof _this.settings.lbWidget.settings.layout.miniScoreBoardOrientation === 'string') {
      switch (_this.settings.lbWidget.settings.layout.miniScoreBoardOrientation) {
        case 'horizontal':
          break;

        case 'vertical':
          Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapper, _this.settings.verticalClass);
          break;

        default: // default behaviour

      }
    }
  };

  this.overlayLayout = function () {
    var wrapper = document.createElement('div');
    wrapper.setAttribute('class', 'cl-widget-ms-overlay-wrapper');
    return wrapper;
  };

  this.timeManagement = function () {
    var _this = this;

    var diff = 0;
    var label = '&nbsp;';
    var date = '';
    var dateObj = '';
    var inverse = false;

    if (_this.settings.lbWidget.settings.competition.activeContest !== null) {
      var startDate = _this.settings.lbWidget.settings.competition.activeContest.scheduledStart;

      if (typeof _this.settings.lbWidget.settings.competition.activeContest.actualStart !== 'undefined') {
        startDate = _this.settings.lbWidget.settings.competition.activeContest.actualStart;
      }

      diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(startDate).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());
      label = _this.settings.lbWidget.settings.translation.miniLeaderboard.startsIn;
      date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));
      dateObj = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));
      inverse = false;

      if (diff <= 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode === 0) {
        label = _this.settings.lbWidget.settings.translation.miniLeaderboard.starting;
        date = '';
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 1) {
        label = _this.settings.lbWidget.settings.translation.miniLeaderboard.starting;
        date = '';
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 2) {
        diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledEnd).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());
        dateObj = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));
        label = '&nbsp;';
        date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));
        inverse = true;
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 3) {
        label = _this.settings.lbWidget.settings.translation.miniLeaderboard.finishing;
        date = '';
        inverse = true;
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode >= 4) {
        label = _this.settings.lbWidget.settings.translation.miniLeaderboard.finished;
        date = '';
        inverse = true;
      }
    }

    return {
      label: label,
      diff: diff,
      date: date,
      dateObj: dateObj,
      inverse: inverse
    };
  };

  this.layoutDefaultOrEmptyEntry = function () {
    var lbResultsMemEntry = document.createElement('div');
    var lbResultsMemLabel = document.createElement('div');
    var lbResultsMemRank = document.createElement('div');
    var lbResultsMemIcon = document.createElement('div');
    var lbResultsMemImg = document.createElement('img');
    var lbResultsMemPoints = document.createElement('div');
    lbResultsMemEntry.setAttribute('class', 'cl-widget-ms-default-mem-entry');
    lbResultsMemLabel.setAttribute('class', 'cl-widget-ms-default-mem-label');
    lbResultsMemRank.setAttribute('class', 'cl-widget-ms-default-mem-rank');
    lbResultsMemIcon.setAttribute('class', 'cl-widget-ms-default-mem-icon');
    lbResultsMemImg.setAttribute('class', 'cl-widget-ms-default-mem-img');
    lbResultsMemImg.style.display = 'none';
    lbResultsMemPoints.setAttribute('class', 'cl-widget-ms-default-mem-points');
    lbResultsMemEntry.appendChild(lbResultsMemLabel);
    lbResultsMemEntry.appendChild(lbResultsMemRank);
    lbResultsMemIcon.appendChild(lbResultsMemImg);
    lbResultsMemEntry.appendChild(lbResultsMemIcon);
    lbResultsMemEntry.appendChild(lbResultsMemPoints);
    return lbResultsMemEntry;
  };

  this.layoutFirstToOrEmptyEntry = function () {
    var lbResultsMemEntry = document.createElement('div');
    var lbResultsMemLabel = document.createElement('div');
    var lbResultsMemRank = document.createElement('div');
    var lbResultsMemIcon = document.createElement('div');
    var lbResultsMemImg = document.createElement('img');
    var lbResultsMemPoints = document.createElement('div');
    lbResultsMemEntry.setAttribute('class', 'cl-widget-ms-first-to-mem-entry');
    lbResultsMemLabel.setAttribute('class', 'cl-widget-ms-first-to-mem-label');
    lbResultsMemRank.setAttribute('class', 'cl-widget-ms-first-to-mem-rank');
    lbResultsMemIcon.setAttribute('class', 'cl-widget-ms-first-to-mem-icon');
    lbResultsMemImg.setAttribute('class', 'cl-widget-ms-first-to-mem-img');
    lbResultsMemImg.style.display = 'none';
    lbResultsMemPoints.setAttribute('class', 'cl-widget-ms-first-to-mem-points');
    lbResultsMemEntry.appendChild(lbResultsMemLabel);
    lbResultsMemEntry.appendChild(lbResultsMemRank);
    lbResultsMemIcon.appendChild(lbResultsMemImg);
    lbResultsMemEntry.appendChild(lbResultsMemIcon);
    lbResultsMemEntry.appendChild(lbResultsMemPoints);
    return lbResultsMemEntry;
  }; // let testLive = false;


  this.layoutDefaultOrEmpty = function () {
    var _this = this;

    var timeManagement = _this.timeManagement(); // var diff = timeManagement.diff;


    var label = timeManagement.label;
    var date = timeManagement.date; // var dateObj = timeManagement.dateObj;

    var wrapperDomObj = _this.settings.infoContainer;
    var defaultDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-wrapper');
    var inverse = timeManagement.inverse;

    if (defaultDomObj === null) {
      _this.removeUnusedElements();

      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.container, 'cl-ms-default-style');
      var lbWrapper = document.createElement('div');
      var lbDateWrapper = document.createElement('div');
      var lbDateLabel = document.createElement('div');
      var lbDate = document.createElement('div');
      var lbResultsWrapper = document.createElement('div');
      var lbResultsList = document.createElement('div');
      var lbHeaders = document.createElement('div');
      var lbHeadersRank = document.createElement('div');
      var lbHeadersPoints = document.createElement('div');

      var lbResultsMemEntry = _this.layoutDefaultOrEmptyEntry();

      var img = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-default-mem-img');
      lbWrapper.setAttribute('class', 'cl-widget-ms-default-wrapper');
      lbDateLabel.setAttribute('class', 'cl-widget-ms-default-date-label');
      lbDate.setAttribute('class', 'cl-widget-ms-default-date');
      lbDateWrapper.setAttribute('class', 'cl-widget-ms-default-date-wrapper');
      lbResultsWrapper.setAttribute('class', 'cl-widget-ms-default-results-wrapper');
      lbResultsList.setAttribute('class', 'cl-widget-ms-default-results-list');
      lbHeaders.setAttribute('class', 'cl-widget-ms-default-results-headers');
      lbHeadersRank.setAttribute('class', 'cl-widget-ms-default-results-header-rank');
      lbHeadersPoints.setAttribute('class', 'cl-widget-ms-default-results-header-points');
      lbResultsMemEntry.setAttribute('class', 'cl-widget-ms-default-mem-entry');
      lbDateLabel.innerHTML = label;
      lbDate.innerHTML = date;
      lbDateWrapper.appendChild(lbDateLabel);
      lbDateWrapper.appendChild(lbDate);
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-default-mem-rank').innerHTML = '--';
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-default-mem-points').innerHTML = '--';
      img.src = '';
      img.alt = '';
      img.style.display = 'block';
      lbHeadersRank.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.rank;
      lbHeadersPoints.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.points;
      lbHeaders.appendChild(lbHeadersRank);
      lbHeaders.appendChild(lbHeadersPoints);
      lbResultsList.appendChild(lbResultsMemEntry);
      lbResultsWrapper.appendChild(lbHeaders);
      lbResultsWrapper.appendChild(lbResultsList);
      lbWrapper.appendChild(lbDateWrapper);
      lbWrapper.appendChild(lbResultsWrapper);
      defaultDomObj = wrapperDomObj.appendChild(lbWrapper);
      setTimeout(function () {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show');
      }, 200);
    } else {
      if (!Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_4__["default"])(wrapperDomObj, 'cl-show')) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show');
      }

      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-results-header-rank').innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.rank;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-results-header-points').innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.points;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-date-label').innerHTML = label;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-date').innerHTML = date;
    }

    Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-date-wrapper'), 'cl-widget-ms-default-date-only');
    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lbEntry) {
      if (lbEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbEntry.memberId === _this.settings.lbWidget.settings.memberId) {
        var scoreArea = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(defaultDomObj, '.cl-widget-ms-default-results-list');
        scoreArea.innerHTML = '';
        Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-date-label').innerHTML = label;
        Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-date').innerHTML = date;

        if (_this.settings.lbWidget.settings.leaderboard.miniScoreBoard.enableRankings && typeof lbEntry.rankings !== 'undefined') {
          Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_2__["default"])(lbEntry.rankings, function (lbRankingEntry) {
            scoreArea.appendChild(_this.layoutDefaultOrEmptySingleRow(lbRankingEntry));
          });
        } else {
          scoreArea.appendChild(_this.layoutDefaultOrEmptySingleRow(lbEntry));
        } // testLive = true;
        //  var lastScore = query(_this.settings.container, ".cl-widget-ms-default-last-score").innerHTML,
        //  highScore = query(_this.settings.container, ".cl-widget-ms-default-high-score").innerHTML,
        //  rank = query(_this.settings.container, ".cl-widget-ms-default-rank-value"),
        //  change = (lbEntry.change < 0) ? "down" : ( lbEntry.change > 0 ? "up" : "same" ),
        //  rankValue = lbEntry.rank;
        //
        // if( lastScore !== String(lbEntry.points) && String(lbEntry.points) !== highScore ){
        //  query(_this.settings.container, ".cl-widget-ms-default-last-score").innerHTML = highScore;
        // }
        //
        // query(_this.settings.container, ".cl-widget-ms-default-high-score").innerHTML = lbEntry.points;
        //
        // removeClass(rank, "cl-ms-rank-up");
        // removeClass(rank, "cl-ms-rank-down");
        // removeClass(rank, "cl-ms-rank-same");
        //
        // addClass(rank, "cl-ms-rank-" + change);
        //
        // rank.innerHTML = rankValue;

      }
    });

    if (inverse && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_4__["default"])(defaultDomObj, 'cl-inverse')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(defaultDomObj, 'cl-inverse');
    }
  };

  this.layoutDefaultOrEmptySingleRow = function (lbEntry) {
    var _this = this;

    var icon = _this.settings.lbWidget.populateIdenticonBase64Image(lbEntry.memberId);

    var lbWrapper = _this.layoutDefaultOrEmptyEntry();

    var img = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-default-mem-img');
    var selfMember = lbEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbEntry.memberId === _this.settings.lbWidget.settings.memberId;

    var formattedPoints = _this.settings.lbWidget.settings.leaderboard.pointsFormatter(lbEntry.points);

    img.src = icon;
    img.alt = '';
    img.style.display = 'block';

    if (selfMember) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(lbWrapper, 'cl-widget-ms-default-mem-self');
    }

    Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-default-mem-label').innerHTML = selfMember ? _this.settings.lbWidget.settings.translation.leaderboard.you : '';
    Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-default-mem-rank').innerHTML = "<span class='cl-mem-rank-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.rank + "</span><span class='cl-mem-rank'>" + lbEntry.rank + '</span>';
    Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-default-mem-points').innerHTML = "<span class='cl-mem-points-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.points + "</span><span class='cl-mem-points'>" + formattedPoints + '</span>';
    return lbWrapper;
  };

  this.layoutFirstToOrEmpty = function (strategy) {
    var _this = this;

    var timeManagement = _this.timeManagement(); // var diff = timeManagement.diff;


    var label = timeManagement.label;
    var date = timeManagement.date;
    var wrapperDomObj = _this.settings.infoContainer;
    var defaultDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-wrapper');
    var inverse = timeManagement.inverse;

    if (defaultDomObj === null) {
      _this.removeUnusedElements();

      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.container, 'cl-ms-first-to-style');
      var lbWrapper = document.createElement('div');
      var lbDateWrapper = document.createElement('div');
      var lbDateLabel = document.createElement('div');
      var lbDate = document.createElement('div');
      var lbResultsWrapper = document.createElement('div');
      var lbResultsList = document.createElement('div');
      var lbHeaders = document.createElement('div');
      var lbHeadersRank = document.createElement('div');
      var lbHeadersPoints = document.createElement('div');

      var lbResultsMemEntry = _this.layoutFirstToOrEmptyEntry();

      var img = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-first-to-mem-img');
      lbWrapper.setAttribute('class', 'cl-widget-ms-first-to-wrapper');
      lbDateLabel.setAttribute('class', 'cl-widget-ms-first-to-date-label');
      lbDate.setAttribute('class', 'cl-widget-ms-first-to-date');
      lbDateWrapper.setAttribute('class', 'cl-widget-ms-first-to-date-wrapper');
      lbResultsWrapper.setAttribute('class', 'cl-widget-ms-first-to-results-wrapper');
      lbResultsList.setAttribute('class', 'cl-widget-ms-first-to-results-list');
      lbHeaders.setAttribute('class', 'cl-widget-ms-first-to-results-headers');
      lbHeadersRank.setAttribute('class', 'cl-widget-ms-first-to-results-header-rank');
      lbHeadersPoints.setAttribute('class', 'cl-widget-ms-first-to-results-header-points');
      lbResultsMemEntry.setAttribute('class', 'cl-widget-ms-first-to-mem-entry'); // lbDateLabel.innerHTML = label;

      lbDate.innerHTML = label;
      lbDateWrapper.appendChild(lbDateLabel);
      lbDateWrapper.appendChild(lbDate);
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-first-to-mem-rank').innerHTML = '--';
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-first-to-mem-points').innerHTML = '--/' + strategy.recordTimeWhenSumReaches;
      img.src = '';
      img.alt = '';
      img.style.display = 'block';
      lbHeadersRank.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.rank;
      lbHeadersPoints.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.points;
      lbHeaders.appendChild(lbHeadersRank);
      lbHeaders.appendChild(lbHeadersPoints);
      lbResultsList.appendChild(lbResultsMemEntry);
      lbResultsWrapper.appendChild(lbHeaders);
      lbResultsWrapper.appendChild(lbResultsList);
      lbWrapper.appendChild(lbDateWrapper);
      lbWrapper.appendChild(lbResultsWrapper);
      defaultDomObj = wrapperDomObj.appendChild(lbWrapper);
      setTimeout(function () {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show');
      }, 200);
    } else {
      if (!Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_4__["default"])(wrapperDomObj, 'cl-show')) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show');
      }

      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-results-header-rank').innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.rank;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-results-header-points').innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.points;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-date-label').innerHTML = label;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-date').innerHTML = date;
    }

    Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-date-wrapper'), 'cl-widget-ms-first-to-date-only');
    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lbEntry) {
      if (lbEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbEntry.memberId === _this.settings.lbWidget.settings.memberId) {
        var scoreArea = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(defaultDomObj, '.cl-widget-ms-first-to-results-list');
        scoreArea.innerHTML = '';

        if (_this.settings.lbWidget.settings.leaderboard.miniScoreBoard.enableRankings && typeof lbEntry.rankings !== 'undefined') {
          Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_2__["default"])(lbEntry.rankings, function (lbRankingEntry) {
            scoreArea.appendChild(_this.layoutFirstToOrEmptySingleRow(lbRankingEntry, strategy));
          });
        } else {
          scoreArea.appendChild(_this.layoutFirstToOrEmptySingleRow(lbEntry, strategy));
        }
      }
    });

    if (inverse && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_4__["default"])(defaultDomObj, 'cl-inverse')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(defaultDomObj, 'cl-inverse');
    }
  };

  this.layoutFirstToOrEmptySingleRow = function (lbEntry, strategy) {
    var _this = this;

    var icon = _this.settings.lbWidget.populateIdenticonBase64Image(lbEntry.memberId);

    var lbWrapper = _this.layoutFirstToOrEmptyEntry();

    var img = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-first-to-mem-img');
    var selfMember = lbEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbEntry.memberId === _this.settings.lbWidget.settings.memberId;

    var formattedPoints = _this.settings.lbWidget.settings.leaderboard.pointsFormatter(lbEntry.points);

    if (selfMember) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(lbWrapper, 'cl-widget-ms-first-to-mem-self');
    }

    img.src = icon;
    img.alt = '';
    img.style.display = 'block';
    Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-first-to-mem-label').innerHTML = selfMember ? _this.settings.lbWidget.settings.translation.leaderboard.you : '';
    Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-first-to-mem-rank').innerHTML = "<span class='cl-mem-rank-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.rank + "</span><span class='cl-mem-rank'>" + lbEntry.rank + '</span>';
    Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-first-to-mem-points').innerHTML = "<span class='cl-mem-points-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.points + "</span><span class='cl-mem-points'>" + formattedPoints + '/' + strategy.recordTimeWhenSumReaches + '</span>';
    return lbWrapper;
  };

  this.layoutSumBestOf = function () {
    var _this = this;

    var timeManagement = _this.timeManagement(); // var diff = timeManagement.diff;


    var label = timeManagement.label;
    var date = timeManagement.date;
    var wrapperDomObj = _this.settings.infoContainer;
    var sumBestDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-wrapper');
    var inverse = timeManagement.inverse;

    if (sumBestDomObj === null) {
      _this.removeUnusedElements();

      var lbWrapper = document.createElement('div');
      var lbDateWrapper = document.createElement('div');
      var lbDateLabel = document.createElement('div');
      var lbDate = document.createElement('div');
      var lbResultsWrapper = document.createElement('div');
      var lbResultsScoreArea = document.createElement('div');
      var lbResultsScoreAreaHigh = document.createElement('div');
      var lbResultsScoreAreaHighLabel = document.createElement('div');
      var lbResultsScoreAreaHighScore = document.createElement('div');
      var lbResultsScoreAreaLast = document.createElement('div');
      var lbResultsScoreAreaLastLabel = document.createElement('div');
      var lbResultsScoreAreaLastScore = document.createElement('div');
      var lbResultsRankArea = document.createElement('div');
      var lbResultsRankValue = document.createElement('span');
      lbWrapper.setAttribute('class', 'cl-widget-ms-sum-best-wrapper');
      lbDateLabel.setAttribute('class', 'cl-widget-ms-sum-best-date-label');
      lbDate.setAttribute('class', 'cl-widget-ms-sum-best-date');
      lbDateWrapper.setAttribute('class', 'cl-widget-ms-sum-best-date-wrapper');
      lbResultsWrapper.setAttribute('class', 'cl-widget-ms-sum-best-results-wrapper');
      lbResultsScoreArea.setAttribute('class', 'cl-widget-ms-sum-best-area');
      lbResultsScoreAreaHigh.setAttribute('class', 'cl-widget-ms-sum-best-high-area');
      lbResultsScoreAreaHighLabel.setAttribute('class', 'cl-widget-ms-sum-best-high-label');
      lbResultsScoreAreaHighScore.setAttribute('class', 'cl-widget-ms-sum-best-high-score');
      lbResultsScoreAreaLast.setAttribute('class', 'cl-widget-ms-sum-best-last-area');
      lbResultsScoreAreaLastLabel.setAttribute('class', 'cl-widget-ms-sum-best-last-label');
      lbResultsScoreAreaLastScore.setAttribute('class', 'cl-widget-ms-sum-best-last-score');
      lbResultsRankArea.setAttribute('class', 'cl-widget-ms-sum-best-rank-area');
      lbResultsRankValue.setAttribute('class', 'cl-widget-ms-sum-best-rank-value');
      lbDateLabel.innerHTML = date.length > 0 ? date : label;
      lbDate.innerHTML = date.length > 0 ? _this.settings.lbWidget.settings.translation.miniLeaderboard.rank : '';
      lbResultsScoreAreaHighLabel.innerHTML = _this.settings.lbWidget.settings.translation.miniLeaderboard.highScore;
      lbResultsScoreAreaHighScore.innerHTML = '--';
      lbResultsScoreAreaHigh.appendChild(lbResultsScoreAreaHighLabel);
      lbResultsScoreAreaHigh.appendChild(lbResultsScoreAreaHighScore);
      lbResultsScoreArea.appendChild(lbResultsScoreAreaHigh);
      lbResultsScoreAreaLastLabel.innerHTML = _this.settings.lbWidget.settings.translation.miniLeaderboard.lastScore;
      lbResultsScoreAreaLastScore.innerHTML = '--';
      lbResultsScoreAreaLast.appendChild(lbResultsScoreAreaLastLabel);
      lbResultsScoreAreaLast.appendChild(lbResultsScoreAreaLastScore);
      lbResultsScoreArea.appendChild(lbResultsScoreAreaLast);
      lbResultsRankValue.innerHTML = '--';
      lbResultsRankArea.appendChild(lbResultsRankValue);
      lbResultsWrapper.appendChild(lbResultsScoreArea);
      lbResultsWrapper.appendChild(lbResultsRankArea);
      lbDateWrapper.appendChild(lbDateLabel);
      lbDateWrapper.appendChild(lbDate);
      lbWrapper.appendChild(lbDateWrapper);
      lbWrapper.appendChild(lbResultsWrapper);
      sumBestDomObj = wrapperDomObj.appendChild(lbWrapper);
      setTimeout(function () {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show');
      }, 200);
    } else {
      if (!Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_4__["default"])(wrapperDomObj, 'cl-show')) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show');
      }

      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-high-label').innerHTML = _this.settings.lbWidget.settings.translation.miniLeaderboard.highScore;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-last-label').innerHTML = _this.settings.lbWidget.settings.translation.miniLeaderboard.lastScore;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-date-label').innerHTML = date.length > 0 ? date : label;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-date').innerHTML = date.length > 0 ? _this.settings.lbWidget.settings.translation.miniLeaderboard.rank : '';
    }

    Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lbEntry) {
      if (lbEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbEntry.memberId === _this.settings.lbWidget.settings.memberId) {
        var lastScore = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-last-score').innerHTML;
        var highScore = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-high-score').innerHTML;
        var rank = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-rank-value');
        var change = lbEntry.change < 0 ? 'down' : lbEntry.change > 0 ? 'up' : 'same';
        var rankValue = lbEntry.rank;

        var formattedPoints = _this.settings.lbWidget.settings.leaderboard.pointsFormatter(lbEntry.points);

        if (lastScore !== String(lbEntry.points) && String(lbEntry.points) !== highScore) {
          Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-last-score').innerHTML = highScore;
        }

        Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-high-score').innerHTML = formattedPoints;
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_5__["default"])(rank, 'cl-ms-rank-up');
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_5__["default"])(rank, 'cl-ms-rank-down');
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_5__["default"])(rank, 'cl-ms-rank-same');
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(rank, 'cl-ms-rank-' + change);
        rank.innerHTML = rankValue;
      }
    });

    if (inverse && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_4__["default"])(sumBestDomObj, 'cl-inverse')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(sumBestDomObj, 'cl-inverse');
    }
  };

  this.layoutRequiresOptIn = function () {
    var _this = this;

    var startDate = _this.settings.lbWidget.settings.competition.activeContest.scheduledStart;

    if (typeof _this.settings.lbWidget.settings.competition.activeContest.actualStart !== 'undefined') {
      startDate = _this.settings.lbWidget.settings.competition.activeContest.actualStart;
    }

    var diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(startDate).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());
    var label = _this.settings.lbWidget.settings.translation.miniLeaderboard.startsIn;
    var wrapperDomObj = _this.settings.infoContainer;

    var date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));

    if (diff <= 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode === 0) {
      label = _this.settings.lbWidget.settings.translation.miniLeaderboard.starting;
      date = '';
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 1) {
      label = _this.settings.lbWidget.settings.translation.miniLeaderboard.starting;
      date = '';
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 2) {
      diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledEnd).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());
      label = _this.settings.lbWidget.settings.translation.miniLeaderboard.started;
      date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));

      if (diff <= 0) {
        label = _this.settings.lbWidget.settings.translation.tournaments.finishing;
        date = '';
      }
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 3) {
      label = _this.settings.lbWidget.settings.translation.miniLeaderboard.finishing;
      date = '';
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode >= 4) {
      label = _this.settings.lbWidget.settings.translation.miniLeaderboard.finished;
      date = '';
    }

    if (Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-optin-wrapper') === null) {
      _this.removeUnusedElements();

      var optInWrapper = document.createElement('div');
      var optInDateWrapper = document.createElement('div');
      var optInDateLabel = document.createElement('div');
      var optInDate = document.createElement('div');
      var optInDateActionWrapper = document.createElement('div');
      var optInDateAction = document.createElement('a');
      optInWrapper.setAttribute('class', 'cl-widget-ms-optin-wrapper');
      optInDateLabel.setAttribute('class', 'cl-widget-ms-optin-date-label');
      optInDate.setAttribute('class', 'cl-widget-ms-optin-date');
      optInDateWrapper.setAttribute('class', 'cl-widget-ms-optin-date-wrapper');
      optInDateActionWrapper.setAttribute('class', 'cl-widget-ms-optin-action-wrapper');
      optInDateAction.setAttribute('class', 'cl-widget-ms-optin-action');
      optInDateLabel.innerHTML = label;
      optInDate.innerHTML = date;
      optInDateAction.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
      optInDateWrapper.appendChild(optInDateLabel);
      optInDateWrapper.appendChild(optInDate);
      optInDateActionWrapper.appendChild(optInDateAction);
      optInWrapper.appendChild(optInDateWrapper);
      optInWrapper.appendChild(optInDateActionWrapper);
      wrapperDomObj.appendChild(optInWrapper);
      setTimeout(function () {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show');
      }, 200);
    } else {
      if (!Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_4__["default"])(wrapperDomObj, 'cl-show')) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show');
      }

      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-optin-action').innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-optin-date-label').innerHTML = label;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-optin-date').innerHTML = date;
    }
  };

  this.removeUnusedElements = function () {
    var _this = this;

    var defaultLayoutWrapperDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-wrapper');
    var optInWrapperDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-optin-wrapper');
    var sumBestDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-wrapper');
    var firstToDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-wrapper');
    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, 'cl-ms-default-style');
    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, 'cl-ms-optin-style');
    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, 'cl-ms-sum-best-style');
    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, 'cl-ms-first-to-style');

    if (defaultLayoutWrapperDomObj !== null) {
      Object(_utils_remove__WEBPACK_IMPORTED_MODULE_6__["default"])(defaultLayoutWrapperDomObj);
    }

    if (optInWrapperDomObj !== null) {
      Object(_utils_remove__WEBPACK_IMPORTED_MODULE_6__["default"])(optInWrapperDomObj);
    }

    if (sumBestDomObj !== null) {
      Object(_utils_remove__WEBPACK_IMPORTED_MODULE_6__["default"])(sumBestDomObj);
    }

    if (firstToDomObj !== null) {
      Object(_utils_remove__WEBPACK_IMPORTED_MODULE_6__["default"])(firstToDomObj);
    }
  };

  this.clearAll = function () {
    var _this = this;

    if (_this.settings.updateInterval) {
      clearTimeout(_this.settings.updateInterval);
    }

    _this.removeInfoArea();

    _this.settings.active = false;
  };

  var removeInfoAreaInterval;

  this.removeInfoArea = function () {
    var _this = this;

    var wrapperDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-show');
    var layout = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-wrapper');
    if (wrapperDomObj !== null) Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_5__["default"])(wrapperDomObj, 'cl-show');

    if (layout !== null) {
      if (removeInfoAreaInterval) {
        clearTimeout(removeInfoAreaInterval);
      }

      removeInfoAreaInterval = setTimeout(function () {
        Object(_utils_remove__WEBPACK_IMPORTED_MODULE_6__["default"])(layout);
      }, 200);
    }
  };

  this.updateScoreBoard = function () {
    var _this = this;

    if (_this.settings.updateInterval) {
      clearTimeout(_this.settings.updateInterval);
    }

    _this.settings.updateInterval = setTimeout(function () {
      _this.loadInfoArea(function () {
        _this.updateScoreBoard();
      });
    }, _this.settings.updateIntervalTime);
  };

  this.loadInfoArea = function (callback) {
    var _this = this;

    if (_this.settings.active && _this.settings.lbWidget.settings.competition.activeCompetition !== null && _this.settings.lbWidget.settings.competition.activeCompetition.statusCode < 7) {
      if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired === 'boolean' && _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired && typeof _this.settings.lbWidget.settings.competition.activeCompetition.optin === 'boolean' && !_this.settings.lbWidget.settings.competition.activeCompetition.optin) {
        _this.layoutRequiresOptIn();

        callback();
      } else if (_this.settings.lbWidget.settings.competition.activeContest !== null && _this.settings.lbWidget.settings.competition.activeContest.strategy.type === 'SumBest') {
        _this.layoutSumBestOf();

        callback();
      } else if (_this.settings.lbWidget.settings.competition.activeContest !== null && _this.settings.lbWidget.settings.competition.activeContest.strategy.type === 'FirstTo') {
        _this.layoutFirstToOrEmpty(_this.settings.lbWidget.settings.competition.activeContest.strategy);

        callback();
      } else if (_this.settings.lbWidget.settings.competition.activeContestId !== null) {
        _this.layoutDefaultOrEmpty();

        callback();
      } else {
        _this.layoutDefaultOrEmpty();
      }
    } else {
      _this.clearAll();
    }
  };

  this.eventListeners = function () {
    var _this = this;

    if (_this.settings.lbWidget.settings.layout.enableMiniScoreBoardDragging) {
      Object(_dragElement__WEBPACK_IMPORTED_MODULE_7__["default"])(_this.settings.container, Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-icon'), _this.settings.overlayContainer, _this.settings.lbWidget.settings.bindContainer, function (newTop, newLeft) {
        _this.settings.lbWidget.stopActivity();

        if (_this.settings.lbWidget.settings.layout.allowOrientationChange) {
          if (newTop <= 5) {
            Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.container, _this.settings.verticalClass);
          } else if (newLeft <= 5) {
            Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_5__["default"])(_this.settings.container, _this.settings.verticalClass);
          }
        }

        _this.settings.dragging = true;
      }, function () {
        _this.settings.lbWidget.restartActivity();

        setTimeout(function () {
          _this.settings.dragging = false;
        }, 200);
      }, function () {
        _this.settings.lbWidget.clickedMiniScoreBoard();
      });
    }
  };

  this.initLayout = function (callback) {
    var _this = this;

    if (_this.settings.container === null) {
      _this.settings.active = true;
      _this.settings.container = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.layout());
      _this.settings.overlayContainer = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.overlayLayout());
      _this.settings.infoContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-information-wrapper');

      _this.eventListeners();
    }

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.loadScoreBoard = function () {
    var _this = this;

    _this.initLayout(function () {
      _this.loadInfoArea(function () {
        _this.updateScoreBoard();
      });

      setTimeout(function () {
        _this.updateScoreBoard();
      }, 1000);
    });
  };
};

/***/ }),

/***/ "./src/javascript/modules/Notifications.js":
/*!*************************************************!*\
  !*** ./src/javascript/modules/Notifications.js ***!
  \*************************************************/
/*! exports provided: Notifications */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Notifications", function() { return Notifications; });
/* harmony import */ var _Messaging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Messaging */ "./src/javascript/modules/Messaging.js");
/* harmony import */ var _utils_mapObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/mapObject */ "./src/javascript/utils/mapObject.js");
/* harmony import */ var _utils_removeClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/removeClass */ "./src/javascript/utils/removeClass.js");
/* harmony import */ var _utils_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/query */ "./src/javascript/utils/query.js");
/* harmony import */ var _utils_stripHtml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stripHtml */ "./src/javascript/utils/stripHtml.js");
/* harmony import */ var _utils_addClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/addClass */ "./src/javascript/utils/addClass.js");






/**
 * Notifications leaderboard widget
 * @param options {Object}
 * @constructor
 */

var Notifications = function Notifications(options) {
  /**
   * Notifications settings
   * @memberOf Notifications
   * @constant
   * @type { Object }
   */
  this.settings = {
    container: null,
    detailsContainer: null,
    canvasInstance: null,
    lbWidget: null,
    eventStream: [],
    checkTimeout: 2000,
    onDisplayCheckTimeout: 10000,
    checkInterval: null,
    autoNotificationHideInterval: null,
    autoNotificationHideTime: 10000,
    displayInProgress: false,
    dataExtractionForCanvas: function dataExtractionForCanvas(data, callback) {
      if (typeof data.metadata !== 'undefined' && data.metadata.length > 0 && typeof callback === 'function') {
        var found = false;
        Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_1__["default"])(data.metadata, function (meta) {
          if (meta.key === 'webAsset' && !found) {
            var responseObj = {
              imageSrc: meta.value
            };
            found = true;
            console.log(responseObj);
            callback(responseObj);
          }
        });
      }
    }
  };

  if (typeof options !== 'undefined') {
    for (var opt in options) {
      if (options.hasOwnProperty(opt)) {
        this.settings[opt] = options[opt];
      }
    }
  }

  this.layoutWrapper = function () {
    var wrapper = document.createElement('div');
    var iconWrapper = document.createElement('div');
    var icon = document.createElement('div');
    var informationWrapper = document.createElement('div');
    var informationTopWrapper = document.createElement('div');
    var informationDetailsContainer = document.createElement('div');
    var informationDetailsLabel = document.createElement('div');
    var informationDetailsDescription = document.createElement('div');
    var informationWrapperClose = document.createElement('div');
    var informationClose = document.createElement('a');
    wrapper.setAttribute('class', 'cl-widget-notif-wrapper');
    iconWrapper.setAttribute('class', 'cl-widget-notif-icon-wrapper');
    icon.setAttribute('class', 'cl-widget-notif-icon');
    informationTopWrapper.setAttribute('class', 'cl-widget-notif-information-top-wrapper');
    informationWrapper.setAttribute('class', 'cl-widget-notif-information-wrapper');
    informationDetailsContainer.setAttribute('class', 'cl-widget-notif-information-details-wrapper');
    informationDetailsLabel.setAttribute('class', 'cl-widget-notif-information-details-label');
    informationDetailsDescription.setAttribute('class', 'cl-widget-notif-information-details-description');
    informationWrapperClose.setAttribute('class', 'cl-widget-notif-information-close-wrapper');
    informationClose.setAttribute('class', 'cl-widget-notif-information-close');
    informationClose.href = 'javascript:void(0);';
    informationClose.innerHTML = 'x';
    informationDetailsContainer.appendChild(informationDetailsLabel);
    informationDetailsContainer.appendChild(informationDetailsDescription);
    informationWrapperClose.appendChild(informationClose);
    informationWrapper.appendChild(informationWrapperClose);
    informationWrapper.appendChild(informationDetailsContainer);
    informationTopWrapper.appendChild(informationWrapper);
    iconWrapper.appendChild(icon);
    wrapper.appendChild(iconWrapper);
    wrapper.appendChild(informationTopWrapper);
    return wrapper;
  };

  var processed = {};

  this.startSSE = function () {
    var _this = this;

    _this.settings.sseInstance = new _Messaging__WEBPACK_IMPORTED_MODULE_0__["Messaging"]({
      sseUrl: _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSE.replace(':space', _this.settings.lbWidget.settings.spaceName).replace(':id', _this.settings.lbWidget.settings.memberId),
      heartbeat: _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSEHeartbeat.replace(':space', _this.settings.lbWidget.settings.spaceName).replace(':id', _this.settings.lbWidget.settings.memberId),
      ajax: {
        url: null,
        apiKey: {
          'X-API-KEY': _this.settings.lbWidget.settings.apiKey
        }
      },
      callback: function callback(data) {
        var dataKey = JSON.stringify(data);
        var currentTime = new Date().getTime();

        if (typeof processed[dataKey] === 'undefined' || typeof processed[dataKey] !== 'undefined' && processed[dataKey] + 10000 < currentTime) {
          processed[JSON.stringify(data)] = currentTime;

          _this.settings.eventStream.push(data);
        }
      },
      onStartupError: function onStartupError(settings) {},
      debug: true
    });
  };

  this.autoNotificationHide = function () {
    var _this = this;

    if (_this.settings.autoNotificationHideInterval) {
      clearTimeout(_this.settings.autoNotificationHideInterval);
    }

    _this.settings.autoNotificationHideInterval = setTimeout(function () {
      _this.hideNotification();
    }, _this.settings.autoNotificationHideTime);
  };

  this.hideNotification = function () {
    var _this = this;

    if (_this.settings.autoNotificationHideInterval) {
      clearTimeout(_this.settings.autoNotificationHideInterval);
    }

    _this.settings.displayInProgress = false;
    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.container, '.cl-widget-notif-information-wrapper'), 'cl-show');
    setTimeout(function () {
      _this.settings.container.style.display = 'none';
    }, 200);
  };

  this.showAchievementNotification = function (data) {
    var _this = this;

    var label = Object(_utils_query__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.detailsContainer, '.cl-widget-notif-information-details-label');
    var description = Object(_utils_query__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.detailsContainer, '.cl-widget-notif-information-details-description');
    var descriptionText = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_4__["default"])(data.data.description);
    label.innerHTML = data.data.name.length > 23 ? data.data.name.substr(0, 23) + '...' : data.data.name;
    description.innerHTML = descriptionText.length > 60 ? descriptionText.substr(0, 60) + '...' : descriptionText;
    _this.settings.detailsContainer.dataset.id = data.data.id;
    _this.settings.container.style.display = 'block';
    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_5__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.container, '.cl-widget-notif-information-wrapper'), 'cl-show');
    }, 200);

    if (_this.settings.canvasInstance !== null) {
      _this.handleCanvasAnimations(data.data);
    }

    _this.autoNotificationHide();
  };

  this.handleCanvasAnimations = function (data) {
    var _this = this;

    _this.settings.dataExtractionForCanvas(data, function (canvasData) {
      if (canvasData.imageSrc.length > 0) {
        _this.settings.canvasInstance.settings.imageSrc = canvasData.imageSrc;

        _this.settings.canvasInstance.init();
      }
    });
  };

  this.eventStreamCheck = function () {
    var _this = this;

    if (_this.settings.checkInterval) {
      clearTimeout(_this.settings.checkInterval);
    }

    if (_this.settings.eventStream.length > 0 && !_this.settings.displayInProgress) {
      var data = _this.settings.eventStream[0];

      var index = _this.settings.eventStream.indexOf(data);

      if (typeof data.achievementId !== 'undefined') {
        _this.settings.displayInProgress = true;

        _this.settings.lbWidget.getAchievement(data.achievementId, function (data) {
          _this.showAchievementNotification(data);

          _this.settings.checkInterval = setTimeout(function () {
            _this.eventStreamCheck();
          }, _this.settings.onDisplayCheckTimeout);
        });

        _this.settings.eventStream.splice(index, 1);
      } else if (typeof data.notificationId !== 'undefined') {
        _this.settings.checkInterval = setTimeout(function () {
          _this.eventStreamCheck();
        }, _this.settings.checkTimeout);
      } else {
        _this.settings.checkInterval = setTimeout(function () {
          _this.eventStreamCheck();
        }, _this.settings.checkTimeout);
      }

      if (index > -1) {
        _this.settings.eventStream.splice(index, 1);
      }
    } else {
      _this.settings.checkInterval = setTimeout(function () {
        _this.eventStreamCheck();
      }, _this.settings.checkTimeout);
    }
  };

  this.init = function () {
    var _this = this;

    if (_this.settings.container === null) {
      _this.startSSE();

      _this.settings.container = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.layoutWrapper());
      _this.settings.detailsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.container, '.cl-widget-notif-information-details-wrapper');
    } else {
      // terminate SSE
      _this.settings.sseInstance.closeChanel(); // update the member


      _this.settings.sseInstance.settings.sseUrl = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSE.replace(':space', _this.settings.lbWidget.settings.spaceName).replace(':id', _this.settings.lbWidget.settings.memberId);
      _this.settings.sseInstance.settings.heartbeat = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSEHeartbeat.replace(':space', _this.settings.lbWidget.settings.spaceName).replace(':id', _this.settings.lbWidget.settings.memberId); // re-instantiate SSE

      _this.settings.sseInstance.openChanel();
    }

    _this.eventStreamCheck();
  };
};

/***/ }),

/***/ "./src/javascript/modules/cLabs.js":
/*!*****************************************!*\
  !*** ./src/javascript/modules/cLabs.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// default domain
// var apiURL = "http://192.168.1.8:9998";
var apiURL = 'https://gateway.competitionlabs.com';
var cLabs = {
  api: {
    url: apiURL
  },
  classSelector: /^\.([\w-]+)$/,
  // class string expression check
  idSelector: /^#[\w\d\-\_\&\!\@\*]+$/,
  // ID string expression check
  tagSelector: /^[\w-]+$/ // TAG string expression check

};
/* harmony default export */ __webpack_exports__["default"] = (cLabs);

/***/ }),

/***/ "./src/javascript/modules/dragElement.js":
/*!***********************************************!*\
  !*** ./src/javascript/modules/dragElement.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/javascript/utils/index.js");
 // var scrollObj2 = null;

var movementInterval;

var dragElement = function dragElement(elmnt, draggableEl, overlayContainer, container, dragging, finishDragging, mobileTouch) {
  var pos1 = 0;
  var pos2 = 0;
  var pos3 = 0;
  var pos4 = 0;
  var isMobile = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["isMobileTablet"])();
  var isiOS = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["isiOSDevice"])();
  var isParentWindow = elmnt.parentNode.nodeName === 'BODY';
  var maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth;
  var maxTop = isParentWindow ? window.innerHeight : container.offsetHeight;
  var touchStart;
  var moving = null; // scrollObj2 = query(".scroll-res");

  if (movementInterval) {
    clearTimeout(movementInterval);
  }

  var onWindowChange = function onWindowChange() {
    var isVertical = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["hasClass"])(elmnt, 'cl-vertical-mini');
    var maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth;
    var maxTop = isParentWindow ? window.innerHeight : container.offsetHeight;
    var offsetMaxLeft = maxLeft - parseInt(elmnt.offsetWidth + (isVertical ? draggableEl.offsetWidth / 7 : draggableEl.offsetWidth / 1.6));
    var offsetMaxTop = maxTop - parseInt(elmnt.offsetHeight + (isVertical ? draggableEl.offsetHeight / 1.2 : draggableEl.offsetHeight / 4));
    var elTop = parseInt(elmnt.style.top);
    var elLeft = parseInt(elmnt.style.left);

    if (elTop > offsetMaxTop && offsetMaxTop > 5) {
      elmnt.style.top = offsetMaxTop + 'px';
    }

    if (elLeft > offsetMaxLeft && offsetMaxLeft > 5) {
      elmnt.style.left = offsetMaxLeft + 'px';
    }
  };

  if (isMobile) {
    /* listen to the touchMove event,
      every time it fires, grab the location
      of touch and assign it to box */
    var justATouch = false;
    draggableEl.addEventListener('touchstart', function (e) {
      justATouch = true;
      if (touchStart) clearTimeout(touchStart);
      maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth;
      maxTop = isParentWindow ? window.innerHeight : container.offsetHeight;
      touchStart = setTimeout(function () {
        justATouch = false;
      }, 100);
    }, {
      passive: isiOS
    });
    draggableEl.addEventListener('touchmove', function (e) {
      e.preventDefault();
      pos3 = e.targetTouches[0].pageX;
      pos4 = e.targetTouches[0].pageY; // moving = new Date().getTime();

      elementDrag(e);
    }, {
      passive: isiOS
    });
    draggableEl.addEventListener('touchend', function (e) {
      // e.preventDefault();
      // current box position.
      closeDragElement(e);
      moving = null;

      if (justATouch && typeof mobileTouch === 'function') {
        mobileTouch();
      }
    }, {
      passive: isiOS
    });
    window.addEventListener('orientationchange', function (e) {
      onWindowChange();
    }, true);
  } else {
    // if present, the header is where you move the DIV from:
    draggableEl.onmousedown = dragMouseDown;
    window.addEventListener('resize', function (e) {
      onWindowChange();
    }, true);
  }

  function dragMouseDown(e) {
    e = e || window.event;
    e.preventDefault();
    maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth;
    maxTop = isParentWindow ? window.innerHeight : container.offsetHeight;
    overlayContainer.style.display = 'block'; // get the mouse cursor position at startup:

    pos3 = e.clientX;
    pos4 = e.clientY;
    document.onmouseup = closeDragElement; // call a function whenever the cursor moves:

    document.onmousemove = elementDrag;
  }
  /**
   * Adds additional offset to max left and top based on orientation and container width (will be affected by CSS styling so needs to be adjusted accordingly)
   * - elmnt => is the main container that has the positioning applied to
   * - draggableEl => key element that is mean for dragging
   */


  var checkMaxMinRestraints = function checkMaxMinRestraints(newTop, newLeft, offsetMaxLeft, offsetMaxTop) {
    var // minLeft = (isVertical ? elmnt.offsetWidth/4 : 0 ), // attempt to restrict the container to go out of bounds by a few pixels, needs some work
    minLeft = 0;
    var top = newTop <= 0 ? 0 : newTop;
    var left = newLeft <= minLeft ? minLeft : newLeft;

    if (left >= offsetMaxLeft) {
      left = offsetMaxLeft;
    }

    if (top >= offsetMaxTop) {
      top = offsetMaxTop;
    }

    return {
      top: top,
      left: left
    };
  };

  function elementDrag(e) {
    e = e || window.event;
    e.preventDefault(); // calculate the new cursor position:

    var posX = isMobile ? e.targetTouches[0].pageX : e.clientX;
    var posY = isMobile ? e.targetTouches[0].pageY : e.clientY;
    var isVertical = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["hasClass"])(elmnt, 'cl-vertical-mini');
    var offsetMaxLeft = maxLeft - parseInt(elmnt.offsetWidth + (isVertical ? draggableEl.offsetWidth / 7 : draggableEl.offsetWidth / 1.6));
    var offsetMaxTop = maxTop - parseInt(elmnt.offsetHeight + (isVertical ? draggableEl.offsetHeight / 1.2 : draggableEl.offsetHeight / 4));
    pos1 = pos3 - posX;
    pos2 = pos4 - posY;
    pos3 = parseInt(posX);
    pos4 = parseInt(posY);
    moving = new Date().getTime();
    checkMovement();
    if (!Object(_utils__WEBPACK_IMPORTED_MODULE_0__["hasClass"])(elmnt, 'cl-being-moved')) Object(_utils__WEBPACK_IMPORTED_MODULE_0__["addClass"])(elmnt, 'cl-being-moved');
    var newTop = isMobile ? posY - parseInt(draggableEl.offsetHeight / 2) : elmnt.offsetTop - pos2;
    var newLeft = isMobile ? posX - parseInt(draggableEl.offsetWidth / 2) : elmnt.offsetLeft - pos1;
    var leftTopCheck = checkMaxMinRestraints(newTop, newLeft, offsetMaxLeft, offsetMaxTop); // set the element's new position:
    // scrollObj2.innerHTML = leftTopCheck.top + "-" + leftTopCheck.left + " : "+ newTop + "-" + newLeft + " : " + (posX < 0 || posY < 0 || posX > maxLeft || posY > maxTop) + "-" + (newTop > offsetMaxTop || newLeft > offsetMaxLeft);
    // scrollObj2.innerHTML = leftTopCheck.top + "-" + leftTopCheck.left + " : "+ newTop +"-"+ newLeft + " : " + (posX < 0 || posY < 0 || posX > maxLeft || posY > maxTop) + "-" + (newTop > offsetMaxTop || newLeft > offsetMaxLeft);

    if (posX < 0 || posY < 0 || posX > maxLeft || posY > maxTop) {
      closeDragElement(e);
    } else if (newTop > offsetMaxTop || newLeft > offsetMaxLeft) {
      closeDragElement(e);
    } else if (leftTopCheck.top > offsetMaxTop || leftTopCheck.left > offsetMaxLeft) {
      closeDragElement(e);
    } else {
      elmnt.style.top = leftTopCheck.top + 'px';
      elmnt.style.left = leftTopCheck.left + 'px';
    }

    if (typeof dragging === 'function') dragging(newTop, newLeft);
  }

  function closeDragElement(e) {
    overlayContainer.style.display = 'none';

    if (isMobile) {
      e.preventDefault();
    } else {
      // stop moving when mouse button is released:
      document.onmouseup = null;
      document.onmousemove = null;
    }

    moving = null;
    Object(_utils__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elmnt, 'cl-being-moved');
    if (typeof finishDragging === 'function') finishDragging();
  }

  function checkMovement() {
    if (movementInterval) {
      clearTimeout(movementInterval);
    }

    movementInterval = setTimeout(function () {
      if (moving !== null && moving + 3000 < new Date().getTime() && !isMobile) {
        closeDragElement();
      } else if (moving !== null) {
        checkMovement();
      }
    }, 3000);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (dragElement);

/***/ }),

/***/ "./src/javascript/modules/setTimeoutGlobal.js":
/*!****************************************************!*\
  !*** ./src/javascript/modules/setTimeoutGlobal.js ***!
  \****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_mapObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mapObject */ "./src/javascript/utils/mapObject.js");
// global timeout handling


try {
  if (typeof setTimeoutGlobal !== 'function') {
    window._setTimeoutGlobalRepository = [];

    window.setTimeoutGlobal = function (id, func, timer) {
      var exists = false;
      Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_0__["default"])(window._setTimeoutGlobalRepository, function (instance, key, count) {
        if (id === instance.id) {
          exists = true;
        }
      });

      if (!exists) {
        var interval = setTimeout(function () {
          Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_0__["default"])(window._setTimeoutGlobalRepository, function (instance, key, count) {
            if (id === instance.id) {
              window._setTimeoutGlobalRepository.splice(key, 1);
            }
          });

          if (typeof func === 'function') {
            func();
          }
        }, timer);

        window._setTimeoutGlobalRepository.push({
          id: id,
          func: func,
          timer: timer,
          interval: interval
        });

        return interval;
      } else {
        throw new Error('setTimeoutGlobal - ID [' + id + '] already in use');
      }
    };

    var closeTimeout = function closeTimeout() {
      if (window._setTimeoutGlobalRepository.length > 0) {
        Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_0__["default"])(window._setTimeoutGlobalRepository, function (instance, key, count) {
          if (instance.interval) {
            clearInterval(instance.interval);
            instance.interval = null;
          }
        });
      }
    };

    var reEnableTimeouts = function reEnableTimeouts() {
      if (window._setTimeoutGlobalRepository.length > 0) {
        var tmp = [];
        Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_0__["default"])(window._setTimeoutGlobalRepository, function (instance, key, count) {
          tmp.push(instance);
        });
        window._setTimeoutGlobalRepository = [];
        Object(_utils_mapObject__WEBPACK_IMPORTED_MODULE_0__["default"])(tmp, function (instance, key, count) {
          window.setTimeoutGlobal(instance.id, instance.func, instance.timer);
        });
      }
    };

    var windowActivity = function windowActivity() {
      (function () {
        var hidden = 'hidden'; // Standards:

        if (hidden in document) {
          document.addEventListener('visibilitychange', onchange);
        } else if ((hidden = 'mozHidden') in document) {
          document.addEventListener('mozvisibilitychange', onchange);
        } else if ((hidden = 'webkitHidden') in document) {
          document.addEventListener('webkitvisibilitychange', onchange);
        } else if ((hidden = 'msHidden') in document) {
          document.addEventListener('msvisibilitychange', onchange);
        } else if ('onfocusin' in document) {
          // IE 9 and lower:
          document.onfocusin = document.onfocusout = onchange;
        } else {
          // All others:
          window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;
        }

        function onchange(evt) {
          var status = '';
          var v = 'visible';
          var h = 'hidden';
          var evtMap = {
            focus: v,
            focusin: v,
            pageshow: v,
            blur: h,
            focusout: h,
            pagehide: h
          };
          evt = evt || window.event;

          if (evt.type in evtMap) {
            status = evtMap[evt.type];
          } else {
            status = this[hidden] ? 'hidden' : 'visible';
          }

          if (status === 'visible') {
            reEnableTimeouts();
          } else if (status === 'hidden') {
            closeTimeout();
          }
        } // set the initial state (but only if browser supports the Page Visibility API)


        if (document[hidden] !== undefined) {
          onchange({
            type: document[hidden] ? 'blur' : 'focus'
          });
        }
      })();
    };

    windowActivity();
  }
} catch (err) {
  console.log(err);
}

/***/ }),

/***/ "./src/javascript/polyfills/index.js":
/*!*******************************************!*\
  !*** ./src/javascript/polyfills/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//
if (!window.console) {
  window.console = function () {};

  if (typeof XDomainRequest !== 'undefined') {
    window.console.prototype.log = function (err) {
      throw new SyntaxError(err);
    };

    window.console.prototype.warn = function (err) {
      throw new SyntaxError(err);
    };

    window.console.prototype.error = function (err) {
      throw new SyntaxError(err);
    };
  }
} //


try {
  Event.prototype.preventDefault || (Event.prototype.preventDefault = function () {
    this.returnValue = !1;
  });
} catch (err) {
  console.log(err);
} //


try {
  Event.prototype.stopPropagation || (Event.prototype.stopPropagation = function () {
    this.cancelBubble = !0;
  });
} catch (err) {
  console.log(err);
} //


try {
  if (!Element.prototype.addEventListener) {
    var eventListeners = [];

    var addEventListener = function addEventListener(e, t) {
      var n;
      var r = this;

      if (n = function n(e) {
        e.target = e.srcElement, e.currentTarget = r, e.pageX = event.clientX + document.body.scrollLeft, e.pageY = event.clientY + document.body.scrollTop, t.handleEvent ? t.handleEvent(e) : t.call(r, e);
      }, e === 'DOMContentLoaded') {
        var o = function o(e) {
          document.readyState === 'complete' && n(e);
        };

        if (document.attachEvent('onreadystatechange', o), eventListeners.push({
          object: this,
          type: e,
          listener: t,
          wrapper: o
        }), document.readyState == 'complete') {
          var i = new Event();
          i.srcElement = window, o(i);
        }
      } else this.attachEvent('on' + e, n), eventListeners.push({
        object: this,
        type: e,
        listener: t,
        wrapper: n
      });
    };

    var removeEventListener = function removeEventListener(e, t) {
      for (var n = 0; n < eventListeners.length;) {
        var r = eventListeners[n];

        if (r.object == this && r.type == e && r.listener == t) {
          e == 'DOMContentLoaded' ? this.detachEvent('onreadystatechange', r.wrapper) : this.detachEvent('on' + e, r.wrapper);
          break;
        }

        ++n;
      }
    };

    Element.prototype.addEventListener = addEventListener, Element.prototype.removeEventListener = removeEventListener, HTMLDocument && (HTMLDocument.prototype.addEventListener = addEventListener, HTMLDocument.prototype.removeEventListener = removeEventListener), Window && (Window.prototype.addEventListener = addEventListener, Window.prototype.removeEventListener = removeEventListener);
  }

  Element.prototype.remove || (Element.prototype.remove = function () {
    this.parentElement.removeChild(this);
  }, NodeList.prototype.remove = HTMLCollection.prototype.remove = function () {
    for (var e = 0, t = this.length; t > e; e++) {
      this[e] && this[e].parentElement && this[e].parentElement.removeChild(this[e]);
    }
  });
} catch (err) {
  console.log(err);
}

typeof XDomainRequest !== 'undefined' && (_typeof(window.JSON) !== 'object' && (window.JSON = {}), function () {
  'use strict';

  function f(e) {
    return e < 10 ? '0' + e : e;
  }

  function quote(e) {
    return escapable.lastIndex = 0, escapable.test(e) ? '"' + e.replace(escapable, function (e) {
      var t = meta[e];
      return typeof t === 'string' ? t : "\\u" + ('0000' + e.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + e + '"';
  }

  function str(e, t) {
    var n;
    var r;
    var o;
    var i;
    var a;
    var p = gap;
    var u = t[e];

    switch (u && _typeof(u) === 'object' && typeof u.toJSON === 'function' && (u = u.toJSON(e)), typeof rep === 'function' && (u = rep.call(t, e, u)), _typeof(u)) {
      case 'string':
        return quote(u);

      case 'number':
        return isFinite(u) ? String(u) : 'null';

      case 'boolean':
      case 'null':
        return String(u);

      case 'object':
        if (!u) return 'null';

        if (gap += indent, a = [], Object.prototype.toString.apply(u) === '[object Array]') {
          for (i = u.length, n = 0; i > n; n += 1) {
            a[n] = str(n, u) || 'null';
          }

          return o = a.length === 0 ? '[]' : gap ? '[\n' + gap + a.join(',\n' + gap) + '\n' + p + ']' : '[' + a.join(',') + ']', gap = p, o;
        }

        if (rep && _typeof(rep) === 'object') for (i = rep.length, n = 0; i > n; n += 1) {
          typeof rep[n] === 'string' && (r = rep[n], o = str(r, u), o && a.push(quote(r) + (gap ? ': ' : ':') + o));
        } else for (r in u) {
          Object.prototype.hasOwnProperty.call(u, r) && (o = str(r, u), o && a.push(quote(r) + (gap ? ': ' : ':') + o));
        }
        return o = a.length === 0 ? '{}' : gap ? '{\n' + gap + a.join(',\n' + gap) + '\n' + p + '}' : '{' + a.join(',') + '}', gap = p, o;
    }
  }

  typeof Date.prototype.toJSON !== 'function' && (Date.prototype.toJSON = function () {
    return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;
  }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {
    return this.valueOf();
  });
  var cx, escapable, gap, indent, meta, rep;
  typeof window.JSON.stringify !== 'function' && (escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, meta = {
    '\b': '\\b',
    '	': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '"': '\\"',
    '\\': '\\\\'
  }, window.JSON.stringify = function (e, t, n) {
    var r;
    if (gap = '', indent = '', typeof n === 'number') for (r = 0; n > r; r += 1) {
      indent += ' ';
    } else typeof n === 'string' && (indent = n);
    if (rep = t, t && typeof t !== 'function' && (_typeof(t) !== 'object' || typeof t.length !== 'number')) throw new Error('JSON.stringify');
    return str('', {
      '': e
    });
  }), typeof window.JSON.parse !== 'function' && (cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, window.JSON.parse = function (text, reviver) {
    function walk(e, t) {
      var n;
      var r;
      var o = e[t];
      if (o && _typeof(o) === 'object') for (n in o) {
        Object.prototype.hasOwnProperty.call(o, n) && (r = walk(o, n), void 0 !== r ? o[n] = r : delete o[n]);
      }
      return reviver.call(e, t, o);
    }

    var j;
    if (text = String(text), cx.lastIndex = 0, cx.test(text) && (text = text.replace(cx, function (e) {
      return "\\u" + ('0000' + e.charCodeAt(0).toString(16)).slice(-4);
    })), /^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) return j = eval('(' + text + ')'), typeof reviver === 'function' ? walk({
      '': j
    }, '') : j;
    throw new SyntaxError('JSON.parse');
  });
}()); //

var _slice = Array.prototype.slice;

try {
  _slice.call(document.documentElement);
} catch (e) {
  Array.prototype.slice = function (t, e) {
    if (e = typeof e !== 'undefined' ? e : this.length, Object.prototype.toString.call(this) === '[object Array]') return _slice.call(this, t, e);
    var r;
    var i;
    var c = [];
    var l = this.length;
    var o = t || 0;
    o = o >= 0 ? o : l + o;
    var a = e || l;
    if (e < 0 && (a = l + e), i = a - o, i > 0) if (c = new Array(i), this.charAt) for (r = 0; i > r; r++) {
      c[r] = this.charAt(o + r);
    } else for (r = 0; i > r; r++) {
      c[r] = this[o + r];
    }
    return c;
  };
} // [EventSource] Polyfill fix: https://github.com/remy/polyfills/blob/master/EventSource.js


(function (global) {
  if ('EventSource' in global) return;
  var reTrim = /^(\s|\u00A0)+|(\s|\u00A0)+$/g;

  var EventSource = function EventSource(url) {
    var eventsource = this;
    var interval = 500;
    /* polling interval  */

    var lastEventId = null;
    var cache = '';

    if (!url || typeof url !== 'string') {
      throw new SyntaxError('Not enough arguments');
    }

    this.URL = url;
    this.readyState = this.CONNECTING;
    this._pollTimer = null;
    this._xhr = null;

    function pollAgain(interval) {
      eventsource._pollTimer = setTimeout(function () {
        poll.call(eventsource);
      }, interval);
    }

    function poll() {
      try {
        /* force hiding of the error message... insane? */
        if (eventsource.readyState === eventsource.CLOSED) return;
        /* NOTE: IE7 and upwards support */

        var xhr = new XMLHttpRequest();
        xhr.open('GET', eventsource.URL, true);
        xhr.setRequestHeader('Accept', 'text/event-stream');
        xhr.setRequestHeader('Cache-Control', 'no-cache');
        /* we must make use of this on the server side if we're working with Android - because they don't trigger readychange until the server connection is closed */

        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        if (lastEventId != null) xhr.setRequestHeader('Last-Event-ID', lastEventId);
        cache = '';
        xhr.timeout = 50000;

        xhr.onreadystatechange = function () {
          if (this.readyState == 3 || this.readyState == 4 && this.status == 200) {
            /* on success */
            if (eventsource.readyState == eventsource.CONNECTING) {
              eventsource.readyState = eventsource.OPEN;
              eventsource.dispatchEvent('open', {
                type: 'open'
              });
            }

            var responseText = '';

            try {
              responseText = this.responseText || '';
            } catch (e) {}
            /* process this.responseText */


            var parts = responseText.substr(cache.length).split('\n');
            var eventType = 'message';
            var data = [];
            var i = 0;
            var line = '';
            cache = responseText;
            /* TODO handle 'event' (for buffer name), retry */

            for (; i < parts.length; i++) {
              line = parts[i].replace(reTrim, '');

              if (line.indexOf('event') === 0) {
                eventType = line.replace(/event:?\s*/, '');
              } else if (line.indexOf('retry') === 0) {
                var retry = parseInt(line.replace(/retry:?\s*/, ''));

                if (!isNaN(retry)) {
                  interval = retry;
                }
              } else if (line.indexOf('data') === 0) {
                data.push(line.replace(/data:?\s*/, ''));
              } else if (line.indexOf('id:') === 0) {
                lastEventId = line.replace(/id:?\s*/, '');
              } else if (line.indexOf('id') === 0) {
                /* this resets the id */
                lastEventId = null;
              } else if (line === '') {
                if (data.length) {
                  var event = new MessageEvent(data.join('\n'), eventsource.url, lastEventId);
                  eventsource.dispatchEvent(eventType, event);
                  data = [];
                  eventType = 'message';
                }
              }
            }

            if (this.readyState === 4) pollAgain(interval);
            /* don't need to poll again, because we're long-loading */
          } else if (eventsource.readyState !== eventsource.CLOSED) {
            if (this.readyState === 4) {
              /* and some other status dispatch error */
              eventsource.readyState = eventsource.CONNECTING;
              eventsource.dispatchEvent('error', {
                type: 'error'
              });
              pollAgain(interval);
            } else if (this.readyState === 0) {
              /* likely aborted */
              pollAgain(interval);
            } else {}
          }
        };

        xhr.send();
        setTimeout(function () {
          if (true) xhr.abort();
        }, xhr.timeout);
        eventsource._xhr = xhr;
      } catch (e) {
        /* in an attempt to silence the errors */
        eventsource.dispatchEvent('error', {
          type: 'error',
          data: e.message
        });
        /* ??? */
      }
    }

    ;
    poll();
    /* init now */
  };

  EventSource.prototype = {
    close: function close() {
      /* closes the connection - disabling the polling */
      this.readyState = this.CLOSED;
      clearInterval(this._pollTimer);

      this._xhr.abort();
    },
    CONNECTING: 0,
    OPEN: 1,
    CLOSED: 2,
    dispatchEvent: function dispatchEvent(type, event) {
      var handlers = this['_' + type + 'Handlers'];

      if (handlers) {
        for (var i = 0; i < handlers.length; i++) {
          handlers[i].call(this, event);
        }
      }

      if (this['on' + type]) {
        this['on' + type].call(this, event);
      }
    },
    addEventListener: function addEventListener(type, handler) {
      if (!this['_' + type + 'Handlers']) {
        this['_' + type + 'Handlers'] = [];
      }

      this['_' + type + 'Handlers'].push(handler);
    },
    removeEventListener: function removeEventListener(type, handler) {
      var handlers = this['_' + type + 'Handlers'];

      if (!handlers) {
        return;
      }

      for (var i = handlers.length - 1; i >= 0; --i) {
        if (handlers[i] === handler) {
          handlers.splice(i, 1);
          break;
        }
      }
    },
    onerror: null,
    onmessage: null,
    onopen: null,
    readyState: 0,
    URL: ''
  };

  var MessageEvent = function MessageEvent(data, origin, lastEventId) {
    this.data = data;
    this.origin = origin;
    this.lastEventId = lastEventId || '';
  };

  MessageEvent.prototype = {
    data: null,
    type: 'message',
    lastEventId: '',
    origin: ''
  };
  if ('module' in global) module.exports = EventSource;
  global.EventSource = EventSource;
})(window);

/***/ }),

/***/ "./src/javascript/utils/addClass.js":
/*!******************************************!*\
  !*** ./src/javascript/utils/addClass.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * App/Append new class string to the provided DOM element
 * @memberOf module:utils
 * @static
 * @param element
 * @param className
 * @returns {{classList}|*}
 */
var addClass = function addClass(element, className) {
  try {
    if (element.classList) {
      element.classList.add(className);
    } else {
      element.className += ' ' + className;
    }
  } catch (e) {
    console.trace();
  }

  return element;
};

/* harmony default export */ __webpack_exports__["default"] = (addClass);

/***/ }),

/***/ "./src/javascript/utils/appendNext.js":
/*!********************************************!*\
  !*** ./src/javascript/utils/appendNext.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var appendNext = function appendNext(el, newNode) {
  if (el.nextSibling) {
    el.parentNode.insertBefore(newNode, el.nextSibling);
  } else {
    el.parentNode.appendChild(newNode);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (appendNext);

/***/ }),

/***/ "./src/javascript/utils/camelToKebabCase.js":
/*!**************************************************!*\
  !*** ./src/javascript/utils/camelToKebabCase.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var camelToKebabCase = function camelToKebabCase(str) {
  return str.replace(/[A-Z]/g, function (letter) {
    return "-".concat(letter.toLowerCase());
  });
};

/* harmony default export */ __webpack_exports__["default"] = (camelToKebabCase);

/***/ }),

/***/ "./src/javascript/utils/closest.js":
/*!*****************************************!*\
  !*** ./src/javascript/utils/closest.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_cLabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/cLabs */ "./src/javascript/modules/cLabs.js");
/* harmony import */ var _hasClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hasClass */ "./src/javascript/utils/hasClass.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }



/**
 * Iterate up the tree of DOM elements to find the closes match
 * @memberOf module:utils
 * @static
 * @param element
 * @param selector
 * @returns {null | ParentNode}
 */

var closest = function closest(element, selector) {
  if (_typeof(selector) === 'object') {
    var selectorClassString = selector.getAttribute('class');
    var selectorIdString = selector.id;

    if (selectorIdString !== null && selectorIdString.length > 0) {
      selector = '#' + selectorIdString;
    } else if (selectorClassString !== null && selectorClassString.length > 0) {
      selector = '.' + selectorClassString.split(' ')[0];
    } else {
      selector = selector.nodeName;
    }
  }

  function closest(element, selector) {
    try {
      element = element.parentNode;
    } catch (e) {
      console.log(element, selector);
      console.trace();
    }

    if (element !== null && _typeof(element) === 'object') {
      if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].classSelector) && Object(_hasClass__WEBPACK_IMPORTED_MODULE_1__["default"])(element, selector)) {
        return element;
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].idSelector) && element.id === selector.replace('#', '')) {
        return element;
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].tagSelector) && element.nodeName === selector.toUpperCase()) {
        return element;
      } else {
        return closest(element, selector);
      }
    } else {
      return null;
    }
  }

  if (_typeof(element) === 'object') {
    return closest(element, selector);
  } else {
    return null;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (closest);

/***/ }),

/***/ "./src/javascript/utils/formatNumberLeadingZeros.js":
/*!**********************************************************!*\
  !*** ./src/javascript/utils/formatNumberLeadingZeros.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Prepends 0 the provided number and returns the formated element as a string
 * @memberOf module:utils
 * @static
 * @param num
 * @param size {number}
 * @returns {string} 1 => 001
 */
var formatNumberLeadingZeros = function formatNumberLeadingZeros(num, size) {
  var s = String(num);

  while (s.length < size) {
    s = '0' + s;
  }

  return s;
};

/* harmony default export */ __webpack_exports__["default"] = (formatNumberLeadingZeros);

/***/ }),

/***/ "./src/javascript/utils/getOffset.js":
/*!*******************************************!*\
  !*** ./src/javascript/utils/getOffset.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var getOffset = function getOffset(el) {
  var _x = 0;
  var _y = 0;

  while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
    _x += el.offsetLeft - el.scrollLeft;
    _y += el.offsetTop - el.scrollTop;
    el = el.offsetParent;
  }

  return {
    top: _y,
    left: _x
  };
};

/* harmony default export */ __webpack_exports__["default"] = (getOffset);

/***/ }),

/***/ "./src/javascript/utils/hasClass.js":
/*!******************************************!*\
  !*** ./src/javascript/utils/hasClass.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Provides an ability to check if a DOM element contains a class string
 * @memberOf module:utils
 * @static
 * @param element
 * @param className
 * @returns {boolean}
 */
function _hasClass(element, className) {
  className = className.replace('.', '');

  try {
    if (element.classList) {
      return element.classList.contains(className);
    } else {
      return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
    }
  } catch (e) {
    if (typeof e.stack !== 'undefined') {
      console.log(e.stack);
    }

    console.log(e, element, className);
    return false;
  }
}

var hasClass = function hasClass(element, className) {
  if (typeof className === 'string') {
    return _hasClass(element, className);
  } else if (className instanceof Array) {
    var hasClass = false;

    for (var i in className) {
      if (typeof className[i] === 'string' && _hasClass(element, className[i])) {
        hasClass = true;
      }
    }

    return hasClass;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (hasClass);

/***/ }),

/***/ "./src/javascript/utils/index.js":
/*!***************************************!*\
  !*** ./src/javascript/utils/index.js ***!
  \***************************************/
/*! exports provided: sizeof, isElement, objectCount, remove, objectIterator, addClass, removeClass, hasClass, stringContains, formatNumberLeadingZeros, stripHtml, closest, isMobileTablet, getOffset, isiOSDevice, appendNext, query, trim, mergeObjects, scrollEnabled */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sizeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sizeof */ "./src/javascript/utils/sizeof.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sizeof", function() { return _sizeof__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _isElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isElement */ "./src/javascript/utils/isElement.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isElement", function() { return _isElement__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _objectCount__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./objectCount */ "./src/javascript/utils/objectCount.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "objectCount", function() { return _objectCount__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _remove__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./remove */ "./src/javascript/utils/remove.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "remove", function() { return _remove__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _objectIterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./objectIterator */ "./src/javascript/utils/objectIterator.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "objectIterator", function() { return _objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _addClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./addClass */ "./src/javascript/utils/addClass.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addClass", function() { return _addClass__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _removeClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./removeClass */ "./src/javascript/utils/removeClass.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeClass", function() { return _removeClass__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _hasClass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hasClass */ "./src/javascript/utils/hasClass.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hasClass", function() { return _hasClass__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _stringContains__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stringContains */ "./src/javascript/utils/stringContains.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringContains", function() { return _stringContains__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./formatNumberLeadingZeros */ "./src/javascript/utils/formatNumberLeadingZeros.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "formatNumberLeadingZeros", function() { return _formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony import */ var _stripHtml__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./stripHtml */ "./src/javascript/utils/stripHtml.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripHtml", function() { return _stripHtml__WEBPACK_IMPORTED_MODULE_10__["default"]; });

/* harmony import */ var _closest__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./closest */ "./src/javascript/utils/closest.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "closest", function() { return _closest__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony import */ var _isMobileTablet__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./isMobileTablet */ "./src/javascript/utils/isMobileTablet.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isMobileTablet", function() { return _isMobileTablet__WEBPACK_IMPORTED_MODULE_12__["default"]; });

/* harmony import */ var _getOffset__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./getOffset */ "./src/javascript/utils/getOffset.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getOffset", function() { return _getOffset__WEBPACK_IMPORTED_MODULE_13__["default"]; });

/* harmony import */ var _isiOSDevice__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./isiOSDevice */ "./src/javascript/utils/isiOSDevice.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isiOSDevice", function() { return _isiOSDevice__WEBPACK_IMPORTED_MODULE_14__["default"]; });

/* harmony import */ var _appendNext__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./appendNext */ "./src/javascript/utils/appendNext.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "appendNext", function() { return _appendNext__WEBPACK_IMPORTED_MODULE_15__["default"]; });

/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./query */ "./src/javascript/utils/query.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "query", function() { return _query__WEBPACK_IMPORTED_MODULE_16__["default"]; });

/* harmony import */ var _trim__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./trim */ "./src/javascript/utils/trim.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trim", function() { return _trim__WEBPACK_IMPORTED_MODULE_17__["default"]; });

/* harmony import */ var _mergeObjects__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./mergeObjects */ "./src/javascript/utils/mergeObjects.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeObjects", function() { return _mergeObjects__WEBPACK_IMPORTED_MODULE_18__["default"]; });

/* harmony import */ var _scrollEnabled__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./scrollEnabled */ "./src/javascript/utils/scrollEnabled.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scrollEnabled", function() { return _scrollEnabled__WEBPACK_IMPORTED_MODULE_19__["default"]; });

/**
 @module utils
 */





















/***/ }),

/***/ "./src/javascript/utils/isElement.js":
/*!*******************************************!*\
  !*** ./src/javascript/utils/isElement.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Returns true if it is a DOM element
 * @memberOf module:utils
 * @static
 * @param o {Object}
 * @return {Boolean}
 */
var isElement = function isElement(o) {
  return (typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement)) === 'object' ? o instanceof HTMLElement :
  /* DOM2 */
  o && _typeof(o) === 'object' && o !== null && o.nodeType === 1 && typeof o.nodeName === 'string';
};

/* harmony default export */ __webpack_exports__["default"] = (isElement);

/***/ }),

/***/ "./src/javascript/utils/isMobileTablet.js":
/*!************************************************!*\
  !*** ./src/javascript/utils/isMobileTablet.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _stringContains__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stringContains */ "./src/javascript/utils/stringContains.js");
// a check to test if the device is a mobile or tablet


var isMobileTablet = function isMobileTablet() {
  var check = false;

  (function (a) {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
  })(navigator.userAgent || navigator.vendor || window.opera); // custom solution because latest iOS 13 userAgent doesn't return correct mobile information


  if (!check) {
    check = Object(_stringContains__WEBPACK_IMPORTED_MODULE_0__["default"])(window.navigator.userAgent.toLowerCase(), 'macintosh') && 'ontouchend' in document;
  }

  return check;
};

/* harmony default export */ __webpack_exports__["default"] = (isMobileTablet);

/***/ }),

/***/ "./src/javascript/utils/isiOSDevice.js":
/*!*********************************************!*\
  !*** ./src/javascript/utils/isiOSDevice.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// check if iOS
var isiOSDevice = function isiOSDevice() {
  return !!navigator.platform && /iP(ad|hone|od)/.test(navigator.platform);
};

/* harmony default export */ __webpack_exports__["default"] = (isiOSDevice);

/***/ }),

/***/ "./src/javascript/utils/mapObject.js":
/*!*******************************************!*\
  !*** ./src/javascript/utils/mapObject.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var mapObject = function mapObject(obj, callback) {
  if (obj !== null) {
    var count = 0;

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        var ret = callback(obj[key], key, count);
        if (typeof ret !== 'undefined') obj[key] = ret;
        count++;
      }
    }
  } else {
    console.log('returned object is null', _typeof(obj));
  }

  return obj;
};

/* harmony default export */ __webpack_exports__["default"] = (mapObject);

/***/ }),

/***/ "./src/javascript/utils/mergeObjects.js":
/*!**********************************************!*\
  !*** ./src/javascript/utils/mergeObjects.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sizeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sizeof */ "./src/javascript/utils/sizeof.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }



var mergeObjects = function mergeObjects(obj1, obj2, arrayType) {
  var obj3 = typeof arrayType === 'undefined' || arrayType === false ? {} : [];

  for (var i in obj1) {
    obj3[i] = obj1[i];
  }

  for (var k in obj2) {
    if (_typeof(obj1[k]) !== 'object') {
      obj3[k] = obj2[k];
    } else if (obj1[k] instanceof Array) {
      obj3[k] = obj2[k]; // arrays get overwritten and not extended
    } else if (typeof obj1[k] !== 'undefined' && _typeof(obj1[k]) === 'object' && obj1[k] !== null && typeof obj1[k].nodeType === 'undefined' && Object(_sizeof__WEBPACK_IMPORTED_MODULE_0__["default"])(obj1[k]) > 0) {
      obj3[k] = mergeObjects(obj1[k], obj2[k]);
    } else if (typeof obj1[k] !== 'undefined' && _typeof(obj1[k]) === 'object') {
      obj3[k] = obj2[k];
    } else {
      console.log('fail');
    }

    if (obj3[k] === undefined) {
      delete obj3[k];
    }
  }

  return obj3;
};

/* harmony default export */ __webpack_exports__["default"] = (mergeObjects);

/***/ }),

/***/ "./src/javascript/utils/objectCount.js":
/*!*********************************************!*\
  !*** ./src/javascript/utils/objectCount.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Returns a count of object from a query result
 * @memberOf module:utils
 * @static
 * @paramobj  {Object} anything or Array object
 */
var objectCount = function objectCount(obj) {
  if (obj !== null && obj.length !== undefined && obj instanceof Array) {
    return obj.length;
  } else if (obj !== null) {
    return 1;
  } else {
    return 0;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (objectCount);

/***/ }),

/***/ "./src/javascript/utils/objectIterator.js":
/*!************************************************!*\
  !*** ./src/javascript/utils/objectIterator.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Object iterator - best usage is for a list of DOM elements
 * @memberOf module:utils
 * @static
 * @param obj
 * @param callback
 */
var objectIterator = function objectIterator(obj, callback) {
  if (typeof obj !== 'undefined' && obj !== null && typeof obj.length !== 'undefined' && obj instanceof Array) {
    var count = 0;

    for (var key in obj) {
      callback(obj[key], key, count, obj.length);
      count++;
    }
  } else if (typeof obj !== 'undefined' && obj !== null) {
    callback(obj, 0, 0, 1);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (objectIterator);

/***/ }),

/***/ "./src/javascript/utils/query.js":
/*!***************************************!*\
  !*** ./src/javascript/utils/query.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_cLabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/cLabs */ "./src/javascript/modules/cLabs.js");
/* harmony import */ var _trim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./trim */ "./src/javascript/utils/trim.js");


/**
 * Query selector, supports CSS element selection
 *
 * Supports:
 *  - Class selection: ".element"
 *  - ID selection: "#element"
 *  - Tag selection: "div"
 *  - Multi depth selection: '.element ul li'
 *
 * @memberOf module:utils
 * @static
 * @param {Object} "optional"
 * @param {String} CSS element selector
 * @returns {(Object|null|Array)} depending on the provided selector results can vary (null, node, NodeList array)
 */

var query = function query(doc, selector) {
  var result;
  var tmpDoc = doc;
  var tmpSelector = selector; // used for debug only

  if (typeof doc === 'string' && selector === undefined) {
    selector = doc;
    doc = document;
  }

  try {
    if (doc !== null) {
      selector = Object(_trim__WEBPACK_IMPORTED_MODULE_1__["default"])(selector); //

      if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].classSelector)) {
        result = doc.getElementsByClassName(selector.replace('.', ''));
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].idSelector)) {
        result = document.getElementById(selector.replace('#', ''));
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].tagSelector)) {
        result = doc.getElementsByTagName(selector);
      } else {
        result = doc.querySelectorAll(selector);
      }
    }

    if (result !== null && result !== undefined && result.nodeType) {
      return result;
    } else if (result !== null && result !== undefined && result.length === 1) {
      return result[0];
    } else if (result !== null && result !== undefined && result.length > 0) {
      return Array.prototype.slice.call(result);
    } else {
      return null;
    }
  } catch (e) {
    console.log(e);
    console.log(tmpSelector);
    console.log(tmpDoc);
    console.log(doc, selector);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (query);

/***/ }),

/***/ "./src/javascript/utils/remove.js":
/*!****************************************!*\
  !*** ./src/javascript/utils/remove.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Removes an HTML DOM element
 * @memberOf module:utils
 * @static
 * @paramobj el {Object} DOM element
 */
var remove = function remove(el) {
  if (el !== null) {
    el.parentElement.removeChild(el);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (remove);

/***/ }),

/***/ "./src/javascript/utils/removeClass.js":
/*!*********************************************!*\
  !*** ./src/javascript/utils/removeClass.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Remove class string from provided DOM element
 * @memberOf module:utils
 * @static
 * @param element
 * @param className
 * @returns {{classList}|*}
 */
var removeClass = function removeClass(element, className) {
  try {
    if (element.classList) {
      element.classList.remove(className);
    } else {
      element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }
  } catch (e) {
    console.log(element, className); // console.error(e);
    // console.trace();
  }

  return element;
};

/* harmony default export */ __webpack_exports__["default"] = (removeClass);

/***/ }),

/***/ "./src/javascript/utils/scrollEnabled.js":
/*!***********************************************!*\
  !*** ./src/javascript/utils/scrollEnabled.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Check if scrolling is enabled
 * @memberOf module:utils
 * @static
 * @param doc
 * @returns {boolean}
 */
var scrollEnabled = function scrollEnabled(doc) {
  return doc !== null ? doc.scrollHeight > doc.offsetHeight : false;
};

/* harmony default export */ __webpack_exports__["default"] = (scrollEnabled);

/***/ }),

/***/ "./src/javascript/utils/sizeof.js":
/*!****************************************!*\
  !*** ./src/javascript/utils/sizeof.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _isElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isElement */ "./src/javascript/utils/isElement.js");

/**
 * returns the size of an Object or array
 *
 * @memberOf module:utils
 * @static
 * @param obj {Object}
 * @return {Number}
 */

var sizeof = function sizeof(obj) {
  var size = 0;
  var key;

  for (key in obj) {
    if (obj.hasOwnProperty(key)) size++;
  }

  if (size === 0 && Object(_isElement__WEBPACK_IMPORTED_MODULE_0__["default"])(obj)) {
    size = 1;
  }

  return size;
};

/* harmony default export */ __webpack_exports__["default"] = (sizeof);

/***/ }),

/***/ "./src/javascript/utils/stringContains.js":
/*!************************************************!*\
  !*** ./src/javascript/utils/stringContains.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * A check if a string contains an entry of searched for term
 * @memberOf module:utils
 * @static
 * @param str {string}
 * @param partial {string}
 * @returns {boolean}
 */
var stringContains = function stringContains(str, partial) {
  return str.indexOf(partial) > -1;
};

/* harmony default export */ __webpack_exports__["default"] = (stringContains);

/***/ }),

/***/ "./src/javascript/utils/stripHtml.js":
/*!*******************************************!*\
  !*** ./src/javascript/utils/stripHtml.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Removes HTML tags from the provided input and returns only the text
 * - this is a very basic implementation and should be used carefully
 *
 * @memberOf module:utils
 * @static
 * @param html {string}
 * @returns {string | string}
 */
var stripHtml = function stripHtml(html) {
  var tmp = document.createElement('DIV');
  tmp.innerHTML = html;
  return tmp.textContent || tmp.innerText || '';
};

/* harmony default export */ __webpack_exports__["default"] = (stripHtml);

/***/ }),

/***/ "./src/javascript/utils/trim.js":
/*!**************************************!*\
  !*** ./src/javascript/utils/trim.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var trim = function trim(string) {
  return string.replace(/^\s+|\s+$/g, '');
};

/* harmony default export */ __webpack_exports__["default"] = (trim);

/***/ }),

/***/ "./src/scss/cl-style-1-dark-theme/style.scss":
/*!***************************************************!*\
  !*** ./src/scss/cl-style-1-dark-theme/style.scss ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "../css/theme/cl-style-1-dark-theme.css");

/***/ }),

/***/ 1:
/*!**********************************************************************************************************************************************************!*\
  !*** multi (webpack)-dev-server/client?http://localhost:9000 ./src/javascript/gamification-ux-package.v3.js ./src/scss/cl-style-1-dark-theme/style.scss ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /private/var/www/gamification-ux-package/node_modules/webpack-dev-server/client/index.js?http://localhost:9000 */"./node_modules/webpack-dev-server/client/index.js?http://localhost:9000");
__webpack_require__(/*! ./src/javascript/gamification-ux-package.v3.js */"./src/javascript/gamification-ux-package.v3.js");
module.exports = __webpack_require__(/*! ./src/scss/cl-style-1-dark-theme/style.scss */"./src/scss/cl-style-1-dark-theme/style.scss");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fuc2ktaHRtbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12YXJzLXBvbnlmaWxsL2Rpc3QvY3NzLXZhcnMtcG9ueWZpbGwuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9odG1sNC1lbnRpdGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvaHRtbDUtZW50aXRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9zdXJyb2dhdGUtcGFpcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL3htbC1lbnRpdGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWRlbnRpY29uLmpzL2lkZW50aWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWRlbnRpY29uLmpzL3BuZ2xpYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzaGEvZGlzdC9zaGEubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dsZXZlbC9saWIvbG9nbGV2ZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9tb21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtbGlicy1icm93c2VyL25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NranMtY2xpZW50L2Rpc3Qvc29ja2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91cmwvdXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91cmwvdXRpbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L2NsaWVudHMvQmFzZUNsaWVudC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L2NsaWVudHMvU29ja0pTQ2xpZW50LmpzIiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9jbGllbnQiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5LmpzIiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzIiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvY3JlYXRlU29ja2V0VXJsLmpzIiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvZ2V0Q3VycmVudFNjcmlwdFNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3JlbG9hZEFwcC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3NlbmRNZXNzYWdlLmpzIiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvaG90IHN5bmMgbm9ucmVjdXJzaXZlIF5cXC5cXC9sb2ckIiwid2VicGFjazovLy8od2VicGFjaykvaG90L2VtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9ob3QvbG9nLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L2dhbWlmaWNhdGlvbi11eC1wYWNrYWdlLnYzLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L21vZHVsZXMvQWpheC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC9tb2R1bGVzL0NhbnZhc0FuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC9tb2R1bGVzL0xiV2lkZ2V0LmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L21vZHVsZXMvTWFpbldpZGdldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC9tb2R1bGVzL01lc3NhZ2luZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC9tb2R1bGVzL01pbmlTY29yZUJvYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L21vZHVsZXMvTm90aWZpY2F0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC9tb2R1bGVzL2NMYWJzLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L21vZHVsZXMvZHJhZ0VsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvbW9kdWxlcy9zZXRUaW1lb3V0R2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3BvbHlmaWxscy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9hZGRDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9hcHBlbmROZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL2NhbWVsVG9LZWJhYkNhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvdXRpbHMvY2xvc2VzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9mb3JtYXROdW1iZXJMZWFkaW5nWmVyb3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvdXRpbHMvZ2V0T2Zmc2V0LmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL2hhc0NsYXNzLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL2lzRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9pc01vYmlsZVRhYmxldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9pc2lPU0RldmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9tYXBPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvdXRpbHMvbWVyZ2VPYmplY3RzLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL29iamVjdENvdW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL29iamVjdEl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL3F1ZXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9yZW1vdmVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9zY3JvbGxFbmFibGVkLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL3NpemVvZi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9zdHJpbmdDb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9zdHJpcEh0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvdXRpbHMvdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9jbC1zdHlsZS0xLWRhcmstdGhlbWUvc3R5bGUuc2NzcyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwid2luZG93IiwiX0NMTEJWM09wdCIsImF1dG9TdGFydCIsIl9jbExlYWRlckJvYXJkVjMiLCJMYldpZGdldCIsImNvbnNvbGUiLCJ3YXJuIiwiY0xhYnMiLCJBamF4IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJwcm90b3R5cGUiLCJjcmVhdGVDT1JTUmVxdWVzdCIsIm1ldGhvZCIsInVybCIsIm9iaiIsIm9wZW4iLCJYRG9tYWluUmVxdWVzdCIsImluZGV4T2YiLCJsb2NhdGlvbiIsInByb3RvY29sIiwicmVwbGFjZSIsImFib3J0IiwiX3RoaXMiLCJyZWFkeVN0YXRlIiwiZ2V0RGF0YSIsImRhdGEiLCJ0eXBlIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwic3VjY2VzcyIsImVycm9yIiwiaGVhZGVycyIsImV4dHJhQ2FsbGJhY2siLCJvbmxvYWQiLCJyZXNwb25zZVRleHQiLCJvbmVycm9yIiwic3RhdHVzIiwic2l6ZW9mIiwiaXRlbSIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsImVyciIsImxvZyIsIkdJRiIsInRpbWVySUQiLCJzdCIsImludGVybGFjZU9mZnNldHMiLCJpbnRlcmxhY2VTdGVwcyIsImludGVybGFjZWRCdWZTaXplIiwiZGVpbnRlcmxhY2VCdWYiLCJwaXhlbEJ1ZlNpemUiLCJwaXhlbEJ1ZiIsIkdJRl9GSUxFIiwiR0NFeHQiLCJDT01NRU5UIiwiQVBQRXh0IiwiVU5LTk9XTiIsIklNQUdFIiwiRU9GIiwiRVhUIiwiU3RyZWFtIiwiVWludDhDbGFtcGVkQXJyYXkiLCJwb3MiLCJsZW4iLCJnZXRTdHJpbmciLCJjb3VudCIsInMiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyZWFkU3ViQmxvY2tzIiwic2l6ZSIsInJlYWRTdWJCbG9ja3NCIiwicHVzaCIsImx6d0RlY29kZSIsIm1pblNpemUiLCJpIiwicGl4ZWxQb3MiLCJjbGVhciIsImVvZCIsImRvbmUiLCJkaWMiLCJjb2RlIiwibGFzdCIsImQiLCJjb25jYXQiLCJwYXJzZUNvbG91clRhYmxlIiwiY29sb3VycyIsInBhcnNlIiwiYml0RmllbGQiLCJnaWYiLCJ3aWR0aCIsImhlaWdodCIsImNvbG9yUmVzIiwiZ2xvYmFsQ29sb3VyQ291bnQiLCJiZ0NvbG91ckluZGV4IiwiZ2xvYmFsQ29sb3VyVGFibGUiLCJzZXRUaW1lb3V0IiwicGFyc2VCbG9jayIsInBhcnNlQXBwRXh0IiwicGFyc2VHQ0V4dCIsImRpc3Bvc2FsTWV0aG9kIiwidHJhbnNwYXJlbmN5R2l2ZW4iLCJkZWxheVRpbWUiLCJ0cmFuc3BhcmVuY3lJbmRleCIsInBhcnNlSW1nIiwiZGVpbnRlcmxhY2UiLCJmcmFtZSIsImxpbmVzIiwiZnJvbUxpbmUiLCJwYXNzIiwidG9MaW5lIiwiVWludDhBcnJheSIsInNldCIsInN1YkFycmF5IiwiZnJhbWVzIiwidGltZSIsImRlbGF5IiwibGVmdFBvcyIsInRvcFBvcyIsImxvY2FsQ29sb3VyVGFibGVGbGFnIiwibG9jYWxDb2xvdXJUYWJsZSIsImludGVybGFjZWQiLCJwcm9jZXNzRnJhbWUiLCJjdCIsImNEYXRhIiwiZGF0IiwicGl4Q291bnQiLCJpbmQiLCJ1c2VUIiwicGl4ZWwiLCJwRGF0IiwiY29sIiwidGkiLCJpbWFnZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImN0eCIsImdldENvbnRleHQiLCJsYXN0RnJhbWUiLCJkcmF3SW1hZ2UiLCJnZXRJbWFnZURhdGEiLCJwdXRJbWFnZURhdGEiLCJ3YWl0VGlsbERvbmUiLCJkb09ubG9hZEV2ZW50IiwiZmlubmlzaGVkIiwibG9hZGluZyIsImZyYW1lQ291bnQiLCJjb21wbGV0ZSIsImN1cnJlbnRGcmFtZSIsIm9ubG9hZGFsbCIsImJpbmQiLCJwYXRoIiwicGxheU9uTG9hZCIsInBsYXkiLCJmaW5pc2hlZCIsImNhbmNlbGVkIiwiY2FuY2VsQ2FsbGJhY2siLCJwYXJzZUV4dCIsImJsb2NrSUQiLCJjb21tZW50IiwiY2FuY2VsIiwiYmxvY2tJZCIsImZpcnN0RnJhbWVPbmx5Iiwib25wcm9ncmVzcyIsImJ5dGVzUmVhZCIsInRvdGFsQnl0ZXMiLCJjYW5jZWxMb2FkIiwiY2FsbGJhY2siLCJuZXh0RnJhbWVBdCIsImxhc3RGcmFtZUF0IiwiRGF0ZSIsInZhbHVlT2YiLCJkYXRhTG9hZGVkIiwibG9hZEdpZiIsImZpbGVuYW1lIiwiYWpheCIsInJlc3BvbnNlVHlwZSIsImUiLCJ0YXJnZXQiLCJyZXNwb25zZSIsInNyYyIsInBsYXlpbmciLCJwYXVzZWQiLCJwYXVzZSIsImNsZWFyVGltZW91dCIsInRvZ2dsZVBsYXkiLCJzZWVrRnJhbWUiLCJzZWVrIiwicGxheVNwZWVkIiwibG9hZCIsImluc3RhbmNlIiwiQ2FudmFzQW5pbWF0aW9uIiwib3B0aW9ucyIsInNldHRpbmdzIiwiY29udGFpbmVyIiwiY29udGFpbmVyV3JhcHBlciIsImdpZkluc3RhbmNlIiwibGJXaWRnZXQiLCJpbWFnZVNyYyIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiY2FudmFzV2lkdGhIYWxmIiwiY2FudmFzSGVpZ2h0SGFsZiIsInVwZGF0ZUFjdGl2ZSIsIm1lcmdlT2JqZWN0cyIsInVwZGF0ZSIsInRpbWVyIiwic2V0VHJhbnNmb3JtIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiY2xlYXJSZWN0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJDYW52YXMiLCJvdmVybGF5TGF5b3V0Iiwid3JhcHBlciIsImNhbnZhcyIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiaW5pdCIsImJpbmRDb250YWluZXIiLCJxdWVyeSIsInN0eWxlIiwiZGlzcGxheSIsIm9wYWNpdHkiLCJnaWZVUkwiLCJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJkZWJ1ZyIsImJvZHkiLCJzc2VNZXNzYWdpbmciLCJub3RpZmljYXRpb25zIiwibWluaVNjb3JlQm9hcmQiLCJjYW52YXNBbmltYXRpb24iLCJlbmFibGVOb3RpZmljYXRpb25zIiwibWFpbldpZGdldCIsImdsb2JhbEFqYXgiLCJjaGVja0FqYXgiLCJsYW5ndWFnZSIsImN1cnJlbmN5Iiwic3BhY2VOYW1lIiwibWVtYmVySWQiLCJncm91cHMiLCJnYW1lSWQiLCJlbmZvcmNlR2FtZUxvb2t1cCIsImFwaUtleSIsIm1lbWJlciIsImxheW91dCIsImVuYWJsZU1pbmlTY29yZUJvYXJkRHJhZ2dpbmciLCJtaW5pU2NvcmVCb2FyZFBvc2l0aW9uIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwiYWxsb3dPcmllbnRhdGlvbkNoYW5nZSIsIm1pbmlTY29yZUJvYXJkT3JpZW50YXRpb24iLCJjb21wZXRpdGlvbiIsImFjdGl2ZUNvbXBldGl0aW9uSWQiLCJhY3RpdmVDb250ZXN0SWQiLCJhY3RpdmVDb21wZXRpdGlvbiIsImFjdGl2ZUNvbnRlc3QiLCJyZWZyZXNoSW50ZXJ2YWwiLCJyZWZyZXNoSW50ZXJ2YWxNaWxsaXMiLCJhbGxvd05lZ2F0aXZlQ291bnRkb3duIiwiaW5jbHVkZU1ldGFkYXRhIiwiZXh0cmFjdEltYWdlSGVhZGVyIiwiYWNoaWV2ZW1lbnRzIiwibGltaXQiLCJ0b3RhbENvdW50IiwibGlzdCIsImF2YWlsYWJsZVJld2FyZHMiLCJyZXdhcmRzIiwiZXhwaXJlZFJld2FyZHMiLCJyZXdhcmRGb3JtYXR0ZXIiLCJyZXdhcmQiLCJkZWZhdWx0UmV3YXJkVmFsdWUiLCJ2YWx1ZSIsInVuaXRPZk1lYXN1cmUiLCJzeW1ib2wiLCJtZXNzYWdlcyIsInRvdXJuYW1lbnRzIiwicmVhZHlDb21wZXRpdGlvbnMiLCJhY3RpdmVDb21wZXRpdGlvbnMiLCJmaW5pc2hlZENvbXBldGl0aW9ucyIsImxlYWRlcmJvYXJkIiwiZnVsbExlYWRlcmJvYXJkU2l6ZSIsInJlZnJlc2hMYkRhdGFJbnRlcnZhbCIsImxlYWRlcmJvYXJkRGF0YSIsImxvYWRMZWFkZXJib2FyZEhpc3RvcnkiLCJsYXlvdXRTZXR0aW5ncyIsImltYWdlQmFubmVyIiwidGl0bGVMaW5rVG9EZXRhaWxzUGFnZSIsImVuYWJsZVJhbmtpbmdzIiwicmFua2luZ3NDb3VudCIsInBvaW50c0Zvcm1hdHRlciIsInBvaW50cyIsIm5hdmlnYXRpb24iLCJlbmFibGUiLCJuYXZpZ2F0aW9uQ2xhc3MiLCJuYXZpZ2F0aW9uQ2xhc3NJY29uIiwiY29udGFpbmVyQ2xhc3MiLCJvcmRlciIsImluYm94IiwidXJpIiwiZ2F0ZXdheURvbWFpbiIsImFwaSIsIm1lbWJlcnMiLCJhc3NldHMiLCJtZW1iZXJTU0UiLCJtZW1iZXJTU0VIZWFydGJlYXQiLCJjb21wZXRpdGlvbnMiLCJjb21wZXRpdGlvbkJ5SWQiLCJjb250ZXN0TGVhZGVyYm9hcmQiLCJhY2hpZXZlbWVudCIsImFjaGlldmVtZW50c1Byb2dyZXNzaW9uIiwiYWNoaWV2ZW1lbnRzSXNzdWVkIiwibWVzc2FnZUJ5SWQiLCJtZW1iZXJSZXdhcmQiLCJtZW1iZXJSZXdhcmRDbGFpbSIsIm1lbWJlckNvbXBldGl0aW9ucyIsIm1lbWJlckNvbXBldGl0aW9uQnlJZCIsIm1lbWJlckNvbXBldGl0aW9uT3B0SW4iLCJtZW1iZXJDb21wZXRpdGlvbk9wdEluQ2hlY2siLCJ0cmFuc2xhdGlvblBhdGgiLCJsb2FkVHJhbnNsYXRpb25zIiwic2hvd0NvcHlyaWdodCIsInJlc291cmNlcyIsInN0eWxlcyIsInBhcnRpYWxGdW5jdGlvbnMiLCJzdGFydHVwQ2FsbGJhY2siLCJjb21wZXRpdGlvbkRhdGFBdmFpbGFibGVSZXNwb25zZVBhcnNlciIsImNvbXBldGl0aW9uRGF0YSIsImNvbXBldGl0aW9uRGF0YUZpbmlzaGVkUmVzcG9uc2VQYXJzZXIiLCJhY3RpdmVDb21wZXRpdGlvbkRhdGFSZXNwb25zZVBhcnNlciIsImFjdGl2ZUNvbnRlc3REYXRhUmVzcG9uc2VQYXJzZXIiLCJjb250ZXN0RGF0YSIsImxlYWRlcmJvYXJkRGF0YVJlc3BvbnNlUGFyc2VyIiwiYWNoaWV2ZW1lbnREYXRhRm9yQWxsUmVzcG9uc2VQYXJzZXIiLCJhY2hpZXZlbWVudERhdGEiLCJhY2hpZXZlbWVudERhdGFGb3JNZW1iZXJHcm91cFJlc3BvbnNlUGFyc2VyIiwiYWNoaWV2ZW1lbnREYXRhUmVzcG9uc2VQYXJzZXIiLCJyZXdhcmREYXRhUmVzcG9uc2VQYXJzZXIiLCJyZXdhcmREYXRhIiwibWVzc2FnZURhdGFSZXNwb25zZVBhcnNlciIsIm1lc3NhZ2VEYXRhIiwiY2xhaW1SZXdhcmREYXRhUmVzcG9uc2VQYXJzZXIiLCJjbGFpbVJld2FyZERhdGEiLCJpc3N1ZWRBY2hpZXZlbWVudHNEYXRhUmVzcG9uc2VQYXJzZXIiLCJpc3N1ZWRBY2hpZXZlbWVudHNEYXRhIiwibWVtYmVyQWNoaWV2ZW1lbnRzUHJvZ3Jlc3Npb25EYXRhUmVzcG9uc2VQYXJzZXIiLCJtZW1iZXJBY2hpZXZlbWVudHNQcm9ncmVzc2lvbkRhdGEiLCJjbGFpbWVkUmV3YXJkc0RhdGFSZXNwb25zZVBhcnNlciIsImNsYWltZWRSZXdhcmRzRGF0YSIsIm5vdENsYWltZWRSZXdhcmRzRGF0YVJlc3BvbnNlUGFyc2VyIiwibm90Q2xhaW1lZFJld2FyZHNEYXRhIiwiZXhwaXJlZFJld2FyZHNEYXRhUmVzcG9uc2VQYXJzZXIiLCJleHBpcmVkUmV3YXJkc0RhdGEiLCJhdmFpbGFibGVNZXNzYWdlc0RhdGFSZXNwb25zZVBhcnNlciIsImF2YWlsYWJsZU1lc3NhZ2VzRGF0YSIsIk5vdGlmaWNhdGlvbnMiLCJNaW5pU2NvcmVCb2FyZCIsIk1haW5XaWRnZXQiLCJtZXNzYWdlIiwiZm9ybWF0RGF0ZVRpbWUiLCJkdXJhdGlvbiIsImxhcmdlUmVzdWx0IiwicmVzdWx0IiwiZGF5cyIsImhvdXJzIiwiZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zIiwibWludXRlcyIsIm1pbnV0ZXNTaG9ydEhhbmQiLCJzZWNvbmRzIiwiam9pbiIsInBvcHVsYXRlSWRlbnRpY29uQmFzZTY0SW1hZ2UiLCJzdHIiLCJzaGFPYmoiLCJqc1NIQSIsImhhc2giLCJnZXRIYXNoIiwiSWRlbnRpY29uIiwiYmFja2dyb3VuZCIsIm1hcmdpbiIsImZvcm1hdCIsInRvU3RyaW5nIiwiaWNvbiIsImNvbXBldGl0aW9uQ2hlY2tBamF4IiwiY2hlY2tGb3JBdmFpbGFibGVDb21wZXRpdGlvbnMiLCJhamF4SW5zdGFuY2UiLCJmaWx0ZXJzIiwiYWpheEluc3RhbmNlVG9Vc2UiLCJkYXRhT2JqIiwianNvbiIsImNvbXBEYXRhIiwibWFwT2JqZWN0IiwiY29tcCIsInN0YXR1c0NvZGUiLCJjaGVja0ZvckZpbmlzaGVkQ29tcGV0aXRpb25zIiwiY29tcGV0aXRpb25GaW5pc2hlZENoZWNrQWpheCIsInByZXBhcmVBY3RpdmVDb21wZXRpdGlvbiIsImlkIiwiZGVhY3RpdmF0ZUNvbXBldGl0aW9uc0FuZExlYWRlcmJvYXJkcyIsImxvYWRBY3RpdmVDb21wZXRpdGlvbiIsInNldEFjdGl2ZUNvbXBldGl0aW9uIiwiY29udGVzdHMiLCJjb250ZXN0IiwicmV3YXJkUmFuayIsInJhbmtQYXJ0cyIsInNwbGl0IiwicGFydCIsInN0cmluZ0NvbnRhaW5zIiwicmFua1JhbmdlIiwicmFnZVN0YXJ0IiwicGFyc2VJbnQiLCJyYW5nZUVuZCIsImdldExlYWRlcmJvYXJkRGF0YSIsImxiRGF0YSIsInVwZGF0ZUxlYWRlcmJvYXJkTmF2aWdhdGlvbkNvdW50cyIsIm1lbnVJdGVtQ291bnQiLCJpbm5lckhUTUwiLCJ1cGRhdGVBY2hpZXZlbWVudE5hdmlnYXRpb25Db3VudHMiLCJ1cGRhdGVSZXdhcmRzTmF2aWdhdGlvbkNvdW50cyIsInVwZGF0ZU1lc3NhZ2VzTmF2aWdhdGlvbkNvdW50cyIsImNoZWNrQWNoaWV2ZW1lbnRzQWpheCIsImNoZWNrRm9yQXZhaWxhYmxlQWNoaWV2ZW1lbnRzIiwid2l0aEdyb3VwcyIsImpzb25EYXRhIiwianNvbkZvckFsbCIsIm1ldGEiLCJ0b3RhbFJlY29yZHNGb3VuZCIsImFjaCIsImFjaGlldm1lbnRNZW1iZXJHcm91cERhdGEiLCJmb3VuZCIsImFjaENoZWNrIiwiZ2V0QWNoaWV2ZW1lbnRzQWpheCIsImdldEFjaGlldmVtZW50IiwiYWNoaWV2ZW1lbnRJZCIsImdldFJld2FyZEFqYXgiLCJnZXRSZXdhcmQiLCJyZXdhcmRJZCIsImdldE1lc3NhZ2VBamF4IiwiZ2V0TWVzc2FnZSIsIm1lc3NhZ2VJZCIsImNsYWltUmV3YXJkQWpheCIsImNsYWltUmV3YXJkIiwiY2hlY2tGb3JNZW1iZXJBY2hpZXZlbWVudHNBamF4IiwiY2hlY2tGb3JNZW1iZXJBY2hpZXZlbWVudHNJc3N1ZWQiLCJpZExpc3QiLCJhZ2dyZWdhdGlvbnMiLCJpdGVtcyIsImNoZWNrRm9yTWVtYmVyQWNoaWV2ZW1lbnRzUHJvZ3Jlc3Npb25BamF4IiwiY2hlY2tGb3JNZW1iZXJBY2hpZXZlbWVudHNQcm9ncmVzc2lvbiIsImNoZWNrRm9yQXZhaWxhYmxlUmV3YXJkc0FqYXgiLCJjaGVja0ZvckF2YWlsYWJsZVJld2FyZHMiLCJqc29uQ2xhaW1lZFByaXplcyIsImV4cGlyZWQiLCJleHBpcnkiLCJtb21lbnQiLCJkaWZmIiwianNvbk5vdENsYWltZWQiLCJkYXRlIiwidXRjRGF0ZSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwianNvbkV4cGlyZWRSZXdhcmRzIiwiY2hlY2tGb3JBdmFpbGFibGVNZXNzYWdlc0FqYXgiLCJjaGVja0ZvckF2YWlsYWJsZU1lc3NhZ2VzIiwic2V0RGF0ZSIsImdldE1vbnRoIiwiY3JlYXRlZERhdGVGaWx0ZXIiLCJnZXRGdWxsWWVhciIsImdldERhdGUiLCJqc29uQXZhaWxhYmxlTWVzc2FnZXMiLCJvcHRJbk1lbWJlckFqYXgiLCJvcHRJbk1lbWJlclRvQWN0aXZlQ29tcGV0aXRpb24iLCJyZXZhbGlkYXRpb25Db3VudCIsInJldmFsaWRhdGVJZlN1Y2Nlc3NmdWxsT3B0SW4iLCJjb21wZXRpdGlvbkpzb24iLCJvcHRpbiIsImxlYWRlcmJvYXJkRGF0YVJlZnJlc2giLCJvcHRpblJlcXVpcmVkIiwiYWN0aXZlIiwibG9hZFNjb3JlQm9hcmQiLCJsb2FkTGVhZGVyYm9hcmQiLCJhY3RpdmVEYXRhUmVmcmVzaCIsImNsZWFyQWxsIiwic3RvcEFjdGl2aXR5IiwiY2xlYXJJbnRlcnZhbCIsInVwZGF0ZUludGVydmFsIiwicmVzdGFydEFjdGl2aXR5IiwidXBkYXRlU2NvcmVCb2FyZCIsImxvYWRNZW1iZXIiLCJsb2FkV2lkZ2V0VHJhbnNsYXRpb25zIiwic3RhcnR1cCIsImluaXRMYXlvdXQiLCJjbGVhbnVwIiwiX2NsZWFudXBJbnN0YW5jZSIsInByZUxvYWRlclJlcnVuIiwibG9hZFN0eWxlc2hlZXQiLCJjcmVhdGVkUmVzb3VyY2VzIiwiYXZhaWxhYmxlTGlua3MiLCJvYmplY3RJdGVyYXRvciIsImxpbmsiLCJVUkwiLCJocmVmIiwiYmFzZVVSSSIsInJlc291cmNlIiwia2V5IiwiZXhpc3RzIiwiY2xpY2tlZE1pbmlTY29yZUJvYXJkIiwiZHJhZ2dpbmciLCJvcGVuV2l0aFRhYkFuZEFjdGlvbiIsInRhYiIsImFjdGlvbkNhbGxiYWNrIiwibG9hZFRhYiIsIm5hdmlnYXRpb25Td2l0Y2giLCJvblVJQ2hhbmdlIiwiZWwiLCJjdXJyZW50V2lkZ2V0U3RhdHVzIiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJkaXNwYXRjaEV2ZW50IiwibG9hZENvbXBldGl0aW9uTGlzdEFqYXgiLCJldmVudEhhbmRsZXJzIiwiaGFzQ2xhc3MiLCJhZGRDbGFzcyIsImxvYWRDb21wZXRpdGlvbkRldGFpbHMiLCJyZW1vdmVDbGFzcyIsImNvbXBldGl0aW9uRGV0YWlsc09wdEluQnV0dG9uU3RhdGUiLCJwYXJlbnROb2RlIiwiaGlkZU5vdGlmaWNhdGlvbiIsImhpZGUiLCJjbG9zZXN0Iiwic2hvd0VtYmVkZGVkQ29tcGV0aXRpb25EZXRhaWxzQ29udGVudCIsImhpZGVFbWJlZGRlZENvbXBldGl0aW9uRGV0YWlsc0NvbnRlbnQiLCJkYXRhc2V0IiwibG9hZEFjaGlldmVtZW50RGV0YWlscyIsImhpZGVDb21wZXRpdGlvbkRldGFpbHMiLCJoaWRlQWNoaWV2ZW1lbnREZXRhaWxzIiwiaGlkZVJld2FyZERldGFpbHMiLCJoaWRlTWVzc2FnZURldGFpbHMiLCJsb2FkUmV3YXJkRGV0YWlscyIsImxvYWRNZXNzYWdlRGV0YWlscyIsImNsYWltZWQiLCJsb2FkUmV3YXJkcyIsImNsYWltIiwibG9hZENvbXBldGl0aW9uTGlzdCIsInRvdXJuYW1lbnRJZCIsInByZUxvYWRlciIsInByZWxvYWRlciIsInNob3ciLCJoaWRlQ29tcGV0aXRpb25MaXN0IiwiYWNjb3JkaW9uTmF2aWdhdGlvbiIsImV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwia2V5Q29kZSIsImlzTW9iaWxlIiwiY2xvc2VFdmVyeXRoaW5nIiwicHJlTG9hZGVyQWN0aXZlIiwicmVzdGFydFJlbG9hZEludGVydmFsIiwicmVzdGFydCIsImRlc3Ryb3lMYXlvdXQiLCJpc01vYmlsZVRhYmxldCIsImFwcGx5QXBwZWFyYW5jZSIsIk9iamVjdCIsImtleXMiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsImN1cnJlbnRWYWx1ZSIsImNhbWVsVG9LZWJhYkNhc2UiLCJjc3NWYXJzIiwiaW5jbHVkZSIsIndhdGNoIiwib25seUxlZ2FjeSIsInZhcmlhYmxlcyIsImNhbnZhc0luc3RhbmNlIiwib3ZlcmxheUNvbnRhaW5lciIsInNlY3Rpb24iLCJkZXRhaWxzQ29udGFpbmVyIiwidG91cm5hbWVudExpc3RDb250YWluZXIiLCJoZWFkZXJEYXRlIiwibGFiZWxEYXRlIiwicHJlTG9hZGVybGFzdEF0dGVtcHQiLCJwcmVsb2FkZXJDYWxsYmFja1JlY292ZXJ5IiwiZGVmYXVsdEVtcHR5TGlzdCIsInRvcFJlc3VsdFNpemUiLCJoZWFkZXIiLCJyZXN1bHRDb250YWluZXIiLCJ0b3BSZXN1bHRzIiwidGltZXJJbnRlcnZhbCIsInRvdXJuYW1lbnRzU2VjdGlvbiIsImFjY29yZGlvbkxheW91dCIsImxhYmVsIiwic2hvd1RvcFJlc3VsdHMiLCJyZXdhcmRzU2VjdGlvbiIsIm5hdmlnYXRpb25Td2l0Y2hMYXN0QXRlbXB0IiwiZ2V0VGltZSIsIm5hdmlnYXRpb25Td2l0Y2hJblByb2dyZXNzIiwib3B0IiwiaGFzT3duUHJvcGVydHkiLCJhY2NvcmRpb25TdHlsZSIsIm9uTGF5b3V0IiwiYWNjb3JkaW9uV3JhcHBlciIsImVudHJ5IiwiYWNjb3JkaW9uU2VjdGlvbiIsImFjY29yZGlvbkxhYmVsIiwidG9wU2hvd25FbnRyeSIsImFjY29yZGlvbkxpc3RDb250YWluZXIiLCJhY2NvcmRpb25MaXN0IiwiZWxlbWVudCIsInBhcmVudEVsIiwibmF2aWdhdGlvblNvcnRlciIsImEiLCJiIiwibmF2aWdhdGlvbkl0ZW1zIiwibmF2aWdhdGlvbkxpc3QiLCJzb3J0IiwidmFsIiwibmF2aWdhdGlvbkl0ZW0iLCJuYXZpZ2F0aW9uSXRlbUljb24iLCJuYXZpZ2F0aW9uSXRlbUNvdW50IiwiaW5uZXJXcmFwcGVyIiwibmF2aWdhdGlvbkNvbnRhaW5lciIsIm1haW5TZWN0aW9uQ29udGFpbmVyIiwicHJlTG9hZGVyQ29udGFpbmVyIiwicHJlTG9hZGVyQ29udGVudCIsInByZUxvYWRlckJhcjEiLCJwcmVMb2FkZXJCYXIyIiwicHJlTG9hZGVyQmFyMyIsInNlY3Rpb25MQiIsImxlYWRlcmJvYXJkQXJlYUxheW91dCIsInNlY3Rpb25BQ0giLCJhY2hpZXZlbWVudHNBcmVhTGF5b3V0Iiwic2VjdGlvblJld2FyZHMiLCJyZXdhcmRzQXJlYUxheW91dCIsInNlY3Rpb25JbmJveCIsImluYm94QXJlYUxheW91dCIsIm5hdmlnYXRpb25JdGVtTGlzdCIsIm1haW5OYXZpZ2F0aW9uQ2hlY2siLCJuYXZJdGVtcyIsImNoZWNrRW5hYmxlZCIsIm5hdkl0ZW0iLCJzZWN0aW9uTEJIZWFkZXIiLCJzZWN0aW9uTEJIZWFkZXJMaXN0Iiwic2VjdGlvbkxCSGVhZGVyTGlzdEljb24iLCJzZWN0aW9uTEJIZWFkZXJMYWJlbCIsInNlY3Rpb25MQkhlYWRlckRhdGUiLCJzZWN0aW9uTEJIZWFkZXJDbG9zZSIsInNlY3Rpb25MQkRldGFpbHMiLCJzZWN0aW9uTEJEZXRhaWxzSW5mbyIsInNlY3Rpb25MQkRldGFpbHNJbmZvSWNvbiIsInNlY3Rpb25MQkRldGFpbHNJbWFnZUNvbnRhaW5lciIsInNlY3Rpb25MQkRldGFpbHNDb250ZW50Q29udGFpbmVyIiwic2VjdGlvbkxCRGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbCIsInNlY3Rpb25MQkRldGFpbHNDb250ZW50Q29udGFpbmVyTGFiZWxUZXh0Iiwic2VjdGlvbkxCRGV0YWlsc0NvbnRlbnRDb250YWluZXJEYXRlIiwic2VjdGlvbkxCRGV0YWlsc0Rlc2NyaXB0aW9uQ29udGFpbmVyIiwic2VjdGlvbkxCRGV0YWlsc0Rlc2NyaXB0aW9uIiwic2VjdGlvbkxCRGV0YWlsc0Rlc2NyaXB0aW9uQ2xvc2UiLCJzZWN0aW9uTEJMZWFkZXJib2FyZCIsInNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyIiwic2VjdGlvbkxCTGVhZGVyYm9hcmRIZWFkZXJMYWJlbHMiLCJzZWN0aW9uTEJMZWFkZXJib2FyZFJlc3VsdHNDb250YWluZXIiLCJzZWN0aW9uTEJMZWFkZXJib2FyZEhlYWRlclRvcFJlc3VsdHMiLCJzZWN0aW9uTEJMZWFkZXJib2FyZEJvZHkiLCJzZWN0aW9uTEJMZWFkZXJib2FyZEJvZHlSZXN1bHRzIiwic2VjdGlvbkxCTWlzc2luZ01lbWJlciIsInNlY3Rpb25MQk9wdEluQ29udGFpbmVyIiwic2VjdGlvbkxCT3B0SW5BY3Rpb24iLCJzZWN0aW9uTEJGb290ZXIiLCJzZWN0aW9uTEJGb290ZXJDb250ZW50Iiwic2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQ29udGFpbmVyIiwic2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyIiwic2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyTGFiZWwiLCJzZWN0aW9uVG91cm5hbWVudERldGFpbHNIZWFkZXJEYXRlIiwic2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQmFja0J0biIsInNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0JvZHlDb250YWluZXIiLCJzZWN0aW9uVG91cm5hbWVudERldGFpbHNCb2R5SW1hZ2VDb250YWluZXIiLCJzZWN0aW9uVG91cm5hbWVudERldGFpbHNCb2R5Iiwic2VjdGlvblRvdXJuYW1lbnREZXRhaWxzT3B0SW5Db250YWluZXIiLCJzZWN0aW9uVG91cm5hbWVudERldGFpbHNPcHRJbkFjdGlvbiIsInNlY3Rpb25Ub3VybmFtZW50TGlzdCIsInNlY3Rpb25Ub3VybmFtZW50TGlzdEJvZHkiLCJzZWN0aW9uVG91cm5hbWVudExpc3RCb2R5UmVzdWx0cyIsInNlY3Rpb25Ub3VybmFtZW50QmFja0FjdGlvbiIsImdsb2JhbCIsImNvcHkiLCJlbnRlciIsInNlY3Rpb25BQ0hIZWFkZXIiLCJzZWN0aW9uQUNISGVhZGVyTGFiZWwiLCJzZWN0aW9uQUNISGVhZGVyRGF0ZSIsInNlY3Rpb25BQ0hIZWFkZXJDbG9zZSIsInNlY3Rpb25BQ0hEZXRhaWxzIiwic2VjdGlvbkFDSERldGFpbHNJbmZvIiwic2VjdGlvbkFDSERldGFpbHNJbmZvSWNvbiIsInNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lciIsInNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsIiwic2VjdGlvbkFDSERldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZSIsInNlY3Rpb25BQ0hMaXN0Iiwic2VjdGlvbkFDSExpc3RCb2R5Iiwic2VjdGlvbkFDSExpc3RCb2R5UmVzdWx0cyIsInNlY3Rpb25BQ0hGb290ZXIiLCJzZWN0aW9uQUNIRm9vdGVyQ29udGVudCIsInNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNDb250YWluZXIiLCJzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzSGVhZGVyIiwic2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0hlYWRlckxhYmVsIiwic2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0hlYWRlckRhdGUiLCJzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQmFja0J0biIsInNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5Q29udGFpbmVyIiwic2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0JvZHlJbWFnZUNvbnRhaW5lciIsInNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5Iiwic2VjdGlvblJld2FyZHNIZWFkZXIiLCJzZWN0aW9uUmV3YXJkc0hlYWRlckxhYmVsIiwic2VjdGlvblJld2FyZHNIZWFkZXJEYXRlIiwic2VjdGlvblJld2FyZHNIZWFkZXJDbG9zZSIsInNlY3Rpb25SZXdhcmRzRGV0YWlscyIsInNlY3Rpb25SZXdhcmRzRGV0YWlsc0luZm8iLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNJbmZvSWNvbiIsInNlY3Rpb25SZXdhcmRzRGV0YWlsc0NvbnRlbnRDb250YWluZXIiLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyTGFiZWwiLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZSIsInNlY3Rpb25SZXdhcmRzTGlzdCIsInNlY3Rpb25SZXdhcmRzTGlzdEJvZHkiLCJzZWN0aW9uUmV3YXJkc0xpc3RCb2R5UmVzdWx0cyIsInNlY3Rpb25SZXdhcmRzRm9vdGVyIiwic2VjdGlvblJld2FyZHNGb290ZXJDb250ZW50Iiwic2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGFpbmVyIiwic2VjdGlvblJld2FyZHNEZXRhaWxzSGVhZGVyIiwic2VjdGlvblJld2FyZHNEZXRhaWxzSGVhZGVyTGFiZWwiLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNIZWFkZXJEYXRlIiwic2VjdGlvblJld2FyZHNEZXRhaWxzQmFja0J0biIsInNlY3Rpb25SZXdhcmRzRGV0YWlsc0JvZHlDb250YWluZXIiLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNCb2R5SW1hZ2VDb250YWluZXIiLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNCb2R5Iiwic2VjdGlvblJld2FyZHNXaW5uaW5nc0NvbnRhaW5lciIsInNlY3Rpb25SZXdhcmRzV2lubmluZ3NJY29uIiwic2VjdGlvblJld2FyZHNXaW5uaW5nc1ZhbHVlIiwic2VjdGlvblJld2FyZHNDbGFpbUNvbnRhaW5lciIsInNlY3Rpb25SZXdhcmRzQ2xhaW1CdG4iLCJzZWN0aW9uSW5ib3hIZWFkZXIiLCJzZWN0aW9uSW5ib3hIZWFkZXJMYWJlbCIsInNlY3Rpb25JbmJveEhlYWRlckRhdGUiLCJzZWN0aW9uSW5ib3hIZWFkZXJDbG9zZSIsInNlY3Rpb25JbmJveERldGFpbHMiLCJzZWN0aW9uSW5ib3hEZXRhaWxzSW5mbyIsInNlY3Rpb25JbmJveERldGFpbHNJbmZvSWNvbiIsInNlY3Rpb25JbmJveERldGFpbHNDb250ZW50Q29udGFpbmVyIiwic2VjdGlvbkluYm94RGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbCIsInNlY3Rpb25JbmJveERldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZSIsInNlY3Rpb25JbmJveExpc3QiLCJzZWN0aW9uSW5ib3hMaXN0Qm9keSIsInNlY3Rpb25JbmJveExpc3RCb2R5UmVzdWx0cyIsInNlY3Rpb25JbmJveEZvb3RlciIsInNlY3Rpb25JbmJveEZvb3RlckNvbnRlbnQiLCJzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGFpbmVyIiwic2VjdGlvbkluYm94RGV0YWlsc0hlYWRlciIsInNlY3Rpb25JbmJveERldGFpbHNIZWFkZXJMYWJlbCIsInNlY3Rpb25JbmJveERldGFpbHNIZWFkZXJEYXRlIiwic2VjdGlvbkluYm94RGV0YWlsc0JhY2tCdG4iLCJzZWN0aW9uSW5ib3hEZXRhaWxzQm9keUNvbnRhaW5lciIsInNlY3Rpb25JbmJveERldGFpbHNCb2R5IiwibGVhZGVyYm9hcmRIZWFkZXIiLCJyYW5rQ29sIiwiaWNvbkNvbCIsIm5hbWVDb2wiLCJncm93dGhDb2wiLCJwb2ludHNDb2wiLCJyYW5rIiwibmFtZSIsInJld2FyZENvbCIsInJld2FyZEVuYWJsZWQiLCJwcml6ZSIsImxlYWRlcmJvYXJkUm93IiwiY2hhbmdlIiwiZ3Jvd3RoIiwibWVtYmVyRm91bmQiLCJjZWxsV3JhcHBlciIsInJhbmtDZWwiLCJyYW5rQ2VsVmFsdWUiLCJpY29uQ2VsIiwiaWNvbkNlbEltZyIsIkltYWdlIiwibmFtZUNlbCIsImdyb3d0aENlbCIsInBvaW50c0NlbCIsIm1lbWJlckZvdW5kQ2xhc3MiLCJhbHQiLCJyZXdhcmRDZWwiLCJsZWFkZXJib2FyZFJvd1VwZGF0ZSIsIm9uTWlzc2luZyIsImNlbGxSb3ciLCJyb3dIYXNDbGFzcyIsInBvcHVsYXRlTGVhZGVyYm9hcmRSZXN1bHRzV2l0aERlZmF1bHRFbnRyaWVzIiwicmVtYWluaW5nUmVzdWx0cyIsIm1lbWJlclJlZklkIiwidXBkYXRlTGVhZGVyYm9hcmRUb3BSZXN1bHRzIiwidXBkYXRlTGVhZGVyYm9hcmRSZXN1bHRzIiwicmFua0NoZWNrIiwiY2xlYW51cFJhbmtDaGVjayIsImxiIiwicmVtb3ZlIiwibWVtYmVyTmFtZSIsInlvdSIsImdyb3d0aFR5cGUiLCJncm93dGhJY29uIiwiZm9ybWF0dGVkUG9pbnRzIiwicmMiLCJuZXdSb3ciLCJwcmV2Q2VsbFJvdyIsImFwcGVuZE5leHQiLCJyZXdhcmRSZXNwb25zZSIsIkFycmF5IiwidXBkYXRlTGVhZGVyYm9hcmQiLCJtaXNzaW5nTWVtYmVyIiwiaXNFbGVtZW50VmlzaWJsZUluVmlldyIsIm1pc3NpbmdNZW1iZXJSZXNldCIsInVwZGF0ZUxlYWRlcmJvYXJkVGltZSIsInNjaGVkdWxlZFN0YXJ0IiwibWluaUxlYWRlcmJvYXJkIiwic3RhcnRzSW4iLCJzdGFydGluZyIsInNjaGVkdWxlZEVuZCIsImZpbmlzaGluZyIsImRldGFpbHNDb250YWluZXJEYXRlIiwiZ2V0QWN0aXZlQ29tcGV0aXRpb25EZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwiZXh0cmFjdEltYWdlIiwiaW1hZ2VDb250YWluZXIiLCJpc0JvZHlWaXJ0dWFsT3B0IiwiYWN0aXZlSW1hZ2VDb250YWluZXIiLCJpbWFnZUZvdW5kIiwiaXNCb2R5VmlydHVhbCIsImltZyIsIm5ld0ltZyIsImNsb25lTm9kZSIsImxlYWRlcmJvYXJkRGV0YWlsc1VwZGF0ZSIsIm1haW5MYWJlbCIsIm5vQXZhaWxhYmxlQ29tcGV0aXRpb25zIiwibGVhZGVyYm9hcmRPcHRJbkNoZWNrIiwib3B0SW4iLCJpc1Zpc2libGUiLCJhcmVhIiwicG9zaXRpb24iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbGVtQ29udGFpbmVyIiwiZWxlbVRvcCIsImVsZW1Cb3R0b20iLCJlbGVtSGVpZ2h0Iiwib25yZXNpemVJbml0aWFsaXNlZCIsIm9uc2Nyb2xsIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJvbnJlc2l6ZSIsInJlZ2lzdGVyZWQiLCJsaXN0UmVzQ29udGFpbmVyIiwibGlzdEljb24iLCJhY2NvcmRpb25PYmoiLCJsaXN0Q29udGFpbmVyIiwidG9wRW50cnlDb250YWluZXIiLCJ0b3VybmFtZW50RGF0YSIsInRvdXJuYW1lbnQiLCJ0b3BFbnRyeUNvbnRhaW5lUmxpc3RJdGVtIiwidG91cm5hbWVudEl0ZW0iLCJsaXN0SXRlbSIsImFjaGlldmVtZW50SXRlbSIsImFjaGlldmVkIiwicGVyYyIsImRldGFpbHNXcmFwcGVyIiwiY2F0ZWdvcnkiLCJwcm9ncmVzc2lvbldyYXBwZXIiLCJwcm9ncmVzc2lvbkNvbnQiLCJwcm9ncmVzc2lvbkJhciIsIm1vcmVCdXR0b24iLCJjcG9tbnRhaW5zSW1hZ2UiLCJtb3JlIiwiaW1hZ2VJY29uV3JhcHBlciIsImFjaGlldmVtZW50TGlzdExheW91dCIsImFjaExpc3QiLCJpbWFnZUxvb2t1cCIsImNsYWltQnRuIiwicmV3YXJkTmFtZSIsIl9pbWFnZSIsInN1YmplY3QiLCJ1cGRhdGVBY2hpZXZlbWVudFByb2dyZXNzaW9uQW5kSXNzdWVkIiwiaXNzdWVkIiwicHJvZ3Jlc3Npb24iLCJpc3N1ZWRTdGF0dXMiLCJwciIsInBhcnNlRmxvYXQiLCJnb2FsUGVyY2VudGFnZUNvbXBsZXRlIiwidG9GaXhlZCIsImJhciIsInBlcmNWYWx1ZSIsIm9mZnNldFdpZHRoIiwibG9hZEFjaGlldmVtZW50cyIsInJld2FyZEl0ZW0iLCJyZXciLCJsYWJlbFRleHQiLCJzdHJpcEh0bWwiLCJkZXNjcmlwdGlvblRleHQiLCJzdWJzdHIiLCJtZXNzYWdlSXRlbSIsImNvbnRlbnQiLCJkZXNjcmlwdGlvbkNvbnRlbnQiLCJyZXdhcmRzTGlzdExheW91dCIsInJld2FyZExpc3QiLCJtZXNzYWdlc0xpc3RMYXlvdXQiLCJtZXNzYWdlTGlzdCIsImluYm94SXRlbSIsImxvYWRNZXNzYWdlcyIsImNoYW5nZUludGVydmFsIiwiY2hhbmdlQ29udGFpbmVySW50ZXJ2YWwiLCJsYkNvbnRhaW5lciIsImFjaENvbnRhaW5lciIsInJld2FyZHNDb250YWluZXIiLCJpbmJveENvbnRhaW5lciIsInJlc2V0TmF2aWdhdGlvbiIsImFjdGl2ZU5hdmUiLCJNZXNzYWdpbmciLCJzb3VyY2UiLCJlcnJvckNhbGxiYWNrIiwic3NlVXJsIiwiaGVhcnRiZWF0IiwibGFzdEhlYXJ0YmVhdCIsIm1haW5BamF4IiwiaGVhcnRCZWF0QWpheCIsImhlYXJ0V2FpdFRpbWUiLCJtZXNzYWdlUXVldWUiLCJtZXNzYWdlSW50ZXJ2YWwiLCJzdGFydHVwQ2hlY2siLCJvblN0YXJ0dXBFcnJvciIsImludGVydmFsSW5zdGFuY2UiLCJoZWFydGJlYXRJbnRlcnZhbEluc3RhbmNlIiwibG9va3VwRGF0YSIsImluZGV4Iiwic3BsaWNlIiwic2V0SW50ZXJ2YWwiLCJjdXJyZW50VGltZSIsImNsb3NlQ2hhbmVsIiwiaGVhckJlYXRDaGVjayIsImRhdGFPYmplY3QiLCJvcGVuQ2hhbmVsIiwiRXZlbnRTb3VyY2UiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZXJ2ZXJTaWRlRXZlbnRMaXN0ZW5lcnMiLCJDTE9TRUQiLCJjbG9zZSIsInNzZUZhaWxlZCIsIndpbmRvd0FjdGl2aXR5IiwiaGlkZGVuIiwib25jaGFuZ2UiLCJvbmZvY3VzaW4iLCJvbmZvY3Vzb3V0Iiwib25wYWdlc2hvdyIsIm9ucGFnZWhpZGUiLCJvbmZvY3VzIiwib25ibHVyIiwidiIsImgiLCJldnRNYXAiLCJmb2N1cyIsImZvY3VzaW4iLCJwYWdlc2hvdyIsImJsdXIiLCJmb2N1c291dCIsInBhZ2VoaWRlIiwiaW5mb0NvbnRhaW5lciIsInVwZGF0ZUludGVydmFsVGltZSIsImVuYWJsZURyYWdnaW5nIiwidmVydGljYWxDbGFzcyIsImljb25XcmFwcGVyIiwiaW5mb3JtYXRpb25XcmFwcGVyIiwiaW5mb3JtYXRpb25Ub3BXcmFwcGVyIiwiaW5mb3JtYXRpb25XcmFwcGVyQ2xvc2UiLCJpbmZvcm1hdGlvbkNsb3NlIiwiaW5pdGlhbExheW91dFBvc2l0aW9uIiwicG9zaXRpb25LZXkiLCJ0aW1lTWFuYWdlbWVudCIsImRhdGVPYmoiLCJpbnZlcnNlIiwic3RhcnREYXRlIiwiYWN0dWFsU3RhcnQiLCJsYXlvdXREZWZhdWx0T3JFbXB0eUVudHJ5IiwibGJSZXN1bHRzTWVtRW50cnkiLCJsYlJlc3VsdHNNZW1MYWJlbCIsImxiUmVzdWx0c01lbVJhbmsiLCJsYlJlc3VsdHNNZW1JY29uIiwibGJSZXN1bHRzTWVtSW1nIiwibGJSZXN1bHRzTWVtUG9pbnRzIiwibGF5b3V0Rmlyc3RUb09yRW1wdHlFbnRyeSIsImxheW91dERlZmF1bHRPckVtcHR5Iiwid3JhcHBlckRvbU9iaiIsImRlZmF1bHREb21PYmoiLCJyZW1vdmVVbnVzZWRFbGVtZW50cyIsImxiV3JhcHBlciIsImxiRGF0ZVdyYXBwZXIiLCJsYkRhdGVMYWJlbCIsImxiRGF0ZSIsImxiUmVzdWx0c1dyYXBwZXIiLCJsYlJlc3VsdHNMaXN0IiwibGJIZWFkZXJzIiwibGJIZWFkZXJzUmFuayIsImxiSGVhZGVyc1BvaW50cyIsImxiRW50cnkiLCJzY29yZUFyZWEiLCJyYW5raW5ncyIsImxiUmFua2luZ0VudHJ5IiwibGF5b3V0RGVmYXVsdE9yRW1wdHlTaW5nbGVSb3ciLCJzZWxmTWVtYmVyIiwibGF5b3V0Rmlyc3RUb09yRW1wdHkiLCJzdHJhdGVneSIsInJlY29yZFRpbWVXaGVuU3VtUmVhY2hlcyIsImxheW91dEZpcnN0VG9PckVtcHR5U2luZ2xlUm93IiwibGF5b3V0U3VtQmVzdE9mIiwic3VtQmVzdERvbU9iaiIsImxiUmVzdWx0c1Njb3JlQXJlYSIsImxiUmVzdWx0c1Njb3JlQXJlYUhpZ2giLCJsYlJlc3VsdHNTY29yZUFyZWFIaWdoTGFiZWwiLCJsYlJlc3VsdHNTY29yZUFyZWFIaWdoU2NvcmUiLCJsYlJlc3VsdHNTY29yZUFyZWFMYXN0IiwibGJSZXN1bHRzU2NvcmVBcmVhTGFzdExhYmVsIiwibGJSZXN1bHRzU2NvcmVBcmVhTGFzdFNjb3JlIiwibGJSZXN1bHRzUmFua0FyZWEiLCJsYlJlc3VsdHNSYW5rVmFsdWUiLCJoaWdoU2NvcmUiLCJsYXN0U2NvcmUiLCJyYW5rVmFsdWUiLCJsYXlvdXRSZXF1aXJlc09wdEluIiwic3RhcnRlZCIsIm9wdEluV3JhcHBlciIsIm9wdEluRGF0ZVdyYXBwZXIiLCJvcHRJbkRhdGVMYWJlbCIsIm9wdEluRGF0ZSIsIm9wdEluRGF0ZUFjdGlvbldyYXBwZXIiLCJvcHRJbkRhdGVBY3Rpb24iLCJkZWZhdWx0TGF5b3V0V3JhcHBlckRvbU9iaiIsIm9wdEluV3JhcHBlckRvbU9iaiIsImZpcnN0VG9Eb21PYmoiLCJyZW1vdmVJbmZvQXJlYSIsInJlbW92ZUluZm9BcmVhSW50ZXJ2YWwiLCJsb2FkSW5mb0FyZWEiLCJkcmFnRWxlbWVudCIsIm5ld1RvcCIsIm5ld0xlZnQiLCJldmVudFN0cmVhbSIsImNoZWNrVGltZW91dCIsIm9uRGlzcGxheUNoZWNrVGltZW91dCIsImNoZWNrSW50ZXJ2YWwiLCJhdXRvTm90aWZpY2F0aW9uSGlkZUludGVydmFsIiwiYXV0b05vdGlmaWNhdGlvbkhpZGVUaW1lIiwiZGlzcGxheUluUHJvZ3Jlc3MiLCJkYXRhRXh0cmFjdGlvbkZvckNhbnZhcyIsIm1ldGFkYXRhIiwicmVzcG9uc2VPYmoiLCJsYXlvdXRXcmFwcGVyIiwiaW5mb3JtYXRpb25EZXRhaWxzQ29udGFpbmVyIiwiaW5mb3JtYXRpb25EZXRhaWxzTGFiZWwiLCJpbmZvcm1hdGlvbkRldGFpbHNEZXNjcmlwdGlvbiIsInByb2Nlc3NlZCIsInN0YXJ0U1NFIiwic3NlSW5zdGFuY2UiLCJkYXRhS2V5IiwiYXV0b05vdGlmaWNhdGlvbkhpZGUiLCJzaG93QWNoaWV2ZW1lbnROb3RpZmljYXRpb24iLCJoYW5kbGVDYW52YXNBbmltYXRpb25zIiwiY2FudmFzRGF0YSIsImV2ZW50U3RyZWFtQ2hlY2siLCJub3RpZmljYXRpb25JZCIsImFwaVVSTCIsImNsYXNzU2VsZWN0b3IiLCJpZFNlbGVjdG9yIiwidGFnU2VsZWN0b3IiLCJtb3ZlbWVudEludGVydmFsIiwiZWxtbnQiLCJkcmFnZ2FibGVFbCIsImZpbmlzaERyYWdnaW5nIiwibW9iaWxlVG91Y2giLCJwb3MxIiwicG9zMiIsInBvczMiLCJwb3M0IiwiaXNpT1MiLCJpc2lPU0RldmljZSIsImlzUGFyZW50V2luZG93Iiwibm9kZU5hbWUiLCJtYXhMZWZ0IiwibWF4VG9wIiwib2Zmc2V0SGVpZ2h0IiwidG91Y2hTdGFydCIsIm1vdmluZyIsIm9uV2luZG93Q2hhbmdlIiwiaXNWZXJ0aWNhbCIsIm9mZnNldE1heExlZnQiLCJvZmZzZXRNYXhUb3AiLCJlbFRvcCIsImVsTGVmdCIsImp1c3RBVG91Y2giLCJwYXNzaXZlIiwidGFyZ2V0VG91Y2hlcyIsInBhZ2VYIiwicGFnZVkiLCJlbGVtZW50RHJhZyIsImNsb3NlRHJhZ0VsZW1lbnQiLCJvbm1vdXNlZG93biIsImRyYWdNb3VzZURvd24iLCJjbGllbnRYIiwiY2xpZW50WSIsIm9ubW91c2V1cCIsIm9ubW91c2Vtb3ZlIiwiY2hlY2tNYXhNaW5SZXN0cmFpbnRzIiwibWluTGVmdCIsInBvc1giLCJwb3NZIiwiY2hlY2tNb3ZlbWVudCIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJsZWZ0VG9wQ2hlY2siLCJzZXRUaW1lb3V0R2xvYmFsIiwiX3NldFRpbWVvdXRHbG9iYWxSZXBvc2l0b3J5IiwiZnVuYyIsImludGVydmFsIiwiRXJyb3IiLCJjbG9zZVRpbWVvdXQiLCJyZUVuYWJsZVRpbWVvdXRzIiwidG1wIiwiU3ludGF4RXJyb3IiLCJFdmVudCIsInJldHVyblZhbHVlIiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwiRWxlbWVudCIsInQiLCJuIiwiciIsInNyY0VsZW1lbnQiLCJjdXJyZW50VGFyZ2V0Iiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsImhhbmRsZUV2ZW50IiwiY2FsbCIsIm8iLCJhdHRhY2hFdmVudCIsIm9iamVjdCIsImxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiSFRNTERvY3VtZW50IiwiV2luZG93IiwicGFyZW50RWxlbWVudCIsInJlbW92ZUNoaWxkIiwiTm9kZUxpc3QiLCJIVE1MQ29sbGVjdGlvbiIsImYiLCJxdW90ZSIsImVzY2FwYWJsZSIsImxhc3RJbmRleCIsInRlc3QiLCJjaGFyQ29kZUF0Iiwic2xpY2UiLCJwIiwiZ2FwIiwidSIsInRvSlNPTiIsInJlcCIsImlzRmluaXRlIiwiaW5kZW50IiwiYXBwbHkiLCJnZXRVVENTZWNvbmRzIiwiTnVtYmVyIiwiQm9vbGVhbiIsImN4IiwidGV4dCIsInJldml2ZXIiLCJ3YWxrIiwiaiIsImV2YWwiLCJfc2xpY2UiLCJkb2N1bWVudEVsZW1lbnQiLCJjIiwibCIsImNoYXJBdCIsInJlVHJpbSIsImV2ZW50c291cmNlIiwibGFzdEV2ZW50SWQiLCJjYWNoZSIsIkNPTk5FQ1RJTkciLCJfcG9sbFRpbWVyIiwiX3hociIsInBvbGxBZ2FpbiIsInBvbGwiLCJ0aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiT1BFTiIsInBhcnRzIiwiZXZlbnRUeXBlIiwibGluZSIsInJldHJ5IiwiaXNOYU4iLCJNZXNzYWdlRXZlbnQiLCJoYW5kbGVycyIsImhhbmRsZXIiLCJvbm1lc3NhZ2UiLCJvbm9wZW4iLCJvcmlnaW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwiYWRkIiwidHJhY2UiLCJuZXdOb2RlIiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJsZXR0ZXIiLCJ0b0xvd2VyQ2FzZSIsInNlbGVjdG9yIiwic2VsZWN0b3JDbGFzc1N0cmluZyIsImdldEF0dHJpYnV0ZSIsInNlbGVjdG9ySWRTdHJpbmciLCJtYXRjaCIsInRvVXBwZXJDYXNlIiwibnVtIiwiZ2V0T2Zmc2V0IiwiX3giLCJfeSIsIm9mZnNldFBhcmVudCIsIl9oYXNDbGFzcyIsImNvbnRhaW5zIiwiUmVnRXhwIiwic3RhY2siLCJpc0VsZW1lbnQiLCJIVE1MRWxlbWVudCIsIm5vZGVUeXBlIiwiY2hlY2siLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ2ZW5kb3IiLCJvcGVyYSIsInBsYXRmb3JtIiwicmV0Iiwib2JqMSIsIm9iajIiLCJhcnJheVR5cGUiLCJvYmozIiwiayIsIm9iamVjdENvdW50IiwiZG9jIiwidG1wRG9jIiwidG1wU2VsZWN0b3IiLCJ0cmltIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2Nyb2xsRW5hYmxlZCIsInNjcm9sbEhlaWdodCIsInBhcnRpYWwiLCJodG1sIiwidGV4dENvbnRlbnQiLCJpbm5lclRleHQiLCJzdHJpbmciXSwibWFwcGluZ3MiOiI7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDBDQUEwQyxnQ0FBZ0M7UUFDMUU7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSx3REFBd0Qsa0JBQWtCO1FBQzFFO1FBQ0EsaURBQWlELGNBQWM7UUFDL0Q7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLHlDQUF5QyxpQ0FBaUM7UUFDMUUsZ0hBQWdILG1CQUFtQixFQUFFO1FBQ3JJO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMkJBQTJCLDBCQUEwQixFQUFFO1FBQ3ZELGlDQUFpQyxlQUFlO1FBQ2hEO1FBQ0E7UUFDQTs7UUFFQTtRQUNBLHNEQUFzRCwrREFBK0Q7O1FBRXJIO1FBQ0E7OztRQUdBO1FBQ0E7Ozs7Ozs7Ozs7Ozs7QUNsRlk7O0FBRVo7O0FBRUE7QUFDQSxtREFBbUQsSUFBSSxTQUFTLE1BQU0sSUFBSTs7QUFFMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYTtBQUNiO0FBQ0E7QUFD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QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELEVBQUU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsT0FBTztBQUM5RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVELE9BQU87QUFDOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLFFBQVE7QUFDN0I7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixZQUFZO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FB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O0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLHNCQUFzQjtBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtB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O0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isc0JBQXNCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQyxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixJQUFJO0FBQy9COztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNENBQTRDLElBQUk7O0FBRWhEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUNBQWlDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRMQUE0TCxJQUFJOztBQUVoTSxxRUFBcUUsSUFBSTs7QUFFekU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwwQ0FBMEMsWUFBWTtBQUN0RDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIsZ0NBQWdDO0FBQ2hDLDZCQUE2QixFQUFFLEVBQUU7QUFDakMsNkJBQTZCLEVBQUUsRUFBRTtBQUNqQyxrQ0FBa0MsRUFBRSxFQUFFO0FBQ3RDLGlDQUFpQztBQUNqQyxxQ0FBcUM7QUFDckMseUNBQXlDO0FBQ3pDLDZCQUE2QixJQUFJLEVBQUU7QUFDbkMsNkJBQTZCLElBQUksRUFBRTtBQUNuQyxrQ0FBa0MsSUFBSSxFQUFFOztBQUV4QywrQkFBK0I7QUFDL0Isb0NBQW9DOztBQUVwQyw4Q0FBOEM7QUFDOUMscURBQXFEOztBQUVyRCx3Q0FBd0MsSUFBSSxJQUFJOztBQUVoRDtBQUNBO0FBQ0EsMkJBQTJCLE1BQU0sd0VBQXdFLE1BQU0sbUJBQW1CLE1BQU0scUJBQXFCLE1BQU0sRUFBRSxJQUFJOztBQUV6Szs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSw4Q0FBOEM7QUFDOUM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0JBQWtCO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHdCQUF3QjtBQUNuRDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpQkFBaUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsUUFBUTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsUUFBUTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsUUFBUTtBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixPQUFPO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1JQUFrQztBQUNsRDtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwrQkFBK0I7QUFDbEQ7QUFDQTs7QUFFQTtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQ0FBMkMsRUFBRSxJQUFJLEVBQUU7QUFDbkQsd0NBQXdDLEVBQUUsSUFBSSxFQUFFOztBQUVoRDs7QUFFQTtBQUNBLGlDQUFpQyxFQUFFO0FBQ25DLDJCQUEyQixFQUFFO0FBQzdCLDZCQUE2QixFQUFFO0FBQy9CLDJCQUEyQixFQUFFO0FBQzdCLHlCQUF5QixFQUFFLElBQUksRUFBRTtBQUNqQyx3QkFBd0IsRUFBRTtBQUMxQiwrQkFBK0IsR0FBRztBQUNsQyx5QkFBeUIsRUFBRTtBQUMzQjtBQUNBLDJCQUEyQixFQUFFLElBQUksRUFBRTtBQUNuQywwQkFBMEIsRUFBRSxJQUFJLEVBQUU7QUFDbEMsd0JBQXdCLEVBQUU7QUFDMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDRDQUE0QyxPQUFPO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsT0FBTztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUE4RCxJQUFJLDBEQUEwRCxJQUFJLHFFQUFxRSxFQUFFOztBQUV2TTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxtQkFBbUIsbUJBQW1CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGtDQUFrQyxnQkFBZ0I7QUFDbEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvQkFBb0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLHFCQUFxQjtBQUM1QztBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsNkJBQTZCO0FBQ3RDO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixjQUFjO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLDZEQUE2RDtBQUM3RCx5REFBeUQ7QUFDekQsK0RBQStEO0FBQy9ELHdEQUF3RCxPQUFPO0FBQy9ELHdEQUF3RCxPQUFPO0FBQy9ELHVEQUF1RCxPQUFPO0FBQzlELG1FQUFtRSxPQUFPO0FBQzFFLHFFQUFxRSxPQUFPO0FBQzVFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHFCQUFxQjtBQUN4RCxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxxQkFBcUI7QUFDeEQsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7OztBQUdMOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsUUFBUTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLElBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7O0FBR0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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Q0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLENBQUMsRUFBRSxnQ0FBZ0M7QUFDbkM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMsR0FBRztBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMsR0FBRztBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLENBQUMsRUFBRSwwQkFBMEI7QUFDN0I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxFQUFFLCtCQUErQjtBQUNsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUU7O0FBRXhCLENBQUMsRUFBRSx1SUFBdUk7QUFDMUk7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRTs7QUFFeEIsQ0FBQyxFQUFFLG1FQUFtRTtBQUN0RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMsRUFBRSxzRkFBc0Y7QUFDekY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLGFBQWEsUUFBUSxFQUFFLDBIQUEwSDs7QUFFbEosQ0FBQyxFQUFFLHNIQUFzSDtBQUN6SDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRTs7QUFFeEIsQ0FBQyxFQUFFLHdOQUF3TjtBQUMzTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyxxSUFBcUk7O0FBRXRJLENBQUMsR0FBRztBQUNKO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGdEQUFnRCxXQUFXO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUUsMEhBQTBIOztBQUVsSixDQUFDLEVBQUUsOFhBQThYO0FBQ2pZO0FBQ0E7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Q0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRSwwSEFBMEg7O0FBRWxKLENBQUMsRUFBRSxnRkFBZ0Y7QUFDbkY7QUFDQTs7QUFFQSxDQUFDLHFJQUFxSTs7QUFFdEksQ0FBQyxHQUFHO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUEsQ0FBQyxxSUFBcUk7O0FBRXRJLENBQUMsR0FBRztBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLENBQUMsRUFBRSx3R0FBd0c7QUFDM0c7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxFQUFFLHFGQUFxRjtBQUN4RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLGFBQWEsUUFBUSxFQUFFOztBQUV4QixDQUFDLEVBQUUsK0lBQStJO0FBQ2xKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLHFJQUFxSTs7QUFFdEksQ0FBQyxFQUFFLG1GQUFtRjtBQUN0RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRTs7QUFFeEIsQ0FBQyxFQUFFLHFFQUFxRTtBQUN4RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUU7O0FBRXhCLENBQUMsRUFBRSxvQ0FBb0M7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUZBQXlGOztBQUV6Rjs7QUFFQTtBQUNBOztBQUVBLENBQUMscUlBQXFJOztBQUV0SSxDQUFDLEVBQUUscURBQXFEO0FBQ3hEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRTs7QUFFeEIsQ0FBQyxFQUFFLG9DQUFvQztBQUN2QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLGFBQWEsUUFBUSxFQUFFOztBQUV4QixDQUFDLEVBQUUsb0ZBQW9GO0FBQ3ZGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRTs7QUFFeEIsQ0FBQyxFQUFFLHFEQUFxRDtBQUN4RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUUsMEhBQTBIOztBQUVsSixDQUFDLEVBQUUseUdBQXlHO0FBQzVHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwwQkFBMEIscURBQXFELG1CQUFtQixXQUFXO0FBQzdHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRSwwSEFBMEg7O0FBRWxKLENBQUMsRUFBRSxrSUFBa0k7QUFDckk7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsRUFBRTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRTs7QUFFeEIsQ0FBQyxFQUFFLG9DQUFvQztBQUN2QztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRSwwSEFBMEg7O0FBRWxKLENBQUMsRUFBRSx3REFBd0Q7QUFDM0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FB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QUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMscUlBQXFJOztBQUV0SSxDQUFDLEVBQUUsY0FBYztBQUNqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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O0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLENBQUMsRUFBRSxRQUFRO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDLEdBQUc7QUFDSjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1Asa0NBQWtDLGlEQUFpRDtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxPQUFPO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLE9BQU87QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixtQkFBbUI7QUFDckM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGlCQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdB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QSxJQUFNc1gsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFVbkMsR0FBVixFQUFlcTNCLE9BQWYsRUFBd0I7QUFDN0MsU0FBUXIzQixHQUFHLENBQUN2VyxPQUFKLENBQVk0dEMsT0FBWixJQUF1QixDQUFDLENBQWhDO0FBQ0QsQ0FGRDs7QUFJZWwxQiw2RUFBZixFOzs7Ozs7Ozs7Ozs7QUNaQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU00ZSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVdVcsSUFBVixFQUFnQjtBQUNoQyxNQUFJckksR0FBRyxHQUFHaitCLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixLQUF2QixDQUFWO0FBQ0FnK0IsS0FBRyxDQUFDcnNCLFNBQUosR0FBZ0IwMEIsSUFBaEI7QUFDQSxTQUFPckksR0FBRyxDQUFDc0ksV0FBSixJQUFtQnRJLEdBQUcsQ0FBQ3VJLFNBQXZCLElBQW9DLEVBQTNDO0FBQ0QsQ0FKRDs7QUFNZXpXLHdFQUFmLEU7Ozs7Ozs7Ozs7OztBQ2ZBO0FBQUEsSUFBTStWLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQVVXLE1BQVYsRUFBa0I7QUFDN0IsU0FBT0EsTUFBTSxDQUFDN3RDLE9BQVAsQ0FBZSxZQUFmLEVBQTZCLEVBQTdCLENBQVA7QUFDRCxDQUZEOztBQUlla3RDLG1FQUFmLEU7Ozs7Ozs7Ozs7OztBQ0pBO0FBQWUsb0ZBQXVCLDJDQUEyQyxFIiwiZmlsZSI6ImdhbWlmaWNhdGlvbi11eC1wYWNrYWdlLnYzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYW5zaUhUTUxcblxuLy8gUmVmZXJlbmNlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvYW5zaS1yZWdleFxudmFyIF9yZWdBTlNJID0gLyg/Oig/OlxcdTAwMWJcXFspfFxcdTAwOWIpKD86KD86WzAtOV17MSwzfSk/KD86KD86O1swLTldezAsM30pKik/W0EtTXxmLW1dKXxcXHUwMDFiW0EtTV0vXG5cbnZhciBfZGVmQ29sb3JzID0ge1xuICByZXNldDogWydmZmYnLCAnMDAwJ10sIC8vIFtGT1JFR1JPVURfQ09MT1IsIEJBQ0tHUk9VTkRfQ09MT1JdXG4gIGJsYWNrOiAnMDAwJyxcbiAgcmVkOiAnZmYwMDAwJyxcbiAgZ3JlZW46ICcyMDk4MDUnLFxuICB5ZWxsb3c6ICdlOGJmMDMnLFxuICBibHVlOiAnMDAwMGZmJyxcbiAgbWFnZW50YTogJ2ZmMDBmZicsXG4gIGN5YW46ICcwMGZmZWUnLFxuICBsaWdodGdyZXk6ICdmMGYwZjAnLFxuICBkYXJrZ3JleTogJzg4OCdcbn1cbnZhciBfc3R5bGVzID0ge1xuICAzMDogJ2JsYWNrJyxcbiAgMzE6ICdyZWQnLFxuICAzMjogJ2dyZWVuJyxcbiAgMzM6ICd5ZWxsb3cnLFxuICAzNDogJ2JsdWUnLFxuICAzNTogJ21hZ2VudGEnLFxuICAzNjogJ2N5YW4nLFxuICAzNzogJ2xpZ2h0Z3JleSdcbn1cbnZhciBfb3BlblRhZ3MgPSB7XG4gICcxJzogJ2ZvbnQtd2VpZ2h0OmJvbGQnLCAvLyBib2xkXG4gICcyJzogJ29wYWNpdHk6MC41JywgLy8gZGltXG4gICczJzogJzxpPicsIC8vIGl0YWxpY1xuICAnNCc6ICc8dT4nLCAvLyB1bmRlcnNjb3JlXG4gICc4JzogJ2Rpc3BsYXk6bm9uZScsIC8vIGhpZGRlblxuICAnOSc6ICc8ZGVsPicgLy8gZGVsZXRlXG59XG52YXIgX2Nsb3NlVGFncyA9IHtcbiAgJzIzJzogJzwvaT4nLCAvLyByZXNldCBpdGFsaWNcbiAgJzI0JzogJzwvdT4nLCAvLyByZXNldCB1bmRlcnNjb3JlXG4gICcyOSc6ICc8L2RlbD4nIC8vIHJlc2V0IGRlbGV0ZVxufVxuXG47WzAsIDIxLCAyMiwgMjcsIDI4LCAzOSwgNDldLmZvckVhY2goZnVuY3Rpb24gKG4pIHtcbiAgX2Nsb3NlVGFnc1tuXSA9ICc8L3NwYW4+J1xufSlcblxuLyoqXG4gKiBDb252ZXJ0cyB0ZXh0IHdpdGggQU5TSSBjb2xvciBjb2RlcyB0byBIVE1MIG1hcmt1cC5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gYW5zaUhUTUwgKHRleHQpIHtcbiAgLy8gUmV0dXJucyB0aGUgdGV4dCBpZiB0aGUgc3RyaW5nIGhhcyBubyBBTlNJIGVzY2FwZSBjb2RlLlxuICBpZiAoIV9yZWdBTlNJLnRlc3QodGV4dCkpIHtcbiAgICByZXR1cm4gdGV4dFxuICB9XG5cbiAgLy8gQ2FjaGUgb3BlbmVkIHNlcXVlbmNlLlxuICB2YXIgYW5zaUNvZGVzID0gW11cbiAgLy8gUmVwbGFjZSB3aXRoIG1hcmt1cC5cbiAgdmFyIHJldCA9IHRleHQucmVwbGFjZSgvXFwwMzNcXFsoXFxkKykqbS9nLCBmdW5jdGlvbiAobWF0Y2gsIHNlcSkge1xuICAgIHZhciBvdCA9IF9vcGVuVGFnc1tzZXFdXG4gICAgaWYgKG90KSB7XG4gICAgICAvLyBJZiBjdXJyZW50IHNlcXVlbmNlIGhhcyBiZWVuIG9wZW5lZCwgY2xvc2UgaXQuXG4gICAgICBpZiAoISF+YW5zaUNvZGVzLmluZGV4T2Yoc2VxKSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdFxuICAgICAgICBhbnNpQ29kZXMucG9wKClcbiAgICAgICAgcmV0dXJuICc8L3NwYW4+J1xuICAgICAgfVxuICAgICAgLy8gT3BlbiB0YWcuXG4gICAgICBhbnNpQ29kZXMucHVzaChzZXEpXG4gICAgICByZXR1cm4gb3RbMF0gPT09ICc8JyA/IG90IDogJzxzcGFuIHN0eWxlPVwiJyArIG90ICsgJztcIj4nXG4gICAgfVxuXG4gICAgdmFyIGN0ID0gX2Nsb3NlVGFnc1tzZXFdXG4gICAgaWYgKGN0KSB7XG4gICAgICAvLyBQb3Agc2VxdWVuY2VcbiAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgcmV0dXJuIGN0XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9KVxuXG4gIC8vIE1ha2Ugc3VyZSB0YWdzIGFyZSBjbG9zZWQuXG4gIHZhciBsID0gYW5zaUNvZGVzLmxlbmd0aFxuICA7KGwgPiAwKSAmJiAocmV0ICs9IEFycmF5KGwgKyAxKS5qb2luKCc8L3NwYW4+JykpXG5cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIEN1c3RvbWl6ZSBjb2xvcnMuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sb3JzIHJlZmVyZW5jZSB0byBfZGVmQ29sb3JzXG4gKi9cbmFuc2lIVE1MLnNldENvbG9ycyA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgaWYgKHR5cGVvZiBjb2xvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgY29sb3JzYCBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBPYmplY3QuJylcbiAgfVxuXG4gIHZhciBfZmluYWxDb2xvcnMgPSB7fVxuICBmb3IgKHZhciBrZXkgaW4gX2RlZkNvbG9ycykge1xuICAgIHZhciBoZXggPSBjb2xvcnMuaGFzT3duUHJvcGVydHkoa2V5KSA/IGNvbG9yc1trZXldIDogbnVsbFxuICAgIGlmICghaGV4KSB7XG4gICAgICBfZmluYWxDb2xvcnNba2V5XSA9IF9kZWZDb2xvcnNba2V5XVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKCdyZXNldCcgPT09IGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGhleCA9IFtoZXhdXG4gICAgICB9XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGV4KSB8fCBoZXgubGVuZ3RoID09PSAwIHx8IGhleC5zb21lKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaCAhPT0gJ3N0cmluZydcbiAgICAgIH0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhbiBBcnJheSBhbmQgZWFjaCBpdGVtIGNvdWxkIG9ubHkgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgICAgfVxuICAgICAgdmFyIGRlZkhleENvbG9yID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBpZiAoIWhleFswXSkge1xuICAgICAgICBoZXhbMF0gPSBkZWZIZXhDb2xvclswXVxuICAgICAgfVxuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDEgfHwgIWhleFsxXSkge1xuICAgICAgICBoZXggPSBbaGV4WzBdXVxuICAgICAgICBoZXgucHVzaChkZWZIZXhDb2xvclsxXSlcbiAgICAgIH1cblxuICAgICAgaGV4ID0gaGV4LnNsaWNlKDAsIDIpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJylcbiAgICB9XG4gICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBoZXhcbiAgfVxuICBfc2V0VGFncyhfZmluYWxDb2xvcnMpXG59XG5cbi8qKlxuICogUmVzZXQgY29sb3JzLlxuICovXG5hbnNpSFRNTC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgX3NldFRhZ3MoX2RlZkNvbG9ycylcbn1cblxuLyoqXG4gKiBFeHBvc2UgdGFncywgaW5jbHVkaW5nIG9wZW4gYW5kIGNsb3NlLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuYW5zaUhUTUwudGFncyA9IHt9XG5cbmlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdvcGVuJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX29wZW5UYWdzIH1cbiAgfSlcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdjbG9zZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9jbG9zZVRhZ3MgfVxuICB9KVxufSBlbHNlIHtcbiAgYW5zaUhUTUwudGFncy5vcGVuID0gX29wZW5UYWdzXG4gIGFuc2lIVE1MLnRhZ3MuY2xvc2UgPSBfY2xvc2VUYWdzXG59XG5cbmZ1bmN0aW9uIF9zZXRUYWdzIChjb2xvcnMpIHtcbiAgLy8gcmVzZXQgYWxsXG4gIF9vcGVuVGFnc1snMCddID0gJ2ZvbnQtd2VpZ2h0Om5vcm1hbDtvcGFjaXR5OjE7Y29sb3I6IycgKyBjb2xvcnMucmVzZXRbMF0gKyAnO2JhY2tncm91bmQ6IycgKyBjb2xvcnMucmVzZXRbMV1cbiAgLy8gaW52ZXJzZVxuICBfb3BlblRhZ3NbJzcnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5yZXNldFsxXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFswXVxuICAvLyBkYXJrIGdyZXlcbiAgX29wZW5UYWdzWyc5MCddID0gJ2NvbG9yOiMnICsgY29sb3JzLmRhcmtncmV5XG5cbiAgZm9yICh2YXIgY29kZSBpbiBfc3R5bGVzKSB7XG4gICAgdmFyIGNvbG9yID0gX3N0eWxlc1tjb2RlXVxuICAgIHZhciBvcmlDb2xvciA9IGNvbG9yc1tjb2xvcl0gfHwgJzAwMCdcbiAgICBfb3BlblRhZ3NbY29kZV0gPSAnY29sb3I6IycgKyBvcmlDb2xvclxuICAgIGNvZGUgPSBwYXJzZUludChjb2RlKVxuICAgIF9vcGVuVGFnc1soY29kZSArIDEwKS50b1N0cmluZygpXSA9ICdiYWNrZ3JvdW5kOiMnICsgb3JpQ29sb3JcbiAgfVxufVxuXG5hbnNpSFRNTC5yZXNldCgpXG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIvKiFcbiAqIGNzcy12YXJzLXBvbnlmaWxsXG4gKiB2Mi40LjNcbiAqIGh0dHBzOi8vamhpbGRlbmJpZGRsZS5naXRodWIuaW8vY3NzLXZhcnMtcG9ueWZpbGwvXG4gKiAoYykgMjAxOC0yMDIxIEpvaG4gSGlsZGVuYmlkZGxlIDxodHRwOi8vaGlsZGVuYmlkZGxlLmNvbT5cbiAqIE1JVCBsaWNlbnNlXG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICAgIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vKiFcbiAqIGdldC1jc3MtZGF0YVxuICogdjIuMC4wXG4gKiBodHRwczovL2dpdGh1Yi5jb20vamhpbGRlbmJpZGRsZS9nZXQtY3NzLWRhdGFcbiAqIChjKSAyMDE4LTIwMjEgSm9obiBIaWxkZW5iaWRkbGUgPGh0dHA6Ly9oaWxkZW5iaWRkbGUuY29tPlxuICogTUlUIGxpY2Vuc2VcbiAqLyBmdW5jdGlvbiBnZXRVcmxzKHVybHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgICBtaW1lVHlwZTogb3B0aW9ucy5taW1lVHlwZSB8fCBudWxsLFxuICAgICAgICBvbkJlZm9yZVNlbmQ6IG9wdGlvbnMub25CZWZvcmVTZW5kIHx8IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb25TdWNjZXNzOiBvcHRpb25zLm9uU3VjY2VzcyB8fCBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9uRXJyb3I6IG9wdGlvbnMub25FcnJvciB8fCBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9uQ29tcGxldGU6IG9wdGlvbnMub25Db21wbGV0ZSB8fCBGdW5jdGlvbi5wcm90b3R5cGVcbiAgICB9O1xuICAgIHZhciB1cmxBcnJheSA9IEFycmF5LmlzQXJyYXkodXJscykgPyB1cmxzIDogWyB1cmxzIF07XG4gICAgdmFyIHVybFF1ZXVlID0gQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkodXJsQXJyYXkubGVuZ3RoKSkubWFwKChmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0pKTtcbiAgICBmdW5jdGlvbiBpc1ZhbGlkQ3NzKGNzc1RleHQpIHtcbiAgICAgICAgdmFyIGlzSFRNTCA9IGNzc1RleHQgJiYgY3NzVGV4dC50cmltKCkuY2hhckF0KDApID09PSBcIjxcIjtcbiAgICAgICAgcmV0dXJuIGNzc1RleHQgJiYgIWlzSFRNTDtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25FcnJvcih4aHIsIHVybEluZGV4KSB7XG4gICAgICAgIHNldHRpbmdzLm9uRXJyb3IoeGhyLCB1cmxBcnJheVt1cmxJbmRleF0sIHVybEluZGV4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25TdWNjZXNzKHJlc3BvbnNlVGV4dCwgdXJsSW5kZXgpIHtcbiAgICAgICAgdmFyIHJldHVyblZhbCA9IHNldHRpbmdzLm9uU3VjY2VzcyhyZXNwb25zZVRleHQsIHVybEFycmF5W3VybEluZGV4XSwgdXJsSW5kZXgpO1xuICAgICAgICByZXNwb25zZVRleHQgPSByZXR1cm5WYWwgPT09IGZhbHNlID8gXCJcIiA6IHJldHVyblZhbCB8fCByZXNwb25zZVRleHQ7XG4gICAgICAgIHVybFF1ZXVlW3VybEluZGV4XSA9IHJlc3BvbnNlVGV4dDtcbiAgICAgICAgaWYgKHVybFF1ZXVlLmluZGV4T2YobnVsbCkgPT09IC0xKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5vbkNvbXBsZXRlKHVybFF1ZXVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgcGFyc2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgdXJsQXJyYXkuZm9yRWFjaCgoZnVuY3Rpb24odXJsLCBpKSB7XG4gICAgICAgIHBhcnNlci5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIHVybCk7XG4gICAgICAgIHBhcnNlci5ocmVmID0gU3RyaW5nKHBhcnNlci5ocmVmKTtcbiAgICAgICAgdmFyIGlzSUVsdGU5ID0gQm9vbGVhbihkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICAgICAgdmFyIGlzSUVsdGU5Q09SUyA9IGlzSUVsdGU5ICYmIHBhcnNlci5ob3N0LnNwbGl0KFwiOlwiKVswXSAhPT0gbG9jYXRpb24uaG9zdC5zcGxpdChcIjpcIilbMF07XG4gICAgICAgIGlmIChpc0lFbHRlOUNPUlMpIHtcbiAgICAgICAgICAgIHZhciBpc1NhbWVQcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbCA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAgICAgICBpZiAoaXNTYW1lUHJvdG9jb2wpIHtcbiAgICAgICAgICAgICAgICB2YXIgeGRyID0gbmV3IFhEb21haW5SZXF1ZXN0O1xuICAgICAgICAgICAgICAgIHhkci5vcGVuKFwiR0VUXCIsIHVybCk7XG4gICAgICAgICAgICAgICAgeGRyLnRpbWVvdXQgPSAwO1xuICAgICAgICAgICAgICAgIHhkci5vbnByb2dyZXNzID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICAgICAgICAgICAgICAgIHhkci5vbnRpbWVvdXQgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgeGRyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZENzcyh4ZHIucmVzcG9uc2VUZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKHhkci5yZXNwb25zZVRleHQsIGkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcih4ZHIsIGkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB4ZHIub25lcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHhkciwgaSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgeGRyLnNlbmQoKTtcbiAgICAgICAgICAgICAgICB9KSwgMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkludGVybmV0IEV4cGxvcmVyIDkgQ3Jvc3MtT3JpZ2luIChDT1JTKSByZXF1ZXN0cyBtdXN0IHVzZSB0aGUgc2FtZSBwcm90b2NvbCAoXCIuY29uY2F0KHVybCwgXCIpXCIpKTtcbiAgICAgICAgICAgICAgICBvbkVycm9yKG51bGwsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdDtcbiAgICAgICAgICAgIHhoci5vcGVuKFwiR0VUXCIsIHVybCk7XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUpIHtcbiAgICAgICAgICAgICAgICB4aHIub3ZlcnJpZGVNaW1lVHlwZShzZXR0aW5ncy5taW1lVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXR0aW5ncy5vbkJlZm9yZVNlbmQoeGhyLCB1cmwsIGkpO1xuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA8IDQwMCAmJiBpc1ZhbGlkQ3NzKHhoci5yZXNwb25zZVRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MoeGhyLnJlc3BvbnNlVGV4dCwgaSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gMCAmJiBpc1ZhbGlkQ3NzKHhoci5yZXNwb25zZVRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MoeGhyLnJlc3BvbnNlVGV4dCwgaSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHhociwgaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgfVxuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBHZXRzIENTUyBkYXRhIGZyb20gPHN0eWxlPiBhbmQgPGxpbms+IG5vZGVzIChpbmNsdWRpbmcgQGltcG9ydHMpLCB0aGVuXG4gKiByZXR1cm5zIGRhdGEgaW4gb3JkZXIgcHJvY2Vzc2VkIGJ5IERPTS4gQWxsb3dzIHNwZWNpZnlpbmcgbm9kZXMgdG9cbiAqIGluY2x1ZGUvZXhjbHVkZSBhbmQgZmlsdGVyaW5nIENTUyBkYXRhIHVzaW5nIFJlZ0V4LlxuICpcbiAqIEBwcmVzZXJ2ZVxuICogQHBhcmFtIHtvYmplY3R9ICAgW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtvYmplY3R9ICAgW29wdGlvbnMucm9vdEVsZW1lbnQ9ZG9jdW1lbnRdIFJvb3QgZWxlbWVudCB0byB0cmF2ZXJzZSBmb3JcbiAqICAgICAgICAgICAgICAgICAgIDxsaW5rPiBhbmQgPHN0eWxlPiBub2Rlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSAgIFtvcHRpb25zLmluY2x1ZGVdIENTUyBzZWxlY3RvciBtYXRjaGluZyA8bGluaz4gYW5kIDxzdHlsZT5cbiAqICAgICAgICAgICAgICAgICAgIG5vZGVzIHRvIGluY2x1ZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSAgIFtvcHRpb25zLmV4Y2x1ZGVdIENTUyBzZWxlY3RvciBtYXRjaGluZyA8bGluaz4gYW5kIDxzdHlsZT5cbiAqICAgICAgICAgICAgICAgICAgIG5vZGVzIHRvIGV4Y2x1ZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSAgIFtvcHRpb25zLmZpbHRlcl0gUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gZmlsdGVyIG5vZGUgQ1NTXG4gKiAgICAgICAgICAgICAgICAgICBkYXRhLiBFYWNoIGJsb2NrIG9mIENTUyBkYXRhIGlzIHRlc3RlZCBhZ2FpbnN0IHRoZSBmaWx0ZXIsXG4gKiAgICAgICAgICAgICAgICAgICBhbmQgb25seSBtYXRjaGluZyBkYXRhIGlzIGluY2x1ZGVkLlxuICogQHBhcmFtIHtib29sZWFufSAgW29wdGlvbnMuc2tpcERpc2FibGVkPXRydWVdIERldGVybWluZXMgaWYgZGlzYWJsZWRcbiAqICAgICAgICAgICAgICAgICAgIHN0eWxlc2hlZXRzIHdpbGwgYmUgc2tpcHBlZCB3aGlsZSBjb2xsZWN0aW5nIENTUyBkYXRhLlxuICogQHBhcmFtIHtib29sZWFufSAgW29wdGlvbnMudXNlQ1NTT009ZmFsc2VdIERldGVybWluZXMgaWYgQ1NTIGRhdGEgd2lsbCBiZVxuICogICAgICAgICAgICAgICAgICAgY29sbGVjdGVkIGZyb20gYSBzdHlsZXNoZWV0J3MgcnVudGltZSB2YWx1ZXMgaW5zdGVhZCBvZiBpdHNcbiAqICAgICAgICAgICAgICAgICAgIHRleHQgY29udGVudC4gVGhpcyBpcyByZXF1aXJlZCB0byBnZXQgYWNjdXJhdGUgQ1NTIGRhdGFcbiAqICAgICAgICAgICAgICAgICAgIHdoZW4gYSBzdHlsZXNoZWV0IGhhcyBiZWVuIG1vZGlmaWVkIHVzaW5nIHRoZSBkZWxldGVSdWxlKClcbiAqICAgICAgICAgICAgICAgICAgIG9yIGluc2VydFJ1bGUoKSBtZXRob2RzIGJlY2F1c2UgdGhlc2UgbW9kaWZpY2F0aW9ucyB3aWxsXG4gKiAgICAgICAgICAgICAgICAgICBub3QgYmUgcmVmbGVjdGVkIGluIHRoZSBzdHlsZXNoZWV0J3MgdGV4dCBjb250ZW50LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMub25CZWZvcmVTZW5kXSBDYWxsYmFjayBiZWZvcmUgWEhSIGlzIHNlbnQuIFBhc3Nlc1xuICogICAgICAgICAgICAgICAgICAgMSkgdGhlIFhIUiBvYmplY3QsIDIpIHNvdXJjZSBub2RlIHJlZmVyZW5jZSwgYW5kIDMpIHRoZVxuICogICAgICAgICAgICAgICAgICAgc291cmNlIFVSTCBhcyBhcmd1bWVudHMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5vblN1Y2Nlc3NdIENhbGxiYWNrIG9uIGVhY2ggQ1NTIG5vZGUgcmVhZC4gUGFzc2VzXG4gKiAgICAgICAgICAgICAgICAgICAxKSBDU1MgdGV4dCwgMikgc291cmNlIG5vZGUgcmVmZXJlbmNlLCBhbmQgMykgdGhlIHNvdXJjZVxuICogICAgICAgICAgICAgICAgICAgVVJMIGFzIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLm9uRXJyb3JdIENhbGxiYWNrIG9uIGVhY2ggZXJyb3IuIFBhc3NlcyAxKSB0aGUgWEhSXG4gKiAgICAgICAgICAgICAgICAgICBvYmplY3QgZm9yIGluc3BlY3Rpb24sIDIpIHNvdXJlIG5vZGUgcmVmZXJlbmNlLCBhbmQgMykgdGhlXG4gKiAgICAgICAgICAgICAgICAgICBzb3VyY2UgVVJMIHRoYXQgZmFpbGVkIChlaXRoZXIgYSA8bGluaz4gaHJlZiBvciBhbiBAaW1wb3J0KVxuICogICAgICAgICAgICAgICAgICAgYXMgYXJndW1lbnRzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5vbkNvbXBsZXRlXSBDYWxsYmFjayBhZnRlciBhbGwgbm9kZXMgaGF2ZSBiZWVuXG4gKiAgICAgICAgICAgICAgICAgICBwcm9jZXNzZWQuIFBhc3NlcyAxKSBjb25jYXRlbmF0ZWQgQ1NTIHRleHQsIDIpIGFuIGFycmF5IG9mXG4gKiAgICAgICAgICAgICAgICAgICBDU1MgdGV4dCBpbiBET00gb3JkZXIsIGFuZCAzKSBhbiBhcnJheSBvZiBub2RlcyBpbiBET01cbiAqICAgICAgICAgICAgICAgICAgIG9yZGVyIGFzIGFyZ3VtZW50cy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgZ2V0Q3NzRGF0YSh7XG4gKiAgICAgcm9vdEVsZW1lbnQgOiBkb2N1bWVudCxcbiAqICAgICBpbmNsdWRlICAgICA6ICdzdHlsZSxsaW5rW3JlbD1cInN0eWxlc2hlZXRcIl0nLFxuICogICAgIGV4Y2x1ZGUgICAgIDogJ1tocmVmPVwic2tpcC5jc3NcIl0nLFxuICogICAgIGZpbHRlciAgICAgIDogL3JlZC8sXG4gKiAgICAgc2tpcERpc2FibGVkOiB0cnVlLFxuICogICAgIHVzZUNTU09NICAgIDogZmFsc2UsXG4gKiAgICAgb25CZWZvcmVTZW5kKHhociwgbm9kZSwgdXJsKSB7XG4gKiAgICAgICAvLyAuLi5cbiAqICAgICB9XG4gKiAgICAgb25TdWNjZXNzKGNzc1RleHQsIG5vZGUsIHVybCkge1xuICogICAgICAgLy8gLi4uXG4gKiAgICAgfVxuICogICAgIG9uRXJyb3IoeGhyLCBub2RlLCB1cmwpIHtcbiAqICAgICAgIC8vIC4uLlxuICogICAgIH0sXG4gKiAgICAgb25Db21wbGV0ZShjc3NUZXh0LCBjc3NBcnJheSwgbm9kZUFycmF5KSB7XG4gKiAgICAgICAvLyAuLi5cbiAqICAgICB9XG4gKiAgIH0pO1xuICovIGZ1bmN0aW9uIGdldENzc0RhdGEob3B0aW9ucykge1xuICAgIHZhciByZWdleCA9IHtcbiAgICAgICAgY3NzQ29tbWVudHM6IC9cXC9cXCpbXFxzXFxTXSs/XFwqXFwvL2csXG4gICAgICAgIGNzc0ltcG9ydHM6IC8oPzpAaW1wb3J0XFxzKikoPzp1cmxcXChcXHMqKT8oPzpbJ1wiXSkoW14nXCJdKikoPzpbJ1wiXSkoPzpcXHMqXFwpKT8oPzpbXjtdKjspL2dcbiAgICB9O1xuICAgIHZhciBzZXR0aW5ncyA9IHtcbiAgICAgICAgcm9vdEVsZW1lbnQ6IG9wdGlvbnMucm9vdEVsZW1lbnQgfHwgZG9jdW1lbnQsXG4gICAgICAgIGluY2x1ZGU6IG9wdGlvbnMuaW5jbHVkZSB8fCAnc3R5bGUsbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdJyxcbiAgICAgICAgZXhjbHVkZTogb3B0aW9ucy5leGNsdWRlIHx8IG51bGwsXG4gICAgICAgIGZpbHRlcjogb3B0aW9ucy5maWx0ZXIgfHwgbnVsbCxcbiAgICAgICAgc2tpcERpc2FibGVkOiBvcHRpb25zLnNraXBEaXNhYmxlZCAhPT0gZmFsc2UsXG4gICAgICAgIHVzZUNTU09NOiBvcHRpb25zLnVzZUNTU09NIHx8IGZhbHNlLFxuICAgICAgICBvbkJlZm9yZVNlbmQ6IG9wdGlvbnMub25CZWZvcmVTZW5kIHx8IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb25TdWNjZXNzOiBvcHRpb25zLm9uU3VjY2VzcyB8fCBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9uRXJyb3I6IG9wdGlvbnMub25FcnJvciB8fCBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9uQ29tcGxldGU6IG9wdGlvbnMub25Db21wbGV0ZSB8fCBGdW5jdGlvbi5wcm90b3R5cGVcbiAgICB9O1xuICAgIHZhciBzb3VyY2VOb2RlcyA9IEFycmF5LmFwcGx5KG51bGwsIHNldHRpbmdzLnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2V0dGluZ3MuaW5jbHVkZSkpLmZpbHRlcigoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICByZXR1cm4gIW1hdGNoZXNTZWxlY3Rvcihub2RlLCBzZXR0aW5ncy5leGNsdWRlKTtcbiAgICB9KSk7XG4gICAgdmFyIGNzc0FycmF5ID0gQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkoc291cmNlTm9kZXMubGVuZ3RoKSkubWFwKChmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0pKTtcbiAgICBmdW5jdGlvbiBoYW5kbGVDb21wbGV0ZSgpIHtcbiAgICAgICAgdmFyIGlzQ29tcGxldGUgPSBjc3NBcnJheS5pbmRleE9mKG51bGwpID09PSAtMTtcbiAgICAgICAgaWYgKGlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgIGNzc0FycmF5LnJlZHVjZSgoZnVuY3Rpb24oc2tpcEluZGljZXMsIHZhbHVlLCBpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHNraXBJbmRpY2VzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBza2lwSW5kaWNlcztcbiAgICAgICAgICAgIH0pLCBbXSkucmV2ZXJzZSgpLmZvckVhY2goKGZ1bmN0aW9uKHNraXBJbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbIHNvdXJjZU5vZGVzLCBjc3NBcnJheSBdLmZvckVhY2goKGZ1bmN0aW9uKGFycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyLnNwbGljZShza2lwSW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHZhciBjc3NUZXh0ID0gY3NzQXJyYXkuam9pbihcIlwiKTtcbiAgICAgICAgICAgIHNldHRpbmdzLm9uQ29tcGxldGUoY3NzVGV4dCwgY3NzQXJyYXksIHNvdXJjZU5vZGVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVTdWNjZXNzKGNzc1RleHQsIGNzc0luZGV4LCBub2RlLCBzb3VyY2VVcmwpIHtcbiAgICAgICAgdmFyIHJldHVyblZhbCA9IHNldHRpbmdzLm9uU3VjY2Vzcyhjc3NUZXh0LCBub2RlLCBzb3VyY2VVcmwpO1xuICAgICAgICBjc3NUZXh0ID0gcmV0dXJuVmFsICE9PSB1bmRlZmluZWQgJiYgQm9vbGVhbihyZXR1cm5WYWwpID09PSBmYWxzZSA/IFwiXCIgOiByZXR1cm5WYWwgfHwgY3NzVGV4dDtcbiAgICAgICAgcmVzb2x2ZUltcG9ydHMoY3NzVGV4dCwgbm9kZSwgc291cmNlVXJsLCAoZnVuY3Rpb24ocmVzb2x2ZWRDc3NUZXh0LCBlcnJvckRhdGEpIHtcbiAgICAgICAgICAgIGlmIChjc3NBcnJheVtjc3NJbmRleF0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlcnJvckRhdGEuZm9yRWFjaCgoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0dGluZ3Mub25FcnJvcihkYXRhLnhociwgbm9kZSwgZGF0YS51cmwpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNldHRpbmdzLmZpbHRlciB8fCBzZXR0aW5ncy5maWx0ZXIudGVzdChyZXNvbHZlZENzc1RleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNzc0FycmF5W2Nzc0luZGV4XSA9IHJlc29sdmVkQ3NzVGV4dDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjc3NBcnJheVtjc3NJbmRleF0gPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoYW5kbGVDb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlSW1wb3J0RGF0YShjc3NUZXh0LCBiYXNlVXJsKSB7XG4gICAgICAgIHZhciBpZ25vcmVSdWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107XG4gICAgICAgIHZhciBpbXBvcnREYXRhID0ge307XG4gICAgICAgIGltcG9ydERhdGEucnVsZXMgPSAoY3NzVGV4dC5yZXBsYWNlKHJlZ2V4LmNzc0NvbW1lbnRzLCBcIlwiKS5tYXRjaChyZWdleC5jc3NJbXBvcnRzKSB8fCBbXSkuZmlsdGVyKChmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWdub3JlUnVsZXMuaW5kZXhPZihydWxlKSA9PT0gLTE7XG4gICAgICAgIH0pKTtcbiAgICAgICAgaW1wb3J0RGF0YS51cmxzID0gaW1wb3J0RGF0YS5ydWxlcy5tYXAoKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBydWxlLnJlcGxhY2UocmVnZXguY3NzSW1wb3J0cywgXCIkMVwiKTtcbiAgICAgICAgfSkpO1xuICAgICAgICBpbXBvcnREYXRhLmFic29sdXRlVXJscyA9IGltcG9ydERhdGEudXJscy5tYXAoKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEZ1bGxVcmwodXJsLCBiYXNlVXJsKTtcbiAgICAgICAgfSkpO1xuICAgICAgICBpbXBvcnREYXRhLmFic29sdXRlUnVsZXMgPSBpbXBvcnREYXRhLnJ1bGVzLm1hcCgoZnVuY3Rpb24ocnVsZSwgaSkge1xuICAgICAgICAgICAgdmFyIG9sZFVybCA9IGltcG9ydERhdGEudXJsc1tpXTtcbiAgICAgICAgICAgIHZhciBuZXdVcmwgPSBnZXRGdWxsVXJsKGltcG9ydERhdGEuYWJzb2x1dGVVcmxzW2ldLCBiYXNlVXJsKTtcbiAgICAgICAgICAgIHJldHVybiBydWxlLnJlcGxhY2Uob2xkVXJsLCBuZXdVcmwpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBpbXBvcnREYXRhO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNvbHZlSW1wb3J0cyhjc3NUZXh0LCBub2RlLCBiYXNlVXJsLCBjYWxsYmFja0ZuKSB7XG4gICAgICAgIHZhciBfX2Vycm9yRGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogW107XG4gICAgICAgIHZhciBfX2Vycm9yUnVsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IFtdO1xuICAgICAgICB2YXIgaW1wb3J0RGF0YSA9IHBhcnNlSW1wb3J0RGF0YShjc3NUZXh0LCBiYXNlVXJsLCBfX2Vycm9yUnVsZXMpO1xuICAgICAgICBpZiAoaW1wb3J0RGF0YS5ydWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGdldFVybHMoaW1wb3J0RGF0YS5hYnNvbHV0ZVVybHMsIHtcbiAgICAgICAgICAgICAgICBvbkJlZm9yZVNlbmQ6IGZ1bmN0aW9uIG9uQmVmb3JlU2VuZCh4aHIsIHVybCwgdXJsSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25CZWZvcmVTZW5kKHhociwgbm9kZSwgdXJsKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uU3VjY2VzczogZnVuY3Rpb24gb25TdWNjZXNzKGNzc1RleHQsIHVybCwgdXJsSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyblZhbCA9IHNldHRpbmdzLm9uU3VjY2Vzcyhjc3NUZXh0LCBub2RlLCB1cmwpO1xuICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ID0gcmV0dXJuVmFsID09PSBmYWxzZSA/IFwiXCIgOiByZXR1cm5WYWwgfHwgY3NzVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlSW1wb3J0RGF0YSA9IHBhcnNlSW1wb3J0RGF0YShjc3NUZXh0LCB1cmwsIF9fZXJyb3JSdWxlcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSW1wb3J0RGF0YS5ydWxlcy5mb3JFYWNoKChmdW5jdGlvbihydWxlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ID0gY3NzVGV4dC5yZXBsYWNlKHJ1bGUsIHJlc3BvbnNlSW1wb3J0RGF0YS5hYnNvbHV0ZVJ1bGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3NzVGV4dDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoeGhyLCB1cmwsIHVybEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXJyb3JEYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgeGhyOiB4aHIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgX19lcnJvclJ1bGVzLnB1c2goaW1wb3J0RGF0YS5ydWxlc1t1cmxJbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlSW1wb3J0cyhjc3NUZXh0LCBub2RlLCBiYXNlVXJsLCBjYWxsYmFja0ZuLCBfX2Vycm9yRGF0YSwgX19lcnJvclJ1bGVzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUocmVzcG9uc2VBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZUFycmF5LmZvckVhY2goKGZ1bmN0aW9uKGltcG9ydFRleHQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSBjc3NUZXh0LnJlcGxhY2UoaW1wb3J0RGF0YS5ydWxlc1tpXSwgaW1wb3J0VGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUltcG9ydHMoY3NzVGV4dCwgbm9kZSwgYmFzZVVybCwgY2FsbGJhY2tGbiwgX19lcnJvckRhdGEsIF9fZXJyb3JSdWxlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFja0ZuKGNzc1RleHQsIF9fZXJyb3JEYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc291cmNlTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHNvdXJjZU5vZGVzLmZvckVhY2goKGZ1bmN0aW9uKG5vZGUsIGkpIHtcbiAgICAgICAgICAgIHZhciBsaW5rSHJlZiA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiAgICAgICAgICAgIHZhciBsaW5rUmVsID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIik7XG4gICAgICAgICAgICB2YXIgaXNMaW5rID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImxpbmtcIiAmJiBsaW5rSHJlZiAmJiBsaW5rUmVsICYmIGxpbmtSZWwudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwic3R5bGVzaGVldFwiKSAhPT0gLTE7XG4gICAgICAgICAgICB2YXIgaXNTa2lwID0gc2V0dGluZ3Muc2tpcERpc2FibGVkID09PSBmYWxzZSA/IGZhbHNlIDogbm9kZS5kaXNhYmxlZDtcbiAgICAgICAgICAgIHZhciBpc1N0eWxlID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInN0eWxlXCI7XG4gICAgICAgICAgICBpZiAoaXNMaW5rICYmICFpc1NraXApIHtcbiAgICAgICAgICAgICAgICBnZXRVcmxzKGxpbmtIcmVmLCB7XG4gICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOiBcInRleHQvY3NzXCIsXG4gICAgICAgICAgICAgICAgICAgIG9uQmVmb3JlU2VuZDogZnVuY3Rpb24gb25CZWZvcmVTZW5kKHhociwgdXJsLCB1cmxJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25CZWZvcmVTZW5kKHhociwgbm9kZSwgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzOiBmdW5jdGlvbiBvblN1Y2Nlc3MoY3NzVGV4dCwgdXJsLCB1cmxJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZVVybCA9IGdldEZ1bGxVcmwobGlua0hyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlU3VjY2Vzcyhjc3NUZXh0LCBpLCBub2RlLCBzb3VyY2VVcmwpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKHhociwgdXJsLCB1cmxJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzQXJyYXlbaV0gPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25FcnJvcih4aHIsIG5vZGUsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzU3R5bGUgJiYgIWlzU2tpcCkge1xuICAgICAgICAgICAgICAgIHZhciBjc3NUZXh0ID0gbm9kZS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MudXNlQ1NTT00pIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCA9IEFycmF5LmFwcGx5KG51bGwsIG5vZGUuc2hlZXQuY3NzUnVsZXMpLm1hcCgoZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGUuY3NzVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfSkpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhbmRsZVN1Y2Nlc3MoY3NzVGV4dCwgaSwgbm9kZSwgbG9jYXRpb24uaHJlZik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNzc0FycmF5W2ldID0gXCJcIjtcbiAgICAgICAgICAgICAgICBoYW5kbGVDb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2V0dGluZ3Mub25Db21wbGV0ZShcIlwiLCBbXSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRGdWxsVXJsKHVybCwgYmFzZSkge1xuICAgIHZhciBkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpO1xuICAgIHZhciBiID0gZC5jcmVhdGVFbGVtZW50KFwiYmFzZVwiKTtcbiAgICB2YXIgYSA9IGQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgZC5oZWFkLmFwcGVuZENoaWxkKGIpO1xuICAgIGQuYm9keS5hcHBlbmRDaGlsZChhKTtcbiAgICBiLmhyZWYgPSBiYXNlIHx8IGRvY3VtZW50LmJhc2VVUkkgfHwgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJiYXNlXCIpIHx8IHt9KS5ocmVmIHx8IGxvY2F0aW9uLmhyZWY7XG4gICAgYS5ocmVmID0gdXJsO1xuICAgIHJldHVybiBhLmhyZWY7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXNTZWxlY3RvcihlbG0sIHNlbGVjdG9yKSB7XG4gICAgdmFyIG1hdGNoZXMgPSBlbG0ubWF0Y2hlcyB8fCBlbG0ubWF0Y2hlc1NlbGVjdG9yIHx8IGVsbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZWxtLm1vek1hdGNoZXNTZWxlY3RvciB8fCBlbG0ubXNNYXRjaGVzU2VsZWN0b3IgfHwgZWxtLm9NYXRjaGVzU2VsZWN0b3I7XG4gICAgcmV0dXJuIG1hdGNoZXMuY2FsbChlbG0sIHNlbGVjdG9yKTtcbn1cblxudmFyIGJhbGFuY2VkTWF0Y2ggPSBiYWxhbmNlZDtcblxuZnVuY3Rpb24gYmFsYW5jZWQoYSwgYiwgc3RyKSB7XG4gICAgaWYgKGEgaW5zdGFuY2VvZiBSZWdFeHApIGEgPSBtYXliZU1hdGNoKGEsIHN0cik7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBSZWdFeHApIGIgPSBtYXliZU1hdGNoKGIsIHN0cik7XG4gICAgdmFyIHIgPSByYW5nZShhLCBiLCBzdHIpO1xuICAgIHJldHVybiByICYmIHtcbiAgICAgICAgc3RhcnQ6IHJbMF0sXG4gICAgICAgIGVuZDogclsxXSxcbiAgICAgICAgcHJlOiBzdHIuc2xpY2UoMCwgclswXSksXG4gICAgICAgIGJvZHk6IHN0ci5zbGljZShyWzBdICsgYS5sZW5ndGgsIHJbMV0pLFxuICAgICAgICBwb3N0OiBzdHIuc2xpY2UoclsxXSArIGIubGVuZ3RoKVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIG1heWJlTWF0Y2gocmVnLCBzdHIpIHtcbiAgICB2YXIgbSA9IHN0ci5tYXRjaChyZWcpO1xuICAgIHJldHVybiBtID8gbVswXSA6IG51bGw7XG59XG5cbmJhbGFuY2VkLnJhbmdlID0gcmFuZ2U7XG5cbmZ1bmN0aW9uIHJhbmdlKGEsIGIsIHN0cikge1xuICAgIHZhciBiZWdzLCBiZWcsIGxlZnQsIHJpZ2h0LCByZXN1bHQ7XG4gICAgdmFyIGFpID0gc3RyLmluZGV4T2YoYSk7XG4gICAgdmFyIGJpID0gc3RyLmluZGV4T2YoYiwgYWkgKyAxKTtcbiAgICB2YXIgaSA9IGFpO1xuICAgIGlmIChhaSA+PSAwICYmIGJpID4gMCkge1xuICAgICAgICBiZWdzID0gW107XG4gICAgICAgIGxlZnQgPSBzdHIubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaSA+PSAwICYmICFyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChpID09IGFpKSB7XG4gICAgICAgICAgICAgICAgYmVncy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIGFpID0gc3RyLmluZGV4T2YoYSwgaSArIDEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChiZWdzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gWyBiZWdzLnBvcCgpLCBiaSBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiZWcgPSBiZWdzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGlmIChiZWcgPCBsZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBiZWc7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gYmk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJpID0gc3RyLmluZGV4T2YoYiwgaSArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSA9IGFpIDwgYmkgJiYgYWkgPj0gMCA/IGFpIDogYmk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJlZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBbIGxlZnQsIHJpZ2h0IF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcGFyc2VDc3MoY3NzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgcHJlc2VydmVTdGF0aWM6IHRydWUsXG4gICAgICAgIHJlbW92ZUNvbW1lbnRzOiBmYWxzZVxuICAgIH07XG4gICAgdmFyIHNldHRpbmdzID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB2YXIgZXJyb3JzID0gW107XG4gICAgZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNTUyBwYXJzZSBlcnJvcjogXCIuY29uY2F0KG1zZykpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYXRjaChyZSkge1xuICAgICAgICB2YXIgbSA9IHJlLmV4ZWMoY3NzKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIGNzcyA9IGNzcy5zbGljZShtWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvcGVuKCkge1xuICAgICAgICByZXR1cm4gbWF0Y2goL157XFxzKi8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoKC9efS8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3aGl0ZXNwYWNlKCkge1xuICAgICAgICBtYXRjaCgvXlxccyovKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tbWVudCgpIHtcbiAgICAgICAgd2hpdGVzcGFjZSgpO1xuICAgICAgICBpZiAoY3NzWzBdICE9PSBcIi9cIiB8fCBjc3NbMV0gIT09IFwiKlwiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkgPSAyO1xuICAgICAgICB3aGlsZSAoY3NzW2ldICYmIChjc3NbaV0gIT09IFwiKlwiIHx8IGNzc1tpICsgMV0gIT09IFwiL1wiKSkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY3NzW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3IoXCJlbmQgb2YgY29tbWVudCBpcyBtaXNzaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHIgPSBjc3Muc2xpY2UoMiwgaSk7XG4gICAgICAgIGNzcyA9IGNzcy5zbGljZShpICsgMik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcImNvbW1lbnRcIixcbiAgICAgICAgICAgIGNvbW1lbnQ6IHN0clxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21tZW50cygpIHtcbiAgICAgICAgdmFyIGNtbnRzID0gW107XG4gICAgICAgIHZhciBjO1xuICAgICAgICB3aGlsZSAoYyA9IGNvbW1lbnQoKSkge1xuICAgICAgICAgICAgY21udHMucHVzaChjKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0dGluZ3MucmVtb3ZlQ29tbWVudHMgPyBbXSA6IGNtbnRzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZWxlY3RvcigpIHtcbiAgICAgICAgd2hpdGVzcGFjZSgpO1xuICAgICAgICB3aGlsZSAoY3NzWzBdID09PSBcIn1cIikge1xuICAgICAgICAgICAgZXJyb3IoXCJleHRyYSBjbG9zaW5nIGJyYWNrZXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG0gPSBtYXRjaCgvXigoXCIoPzpcXFxcXCJ8W15cIl0pKlwifCcoPzpcXFxcJ3xbXiddKSonfFtee10pKykvKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHJldHVybiBtWzBdLnRyaW0oKS5yZXBsYWNlKC9cXC9cXCooW14qXXxbXFxyXFxuXXwoXFwqKyhbXiovXXxbXFxyXFxuXSkpKSpcXCpcXC8rL2csIFwiXCIpLnJlcGxhY2UoL1wiKD86XFxcXFwifFteXCJdKSpcInwnKD86XFxcXCd8W14nXSkqJy9nLCAoZnVuY3Rpb24obSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtLnJlcGxhY2UoLywvZywgXCLigIxcIik7XG4gICAgICAgICAgICB9KSkuc3BsaXQoL1xccyooPyFbXihdKlxcKSksXFxzKi8pLm1hcCgoZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1xcdTIwMEMvZywgXCIsXCIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY2xhcmF0aW9uKCkge1xuICAgICAgICBpZiAoY3NzWzBdID09PSBcIkBcIikge1xuICAgICAgICAgICAgcmV0dXJuIGF0X3J1bGUoKTtcbiAgICAgICAgfVxuICAgICAgICBtYXRjaCgvXihbO1xcc10qKSsvKTtcbiAgICAgICAgdmFyIGNvbW1lbnRfcmVnZXhwID0gL1xcL1xcKlteKl0qXFwqKyhbXi8qXVteKl0qXFwqKykqXFwvL2c7XG4gICAgICAgIHZhciBwcm9wID0gbWF0Y2goL14oXFwqP1stIy8qXFxcXFxcd10rKFxcW1swLTlhLXpfLV0rXFxdKT8pXFxzKi8pO1xuICAgICAgICBpZiAoIXByb3ApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwcm9wID0gcHJvcFswXS50cmltKCk7XG4gICAgICAgIGlmICghbWF0Y2goL146XFxzKi8pKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3IoXCJwcm9wZXJ0eSBtaXNzaW5nICc6J1wiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsID0gbWF0Y2goL14oKD86XFwvXFwqLio/XFwqXFwvfCcoPzpcXFxcJ3wuKSo/J3xcIig/OlxcXFxcInwuKSo/XCJ8XFwoKFxccyonKD86XFxcXCd8LikqPyd8XCIoPzpcXFxcXCJ8LikqP1wifFteKV0qPylcXHMqXFwpfFtefTtdKSspLyk7XG4gICAgICAgIHZhciByZXQgPSB7XG4gICAgICAgICAgICB0eXBlOiBcImRlY2xhcmF0aW9uXCIsXG4gICAgICAgICAgICBwcm9wZXJ0eTogcHJvcC5yZXBsYWNlKGNvbW1lbnRfcmVnZXhwLCBcIlwiKSxcbiAgICAgICAgICAgIHZhbHVlOiB2YWwgPyB2YWxbMF0ucmVwbGFjZShjb21tZW50X3JlZ2V4cCwgXCJcIikudHJpbSgpIDogXCJcIlxuICAgICAgICB9O1xuICAgICAgICBtYXRjaCgvXls7XFxzXSovKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVjbGFyYXRpb25zKCkge1xuICAgICAgICBpZiAoIW9wZW4oKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yKFwibWlzc2luZyAneydcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGQ7XG4gICAgICAgIHZhciBkZWNscyA9IGNvbW1lbnRzKCk7XG4gICAgICAgIHdoaWxlIChkID0gZGVjbGFyYXRpb24oKSkge1xuICAgICAgICAgICAgZGVjbHMucHVzaChkKTtcbiAgICAgICAgICAgIGRlY2xzID0gZGVjbHMuY29uY2F0KGNvbW1lbnRzKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2xvc2UoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yKFwibWlzc2luZyAnfSdcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlY2xzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBrZXlmcmFtZSgpIHtcbiAgICAgICAgd2hpdGVzcGFjZSgpO1xuICAgICAgICB2YXIgdmFscyA9IFtdO1xuICAgICAgICB2YXIgbTtcbiAgICAgICAgd2hpbGUgKG0gPSBtYXRjaCgvXigoXFxkK1xcLlxcZCt8XFwuXFxkK3xcXGQrKSU/fFthLXpdKylcXHMqLykpIHtcbiAgICAgICAgICAgIHZhbHMucHVzaChtWzFdKTtcbiAgICAgICAgICAgIG1hdGNoKC9eLFxccyovKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJrZXlmcmFtZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlczogdmFscyxcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IGRlY2xhcmF0aW9ucygpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0X2tleWZyYW1lcygpIHtcbiAgICAgICAgdmFyIG0gPSBtYXRjaCgvXkAoWy1cXHddKyk/a2V5ZnJhbWVzXFxzKi8pO1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmVuZG9yID0gbVsxXTtcbiAgICAgICAgbSA9IG1hdGNoKC9eKFstXFx3XSspXFxzKi8pO1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcihcIkBrZXlmcmFtZXMgbWlzc2luZyBuYW1lXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuYW1lID0gbVsxXTtcbiAgICAgICAgaWYgKCFvcGVuKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcihcIkBrZXlmcmFtZXMgbWlzc2luZyAneydcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZyYW1lO1xuICAgICAgICB2YXIgZnJhbWVzID0gY29tbWVudHMoKTtcbiAgICAgICAgd2hpbGUgKGZyYW1lID0ga2V5ZnJhbWUoKSkge1xuICAgICAgICAgICAgZnJhbWVzLnB1c2goZnJhbWUpO1xuICAgICAgICAgICAgZnJhbWVzID0gZnJhbWVzLmNvbmNhdChjb21tZW50cygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNsb3NlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcihcIkBrZXlmcmFtZXMgbWlzc2luZyAnfSdcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFwia2V5ZnJhbWVzXCIsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdmVuZG9yOiB2ZW5kb3IsXG4gICAgICAgICAgICBrZXlmcmFtZXM6IGZyYW1lc1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdF9wYWdlKCkge1xuICAgICAgICB2YXIgbSA9IG1hdGNoKC9eQHBhZ2UgKi8pO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgdmFyIHNlbCA9IHNlbGVjdG9yKCkgfHwgW107XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicGFnZVwiLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yczogc2VsLFxuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogZGVjbGFyYXRpb25zKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXRfcGFnZV9tYXJnaW5fYm94KCkge1xuICAgICAgICB2YXIgbSA9IG1hdGNoKC9AKHRvcHxib3R0b218bGVmdHxyaWdodCktKGxlZnR8Y2VudGVyfHJpZ2h0fHRvcHxtaWRkbGV8Ym90dG9tKS0/KGNvcm5lcik/XFxzKi8pO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBcIlwiLmNvbmNhdChtWzFdLCBcIi1cIikuY29uY2F0KG1bMl0pICsgKG1bM10gPyBcIi1cIi5jb25jYXQobVszXSkgOiBcIlwiKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJwYWdlLW1hcmdpbi1ib3hcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogZGVjbGFyYXRpb25zKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXRfZm9udGZhY2UoKSB7XG4gICAgICAgIHZhciBtID0gbWF0Y2goL15AZm9udC1mYWNlXFxzKi8pO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImZvbnQtZmFjZVwiLFxuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogZGVjbGFyYXRpb25zKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXRfc3VwcG9ydHMoKSB7XG4gICAgICAgIHZhciBtID0gbWF0Y2goL15Ac3VwcG9ydHMgKihbXntdKykvKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdXBwb3J0c1wiLFxuICAgICAgICAgICAgICAgIHN1cHBvcnRzOiBtWzFdLnRyaW0oKSxcbiAgICAgICAgICAgICAgICBydWxlczogcnVsZXMoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhdF9ob3N0KCkge1xuICAgICAgICB2YXIgbSA9IG1hdGNoKC9eQGhvc3RcXHMqLyk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiaG9zdFwiLFxuICAgICAgICAgICAgICAgIHJ1bGVzOiBydWxlcygpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0X21lZGlhKCkge1xuICAgICAgICB2YXIgbSA9IG1hdGNoKC9eQG1lZGlhKFtee10rKSovKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJtZWRpYVwiLFxuICAgICAgICAgICAgICAgIG1lZGlhOiAobVsxXSB8fCBcIlwiKS50cmltKCksXG4gICAgICAgICAgICAgICAgcnVsZXM6IHJ1bGVzKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXRfY3VzdG9tX20oKSB7XG4gICAgICAgIHZhciBtID0gbWF0Y2goL15AY3VzdG9tLW1lZGlhXFxzKygtLVteXFxzXSspXFxzKihbXns7XSspOy8pO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImN1c3RvbS1tZWRpYVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IG1bMV0udHJpbSgpLFxuICAgICAgICAgICAgICAgIG1lZGlhOiBtWzJdLnRyaW0oKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhdF9kb2N1bWVudCgpIHtcbiAgICAgICAgdmFyIG0gPSBtYXRjaCgvXkAoWy1cXHddKyk/ZG9jdW1lbnQgKihbXntdKykvKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJkb2N1bWVudFwiLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50OiBtWzJdLnRyaW0oKSxcbiAgICAgICAgICAgICAgICB2ZW5kb3I6IG1bMV0gPyBtWzFdLnRyaW0oKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgcnVsZXM6IHJ1bGVzKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXRfeCgpIHtcbiAgICAgICAgdmFyIG0gPSBtYXRjaCgvXkAoaW1wb3J0fGNoYXJzZXR8bmFtZXNwYWNlKVxccyooW147XSspOy8pO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBtWzFdLFxuICAgICAgICAgICAgICAgIG5hbWU6IG1bMl0udHJpbSgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0X3J1bGUoKSB7XG4gICAgICAgIHdoaXRlc3BhY2UoKTtcbiAgICAgICAgaWYgKGNzc1swXSA9PT0gXCJAXCIpIHtcbiAgICAgICAgICAgIHZhciByZXQgPSBhdF94KCkgfHwgYXRfZm9udGZhY2UoKSB8fCBhdF9tZWRpYSgpIHx8IGF0X2tleWZyYW1lcygpIHx8IGF0X3N1cHBvcnRzKCkgfHwgYXRfZG9jdW1lbnQoKSB8fCBhdF9jdXN0b21fbSgpIHx8IGF0X2hvc3QoKSB8fCBhdF9wYWdlKCkgfHwgYXRfcGFnZV9tYXJnaW5fYm94KCk7XG4gICAgICAgICAgICBpZiAocmV0ICYmICFzZXR0aW5ncy5wcmVzZXJ2ZVN0YXRpYykge1xuICAgICAgICAgICAgICAgIHZhciBoYXNWYXJGdW5jID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHJldC5kZWNsYXJhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzVmFyRnVuYyA9IHJldC5kZWNsYXJhdGlvbnMuc29tZSgoZnVuY3Rpb24oZGVjbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC92YXJcXCgvLnRlc3QoZGVjbC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyID0gcmV0LmtleWZyYW1lcyB8fCByZXQucnVsZXMgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIGhhc1ZhckZ1bmMgPSBhcnIuc29tZSgoZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG9iai5kZWNsYXJhdGlvbnMgfHwgW10pLnNvbWUoKGZ1bmN0aW9uKGRlY2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gL3ZhclxcKC8udGVzdChkZWNsLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzVmFyRnVuYyA/IHJldCA6IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBydWxlKCkge1xuICAgICAgICBpZiAoIXNldHRpbmdzLnByZXNlcnZlU3RhdGljKSB7XG4gICAgICAgICAgICB2YXIgYmFsYW5jZWRNYXRjaCQxID0gYmFsYW5jZWRNYXRjaChcIntcIiwgXCJ9XCIsIGNzcyk7XG4gICAgICAgICAgICBpZiAoYmFsYW5jZWRNYXRjaCQxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhc1ZhckRlY2wgPSAvOig/OnJvb3R8aG9zdCkoPyFbLjojKF0pLy50ZXN0KGJhbGFuY2VkTWF0Y2gkMS5wcmUpICYmIC8tLVxcUypcXHMqOi8udGVzdChiYWxhbmNlZE1hdGNoJDEuYm9keSk7XG4gICAgICAgICAgICAgICAgdmFyIGhhc1ZhckZ1bmMgPSAvdmFyXFwoLy50ZXN0KGJhbGFuY2VkTWF0Y2gkMS5ib2R5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1ZhckRlY2wgJiYgIWhhc1ZhckZ1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzID0gY3NzLnNsaWNlKGJhbGFuY2VkTWF0Y2gkMS5lbmQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsID0gc2VsZWN0b3IoKSB8fCBbXTtcbiAgICAgICAgdmFyIGRlY2xzID0gc2V0dGluZ3MucHJlc2VydmVTdGF0aWMgPyBkZWNsYXJhdGlvbnMoKSA6IGRlY2xhcmF0aW9ucygpLmZpbHRlcigoZnVuY3Rpb24oZGVjbCkge1xuICAgICAgICAgICAgdmFyIGhhc1ZhckRlY2wgPSBzZWwuc29tZSgoZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgICAgIHJldHVybiAvOig/OnJvb3R8aG9zdCkoPyFbLjojKF0pLy50ZXN0KHMpO1xuICAgICAgICAgICAgfSkpICYmIC9eLS1cXFMvLnRlc3QoZGVjbC5wcm9wZXJ0eSk7XG4gICAgICAgICAgICB2YXIgaGFzVmFyRnVuYyA9IC92YXJcXCgvLnRlc3QoZGVjbC52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gaGFzVmFyRGVjbCB8fCBoYXNWYXJGdW5jO1xuICAgICAgICB9KSk7XG4gICAgICAgIGlmICghc2VsLmxlbmd0aCkge1xuICAgICAgICAgICAgZXJyb3IoXCJzZWxlY3RvciBtaXNzaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcInJ1bGVcIixcbiAgICAgICAgICAgIHNlbGVjdG9yczogc2VsLFxuICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBkZWNsc1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBydWxlcyhjb3JlKSB7XG4gICAgICAgIGlmICghY29yZSAmJiAhb3BlbigpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3IoXCJtaXNzaW5nICd7J1wiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9kZTtcbiAgICAgICAgdmFyIHJ1bGVzID0gY29tbWVudHMoKTtcbiAgICAgICAgd2hpbGUgKGNzcy5sZW5ndGggJiYgKGNvcmUgfHwgY3NzWzBdICE9PSBcIn1cIikgJiYgKG5vZGUgPSBhdF9ydWxlKCkgfHwgcnVsZSgpKSkge1xuICAgICAgICAgICAgaWYgKG5vZGUudHlwZSkge1xuICAgICAgICAgICAgICAgIHJ1bGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydWxlcyA9IHJ1bGVzLmNvbmNhdChjb21tZW50cygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvcmUgJiYgIWNsb3NlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcihcIm1pc3NpbmcgJ30nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJzdHlsZXNoZWV0XCIsXG4gICAgICAgIHN0eWxlc2hlZXQ6IHtcbiAgICAgICAgICAgIHJ1bGVzOiBydWxlcyh0cnVlKSxcbiAgICAgICAgICAgIGVycm9yczogZXJyb3JzXG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVZhcnMoY3NzRGF0YSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgIHBhcnNlSG9zdDogZmFsc2UsXG4gICAgICAgIHN0b3JlOiB7fSxcbiAgICAgICAgb25XYXJuaW5nOiBmdW5jdGlvbiBvbldhcm5pbmcoKSB7fVxuICAgIH07XG4gICAgdmFyIHNldHRpbmdzID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB2YXIgcmVWYXJEZWNsU2VsZWN0b3JzID0gbmV3IFJlZ0V4cChcIjpcIi5jb25jYXQoc2V0dGluZ3MucGFyc2VIb3N0ID8gXCJob3N0XCIgOiBcInJvb3RcIiwgXCIkXCIpKTtcbiAgICBpZiAodHlwZW9mIGNzc0RhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY3NzRGF0YSA9IHBhcnNlQ3NzKGNzc0RhdGEsIHNldHRpbmdzKTtcbiAgICB9XG4gICAgY3NzRGF0YS5zdHlsZXNoZWV0LnJ1bGVzLmZvckVhY2goKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgaWYgKHJ1bGUudHlwZSAhPT0gXCJydWxlXCIgfHwgIXJ1bGUuc2VsZWN0b3JzLnNvbWUoKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgIHJldHVybiByZVZhckRlY2xTZWxlY3RvcnMudGVzdChzKTtcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcnVsZS5kZWNsYXJhdGlvbnMuZm9yRWFjaCgoZnVuY3Rpb24oZGVjbCwgaSkge1xuICAgICAgICAgICAgdmFyIHByb3AgPSBkZWNsLnByb3BlcnR5O1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gZGVjbC52YWx1ZTtcbiAgICAgICAgICAgIGlmIChwcm9wICYmIHByb3AuaW5kZXhPZihcIi0tXCIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3Muc3RvcmVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbiAgICByZXR1cm4gc2V0dGluZ3Muc3RvcmU7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNzcyh0cmVlKSB7XG4gICAgdmFyIGRlbGltID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBcIlwiO1xuICAgIHZhciBjYiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICAgIHZhciByZW5kZXJNZXRob2RzID0ge1xuICAgICAgICBjaGFyc2V0OiBmdW5jdGlvbiBjaGFyc2V0KG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkBjaGFyc2V0IFwiICsgbm9kZS5uYW1lICsgXCI7XCI7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbW1lbnQ6IGZ1bmN0aW9uIGNvbW1lbnQobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuY29tbWVudC5pbmRleE9mKFwiX19DU1NWQVJTUE9OWUZJTExcIikgPT09IDAgPyBcIi8qXCIgKyBub2RlLmNvbW1lbnQgKyBcIiovXCIgOiBcIlwiO1xuICAgICAgICB9LFxuICAgICAgICBcImN1c3RvbS1tZWRpYVwiOiBmdW5jdGlvbiBjdXN0b21NZWRpYShub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJAY3VzdG9tLW1lZGlhIFwiICsgbm9kZS5uYW1lICsgXCIgXCIgKyBub2RlLm1lZGlhICsgXCI7XCI7XG4gICAgICAgIH0sXG4gICAgICAgIGRlY2xhcmF0aW9uOiBmdW5jdGlvbiBkZWNsYXJhdGlvbihub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5wcm9wZXJ0eSArIFwiOlwiICsgbm9kZS52YWx1ZSArIFwiO1wiO1xuICAgICAgICB9LFxuICAgICAgICBkb2N1bWVudDogZnVuY3Rpb24gZG9jdW1lbnQobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiQFwiICsgKG5vZGUudmVuZG9yIHx8IFwiXCIpICsgXCJkb2N1bWVudCBcIiArIG5vZGUuZG9jdW1lbnQgKyBcIntcIiArIHZpc2l0KG5vZGUucnVsZXMpICsgXCJ9XCI7XG4gICAgICAgIH0sXG4gICAgICAgIFwiZm9udC1mYWNlXCI6IGZ1bmN0aW9uIGZvbnRGYWNlKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkBmb250LWZhY2VcIiArIFwie1wiICsgdmlzaXQobm9kZS5kZWNsYXJhdGlvbnMpICsgXCJ9XCI7XG4gICAgICAgIH0sXG4gICAgICAgIGhvc3Q6IGZ1bmN0aW9uIGhvc3Qobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiQGhvc3RcIiArIFwie1wiICsgdmlzaXQobm9kZS5ydWxlcykgKyBcIn1cIjtcbiAgICAgICAgfSxcbiAgICAgICAgaW1wb3J0OiBmdW5jdGlvbiBfaW1wb3J0KG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkBpbXBvcnQgXCIgKyBub2RlLm5hbWUgKyBcIjtcIjtcbiAgICAgICAgfSxcbiAgICAgICAga2V5ZnJhbWU6IGZ1bmN0aW9uIGtleWZyYW1lKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnZhbHVlcy5qb2luKFwiLFwiKSArIFwie1wiICsgdmlzaXQobm9kZS5kZWNsYXJhdGlvbnMpICsgXCJ9XCI7XG4gICAgICAgIH0sXG4gICAgICAgIGtleWZyYW1lczogZnVuY3Rpb24ga2V5ZnJhbWVzKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkBcIiArIChub2RlLnZlbmRvciB8fCBcIlwiKSArIFwia2V5ZnJhbWVzIFwiICsgbm9kZS5uYW1lICsgXCJ7XCIgKyB2aXNpdChub2RlLmtleWZyYW1lcykgKyBcIn1cIjtcbiAgICAgICAgfSxcbiAgICAgICAgbWVkaWE6IGZ1bmN0aW9uIG1lZGlhKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkBtZWRpYSBcIiArIG5vZGUubWVkaWEgKyBcIntcIiArIHZpc2l0KG5vZGUucnVsZXMpICsgXCJ9XCI7XG4gICAgICAgIH0sXG4gICAgICAgIG5hbWVzcGFjZTogZnVuY3Rpb24gbmFtZXNwYWNlKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkBuYW1lc3BhY2UgXCIgKyBub2RlLm5hbWUgKyBcIjtcIjtcbiAgICAgICAgfSxcbiAgICAgICAgcGFnZTogZnVuY3Rpb24gcGFnZShub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJAcGFnZSBcIiArIChub2RlLnNlbGVjdG9ycy5sZW5ndGggPyBub2RlLnNlbGVjdG9ycy5qb2luKFwiLCBcIikgOiBcIlwiKSArIFwie1wiICsgdmlzaXQobm9kZS5kZWNsYXJhdGlvbnMpICsgXCJ9XCI7XG4gICAgICAgIH0sXG4gICAgICAgIFwicGFnZS1tYXJnaW4tYm94XCI6IGZ1bmN0aW9uIHBhZ2VNYXJnaW5Cb3gobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiQFwiICsgbm9kZS5uYW1lICsgXCJ7XCIgKyB2aXNpdChub2RlLmRlY2xhcmF0aW9ucykgKyBcIn1cIjtcbiAgICAgICAgfSxcbiAgICAgICAgcnVsZTogZnVuY3Rpb24gcnVsZShub2RlKSB7XG4gICAgICAgICAgICB2YXIgZGVjbHMgPSBub2RlLmRlY2xhcmF0aW9ucztcbiAgICAgICAgICAgIGlmIChkZWNscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5zZWxlY3RvcnMuam9pbihcIixcIikgKyBcIntcIiArIHZpc2l0KGRlY2xzKSArIFwifVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdXBwb3J0czogZnVuY3Rpb24gc3VwcG9ydHMobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiQHN1cHBvcnRzIFwiICsgbm9kZS5zdXBwb3J0cyArIFwie1wiICsgdmlzaXQobm9kZS5ydWxlcykgKyBcIn1cIjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gdmlzaXQobm9kZXMpIHtcbiAgICAgICAgdmFyIGJ1ZiA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBuID0gbm9kZXNbaV07XG4gICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgICBjYihuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0eHQgPSByZW5kZXJNZXRob2RzW24udHlwZV0obik7XG4gICAgICAgICAgICBpZiAodHh0KSB7XG4gICAgICAgICAgICAgICAgYnVmICs9IHR4dDtcbiAgICAgICAgICAgICAgICBpZiAodHh0Lmxlbmd0aCAmJiBuLnNlbGVjdG9ycykge1xuICAgICAgICAgICAgICAgICAgICBidWYgKz0gZGVsaW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIHJldHVybiB2aXNpdCh0cmVlLnN0eWxlc2hlZXQucnVsZXMpO1xufVxuXG5mdW5jdGlvbiB3YWxrQ3NzKG5vZGUsIGZuKSB7XG4gICAgbm9kZS5ydWxlcy5mb3JFYWNoKChmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIGlmIChydWxlLnJ1bGVzKSB7XG4gICAgICAgICAgICB3YWxrQ3NzKHJ1bGUsIGZuKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocnVsZS5rZXlmcmFtZXMpIHtcbiAgICAgICAgICAgIHJ1bGUua2V5ZnJhbWVzLmZvckVhY2goKGZ1bmN0aW9uKGtleWZyYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleWZyYW1lLnR5cGUgPT09IFwia2V5ZnJhbWVcIikge1xuICAgICAgICAgICAgICAgICAgICBmbihrZXlmcmFtZS5kZWNsYXJhdGlvbnMsIHJ1bGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJ1bGUuZGVjbGFyYXRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm4ocnVsZS5kZWNsYXJhdGlvbnMsIG5vZGUpO1xuICAgIH0pKTtcbn1cblxudmFyIFZBUl9QUk9QX0lERU5USUZJRVIgPSBcIi0tXCI7XG5cbnZhciBWQVJfRlVOQ19JREVOVElGSUVSID0gXCJ2YXJcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtQ3NzKGNzc0RhdGEpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICBwcmVzZXJ2ZVN0YXRpYzogdHJ1ZSxcbiAgICAgICAgcHJlc2VydmVWYXJzOiBmYWxzZSxcbiAgICAgICAgdmFyaWFibGVzOiB7fSxcbiAgICAgICAgb25XYXJuaW5nOiBmdW5jdGlvbiBvbldhcm5pbmcoKSB7fVxuICAgIH07XG4gICAgdmFyIHNldHRpbmdzID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICBpZiAodHlwZW9mIGNzc0RhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY3NzRGF0YSA9IHBhcnNlQ3NzKGNzc0RhdGEsIHNldHRpbmdzKTtcbiAgICB9XG4gICAgd2Fsa0Nzcyhjc3NEYXRhLnN0eWxlc2hlZXQsIChmdW5jdGlvbihkZWNsYXJhdGlvbnMsIG5vZGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWNsYXJhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBkZWNsID0gZGVjbGFyYXRpb25zW2ldO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBkZWNsLnR5cGU7XG4gICAgICAgICAgICB2YXIgcHJvcCA9IGRlY2wucHJvcGVydHk7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBkZWNsLnZhbHVlO1xuICAgICAgICAgICAgaWYgKHR5cGUgIT09IFwiZGVjbGFyYXRpb25cIikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzZXR0aW5ncy5wcmVzZXJ2ZVZhcnMgJiYgcHJvcCAmJiBwcm9wLmluZGV4T2YoVkFSX1BST1BfSURFTlRJRklFUikgPT09IDApIHtcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKFZBUl9GVU5DX0lERU5USUZJRVIgKyBcIihcIikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc29sdmVkVmFsdWUgPSByZXNvbHZlVmFsdWUodmFsdWUsIHNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWRWYWx1ZSAhPT0gZGVjbC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZFZhbHVlID0gZml4TmVzdGVkQ2FsYyhyZXNvbHZlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXR0aW5ncy5wcmVzZXJ2ZVZhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2wudmFsdWUgPSByZXNvbHZlZFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zLnNwbGljZShpLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eTogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzb2x2ZWRWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KSk7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUNzcyhjc3NEYXRhKTtcbn1cblxuZnVuY3Rpb24gZml4TmVzdGVkQ2FsYyh2YWx1ZSkge1xuICAgIHZhciByZUNhbGNWYWwgPSAvY2FsY1xcKChbXildKylcXCkvZztcbiAgICAodmFsdWUubWF0Y2gocmVDYWxjVmFsKSB8fCBbXSkuZm9yRWFjaCgoZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgICAgdmFyIG5ld1ZhbCA9IFwiY2FsY1wiLmNvbmNhdChtYXRjaC5zcGxpdChcImNhbGNcIikuam9pbihcIlwiKSk7XG4gICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShtYXRjaCwgbmV3VmFsKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2V0dGluZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBfX3JlY3Vyc2l2ZUZhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKHZhbHVlLmluZGV4T2YoXCJ2YXIoXCIpID09PSAtMSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHZhciB2YWx1ZURhdGEgPSBiYWxhbmNlZE1hdGNoKFwiKFwiLCBcIilcIiwgdmFsdWUpO1xuICAgIGZ1bmN0aW9uIHJlc29sdmVGdW5jKHZhbHVlKSB7XG4gICAgICAgIHZhciBuYW1lID0gdmFsdWUuc3BsaXQoXCIsXCIpWzBdLnJlcGxhY2UoL1tcXHNcXG5cXHRdL2csIFwiXCIpO1xuICAgICAgICB2YXIgZmFsbGJhY2sgPSAodmFsdWUubWF0Y2goLyg/OlxccyosXFxzKil7MX0oLiopPy8pIHx8IFtdKVsxXTtcbiAgICAgICAgdmFyIG1hdGNoID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNldHRpbmdzLnZhcmlhYmxlcywgbmFtZSkgPyBTdHJpbmcoc2V0dGluZ3MudmFyaWFibGVzW25hbWVdKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gbWF0Y2ggfHwgKGZhbGxiYWNrID8gU3RyaW5nKGZhbGxiYWNrKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHZhciB1bnJlc29sdmVkRmFsbGJhY2sgPSBfX3JlY3Vyc2l2ZUZhbGxiYWNrIHx8IHZhbHVlO1xuICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5vbldhcm5pbmcoJ3ZhcmlhYmxlIFwiJy5jb25jYXQobmFtZSwgJ1wiIGlzIHVuZGVmaW5lZCcpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwbGFjZW1lbnQgJiYgcmVwbGFjZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVwbGFjZW1lbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVWYWx1ZShyZXBsYWNlbWVudCwgc2V0dGluZ3MsIHVucmVzb2x2ZWRGYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ2YXIoXCIuY29uY2F0KHVucmVzb2x2ZWRGYWxsYmFjaywgXCIpXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghdmFsdWVEYXRhKSB7XG4gICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKFwidmFyKFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHNldHRpbmdzLm9uV2FybmluZygnbWlzc2luZyBjbG9zaW5nIFwiKVwiIGluIHRoZSB2YWx1ZSBcIicuY29uY2F0KHZhbHVlLCAnXCInKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gZWxzZSBpZiAodmFsdWVEYXRhLnByZS5zbGljZSgtMykgPT09IFwidmFyXCIpIHtcbiAgICAgICAgdmFyIGlzRW1wdHlWYXJGdW5jID0gdmFsdWVEYXRhLmJvZHkudHJpbSgpLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgaWYgKGlzRW1wdHlWYXJGdW5jKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5vbldhcm5pbmcoXCJ2YXIoKSBtdXN0IGNvbnRhaW4gYSBub24td2hpdGVzcGFjZSBzdHJpbmdcIik7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVEYXRhLnByZS5zbGljZSgwLCAtMykgKyByZXNvbHZlRnVuYyh2YWx1ZURhdGEuYm9keSkgKyByZXNvbHZlVmFsdWUodmFsdWVEYXRhLnBvc3QsIHNldHRpbmdzKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZURhdGEucHJlICsgXCIoXCIuY29uY2F0KHJlc29sdmVWYWx1ZSh2YWx1ZURhdGEuYm9keSwgc2V0dGluZ3MpLCBcIilcIikgKyByZXNvbHZlVmFsdWUodmFsdWVEYXRhLnBvc3QsIHNldHRpbmdzKTtcbiAgICB9XG59XG5cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xuXG52YXIgaXNOYXRpdmVTdXBwb3J0ID0gaXNCcm93c2VyICYmIHdpbmRvdy5DU1MgJiYgd2luZG93LkNTUy5zdXBwb3J0cyAmJiB3aW5kb3cuQ1NTLnN1cHBvcnRzKFwiKC0tYTogMClcIik7XG5cbnZhciBjb3VudGVycyA9IHtcbiAgICBncm91cDogMCxcbiAgICBqb2I6IDBcbn07XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgICByb290RWxlbWVudDogaXNCcm93c2VyID8gZG9jdW1lbnQgOiBudWxsLFxuICAgIHNoYWRvd0RPTTogZmFsc2UsXG4gICAgaW5jbHVkZTogXCJzdHlsZSxsaW5rW3JlbD1zdHlsZXNoZWV0XVwiLFxuICAgIGV4Y2x1ZGU6IFwiXCIsXG4gICAgdmFyaWFibGVzOiB7fSxcbiAgICBvbmx5TGVnYWN5OiB0cnVlLFxuICAgIHByZXNlcnZlU3RhdGljOiB0cnVlLFxuICAgIHByZXNlcnZlVmFyczogZmFsc2UsXG4gICAgc2lsZW50OiBmYWxzZSxcbiAgICB1cGRhdGVET006IHRydWUsXG4gICAgdXBkYXRlVVJMczogdHJ1ZSxcbiAgICB3YXRjaDogbnVsbCxcbiAgICBvbkJlZm9yZVNlbmQ6IGZ1bmN0aW9uIG9uQmVmb3JlU2VuZCgpIHt9LFxuICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoKSB7fSxcbiAgICBvbldhcm5pbmc6IGZ1bmN0aW9uIG9uV2FybmluZygpIHt9LFxuICAgIG9uU3VjY2VzczogZnVuY3Rpb24gb25TdWNjZXNzKCkge30sXG4gICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZSgpIHt9LFxuICAgIG9uRmluYWxseTogZnVuY3Rpb24gb25GaW5hbGx5KCkge31cbn07XG5cbnZhciByZWdleCA9IHtcbiAgICBjc3NDb21tZW50czogL1xcL1xcKltcXHNcXFNdKz9cXCpcXC8vZyxcbiAgICBjc3NLZXlmcmFtZXM6IC9AKD86LVxcdyotKT9rZXlmcmFtZXMvLFxuICAgIGNzc01lZGlhUXVlcmllczogL0BtZWRpYVtee10rXFx7KFtcXHNcXFNdKz99KVxccyp9L2csXG4gICAgY3NzVXJsczogL3VybFxcKCg/IVsnXCJdPyg/OmRhdGF8aHR0cHxcXC9cXC8pOilbJ1wiXT8oW14nXCIpXSopWydcIl0/XFwpL2csXG4gICAgY3NzVmFyRGVjbFJ1bGVzOiAvKD86Oig/OnJvb3R8aG9zdCkoPyFbLjojKF0pW1xccyxdKltee10qe1xccypbXn1dKn0pL2csXG4gICAgY3NzVmFyRGVjbHM6IC8oPzpbXFxzO10qKSgtezJ9XFx3W1xcdy1dKikoPzpcXHMqOlxccyopKFteO10qKTsvZyxcbiAgICBjc3NWYXJGdW5jOiAvdmFyXFwoXFxzKi0tW1xcdy1dLyxcbiAgICBjc3NWYXJzOiAvKD86KD86Oig/OnJvb3R8aG9zdCkoPyFbLjojKF0pW1xccyxdKltee10qe1xccypbXjtdKjsqXFxzKil8KD86dmFyXFwoXFxzKikpKC0tW146KV0rKSg/OlxccypbOildKS9cbn07XG5cbnZhciB2YXJpYWJsZVN0b3JlID0ge1xuICAgIGRvbToge30sXG4gICAgam9iOiB7fSxcbiAgICB1c2VyOiB7fVxufTtcblxudmFyIGNzc1ZhcnNJc1J1bm5pbmcgPSBmYWxzZTtcblxudmFyIGNzc1ZhcnNPYnNlcnZlciA9IG51bGw7XG5cbnZhciBjc3NWYXJzU3JjTm9kZUNvdW50ID0gMDtcblxudmFyIGRlYm91bmNlVGltZXIgPSBudWxsO1xuXG52YXIgaXNTaGFkb3dET01SZWFkeSA9IGZhbHNlO1xuXG4vKipcbiAqIEZldGNoZXMsIHBhcnNlcywgYW5kIHRyYW5zZm9ybXMgQ1NTIGN1c3RvbSBwcm9wZXJ0aWVzIGZyb20gc3BlY2lmaWVkXG4gKiA8c3R5bGU+IGFuZCA8bGluaz4gZWxlbWVudHMgaW50byBzdGF0aWMgdmFsdWVzLCB0aGVuIGFwcGVuZHMgYSBuZXcgPHN0eWxlPlxuICogZWxlbWVudCB3aXRoIHN0YXRpYyB2YWx1ZXMgdG8gdGhlIERPTSB0byBwcm92aWRlIENTUyBjdXN0b20gcHJvcGVydHlcbiAqIGNvbXBhdGliaWxpdHkgZm9yIGxlZ2FjeSBicm93c2Vycy4gQWxzbyBwcm92aWRlcyBhIHNpbmdsZSBpbnRlcmZhY2UgZm9yXG4gKiBsaXZlIHVwZGF0ZXMgb2YgcnVudGltZSB2YWx1ZXMgaW4gYm90aCBtb2Rlcm4gYW5kIGxlZ2FjeSBicm93c2Vycy5cbiAqXG4gKiBAcHJlc2VydmVcbiAqIEBwYXJhbSB7b2JqZWN0fSAgIFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtvYmplY3R9ICAgW29wdGlvbnMucm9vdEVsZW1lbnQ9ZG9jdW1lbnRdIFJvb3QgZWxlbWVudCB0byB0cmF2ZXJzZSBmb3JcbiAqICAgICAgICAgICAgICAgICAgIDxsaW5rPiBhbmQgPHN0eWxlPiBub2Rlc1xuICogQHBhcmFtIHtib29sZWFufSAgW29wdGlvbnMuc2hhZG93RE9NPWZhbHNlXSBEZXRlcm1pbmVzIGlmIHNoYWRvdyBET00gPGxpbms+XG4gKiAgICAgICAgICAgICAgICAgICBhbmQgPHN0eWxlPiBub2RlcyB3aWxsIGJlIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSAgIFtvcHRpb25zLmluY2x1ZGU9XCJzdHlsZSxsaW5rW3JlbD1zdHlsZXNoZWV0XVwiXSBDU1Mgc2VsZWN0b3JcbiAqICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nIDxsaW5rIHJlPVwic3R5bGVzaGVldFwiPiBhbmQgPHN0eWxlPiBub2RlcyB0b1xuICogICAgICAgICAgICAgICAgICAgcHJvY2Vzc1xuICogQHBhcmFtIHtzdHJpbmd9ICAgW29wdGlvbnMuZXhjbHVkZV0gQ1NTIHNlbGVjdG9yIG1hdGNoaW5nIDxsaW5rXG4gKiAgICAgICAgICAgICAgICAgICByZWw9XCJzdHlsZWhzZWV0XCI+IGFuZCA8c3R5bGU+IG5vZGVzIHRvIGV4Y2x1ZGUgZnJvbSB0aG9zZVxuICogICAgICAgICAgICAgICAgICAgbWF0Y2hlcyBieSBvcHRpb25zLmluY2x1ZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSAgIFtvcHRpb25zLnZhcmlhYmxlc10gQSBtYXAgb2YgY3VzdG9tIHByb3BlcnR5IG5hbWUvdmFsdWVcbiAqICAgICAgICAgICAgICAgICAgIHBhaXJzLiBQcm9wZXJ0eSBuYW1lcyBjYW4gb21pdCBvciBpbmNsdWRlIHRoZSBsZWFkaW5nXG4gKiAgICAgICAgICAgICAgICAgICBkb3VibGUtaHlwaGVuICjigJQpLCBhbmQgdmFsdWVzIHNwZWNpZmllZCB3aWxsIG92ZXJyaWRlXG4gKiAgICAgICAgICAgICAgICAgICBwcmV2aW91cyB2YWx1ZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gIFtvcHRpb25zLm9ubHlMZWdhY3k9dHJ1ZV0gRGV0ZXJtaW5lcyBpZiB0aGUgcG9ueWZpbGwgd2lsbFxuICogICAgICAgICAgICAgICAgICAgb25seSBnZW5lcmF0ZSBsZWdhY3ktY29tcGF0aWJsZSBDU1MgaW4gYnJvd3NlcnMgdGhhdCBsYWNrXG4gKiAgICAgICAgICAgICAgICAgICBuYXRpdmUgc3VwcG9ydCAoaS5lLiwgbGVnYWN5IGJyb3dzZXJzKVxuICogQHBhcmFtIHtib29sZWFufSAgW29wdGlvbnMucHJlc2VydmVTdGF0aWM9dHJ1ZV0gRGV0ZXJtaW5lcyBpZiBDU1NcbiAqICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9ucyB0aGF0IGRvIG5vdCByZWZlcmVuY2UgYSBjdXN0b20gcHJvcGVydHkgd2lsbFxuICogICAgICAgICAgICAgICAgICAgYmUgcHJlc2VydmVkIGluIHRoZSB0cmFuc2Zvcm1lZCBDU1NcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gIFtvcHRpb25zLnByZXNlcnZlVmFycz1mYWxzZV0gRGV0ZXJtaW5lcyBpZiBDU1MgY3VzdG9tXG4gKiAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgd2lsbCBiZSBwcmVzZXJ2ZWQgaW4gdGhlIHRyYW5zZm9ybWVkXG4gKiAgICAgICAgICAgICAgICAgICBDU1NcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gIFtvcHRpb25zLnNpbGVudD1mYWxzZV0gRGV0ZXJtaW5lcyBpZiB3YXJuaW5nIGFuZCBlcnJvclxuICogICAgICAgICAgICAgICAgICAgbWVzc2FnZXMgd2lsbCBiZSBkaXNwbGF5ZWQgb24gdGhlIGNvbnNvbGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gIFtvcHRpb25zLnVwZGF0ZURPTT10cnVlXSBEZXRlcm1pbmVzIGlmIHRoZSBwb255ZmlsbCB3aWxsXG4gKiAgICAgICAgICAgICAgICAgICB1cGRhdGUgdGhlIERPTSBhZnRlciBwcm9jZXNzaW5nIENTUyBjdXN0b20gcHJvcGVydGllc1xuICogQHBhcmFtIHtib29sZWFufSAgW29wdGlvbnMudXBkYXRlVVJMcz10cnVlXSBEZXRlcm1pbmVzIGlmIHJlbGF0aXZlIHVybCgpXG4gKiAgICAgICAgICAgICAgICAgICBwYXRocyB3aWxsIGJlIGNvbnZlcnRlZCB0byBhYnNvbHV0ZSB1cmxzIGluIGV4dGVybmFsIENTU1xuICogQHBhcmFtIHtib29sZWFufSAgW29wdGlvbnMud2F0Y2g9ZmFsc2VdIERldGVybWluZXMgaWYgYSBNdXRhdGlvbk9ic2VydmVyIHdpbGxcbiAqICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQgdGhhdCB3aWxsIGV4ZWN1dGUgdGhlIHBvbnlmaWxsIHdoZW4gYSA8bGluaz4gb3JcbiAqICAgICAgICAgICAgICAgICAgIDxzdHlsZT4gRE9NIG11dGF0aW9uIGlzIG9ic2VydmVkXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5vbkJlZm9yZVNlbmRdIENhbGxiYWNrIGJlZm9yZSBYSFIgaXMgc2VudC4gUGFzc2VzXG4gKiAgICAgICAgICAgICAgICAgICAxKSB0aGUgWEhSIG9iamVjdCwgMikgc291cmNlIG5vZGUgcmVmZXJlbmNlLCBhbmQgMykgdGhlXG4gKiAgICAgICAgICAgICAgICAgICBzb3VyY2UgVVJMIGFzIGFyZ3VtZW50c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMub25FcnJvcl0gQ2FsbGJhY2sgYWZ0ZXIgYSBDU1MgcGFyc2luZyBlcnJvciBoYXNcbiAqICAgICAgICAgICAgICAgICAgIG9jY3VycmVkIG9yIGFuIFhIUiByZXF1ZXN0IGhhcyBmYWlsZWQuIFBhc3NlcyAxKSBhbiBlcnJvclxuICogICAgICAgICAgICAgICAgICAgbWVzc2FnZSwgYW5kIDIpIHNvdXJjZSBub2RlIHJlZmVyZW5jZSwgMykgeGhyLCBhbmQgNCB1cmwgYXNcbiAqICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLm9uV2FybmluZ10gQ2FsbGJhY2sgYWZ0ZXIgZWFjaCBDU1MgcGFyc2luZyB3YXJuaW5nXG4gKiAgICAgICAgICAgICAgICAgICBoYXMgb2NjdXJyZWQuIFBhc3NlcyAxKSBhIHdhcm5pbmcgbWVzc2FnZSBhcyBhbiBhcmd1bWVudC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLm9uU3VjY2Vzc10gQ2FsbGJhY2sgYWZ0ZXIgQ1NTIGRhdGEgaGFzIGJlZW5cbiAqICAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZCBmcm9tIGVhY2ggbm9kZSBhbmQgYmVmb3JlIENTUyBjdXN0b20gcHJvcGVydGllc1xuICogICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIHRyYW5zZm9ybWVkLiBBbGxvd3MgbW9kaWZ5aW5nIHRoZSBDU1MgZGF0YSBiZWZvcmVcbiAqICAgICAgICAgICAgICAgICAgIGl0IGlzIHRyYW5zZm9ybWVkIGJ5IHJldHVybmluZyBhbnkgc3RyaW5nIHZhbHVlIChvciBmYWxzZVxuICogICAgICAgICAgICAgICAgICAgdG8gc2tpcCkuIFBhc3NlcyAxKSBDU1MgdGV4dCwgMikgc291cmNlIG5vZGUgcmVmZXJlbmNlLCBhbmRcbiAqICAgICAgICAgICAgICAgICAgIDMpIHRoZSBzb3VyY2UgVVJMIGFzIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLm9uQ29tcGxldGVdIENhbGxiYWNrIGFmdGVyIGFsbCBDU1MgaGFzIGJlZW5cbiAqICAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZCwgbGVnYWN5LWNvbXBhdGlibGUgQ1NTIGhhcyBiZWVuIGdlbmVyYXRlZCwgYW5kXG4gKiAgICAgICAgICAgICAgICAgICAob3B0aW9uYWxseSkgdGhlIERPTSBoYXMgYmVlbiB1cGRhdGVkLiBQYXNzZXMgMSkgYSBDU1NcbiAqICAgICAgICAgICAgICAgICAgIHN0cmluZyB3aXRoIENTUyB2YXJpYWJsZSB2YWx1ZXMgcmVzb2x2ZWQsIDIpIGFuIGFycmF5IG9mXG4gKiAgICAgICAgICAgICAgICAgICBvdXRwdXQgPHN0eWxlPiBub2RlIHJlZmVyZW5jZXMgdGhhdCBoYXZlIGJlZW4gYXBwZW5kZWQgdG9cbiAqICAgICAgICAgICAgICAgICAgIHRoZSBET00sIDMpIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCBjdXN0b20gcHJvcGVyaWVzIG5hbWVzXG4gKiAgICAgICAgICAgICAgICAgICBhbmQgdmFsdWVzLCBhbmQgNCkgdGhlIHBvbnlmaWxsIGV4ZWN1dGlvbiB0aW1lIGluXG4gKiAgICAgICAgICAgICAgICAgICBtaWxsaXNlY29uZHMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5vbkZpbmFsbHldIENhbGxiYWNrIGluIG1vZGVybiBhbmQgbGVnYWN5IGJyb3dzZXJzXG4gKiAgICAgICAgICAgICAgICAgICBhZnRlciB0aGUgcG9ueWZpbGwgaGFzIGZpbmlzaGVkIGFsbCB0YXNrcy4gUGFzc2VzIDEpIGFcbiAqICAgICAgICAgICAgICAgICAgIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgbGFzdCBwb255ZmlsbCBjYWxsIHJlc3VsdGVkIGluIGFcbiAqICAgICAgICAgICAgICAgICAgIHN0eWxlIGNoYW5nZSwgMikgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGN1cnJlbnRcbiAqICAgICAgICAgICAgICAgICAgIGJyb3dzZXIgcHJvdmlkZXMgbmF0aXZlIHN1cHBvcnQgZm9yIENTUyBjdXN0b20gcHJvcGVydGllcyxcbiAqICAgICAgICAgICAgICAgICAgIGFuZCAzKSB0aGUgcG9ueWZpbGwgZXhlY3V0aW9uIHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICogQGV4YW1wbGVcbiAqXG4gKiAgIGNzc1ZhcnMoe1xuICogICAgIHJvb3RFbGVtZW50ICAgOiBkb2N1bWVudCxcbiAqICAgICBzaGFkb3dET00gICAgIDogZmFsc2UsXG4gKiAgICAgaW5jbHVkZSAgICAgICA6ICdzdHlsZSxsaW5rW3JlbD1cInN0eWxlc2hlZXRcIl0nLFxuICogICAgIGV4Y2x1ZGUgICAgICAgOiAnJyxcbiAqICAgICB2YXJpYWJsZXMgICAgIDoge30sXG4gKiAgICAgb25seUxlZ2FjeSAgICA6IHRydWUsXG4gKiAgICAgcHJlc2VydmVTdGF0aWM6IHRydWUsXG4gKiAgICAgcHJlc2VydmVWYXJzICA6IGZhbHNlLFxuICogICAgIHNpbGVudCAgICAgICAgOiBmYWxzZSxcbiAqICAgICB1cGRhdGVET00gICAgIDogdHJ1ZSxcbiAqICAgICB1cGRhdGVVUkxzICAgIDogdHJ1ZSxcbiAqICAgICB3YXRjaCAgICAgICAgIDogZmFsc2UsXG4gKiAgICAgb25CZWZvcmVTZW5kKHhociwgbm9kZSwgdXJsKSB7fSxcbiAqICAgICBvbkVycm9yKG1lc3NhZ2UsIG5vZGUsIHhociwgdXJsKSB7fSxcbiAqICAgICBvbldhcm5pbmcobWVzc2FnZSkge30sXG4gKiAgICAgb25TdWNjZXNzKGNzc1RleHQsIG5vZGUsIHVybCkge30sXG4gKiAgICAgb25Db21wbGV0ZShjc3NUZXh0LCBzdHlsZU5vZGUsIGNzc1ZhcmlhYmxlcywgYmVuY2htYXJrKSB7fSxcbiAqICAgICBvbkZpbmFsbHkoaGFzQ2hhbmdlZCwgaGFzTmF0aXZlU3VwcG9ydCwgYmVuY2htYXJrKVxuICogICB9KTtcbiAqLyBmdW5jdGlvbiBjc3NWYXJzKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgbXNnUHJlZml4ID0gXCJjc3NWYXJzKCk6IFwiO1xuICAgIHZhciBzZXR0aW5ncyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgZnVuY3Rpb24gaGFuZGxlRXJyb3IobWVzc2FnZSwgc291cmNlTm9kZSwgeGhyLCB1cmwpIHtcbiAgICAgICAgaWYgKCFzZXR0aW5ncy5zaWxlbnQgJiYgd2luZG93LmNvbnNvbGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJcIi5jb25jYXQobXNnUHJlZml4KS5jb25jYXQobWVzc2FnZSwgXCJcXG5cIiksIHNvdXJjZU5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHNldHRpbmdzLm9uRXJyb3IobWVzc2FnZSwgc291cmNlTm9kZSwgeGhyLCB1cmwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVXYXJuaW5nKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKCFzZXR0aW5ncy5zaWxlbnQgJiYgd2luZG93LmNvbnNvbGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlwiLmNvbmNhdChtc2dQcmVmaXgpLmNvbmNhdChtZXNzYWdlKSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0dGluZ3Mub25XYXJuaW5nKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVGaW5hbGx5KGhhc0NoYW5nZWQpIHtcbiAgICAgICAgc2V0dGluZ3Mub25GaW5hbGx5KEJvb2xlYW4oaGFzQ2hhbmdlZCksIGlzTmF0aXZlU3VwcG9ydCwgZ2V0VGltZVN0YW1wKCkgLSBzZXR0aW5ncy5fX2JlbmNobWFyayk7XG4gICAgfVxuICAgIGlmICghaXNCcm93c2VyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHNldHRpbmdzLndhdGNoKSB7XG4gICAgICAgIHNldHRpbmdzLndhdGNoID0gZGVmYXVsdHMud2F0Y2g7XG4gICAgICAgIGFkZE11dGF0aW9uT2JzZXJ2ZXIoc2V0dGluZ3MpO1xuICAgICAgICBjc3NWYXJzKHNldHRpbmdzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoc2V0dGluZ3Mud2F0Y2ggPT09IGZhbHNlICYmIGNzc1ZhcnNPYnNlcnZlcikge1xuICAgICAgICBjc3NWYXJzT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICBjc3NWYXJzT2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoIXNldHRpbmdzLl9fYmVuY2htYXJrKSB7XG4gICAgICAgIGlmIChjc3NWYXJzSXNSdW5uaW5nID09PSBzZXR0aW5ncy5yb290RWxlbWVudCkge1xuICAgICAgICAgICAgY3NzVmFyc0RlYm91bmNlZChvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3JjTm9kZXMgPSBBcnJheS5hcHBseShudWxsLCBzZXR0aW5ncy5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1jc3N2YXJzXTpub3QoW2RhdGEtY3NzdmFycz1cIm91dFwiXSknKSk7XG4gICAgICAgIHNldHRpbmdzLl9fYmVuY2htYXJrID0gZ2V0VGltZVN0YW1wKCk7XG4gICAgICAgIHNldHRpbmdzLmV4Y2x1ZGUgPSBbIGNzc1ZhcnNPYnNlcnZlciA/ICdbZGF0YS1jc3N2YXJzXTpub3QoW2RhdGEtY3NzdmFycz1cIlwiXSknIDogJ1tkYXRhLWNzc3ZhcnM9XCJvdXRcIl0nLCBcImxpbmtbZGlzYWJsZWRdOm5vdChbZGF0YS1jc3N2YXJzXSlcIiwgc2V0dGluZ3MuZXhjbHVkZSBdLmZpbHRlcigoZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICAgICAgfSkpLmpvaW4oXCIsXCIpO1xuICAgICAgICBzZXR0aW5ncy52YXJpYWJsZXMgPSBmaXhWYXJOYW1lcyhzZXR0aW5ncy52YXJpYWJsZXMpO1xuICAgICAgICBzcmNOb2Rlcy5mb3JFYWNoKChmdW5jdGlvbihzcmNOb2RlKSB7XG4gICAgICAgICAgICB2YXIgaGFzU3R5bGVDYWNoZSA9IHNyY05vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzdHlsZVwiICYmIHNyY05vZGUuX19jc3NWYXJzLnRleHQ7XG4gICAgICAgICAgICB2YXIgaGFzU3R5bGVDaGFuZ2VkID0gaGFzU3R5bGVDYWNoZSAmJiBzcmNOb2RlLnRleHRDb250ZW50ICE9PSBzcmNOb2RlLl9fY3NzVmFycy50ZXh0O1xuICAgICAgICAgICAgaWYgKGhhc1N0eWxlQ2FjaGUgJiYgaGFzU3R5bGVDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgc3JjTm9kZS5zaGVldCAmJiAoc3JjTm9kZS5zaGVldC5kaXNhYmxlZCA9IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzcmNOb2RlLnNldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFyc1wiLCBcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICBpZiAoIWNzc1ZhcnNPYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIG91dE5vZGVzID0gQXJyYXkuYXBwbHkobnVsbCwgc2V0dGluZ3Mucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY3NzdmFycz1cIm91dFwiXScpKTtcbiAgICAgICAgICAgIG91dE5vZGVzLmZvckVhY2goKGZ1bmN0aW9uKG91dE5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YUdyb3VwID0gb3V0Tm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnMtZ3JvdXBcIik7XG4gICAgICAgICAgICAgICAgdmFyIHNyY05vZGUgPSBkYXRhR3JvdXAgPyBzZXR0aW5ncy5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jc3N2YXJzPVwic3JjXCJdW2RhdGEtY3NzdmFycy1ncm91cD1cIicuY29uY2F0KGRhdGFHcm91cCwgJ1wiXScpKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKCFzcmNOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dE5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvdXROb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpZiAoY3NzVmFyc1NyY05vZGVDb3VudCAmJiBzcmNOb2Rlcy5sZW5ndGggPCBjc3NWYXJzU3JjTm9kZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgY3NzVmFyc1NyY05vZGVDb3VudCA9IHNyY05vZGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXJpYWJsZVN0b3JlLmRvbSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICAgICAgICBpZiAoaXNOYXRpdmVTdXBwb3J0ICYmIHNldHRpbmdzLm9ubHlMZWdhY3kpIHtcbiAgICAgICAgICAgIHZhciBoYXNWYXJDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy51cGRhdGVET00pIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0RWxtID0gc2V0dGluZ3Mucm9vdEVsZW1lbnQuaG9zdCB8fCAoc2V0dGluZ3Mucm9vdEVsZW1lbnQgPT09IGRvY3VtZW50ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogc2V0dGluZ3Mucm9vdEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHNldHRpbmdzLnZhcmlhYmxlcykuZm9yRWFjaCgoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YXJWYWx1ZSA9IHNldHRpbmdzLnZhcmlhYmxlc1trZXldO1xuICAgICAgICAgICAgICAgICAgICBoYXNWYXJDaGFuZ2UgPSBoYXNWYXJDaGFuZ2UgfHwgdmFyVmFsdWUgIT09IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0RWxtKS5nZXRQcm9wZXJ0eVZhbHVlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEVsbS5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhclZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVGaW5hbGx5KGhhc1ZhckNoYW5nZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU2hhZG93RE9NUmVhZHkgJiYgKHNldHRpbmdzLnNoYWRvd0RPTSB8fCBzZXR0aW5ncy5yb290RWxlbWVudC5zaGFkb3dSb290IHx8IHNldHRpbmdzLnJvb3RFbGVtZW50Lmhvc3QpKSB7XG4gICAgICAgICAgICBnZXRDc3NEYXRhKHtcbiAgICAgICAgICAgICAgICByb290RWxlbWVudDogZGVmYXVsdHMucm9vdEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgaW5jbHVkZTogZGVmYXVsdHMuaW5jbHVkZSxcbiAgICAgICAgICAgICAgICBleGNsdWRlOiBzZXR0aW5ncy5leGNsdWRlLFxuICAgICAgICAgICAgICAgIHNraXBEaXNhYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgb25TdWNjZXNzOiBmdW5jdGlvbiBvblN1Y2Nlc3MoY3NzVGV4dCwgbm9kZSwgdXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1VzZXJEaXNhYmxlZCA9IChub2RlLnNoZWV0IHx8IHt9KS5kaXNhYmxlZCAmJiAhbm9kZS5fX2Nzc1ZhcnM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1VzZXJEaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSBjc3NUZXh0LnJlcGxhY2UocmVnZXguY3NzQ29tbWVudHMsIFwiXCIpLnJlcGxhY2UocmVnZXguY3NzTWVkaWFRdWVyaWVzLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCA9IChjc3NUZXh0Lm1hdGNoKHJlZ2V4LmNzc1ZhckRlY2xSdWxlcykgfHwgW10pLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjc3NUZXh0IHx8IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZShjc3NUZXh0LCBjc3NBcnJheSwgbm9kZUFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlVmFycyhjc3NUZXh0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yZTogdmFyaWFibGVTdG9yZS5kb20sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbldhcm5pbmc6IGhhbmRsZVdhcm5pbmdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlzU2hhZG93RE9NUmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjc3NWYXJzKHNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzc1ZhcnNJc1J1bm5pbmcgPSBzZXR0aW5ncy5yb290RWxlbWVudDtcbiAgICAgICAgICAgIGdldENzc0RhdGEoe1xuICAgICAgICAgICAgICAgIHJvb3RFbGVtZW50OiBzZXR0aW5ncy5yb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICBpbmNsdWRlOiBzZXR0aW5ncy5pbmNsdWRlLFxuICAgICAgICAgICAgICAgIGV4Y2x1ZGU6IHNldHRpbmdzLmV4Y2x1ZGUsXG4gICAgICAgICAgICAgICAgc2tpcERpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvbkJlZm9yZVNlbmQ6IHNldHRpbmdzLm9uQmVmb3JlU2VuZCxcbiAgICAgICAgICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKHhociwgbm9kZSwgdXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZVVybCA9IHhoci5yZXNwb25zZVVSTCB8fCBnZXRGdWxsVXJsJDEodXJsLCBsb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXR1c1RleHQgPSB4aHIuc3RhdHVzVGV4dCA/IFwiKFwiLmNvbmNhdCh4aHIuc3RhdHVzVGV4dCwgXCIpXCIpIDogXCJVbnNwZWNpZmllZCBFcnJvclwiICsgKHhoci5zdGF0dXMgPT09IDAgPyBcIiAocG9zc2libHkgQ09SUyByZWxhdGVkKVwiIDogXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1zZyA9IFwiQ1NTIFhIUiBFcnJvcjogXCIuY29uY2F0KHJlc3BvbnNlVXJsLCBcIiBcIikuY29uY2F0KHhoci5zdGF0dXMsIFwiIFwiKS5jb25jYXQoc3RhdHVzVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVycm9yTXNnLCBub2RlLCB4aHIsIHJlc3BvbnNlVXJsKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uU3VjY2VzczogZnVuY3Rpb24gb25TdWNjZXNzKGNzc1RleHQsIG5vZGUsIHVybCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNVc2VyRGlzYWJsZWQgPSAobm9kZS5zaGVldCB8fCB7fSkuZGlzYWJsZWQgJiYgIW5vZGUuX19jc3NWYXJzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVc2VyRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgaXNMaW5rID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImxpbmtcIjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzU3R5bGVJbXBvcnQgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3R5bGVcIiAmJiBjc3NUZXh0ICE9PSBub2RlLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsID0gc2V0dGluZ3Mub25TdWNjZXNzKGNzc1RleHQsIG5vZGUsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSByZXR1cm5WYWwgIT09IHVuZGVmaW5lZCAmJiBCb29sZWFuKHJldHVyblZhbCkgPT09IGZhbHNlID8gXCJcIiA6IHJldHVyblZhbCB8fCBjc3NUZXh0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MudXBkYXRlVVJMcyAmJiAoaXNMaW5rIHx8IGlzU3R5bGVJbXBvcnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ID0gZml4UmVsYXRpdmVDc3NVcmxzKGNzc1RleHQsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNzc1RleHQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKGNzc1RleHQsIGNzc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlQXJyYXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhcnMgPSBfZXh0ZW5kcyh7fSwgdmFyaWFibGVTdG9yZS5kb20sIHZhcmlhYmxlU3RvcmUudXNlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNWYXJDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVTdG9yZS5qb2IgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUFycmF5LmZvckVhY2goKGZ1bmN0aW9uKG5vZGUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlQ1NTID0gY3NzQXJyYXlbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLl9fY3NzVmFycyA9IG5vZGUuX19jc3NWYXJzIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5fX2Nzc1ZhcnMudGV4dCA9IG5vZGVDU1M7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXguY3NzVmFycy50ZXN0KG5vZGVDU1MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNzc1RyZWUgPSBwYXJzZUNzcyhub2RlQ1NTLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2ZVN0YXRpYzogc2V0dGluZ3MucHJlc2VydmVTdGF0aWMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDb21tZW50czogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VWYXJzKGNzc1RyZWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSG9zdDogQm9vbGVhbihzZXR0aW5ncy5yb290RWxlbWVudC5ob3N0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlOiB2YXJpYWJsZVN0b3JlLmRvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uV2FybmluZzogaGFuZGxlV2FybmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5fX2Nzc1ZhcnMudHJlZSA9IGNzc1RyZWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVyci5tZXNzYWdlLCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHModmFyaWFibGVTdG9yZS5qb2IsIHZhcmlhYmxlU3RvcmUuZG9tKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnVwZGF0ZURPTSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHModmFyaWFibGVTdG9yZS51c2VyLCBzZXR0aW5ncy52YXJpYWJsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHModmFyaWFibGVTdG9yZS5qb2IsIHZhcmlhYmxlU3RvcmUudXNlcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZXh0ZW5kcyh2YXJpYWJsZVN0b3JlLmpvYiwgdmFyaWFibGVTdG9yZS51c2VyLCBzZXR0aW5ncy52YXJpYWJsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHMoY3VycmVudFZhcnMsIHNldHRpbmdzLnZhcmlhYmxlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGFzVmFyQ2hhbmdlID0gY291bnRlcnMuam9iID4gMCAmJiBCb29sZWFuKE9iamVjdC5rZXlzKHZhcmlhYmxlU3RvcmUuam9iKS5sZW5ndGggPiBPYmplY3Qua2V5cyhjdXJyZW50VmFycykubGVuZ3RoIHx8IEJvb2xlYW4oT2JqZWN0LmtleXMoY3VycmVudFZhcnMpLmxlbmd0aCAmJiBPYmplY3Qua2V5cyh2YXJpYWJsZVN0b3JlLmpvYikuc29tZSgoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFyaWFibGVTdG9yZS5qb2Jba2V5XSAhPT0gY3VycmVudFZhcnNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfSkpKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNWYXJDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q3NzTm9kZXMoc2V0dGluZ3Mucm9vdEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzVmFycyhzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0Q3NzQXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXROb2RlQXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNLZXlmcmFtZXNXaXRoVmFycyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnVwZGF0ZURPTSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXJzLmpvYisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUFycmF5LmZvckVhY2goKGZ1bmN0aW9uKG5vZGUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNTa2lwID0gIW5vZGUuX19jc3NWYXJzLnRyZWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuX19jc3NWYXJzLnRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybUNzcyhub2RlLl9fY3NzVmFycy50cmVlLCBfZXh0ZW5kcyh7fSwgc2V0dGluZ3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlU3RvcmUuam9iLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uV2FybmluZzogaGFuZGxlV2FybmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91dENzcyA9IHN0cmluZ2lmeUNzcyhub2RlLl9fY3NzVmFycy50cmVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy51cGRhdGVET00pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZUNTUyA9IGNzc0FycmF5W2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNDU1NWYXJGdW5jID0gcmVnZXguY3NzVmFyRnVuYy50ZXN0KG5vZGVDU1MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnNcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnNcIiwgXCJzcmNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdXRDc3MubGVuZ3RoICYmIGhhc0NTU1ZhckZ1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFHcm91cCA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzLWdyb3VwXCIpIHx8ICsrY291bnRlcnMuZ3JvdXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRDc3NOb1NwYWNlcyA9IG91dENzcy5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXROb2RlID0gc2V0dGluZ3Mucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtY3NzdmFycz1cIm91dFwiXVtkYXRhLWNzc3ZhcnMtZ3JvdXA9XCInLmNvbmNhdChkYXRhR3JvdXAsICdcIl0nKSkgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNLZXlmcmFtZXNXaXRoVmFycyA9IGhhc0tleWZyYW1lc1dpdGhWYXJzIHx8IHJlZ2V4LmNzc0tleWZyYW1lcy50ZXN0KG91dENzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5wcmVzZXJ2ZVN0YXRpYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zaGVldCAmJiAobm9kZS5zaGVldC5kaXNhYmxlZCA9IHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3V0Tm9kZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnNcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dE5vZGUuc2V0QXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzXCIsIFwib3V0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdXRDc3NOb1NwYWNlcyA9PT0gbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKC9cXHMvZywgXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2tpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3V0Tm9kZSAmJiBvdXROb2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtY3NzdmFycy1ncm91cFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXROb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob3V0Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3V0Q3NzTm9TcGFjZXMgIT09IG91dE5vZGUudGV4dENvbnRlbnQucmVwbGFjZSgvXFxzL2csIFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIG5vZGUsIG91dE5vZGUgXS5mb3JFYWNoKChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnMtam9iXCIsIGNvdW50ZXJzLmpvYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnMtZ3JvdXBcIiwgZGF0YUdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dE5vZGUudGV4dENvbnRlbnQgPSBvdXRDc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRDc3NBcnJheS5wdXNoKG91dENzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXROb2RlQXJyYXkucHVzaChvdXROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3V0Tm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShvdXROb2RlLCBub2RlLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSgvXFxzL2csIFwiXCIpICE9PSBvdXRDc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0Q3NzQXJyYXkucHVzaChvdXRDc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIubWVzc2FnZSwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU2tpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFyc1wiLCBcInNraXBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbm9kZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnMtam9iXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzLWpvYlwiLCBjb3VudGVycy5qb2IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1ZhcnNTcmNOb2RlQ291bnQgPSBzZXR0aW5ncy5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1jc3N2YXJzXTpub3QoW2RhdGEtY3NzdmFycz1cIm91dFwiXSknKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3Muc2hhZG93RE9NKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsbXMgPSBbXS5jb25jYXQoc2V0dGluZ3Mucm9vdEVsZW1lbnQpLmNvbmNhdChBcnJheS5hcHBseShudWxsLCBzZXR0aW5ncy5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiKlwiKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBlbG07IGVsbSA9IGVsbXNbaV07ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxtLnNoYWRvd1Jvb3QgJiYgZWxtLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcInN0eWxlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hhZG93U2V0dGluZ3MgPSBfZXh0ZW5kcyh7fSwgc2V0dGluZ3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290RWxlbWVudDogZWxtLnNoYWRvd1Jvb3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzVmFycyhzaGFkb3dTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MudXBkYXRlRE9NICYmIGhhc0tleWZyYW1lc1dpdGhWYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4S2V5ZnJhbWVzKHNldHRpbmdzLnJvb3RFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1ZhcnNJc1J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9uQ29tcGxldGUob3V0Q3NzQXJyYXkuam9pbihcIlwiKSwgb3V0Tm9kZUFycmF5LCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHZhcmlhYmxlU3RvcmUuam9iKSksIGdldFRpbWVTdGFtcCgpIC0gc2V0dGluZ3MuX19iZW5jaG1hcmspO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlRmluYWxseShvdXROb2RlQXJyYXkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKGZ1bmN0aW9uIGluaXQoZXZ0KSB7XG4gICAgICAgICAgICBjc3NWYXJzKG9wdGlvbnMpO1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgaW5pdCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbmNzc1ZhcnMucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICBjb3VudGVycy5qb2IgPSAwO1xuICAgIGNvdW50ZXJzLmdyb3VwID0gMDtcbiAgICBjc3NWYXJzSXNSdW5uaW5nID0gZmFsc2U7XG4gICAgaWYgKGNzc1ZhcnNPYnNlcnZlcikge1xuICAgICAgICBjc3NWYXJzT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICBjc3NWYXJzT2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgICBjc3NWYXJzU3JjTm9kZUNvdW50ID0gMDtcbiAgICBkZWJvdW5jZVRpbWVyID0gbnVsbDtcbiAgICBpc1NoYWRvd0RPTVJlYWR5ID0gZmFsc2U7XG4gICAgZm9yICh2YXIgcHJvcCBpbiB2YXJpYWJsZVN0b3JlKSB7XG4gICAgICAgIHZhcmlhYmxlU3RvcmVbcHJvcF0gPSB7fTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBhZGRNdXRhdGlvbk9ic2VydmVyKHNldHRpbmdzKSB7XG4gICAgZnVuY3Rpb24gaXNEaXNhYmxlZChub2RlKSB7XG4gICAgICAgIHZhciBpc0Rpc2FibGVkQXR0ciA9IGlzTGluayhub2RlKSAmJiBub2RlLmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICB2YXIgaXNEaXNhYmxlZFNoZWV0ID0gKG5vZGUuc2hlZXQgfHwge30pLmRpc2FibGVkO1xuICAgICAgICByZXR1cm4gaXNEaXNhYmxlZEF0dHIgfHwgaXNEaXNhYmxlZFNoZWV0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0xpbmsobm9kZSkge1xuICAgICAgICB2YXIgaXNTdHlsZXNoZWV0ID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImxpbmtcIiAmJiAobm9kZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikgfHwgXCJcIikuaW5kZXhPZihcInN0eWxlc2hlZXRcIikgIT09IC0xO1xuICAgICAgICByZXR1cm4gaXNTdHlsZXNoZWV0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1N0eWxlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzdHlsZVwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1ZhbGlkQXR0cmlidXRlTXV0YXRpb24obXV0YXRpb24pIHtcbiAgICAgICAgdmFyIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09IFwiYXR0cmlidXRlc1wiICYmIGlzTGluayhtdXRhdGlvbi50YXJnZXQpICYmICFpc0Rpc2FibGVkKG11dGF0aW9uLnRhcmdldCkpIHtcbiAgICAgICAgICAgIHZhciBpc0VuYWJsZWRNdXRhdGlvbiA9IG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUgPT09IFwiZGlzYWJsZWRcIjtcbiAgICAgICAgICAgIHZhciBpc0hyZWZNdXRhdGlvbiA9IG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUgPT09IFwiaHJlZlwiO1xuICAgICAgICAgICAgdmFyIGlzU2tpcE5vZGUgPSBtdXRhdGlvbi50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzXCIpID09PSBcInNraXBcIjtcbiAgICAgICAgICAgIHZhciBpc1NyY05vZGUgPSBtdXRhdGlvbi50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzXCIpID09PSBcInNyY1wiO1xuICAgICAgICAgICAgaWYgKGlzRW5hYmxlZE11dGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgaXNWYWxpZCA9ICFpc1NraXBOb2RlICYmICFpc1NyY05vZGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzSHJlZk11dGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU2tpcE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRpb24udGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFyc1wiLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzU3JjTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNldENzc05vZGVzKHNldHRpbmdzLnJvb3RFbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaXNWYWxpZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzVmFsaWRTdHlsZVRleHRNdXRhdGlvbihtdXRhdGlvbikge1xuICAgICAgICB2YXIgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gXCJjaGlsZExpc3RcIikge1xuICAgICAgICAgICAgdmFyIGlzU3R5bGVFbG0gPSBpc1N0eWxlKG11dGF0aW9uLnRhcmdldCk7XG4gICAgICAgICAgICB2YXIgaXNPdXROb2RlID0gbXV0YXRpb24udGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFyc1wiKSA9PT0gXCJvdXRcIjtcbiAgICAgICAgICAgIGlzVmFsaWQgPSBpc1N0eWxlRWxtICYmICFpc091dE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzVmFsaWRBZGRNdXRhdGlvbihtdXRhdGlvbikge1xuICAgICAgICB2YXIgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gXCJjaGlsZExpc3RcIikge1xuICAgICAgICAgICAgaXNWYWxpZCA9IEFycmF5LmFwcGx5KG51bGwsIG11dGF0aW9uLmFkZGVkTm9kZXMpLnNvbWUoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNFbG0gPSBub2RlLm5vZGVUeXBlID09PSAxO1xuICAgICAgICAgICAgICAgIHZhciBoYXNBdHRyID0gaXNFbG0gJiYgbm9kZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnNcIik7XG4gICAgICAgICAgICAgICAgdmFyIGlzU3R5bGVXaXRoVmFycyA9IGlzU3R5bGUobm9kZSkgJiYgcmVnZXguY3NzVmFycy50ZXN0KG5vZGUudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gIWhhc0F0dHIgJiYgKGlzTGluayhub2RlKSB8fCBpc1N0eWxlV2l0aFZhcnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkICYmICFpc0Rpc2FibGVkKG5vZGUpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1ZhbGlkUmVtb3ZlTXV0YXRpb24obXV0YXRpb24pIHtcbiAgICAgICAgdmFyIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09IFwiY2hpbGRMaXN0XCIpIHtcbiAgICAgICAgICAgIGlzVmFsaWQgPSBBcnJheS5hcHBseShudWxsLCBtdXRhdGlvbi5yZW1vdmVkTm9kZXMpLnNvbWUoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNFbG0gPSBub2RlLm5vZGVUeXBlID09PSAxO1xuICAgICAgICAgICAgICAgIHZhciBpc091dE5vZGUgPSBpc0VsbSAmJiBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFyc1wiKSA9PT0gXCJvdXRcIjtcbiAgICAgICAgICAgICAgICB2YXIgaXNTcmNOb2RlID0gaXNFbG0gJiYgbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnNcIikgPT09IFwic3JjXCI7XG4gICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBpc1NyY05vZGU7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3JjTm9kZSB8fCBpc091dE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFHcm91cCA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzLWdyb3VwXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3JwaGFuTm9kZSA9IHNldHRpbmdzLnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNzc3ZhcnMtZ3JvdXA9XCInLmNvbmNhdChkYXRhR3JvdXAsICdcIl0nKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1NyY05vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q3NzTm9kZXMoc2V0dGluZ3Mucm9vdEVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcnBoYW5Ob2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcnBoYW5Ob2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob3JwaGFuTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgfVxuICAgIGlmICghd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY3NzVmFyc09ic2VydmVyKSB7XG4gICAgICAgIGNzc1ZhcnNPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIGNzc1ZhcnNPYnNlcnZlciA9IG51bGw7XG4gICAgfVxuICAgIGNzc1ZhcnNPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChmdW5jdGlvbihtdXRhdGlvbnMpIHtcbiAgICAgICAgdmFyIGhhc1ZhbGlkTXV0YXRpb24gPSBtdXRhdGlvbnMuc29tZSgoZnVuY3Rpb24obXV0YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkQXR0cmlidXRlTXV0YXRpb24obXV0YXRpb24pIHx8IGlzVmFsaWRTdHlsZVRleHRNdXRhdGlvbihtdXRhdGlvbikgfHwgaXNWYWxpZEFkZE11dGF0aW9uKG11dGF0aW9uKSB8fCBpc1ZhbGlkUmVtb3ZlTXV0YXRpb24obXV0YXRpb24pO1xuICAgICAgICB9KSk7XG4gICAgICAgIGlmIChoYXNWYWxpZE11dGF0aW9uKSB7XG4gICAgICAgICAgICBjc3NWYXJzKHNldHRpbmdzKTtcbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICBjc3NWYXJzT2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHtcbiAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgYXR0cmlidXRlRmlsdGVyOiBbIFwiZGlzYWJsZWRcIiwgXCJocmVmXCIgXSxcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNzc1ZhcnNEZWJvdW5jZWQoc2V0dGluZ3MpIHtcbiAgICB2YXIgZGVsYXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDEwMDtcbiAgICBjbGVhclRpbWVvdXQoZGVib3VuY2VUaW1lcik7XG4gICAgZGVib3VuY2VUaW1lciA9IHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXR0aW5ncy5fX2JlbmNobWFyayA9IG51bGw7XG4gICAgICAgIGNzc1ZhcnMoc2V0dGluZ3MpO1xuICAgIH0pLCBkZWxheSk7XG59XG5cbmZ1bmN0aW9uIGZpeEtleWZyYW1lcyhyb290RWxlbWVudCkge1xuICAgIHZhciBhbmltYXRpb25OYW1lUHJvcCA9IFsgXCJhbmltYXRpb24tbmFtZVwiLCBcIi1tb3otYW5pbWF0aW9uLW5hbWVcIiwgXCItd2Via2l0LWFuaW1hdGlvbi1uYW1lXCIgXS5maWx0ZXIoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSlbcHJvcF07XG4gICAgfSkpWzBdO1xuICAgIGlmIChhbmltYXRpb25OYW1lUHJvcCkge1xuICAgICAgICB2YXIgYWxsTm9kZXMgPSByb290RWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIik7XG4gICAgICAgIHZhciBrZXlmcmFtZU5vZGVzID0gW107XG4gICAgICAgIHZhciBuYW1lTWFya2VyID0gXCJfX0NTU1ZBUlNQT05ZRklMTC1LRVlGUkFNRVNfX1wiO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYWxsTm9kZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gYWxsTm9kZXNbaV07XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uTmFtZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSlbYW5pbWF0aW9uTmFtZVByb3BdO1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbk5hbWUgIT09IFwibm9uZVwiKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5zdHlsZVthbmltYXRpb25OYW1lUHJvcF0gKz0gbmFtZU1hcmtlcjtcbiAgICAgICAgICAgICAgICBrZXlmcmFtZU5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdm9pZCBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfbGVuID0ga2V5ZnJhbWVOb2Rlcy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICAgICAgdmFyIG5vZGVTdHlsZSA9IGtleWZyYW1lTm9kZXNbX2ldLnN0eWxlO1xuICAgICAgICAgICAgbm9kZVN0eWxlW2FuaW1hdGlvbk5hbWVQcm9wXSA9IG5vZGVTdHlsZVthbmltYXRpb25OYW1lUHJvcF0ucmVwbGFjZShuYW1lTWFya2VyLCBcIlwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZml4UmVsYXRpdmVDc3NVcmxzKGNzc1RleHQsIGJhc2VVcmwpIHtcbiAgICB2YXIgY3NzVXJscyA9IGNzc1RleHQucmVwbGFjZShyZWdleC5jc3NDb21tZW50cywgXCJcIikubWF0Y2gocmVnZXguY3NzVXJscykgfHwgW107XG4gICAgY3NzVXJscy5mb3JFYWNoKChmdW5jdGlvbihjc3NVcmwpIHtcbiAgICAgICAgdmFyIG9sZFVybCA9IGNzc1VybC5yZXBsYWNlKHJlZ2V4LmNzc1VybHMsIFwiJDFcIik7XG4gICAgICAgIHZhciBuZXdVcmwgPSBnZXRGdWxsVXJsJDEob2xkVXJsLCBiYXNlVXJsKTtcbiAgICAgICAgY3NzVGV4dCA9IGNzc1RleHQucmVwbGFjZShjc3NVcmwsIGNzc1VybC5yZXBsYWNlKG9sZFVybCwgbmV3VXJsKSk7XG4gICAgfSkpO1xuICAgIHJldHVybiBjc3NUZXh0O1xufVxuXG5mdW5jdGlvbiBmaXhWYXJOYW1lcygpIHtcbiAgICB2YXIgdmFyT2JqID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgcmVMZWFkaW5nSHlwaGVucyA9IC9eLXsyfS87XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHZhck9iaikucmVkdWNlKChmdW5jdGlvbihvYmosIHZhbHVlKSB7XG4gICAgICAgIHZhciBrZXkgPSByZUxlYWRpbmdIeXBoZW5zLnRlc3QodmFsdWUpID8gdmFsdWUgOiBcIi0tXCIuY29uY2F0KHZhbHVlLnJlcGxhY2UoL14tKy8sIFwiXCIpKTtcbiAgICAgICAgb2JqW2tleV0gPSB2YXJPYmpbdmFsdWVdO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0pLCB7fSk7XG59XG5cbmZ1bmN0aW9uIGdldEZ1bGxVcmwkMSh1cmwpIHtcbiAgICB2YXIgYmFzZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbG9jYXRpb24uaHJlZjtcbiAgICB2YXIgZCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKTtcbiAgICB2YXIgYiA9IGQuY3JlYXRlRWxlbWVudChcImJhc2VcIik7XG4gICAgdmFyIGEgPSBkLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgIGQuaGVhZC5hcHBlbmRDaGlsZChiKTtcbiAgICBkLmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgYi5ocmVmID0gYmFzZTtcbiAgICBhLmhyZWYgPSB1cmw7XG4gICAgcmV0dXJuIGEuaHJlZjtcbn1cblxuZnVuY3Rpb24gZ2V0VGltZVN0YW1wKCkge1xuICAgIHJldHVybiBpc0Jyb3dzZXIgJiYgKHdpbmRvdy5wZXJmb3JtYW5jZSB8fCB7fSkubm93ID8gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogKG5ldyBEYXRlKS5nZXRUaW1lKCk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0Q3NzTm9kZXMocm9vdEVsZW1lbnQpIHtcbiAgICB2YXIgcmVzZXRET01WYXJpYWJsZVN0b3JlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICB2YXIgcmVzZXROb2RlcyA9IEFycmF5LmFwcGx5KG51bGwsIHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNzc3ZhcnM9XCJza2lwXCJdLFtkYXRhLWNzc3ZhcnM9XCJzcmNcIl0nKSk7XG4gICAgcmVzZXROb2Rlcy5mb3JFYWNoKChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLnNldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFyc1wiLCBcIlwiKTtcbiAgICB9KSk7XG4gICAgaWYgKHJlc2V0RE9NVmFyaWFibGVTdG9yZSkge1xuICAgICAgICB2YXJpYWJsZVN0b3JlLmRvbSA9IHt9O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY3NzVmFycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy12YXJzLXBvbnlmaWxsLmVzbS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5tb2R1bGUuZXhwb3J0cy5vbmNlID0gb25jZTtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbmZ1bmN0aW9uIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XG4gICAgfVxuICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gIH1cbn0pO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIF9nZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuIF9nZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB9IGVsc2UgaWYgKHByZXBlbmQpIHtcbiAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIG0gPSBfZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIC8vIE5vIGVycm9yIGNvZGUgZm9yIHRoaXMgc2luY2UgaXQgaXMgYSBXYXJuaW5nXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyBTdHJpbmcodHlwZSkgKyAnIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0Jyk7XG4gICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsIGFyZ3VtZW50cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID9cbiAgICB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0T3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIG9uY2UoZW1pdHRlciwgbmFtZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGV2ZW50TGlzdGVuZXIoKSB7XG4gICAgICBpZiAoZXJyb3JMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgZXJyb3JMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgICB2YXIgZXJyb3JMaXN0ZW5lcjtcblxuICAgIC8vIEFkZGluZyBhbiBlcnJvciBsaXN0ZW5lciBpcyBub3Qgb3B0aW9uYWwgYmVjYXVzZVxuICAgIC8vIGlmIGFuIGVycm9yIGlzIHRocm93biBvbiBhbiBldmVudCBlbWl0dGVyIHdlIGNhbm5vdFxuICAgIC8vIGd1YXJhbnRlZSB0aGF0IHRoZSBhY3R1YWwgZXZlbnQgd2UgYXJlIHdhaXRpbmcgd2lsbFxuICAgIC8vIGJlIGZpcmVkLiBUaGUgcmVzdWx0IGNvdWxkIGJlIGEgc2lsZW50IHdheSB0byBjcmVhdGVcbiAgICAvLyBtZW1vcnkgb3IgZmlsZSBkZXNjcmlwdG9yIGxlYWtzLCB3aGljaCBpcyBzb21ldGhpbmdcbiAgICAvLyB3ZSBzaG91bGQgYXZvaWQuXG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGVycm9yTGlzdGVuZXIgPSBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKG5hbWUsIGV2ZW50TGlzdGVuZXIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH07XG5cbiAgICAgIGVtaXR0ZXIub25jZSgnZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBlbWl0dGVyLm9uY2UobmFtZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0pO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc3Vycm9nYXRlX3BhaXJzXzEgPSByZXF1aXJlKFwiLi9zdXJyb2dhdGUtcGFpcnNcIik7XG52YXIgSFRNTF9BTFBIQSA9IFsnYXBvcycsICduYnNwJywgJ2lleGNsJywgJ2NlbnQnLCAncG91bmQnLCAnY3VycmVuJywgJ3llbicsICdicnZiYXInLCAnc2VjdCcsICd1bWwnLCAnY29weScsICdvcmRmJywgJ2xhcXVvJywgJ25vdCcsICdzaHknLCAncmVnJywgJ21hY3InLCAnZGVnJywgJ3BsdXNtbicsICdzdXAyJywgJ3N1cDMnLCAnYWN1dGUnLCAnbWljcm8nLCAncGFyYScsICdtaWRkb3QnLCAnY2VkaWwnLCAnc3VwMScsICdvcmRtJywgJ3JhcXVvJywgJ2ZyYWMxNCcsICdmcmFjMTInLCAnZnJhYzM0JywgJ2lxdWVzdCcsICdBZ3JhdmUnLCAnQWFjdXRlJywgJ0FjaXJjJywgJ0F0aWxkZScsICdBdW1sJywgJ0FyaW5nJywgJ0FFbGlnJywgJ0NjZWRpbCcsICdFZ3JhdmUnLCAnRWFjdXRlJywgJ0VjaXJjJywgJ0V1bWwnLCAnSWdyYXZlJywgJ0lhY3V0ZScsICdJY2lyYycsICdJdW1sJywgJ0VUSCcsICdOdGlsZGUnLCAnT2dyYXZlJywgJ09hY3V0ZScsICdPY2lyYycsICdPdGlsZGUnLCAnT3VtbCcsICd0aW1lcycsICdPc2xhc2gnLCAnVWdyYXZlJywgJ1VhY3V0ZScsICdVY2lyYycsICdVdW1sJywgJ1lhY3V0ZScsICdUSE9STicsICdzemxpZycsICdhZ3JhdmUnLCAnYWFjdXRlJywgJ2FjaXJjJywgJ2F0aWxkZScsICdhdW1sJywgJ2FyaW5nJywgJ2FlbGlnJywgJ2NjZWRpbCcsICdlZ3JhdmUnLCAnZWFjdXRlJywgJ2VjaXJjJywgJ2V1bWwnLCAnaWdyYXZlJywgJ2lhY3V0ZScsICdpY2lyYycsICdpdW1sJywgJ2V0aCcsICdudGlsZGUnLCAnb2dyYXZlJywgJ29hY3V0ZScsICdvY2lyYycsICdvdGlsZGUnLCAnb3VtbCcsICdkaXZpZGUnLCAnb3NsYXNoJywgJ3VncmF2ZScsICd1YWN1dGUnLCAndWNpcmMnLCAndXVtbCcsICd5YWN1dGUnLCAndGhvcm4nLCAneXVtbCcsICdxdW90JywgJ2FtcCcsICdsdCcsICdndCcsICdPRWxpZycsICdvZWxpZycsICdTY2Fyb24nLCAnc2Nhcm9uJywgJ1l1bWwnLCAnY2lyYycsICd0aWxkZScsICdlbnNwJywgJ2Vtc3AnLCAndGhpbnNwJywgJ3p3bmonLCAnendqJywgJ2xybScsICdybG0nLCAnbmRhc2gnLCAnbWRhc2gnLCAnbHNxdW8nLCAncnNxdW8nLCAnc2JxdW8nLCAnbGRxdW8nLCAncmRxdW8nLCAnYmRxdW8nLCAnZGFnZ2VyJywgJ0RhZ2dlcicsICdwZXJtaWwnLCAnbHNhcXVvJywgJ3JzYXF1bycsICdldXJvJywgJ2Zub2YnLCAnQWxwaGEnLCAnQmV0YScsICdHYW1tYScsICdEZWx0YScsICdFcHNpbG9uJywgJ1pldGEnLCAnRXRhJywgJ1RoZXRhJywgJ0lvdGEnLCAnS2FwcGEnLCAnTGFtYmRhJywgJ011JywgJ051JywgJ1hpJywgJ09taWNyb24nLCAnUGknLCAnUmhvJywgJ1NpZ21hJywgJ1RhdScsICdVcHNpbG9uJywgJ1BoaScsICdDaGknLCAnUHNpJywgJ09tZWdhJywgJ2FscGhhJywgJ2JldGEnLCAnZ2FtbWEnLCAnZGVsdGEnLCAnZXBzaWxvbicsICd6ZXRhJywgJ2V0YScsICd0aGV0YScsICdpb3RhJywgJ2thcHBhJywgJ2xhbWJkYScsICdtdScsICdudScsICd4aScsICdvbWljcm9uJywgJ3BpJywgJ3JobycsICdzaWdtYWYnLCAnc2lnbWEnLCAndGF1JywgJ3Vwc2lsb24nLCAncGhpJywgJ2NoaScsICdwc2knLCAnb21lZ2EnLCAndGhldGFzeW0nLCAndXBzaWgnLCAncGl2JywgJ2J1bGwnLCAnaGVsbGlwJywgJ3ByaW1lJywgJ1ByaW1lJywgJ29saW5lJywgJ2ZyYXNsJywgJ3dlaWVycCcsICdpbWFnZScsICdyZWFsJywgJ3RyYWRlJywgJ2FsZWZzeW0nLCAnbGFycicsICd1YXJyJywgJ3JhcnInLCAnZGFycicsICdoYXJyJywgJ2NyYXJyJywgJ2xBcnInLCAndUFycicsICdyQXJyJywgJ2RBcnInLCAnaEFycicsICdmb3JhbGwnLCAncGFydCcsICdleGlzdCcsICdlbXB0eScsICduYWJsYScsICdpc2luJywgJ25vdGluJywgJ25pJywgJ3Byb2QnLCAnc3VtJywgJ21pbnVzJywgJ2xvd2FzdCcsICdyYWRpYycsICdwcm9wJywgJ2luZmluJywgJ2FuZycsICdhbmQnLCAnb3InLCAnY2FwJywgJ2N1cCcsICdpbnQnLCAndGhlcmU0JywgJ3NpbScsICdjb25nJywgJ2FzeW1wJywgJ25lJywgJ2VxdWl2JywgJ2xlJywgJ2dlJywgJ3N1YicsICdzdXAnLCAnbnN1YicsICdzdWJlJywgJ3N1cGUnLCAnb3BsdXMnLCAnb3RpbWVzJywgJ3BlcnAnLCAnc2RvdCcsICdsY2VpbCcsICdyY2VpbCcsICdsZmxvb3InLCAncmZsb29yJywgJ2xhbmcnLCAncmFuZycsICdsb3onLCAnc3BhZGVzJywgJ2NsdWJzJywgJ2hlYXJ0cycsICdkaWFtcyddO1xudmFyIEhUTUxfQ09ERVMgPSBbMzksIDE2MCwgMTYxLCAxNjIsIDE2MywgMTY0LCAxNjUsIDE2NiwgMTY3LCAxNjgsIDE2OSwgMTcwLCAxNzEsIDE3MiwgMTczLCAxNzQsIDE3NSwgMTc2LCAxNzcsIDE3OCwgMTc5LCAxODAsIDE4MSwgMTgyLCAxODMsIDE4NCwgMTg1LCAxODYsIDE4NywgMTg4LCAxODksIDE5MCwgMTkxLCAxOTIsIDE5MywgMTk0LCAxOTUsIDE5NiwgMTk3LCAxOTgsIDE5OSwgMjAwLCAyMDEsIDIwMiwgMjAzLCAyMDQsIDIwNSwgMjA2LCAyMDcsIDIwOCwgMjA5LCAyMTAsIDIxMSwgMjEyLCAyMTMsIDIxNCwgMjE1LCAyMTYsIDIxNywgMjE4LCAyMTksIDIyMCwgMjIxLCAyMjIsIDIyMywgMjI0LCAyMjUsIDIyNiwgMjI3LCAyMjgsIDIyOSwgMjMwLCAyMzEsIDIzMiwgMjMzLCAyMzQsIDIzNSwgMjM2LCAyMzcsIDIzOCwgMjM5LCAyNDAsIDI0MSwgMjQyLCAyNDMsIDI0NCwgMjQ1LCAyNDYsIDI0NywgMjQ4LCAyNDksIDI1MCwgMjUxLCAyNTIsIDI1MywgMjU0LCAyNTUsIDM0LCAzOCwgNjAsIDYyLCAzMzgsIDMzOSwgMzUyLCAzNTMsIDM3NiwgNzEwLCA3MzIsIDgxOTQsIDgxOTUsIDgyMDEsIDgyMDQsIDgyMDUsIDgyMDYsIDgyMDcsIDgyMTEsIDgyMTIsIDgyMTYsIDgyMTcsIDgyMTgsIDgyMjAsIDgyMjEsIDgyMjIsIDgyMjQsIDgyMjUsIDgyNDAsIDgyNDksIDgyNTAsIDgzNjQsIDQwMiwgOTEzLCA5MTQsIDkxNSwgOTE2LCA5MTcsIDkxOCwgOTE5LCA5MjAsIDkyMSwgOTIyLCA5MjMsIDkyNCwgOTI1LCA5MjYsIDkyNywgOTI4LCA5MjksIDkzMSwgOTMyLCA5MzMsIDkzNCwgOTM1LCA5MzYsIDkzNywgOTQ1LCA5NDYsIDk0NywgOTQ4LCA5NDksIDk1MCwgOTUxLCA5NTIsIDk1MywgOTU0LCA5NTUsIDk1NiwgOTU3LCA5NTgsIDk1OSwgOTYwLCA5NjEsIDk2MiwgOTYzLCA5NjQsIDk2NSwgOTY2LCA5NjcsIDk2OCwgOTY5LCA5NzcsIDk3OCwgOTgyLCA4MjI2LCA4MjMwLCA4MjQyLCA4MjQzLCA4MjU0LCA4MjYwLCA4NDcyLCA4NDY1LCA4NDc2LCA4NDgyLCA4NTAxLCA4NTkyLCA4NTkzLCA4NTk0LCA4NTk1LCA4NTk2LCA4NjI5LCA4NjU2LCA4NjU3LCA4NjU4LCA4NjU5LCA4NjYwLCA4NzA0LCA4NzA2LCA4NzA3LCA4NzA5LCA4NzExLCA4NzEyLCA4NzEzLCA4NzE1LCA4NzE5LCA4NzIxLCA4NzIyLCA4NzI3LCA4NzMwLCA4NzMzLCA4NzM0LCA4NzM2LCA4NzQzLCA4NzQ0LCA4NzQ1LCA4NzQ2LCA4NzQ3LCA4NzU2LCA4NzY0LCA4NzczLCA4Nzc2LCA4ODAwLCA4ODAxLCA4ODA0LCA4ODA1LCA4ODM0LCA4ODM1LCA4ODM2LCA4ODM4LCA4ODM5LCA4ODUzLCA4ODU1LCA4ODY5LCA4OTAxLCA4OTY4LCA4OTY5LCA4OTcwLCA4OTcxLCA5MDAxLCA5MDAyLCA5Njc0LCA5ODI0LCA5ODI3LCA5ODI5LCA5ODMwXTtcbnZhciBhbHBoYUluZGV4ID0ge307XG52YXIgbnVtSW5kZXggPSB7fTtcbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW5ndGggPSBIVE1MX0FMUEhBLmxlbmd0aDtcbiAgICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYSA9IEhUTUxfQUxQSEFbaV07XG4gICAgICAgIHZhciBjID0gSFRNTF9DT0RFU1tpXTtcbiAgICAgICAgYWxwaGFJbmRleFthXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgIG51bUluZGV4W2NdID0gYTtcbiAgICAgICAgaSsrO1xuICAgIH1cbn0pKCk7XG52YXIgSHRtbDRFbnRpdGllcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdG1sNEVudGl0aWVzKCkge1xuICAgIH1cbiAgICBIdG1sNEVudGl0aWVzLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mKCM/W1xcd1xcZF0rKTs/L2csIGZ1bmN0aW9uIChzLCBlbnRpdHkpIHtcbiAgICAgICAgICAgIHZhciBjaHI7XG4gICAgICAgICAgICBpZiAoZW50aXR5LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IGVudGl0eS5jaGFyQXQoMSkudG9Mb3dlckNhc2UoKSA9PT0gJ3gnID9cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoZW50aXR5LnN1YnN0cigyKSwgMTYpIDpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoZW50aXR5LnN1YnN0cigxKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihjb2RlKSB8fCBjb2RlID49IC0zMjc2OCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA8PSA2NTUzNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNociA9IHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaHIgPSBhbHBoYUluZGV4W2VudGl0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2hyIHx8IHM7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSHRtbDRFbnRpdGllcy5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDRFbnRpdGllcygpLmRlY29kZShzdHIpO1xuICAgIH07XG4gICAgSHRtbDRFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBhbHBoYSA9IG51bUluZGV4W3N0ci5jaGFyQ29kZUF0KGkpXTtcbiAgICAgICAgICAgIHJlc3VsdCArPSBhbHBoYSA/IFwiJlwiICsgYWxwaGEgKyBcIjtcIiA6IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIEh0bWw0RW50aXRpZXMuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWw0RW50aXRpZXMoKS5lbmNvZGUoc3RyKTtcbiAgICB9O1xuICAgIEh0bWw0RW50aXRpZXMucHJvdG90eXBlLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3RyTGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgY2MgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIHZhciBhbHBoYSA9IG51bUluZGV4W2NjXTtcbiAgICAgICAgICAgIGlmIChhbHBoYSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIiZcIiArIGFscGhhICsgXCI7XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjYyA8IDMyIHx8IGNjID4gMTI2KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNjID49IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVGcm9tICYmIGNjIDw9IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVUbykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIHN1cnJvZ2F0ZV9wYWlyc18xLmdldENvZGVQb2ludChzdHIsIGkpICsgJzsnO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIGNjICsgJzsnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sNEVudGl0aWVzKCkuZW5jb2RlTm9uVVRGKHN0cik7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3RyTGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKGMgPD0gMjU1KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0cltpKytdO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPj0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZUZyb20gJiYgYyA8PSBzdXJyb2dhdGVfcGFpcnNfMS5oaWdoU3Vycm9nYXRlVG8pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIHN1cnJvZ2F0ZV9wYWlyc18xLmdldENvZGVQb2ludChzdHIsIGkpICsgJzsnO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgYyArICc7JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgSHRtbDRFbnRpdGllcy5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sNEVudGl0aWVzKCkuZW5jb2RlTm9uQVNDSUkoc3RyKTtcbiAgICB9O1xuICAgIHJldHVybiBIdG1sNEVudGl0aWVzO1xufSgpKTtcbmV4cG9ydHMuSHRtbDRFbnRpdGllcyA9IEh0bWw0RW50aXRpZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBzdXJyb2dhdGVfcGFpcnNfMSA9IHJlcXVpcmUoXCIuL3N1cnJvZ2F0ZS1wYWlyc1wiKTtcbnZhciBFTlRJVElFUyA9IFtbJ0FhY3V0ZScsIFsxOTNdXSwgWydhYWN1dGUnLCBbMjI1XV0sIFsnQWJyZXZlJywgWzI1OF1dLCBbJ2FicmV2ZScsIFsyNTldXSwgWydhYycsIFs4NzY2XV0sIFsnYWNkJywgWzg3NjddXSwgWydhY0UnLCBbODc2NiwgODE5XV0sIFsnQWNpcmMnLCBbMTk0XV0sIFsnYWNpcmMnLCBbMjI2XV0sIFsnYWN1dGUnLCBbMTgwXV0sIFsnQWN5JywgWzEwNDBdXSwgWydhY3knLCBbMTA3Ml1dLCBbJ0FFbGlnJywgWzE5OF1dLCBbJ2FlbGlnJywgWzIzMF1dLCBbJ2FmJywgWzgyODldXSwgWydBZnInLCBbMTIwMDY4XV0sIFsnYWZyJywgWzEyMDA5NF1dLCBbJ0FncmF2ZScsIFsxOTJdXSwgWydhZ3JhdmUnLCBbMjI0XV0sIFsnYWxlZnN5bScsIFs4NTAxXV0sIFsnYWxlcGgnLCBbODUwMV1dLCBbJ0FscGhhJywgWzkxM11dLCBbJ2FscGhhJywgWzk0NV1dLCBbJ0FtYWNyJywgWzI1Nl1dLCBbJ2FtYWNyJywgWzI1N11dLCBbJ2FtYWxnJywgWzEwODE1XV0sIFsnYW1wJywgWzM4XV0sIFsnQU1QJywgWzM4XV0sIFsnYW5kYW5kJywgWzEwODM3XV0sIFsnQW5kJywgWzEwODM1XV0sIFsnYW5kJywgWzg3NDNdXSwgWydhbmRkJywgWzEwODQ0XV0sIFsnYW5kc2xvcGUnLCBbMTA4NDBdXSwgWydhbmR2JywgWzEwODQyXV0sIFsnYW5nJywgWzg3MzZdXSwgWydhbmdlJywgWzEwNjYwXV0sIFsnYW5nbGUnLCBbODczNl1dLCBbJ2FuZ21zZGFhJywgWzEwNjY0XV0sIFsnYW5nbXNkYWInLCBbMTA2NjVdXSwgWydhbmdtc2RhYycsIFsxMDY2Nl1dLCBbJ2FuZ21zZGFkJywgWzEwNjY3XV0sIFsnYW5nbXNkYWUnLCBbMTA2NjhdXSwgWydhbmdtc2RhZicsIFsxMDY2OV1dLCBbJ2FuZ21zZGFnJywgWzEwNjcwXV0sIFsnYW5nbXNkYWgnLCBbMTA2NzFdXSwgWydhbmdtc2QnLCBbODczN11dLCBbJ2FuZ3J0JywgWzg3MzVdXSwgWydhbmdydHZiJywgWzg4OTRdXSwgWydhbmdydHZiZCcsIFsxMDY1M11dLCBbJ2FuZ3NwaCcsIFs4NzM4XV0sIFsnYW5nc3QnLCBbMTk3XV0sIFsnYW5nemFycicsIFs5MDg0XV0sIFsnQW9nb24nLCBbMjYwXV0sIFsnYW9nb24nLCBbMjYxXV0sIFsnQW9wZicsIFsxMjAxMjBdXSwgWydhb3BmJywgWzEyMDE0Nl1dLCBbJ2FwYWNpcicsIFsxMDg2M11dLCBbJ2FwJywgWzg3NzZdXSwgWydhcEUnLCBbMTA4NjRdXSwgWydhcGUnLCBbODc3OF1dLCBbJ2FwaWQnLCBbODc3OV1dLCBbJ2Fwb3MnLCBbMzldXSwgWydBcHBseUZ1bmN0aW9uJywgWzgyODldXSwgWydhcHByb3gnLCBbODc3Nl1dLCBbJ2FwcHJveGVxJywgWzg3NzhdXSwgWydBcmluZycsIFsxOTddXSwgWydhcmluZycsIFsyMjldXSwgWydBc2NyJywgWzExOTk2NF1dLCBbJ2FzY3InLCBbMTE5OTkwXV0sIFsnQXNzaWduJywgWzg3ODhdXSwgWydhc3QnLCBbNDJdXSwgWydhc3ltcCcsIFs4Nzc2XV0sIFsnYXN5bXBlcScsIFs4NzgxXV0sIFsnQXRpbGRlJywgWzE5NV1dLCBbJ2F0aWxkZScsIFsyMjddXSwgWydBdW1sJywgWzE5Nl1dLCBbJ2F1bWwnLCBbMjI4XV0sIFsnYXdjb25pbnQnLCBbODc1NV1dLCBbJ2F3aW50JywgWzEwNzY5XV0sIFsnYmFja2NvbmcnLCBbODc4MF1dLCBbJ2JhY2tlcHNpbG9uJywgWzEwMTRdXSwgWydiYWNrcHJpbWUnLCBbODI0NV1dLCBbJ2JhY2tzaW0nLCBbODc2NV1dLCBbJ2JhY2tzaW1lcScsIFs4OTA5XV0sIFsnQmFja3NsYXNoJywgWzg3MjZdXSwgWydCYXJ2JywgWzEwOTgzXV0sIFsnYmFydmVlJywgWzg4OTNdXSwgWydiYXJ3ZWQnLCBbODk2NV1dLCBbJ0JhcndlZCcsIFs4OTY2XV0sIFsnYmFyd2VkZ2UnLCBbODk2NV1dLCBbJ2JicmsnLCBbOTE0MV1dLCBbJ2Jicmt0YnJrJywgWzkxNDJdXSwgWydiY29uZycsIFs4NzgwXV0sIFsnQmN5JywgWzEwNDFdXSwgWydiY3knLCBbMTA3M11dLCBbJ2JkcXVvJywgWzgyMjJdXSwgWydiZWNhdXMnLCBbODc1N11dLCBbJ2JlY2F1c2UnLCBbODc1N11dLCBbJ0JlY2F1c2UnLCBbODc1N11dLCBbJ2JlbXB0eXYnLCBbMTA2NzJdXSwgWydiZXBzaScsIFsxMDE0XV0sIFsnYmVybm91JywgWzg0OTJdXSwgWydCZXJub3VsbGlzJywgWzg0OTJdXSwgWydCZXRhJywgWzkxNF1dLCBbJ2JldGEnLCBbOTQ2XV0sIFsnYmV0aCcsIFs4NTAyXV0sIFsnYmV0d2VlbicsIFs4ODEyXV0sIFsnQmZyJywgWzEyMDA2OV1dLCBbJ2JmcicsIFsxMjAwOTVdXSwgWydiaWdjYXAnLCBbODg5OF1dLCBbJ2JpZ2NpcmMnLCBbOTcxMV1dLCBbJ2JpZ2N1cCcsIFs4ODk5XV0sIFsnYmlnb2RvdCcsIFsxMDc1Ml1dLCBbJ2JpZ29wbHVzJywgWzEwNzUzXV0sIFsnYmlnb3RpbWVzJywgWzEwNzU0XV0sIFsnYmlnc3FjdXAnLCBbMTA3NThdXSwgWydiaWdzdGFyJywgWzk3MzNdXSwgWydiaWd0cmlhbmdsZWRvd24nLCBbOTY2MV1dLCBbJ2JpZ3RyaWFuZ2xldXAnLCBbOTY1MV1dLCBbJ2JpZ3VwbHVzJywgWzEwNzU2XV0sIFsnYmlndmVlJywgWzg4OTddXSwgWydiaWd3ZWRnZScsIFs4ODk2XV0sIFsnYmthcm93JywgWzEwNTA5XV0sIFsnYmxhY2tsb3plbmdlJywgWzEwNzMxXV0sIFsnYmxhY2tzcXVhcmUnLCBbOTY0Ml1dLCBbJ2JsYWNrdHJpYW5nbGUnLCBbOTY1Ml1dLCBbJ2JsYWNrdHJpYW5nbGVkb3duJywgWzk2NjJdXSwgWydibGFja3RyaWFuZ2xlbGVmdCcsIFs5NjY2XV0sIFsnYmxhY2t0cmlhbmdsZXJpZ2h0JywgWzk2NTZdXSwgWydibGFuaycsIFs5MjUxXV0sIFsnYmxrMTInLCBbOTYxOF1dLCBbJ2JsazE0JywgWzk2MTddXSwgWydibGszNCcsIFs5NjE5XV0sIFsnYmxvY2snLCBbOTYwOF1dLCBbJ2JuZScsIFs2MSwgODQyMV1dLCBbJ2JuZXF1aXYnLCBbODgwMSwgODQyMV1dLCBbJ2JOb3QnLCBbMTA5ODldXSwgWydibm90JywgWzg5NzZdXSwgWydCb3BmJywgWzEyMDEyMV1dLCBbJ2JvcGYnLCBbMTIwMTQ3XV0sIFsnYm90JywgWzg4NjldXSwgWydib3R0b20nLCBbODg2OV1dLCBbJ2Jvd3RpZScsIFs4OTA0XV0sIFsnYm94Ym94JywgWzEwNjk3XV0sIFsnYm94ZGwnLCBbOTQ4OF1dLCBbJ2JveGRMJywgWzk1NTddXSwgWydib3hEbCcsIFs5NTU4XV0sIFsnYm94REwnLCBbOTU1OV1dLCBbJ2JveGRyJywgWzk0ODRdXSwgWydib3hkUicsIFs5NTU0XV0sIFsnYm94RHInLCBbOTU1NV1dLCBbJ2JveERSJywgWzk1NTZdXSwgWydib3hoJywgWzk0NzJdXSwgWydib3hIJywgWzk1NTJdXSwgWydib3hoZCcsIFs5NTE2XV0sIFsnYm94SGQnLCBbOTU3Ml1dLCBbJ2JveGhEJywgWzk1NzNdXSwgWydib3hIRCcsIFs5NTc0XV0sIFsnYm94aHUnLCBbOTUyNF1dLCBbJ2JveEh1JywgWzk1NzVdXSwgWydib3hoVScsIFs5NTc2XV0sIFsnYm94SFUnLCBbOTU3N11dLCBbJ2JveG1pbnVzJywgWzg4NjNdXSwgWydib3hwbHVzJywgWzg4NjJdXSwgWydib3h0aW1lcycsIFs4ODY0XV0sIFsnYm94dWwnLCBbOTQ5Nl1dLCBbJ2JveHVMJywgWzk1NjNdXSwgWydib3hVbCcsIFs5NTY0XV0sIFsnYm94VUwnLCBbOTU2NV1dLCBbJ2JveHVyJywgWzk0OTJdXSwgWydib3h1UicsIFs5NTYwXV0sIFsnYm94VXInLCBbOTU2MV1dLCBbJ2JveFVSJywgWzk1NjJdXSwgWydib3h2JywgWzk0NzRdXSwgWydib3hWJywgWzk1NTNdXSwgWydib3h2aCcsIFs5NTMyXV0sIFsnYm94dkgnLCBbOTU3OF1dLCBbJ2JveFZoJywgWzk1NzldXSwgWydib3hWSCcsIFs5NTgwXV0sIFsnYm94dmwnLCBbOTUwOF1dLCBbJ2JveHZMJywgWzk1NjldXSwgWydib3hWbCcsIFs5NTcwXV0sIFsnYm94VkwnLCBbOTU3MV1dLCBbJ2JveHZyJywgWzk1MDBdXSwgWydib3h2UicsIFs5NTY2XV0sIFsnYm94VnInLCBbOTU2N11dLCBbJ2JveFZSJywgWzk1NjhdXSwgWydicHJpbWUnLCBbODI0NV1dLCBbJ2JyZXZlJywgWzcyOF1dLCBbJ0JyZXZlJywgWzcyOF1dLCBbJ2JydmJhcicsIFsxNjZdXSwgWydic2NyJywgWzExOTk5MV1dLCBbJ0JzY3InLCBbODQ5Ml1dLCBbJ2JzZW1pJywgWzgyNzFdXSwgWydic2ltJywgWzg3NjVdXSwgWydic2ltZScsIFs4OTA5XV0sIFsnYnNvbGInLCBbMTA2OTNdXSwgWydic29sJywgWzkyXV0sIFsnYnNvbGhzdWInLCBbMTAxODRdXSwgWydidWxsJywgWzgyMjZdXSwgWydidWxsZXQnLCBbODIyNl1dLCBbJ2J1bXAnLCBbODc4Ml1dLCBbJ2J1bXBFJywgWzEwOTI2XV0sIFsnYnVtcGUnLCBbODc4M11dLCBbJ0J1bXBlcScsIFs4NzgyXV0sIFsnYnVtcGVxJywgWzg3ODNdXSwgWydDYWN1dGUnLCBbMjYyXV0sIFsnY2FjdXRlJywgWzI2M11dLCBbJ2NhcGFuZCcsIFsxMDgyMF1dLCBbJ2NhcGJyY3VwJywgWzEwODI1XV0sIFsnY2FwY2FwJywgWzEwODI3XV0sIFsnY2FwJywgWzg3NDVdXSwgWydDYXAnLCBbODkxNF1dLCBbJ2NhcGN1cCcsIFsxMDgyM11dLCBbJ2NhcGRvdCcsIFsxMDgxNl1dLCBbJ0NhcGl0YWxEaWZmZXJlbnRpYWxEJywgWzg1MTddXSwgWydjYXBzJywgWzg3NDUsIDY1MDI0XV0sIFsnY2FyZXQnLCBbODI1N11dLCBbJ2Nhcm9uJywgWzcxMV1dLCBbJ0NheWxleXMnLCBbODQ5M11dLCBbJ2NjYXBzJywgWzEwODI5XV0sIFsnQ2Nhcm9uJywgWzI2OF1dLCBbJ2NjYXJvbicsIFsyNjldXSwgWydDY2VkaWwnLCBbMTk5XV0sIFsnY2NlZGlsJywgWzIzMV1dLCBbJ0NjaXJjJywgWzI2NF1dLCBbJ2NjaXJjJywgWzI2NV1dLCBbJ0Njb25pbnQnLCBbODc1Ml1dLCBbJ2NjdXBzJywgWzEwODI4XV0sIFsnY2N1cHNzbScsIFsxMDgzMl1dLCBbJ0Nkb3QnLCBbMjY2XV0sIFsnY2RvdCcsIFsyNjddXSwgWydjZWRpbCcsIFsxODRdXSwgWydDZWRpbGxhJywgWzE4NF1dLCBbJ2NlbXB0eXYnLCBbMTA2NzRdXSwgWydjZW50JywgWzE2Ml1dLCBbJ2NlbnRlcmRvdCcsIFsxODNdXSwgWydDZW50ZXJEb3QnLCBbMTgzXV0sIFsnY2ZyJywgWzEyMDA5Nl1dLCBbJ0NmcicsIFs4NDkzXV0sIFsnQ0hjeScsIFsxMDYzXV0sIFsnY2hjeScsIFsxMDk1XV0sIFsnY2hlY2snLCBbMTAwMDNdXSwgWydjaGVja21hcmsnLCBbMTAwMDNdXSwgWydDaGknLCBbOTM1XV0sIFsnY2hpJywgWzk2N11dLCBbJ2NpcmMnLCBbNzEwXV0sIFsnY2lyY2VxJywgWzg3OTFdXSwgWydjaXJjbGVhcnJvd2xlZnQnLCBbODYzNF1dLCBbJ2NpcmNsZWFycm93cmlnaHQnLCBbODYzNV1dLCBbJ2NpcmNsZWRhc3QnLCBbODg1OV1dLCBbJ2NpcmNsZWRjaXJjJywgWzg4NThdXSwgWydjaXJjbGVkZGFzaCcsIFs4ODYxXV0sIFsnQ2lyY2xlRG90JywgWzg4NTddXSwgWydjaXJjbGVkUicsIFsxNzRdXSwgWydjaXJjbGVkUycsIFs5NDE2XV0sIFsnQ2lyY2xlTWludXMnLCBbODg1NF1dLCBbJ0NpcmNsZVBsdXMnLCBbODg1M11dLCBbJ0NpcmNsZVRpbWVzJywgWzg4NTVdXSwgWydjaXInLCBbOTY3NV1dLCBbJ2NpckUnLCBbMTA2OTFdXSwgWydjaXJlJywgWzg3OTFdXSwgWydjaXJmbmludCcsIFsxMDc2OF1dLCBbJ2Npcm1pZCcsIFsxMDk5MV1dLCBbJ2NpcnNjaXInLCBbMTA2OTBdXSwgWydDbG9ja3dpc2VDb250b3VySW50ZWdyYWwnLCBbODc1NF1dLCBbJ2NsdWJzJywgWzk4MjddXSwgWydjbHVic3VpdCcsIFs5ODI3XV0sIFsnY29sb24nLCBbNThdXSwgWydDb2xvbicsIFs4NzU5XV0sIFsnQ29sb25lJywgWzEwODY4XV0sIFsnY29sb25lJywgWzg3ODhdXSwgWydjb2xvbmVxJywgWzg3ODhdXSwgWydjb21tYScsIFs0NF1dLCBbJ2NvbW1hdCcsIFs2NF1dLCBbJ2NvbXAnLCBbODcwNV1dLCBbJ2NvbXBmbicsIFs4NzI4XV0sIFsnY29tcGxlbWVudCcsIFs4NzA1XV0sIFsnY29tcGxleGVzJywgWzg0NTBdXSwgWydjb25nJywgWzg3NzNdXSwgWydjb25nZG90JywgWzEwODYxXV0sIFsnQ29uZ3J1ZW50JywgWzg4MDFdXSwgWydjb25pbnQnLCBbODc1MF1dLCBbJ0NvbmludCcsIFs4NzUxXV0sIFsnQ29udG91ckludGVncmFsJywgWzg3NTBdXSwgWydjb3BmJywgWzEyMDE0OF1dLCBbJ0NvcGYnLCBbODQ1MF1dLCBbJ2NvcHJvZCcsIFs4NzIwXV0sIFsnQ29wcm9kdWN0JywgWzg3MjBdXSwgWydjb3B5JywgWzE2OV1dLCBbJ0NPUFknLCBbMTY5XV0sIFsnY29weXNyJywgWzg0NzFdXSwgWydDb3VudGVyQ2xvY2t3aXNlQ29udG91ckludGVncmFsJywgWzg3NTVdXSwgWydjcmFycicsIFs4NjI5XV0sIFsnY3Jvc3MnLCBbMTAwMDddXSwgWydDcm9zcycsIFsxMDc5OV1dLCBbJ0NzY3InLCBbMTE5OTY2XV0sIFsnY3NjcicsIFsxMTk5OTJdXSwgWydjc3ViJywgWzEwOTU5XV0sIFsnY3N1YmUnLCBbMTA5NjFdXSwgWydjc3VwJywgWzEwOTYwXV0sIFsnY3N1cGUnLCBbMTA5NjJdXSwgWydjdGRvdCcsIFs4OTQzXV0sIFsnY3VkYXJybCcsIFsxMDU1Ml1dLCBbJ2N1ZGFycnInLCBbMTA1NDldXSwgWydjdWVwcicsIFs4OTI2XV0sIFsnY3Vlc2MnLCBbODkyN11dLCBbJ2N1bGFycicsIFs4NjMwXV0sIFsnY3VsYXJycCcsIFsxMDU1N11dLCBbJ2N1cGJyY2FwJywgWzEwODI0XV0sIFsnY3VwY2FwJywgWzEwODIyXV0sIFsnQ3VwQ2FwJywgWzg3ODFdXSwgWydjdXAnLCBbODc0Nl1dLCBbJ0N1cCcsIFs4OTE1XV0sIFsnY3VwY3VwJywgWzEwODI2XV0sIFsnY3VwZG90JywgWzg4NDVdXSwgWydjdXBvcicsIFsxMDgyMV1dLCBbJ2N1cHMnLCBbODc0NiwgNjUwMjRdXSwgWydjdXJhcnInLCBbODYzMV1dLCBbJ2N1cmFycm0nLCBbMTA1NTZdXSwgWydjdXJseWVxcHJlYycsIFs4OTI2XV0sIFsnY3VybHllcXN1Y2MnLCBbODkyN11dLCBbJ2N1cmx5dmVlJywgWzg5MTBdXSwgWydjdXJseXdlZGdlJywgWzg5MTFdXSwgWydjdXJyZW4nLCBbMTY0XV0sIFsnY3VydmVhcnJvd2xlZnQnLCBbODYzMF1dLCBbJ2N1cnZlYXJyb3dyaWdodCcsIFs4NjMxXV0sIFsnY3V2ZWUnLCBbODkxMF1dLCBbJ2N1d2VkJywgWzg5MTFdXSwgWydjd2NvbmludCcsIFs4NzU0XV0sIFsnY3dpbnQnLCBbODc1M11dLCBbJ2N5bGN0eScsIFs5MDA1XV0sIFsnZGFnZ2VyJywgWzgyMjRdXSwgWydEYWdnZXInLCBbODIyNV1dLCBbJ2RhbGV0aCcsIFs4NTA0XV0sIFsnZGFycicsIFs4NTk1XV0sIFsnRGFycicsIFs4NjA5XV0sIFsnZEFycicsIFs4NjU5XV0sIFsnZGFzaCcsIFs4MjA4XV0sIFsnRGFzaHYnLCBbMTA5ODBdXSwgWydkYXNodicsIFs4ODY3XV0sIFsnZGJrYXJvdycsIFsxMDUxMV1dLCBbJ2RibGFjJywgWzczM11dLCBbJ0RjYXJvbicsIFsyNzBdXSwgWydkY2Fyb24nLCBbMjcxXV0sIFsnRGN5JywgWzEwNDRdXSwgWydkY3knLCBbMTA3Nl1dLCBbJ2RkYWdnZXInLCBbODIyNV1dLCBbJ2RkYXJyJywgWzg2NTBdXSwgWydERCcsIFs4NTE3XV0sIFsnZGQnLCBbODUxOF1dLCBbJ0REb3RyYWhkJywgWzEwNTEzXV0sIFsnZGRvdHNlcScsIFsxMDg3MV1dLCBbJ2RlZycsIFsxNzZdXSwgWydEZWwnLCBbODcxMV1dLCBbJ0RlbHRhJywgWzkxNl1dLCBbJ2RlbHRhJywgWzk0OF1dLCBbJ2RlbXB0eXYnLCBbMTA2NzNdXSwgWydkZmlzaHQnLCBbMTA2MjNdXSwgWydEZnInLCBbMTIwMDcxXV0sIFsnZGZyJywgWzEyMDA5N11dLCBbJ2RIYXInLCBbMTA1OTddXSwgWydkaGFybCcsIFs4NjQzXV0sIFsnZGhhcnInLCBbODY0Ml1dLCBbJ0RpYWNyaXRpY2FsQWN1dGUnLCBbMTgwXV0sIFsnRGlhY3JpdGljYWxEb3QnLCBbNzI5XV0sIFsnRGlhY3JpdGljYWxEb3VibGVBY3V0ZScsIFs3MzNdXSwgWydEaWFjcml0aWNhbEdyYXZlJywgWzk2XV0sIFsnRGlhY3JpdGljYWxUaWxkZScsIFs3MzJdXSwgWydkaWFtJywgWzg5MDBdXSwgWydkaWFtb25kJywgWzg5MDBdXSwgWydEaWFtb25kJywgWzg5MDBdXSwgWydkaWFtb25kc3VpdCcsIFs5ODMwXV0sIFsnZGlhbXMnLCBbOTgzMF1dLCBbJ2RpZScsIFsxNjhdXSwgWydEaWZmZXJlbnRpYWxEJywgWzg1MThdXSwgWydkaWdhbW1hJywgWzk4OV1dLCBbJ2Rpc2luJywgWzg5NDZdXSwgWydkaXYnLCBbMjQ3XV0sIFsnZGl2aWRlJywgWzI0N11dLCBbJ2RpdmlkZW9udGltZXMnLCBbODkwM11dLCBbJ2Rpdm9ueCcsIFs4OTAzXV0sIFsnREpjeScsIFsxMDI2XV0sIFsnZGpjeScsIFsxMTA2XV0sIFsnZGxjb3JuJywgWzg5OTBdXSwgWydkbGNyb3AnLCBbODk3M11dLCBbJ2RvbGxhcicsIFszNl1dLCBbJ0RvcGYnLCBbMTIwMTIzXV0sIFsnZG9wZicsIFsxMjAxNDldXSwgWydEb3QnLCBbMTY4XV0sIFsnZG90JywgWzcyOV1dLCBbJ0RvdERvdCcsIFs4NDEyXV0sIFsnZG90ZXEnLCBbODc4NF1dLCBbJ2RvdGVxZG90JywgWzg3ODVdXSwgWydEb3RFcXVhbCcsIFs4Nzg0XV0sIFsnZG90bWludXMnLCBbODc2MF1dLCBbJ2RvdHBsdXMnLCBbODcyNF1dLCBbJ2RvdHNxdWFyZScsIFs4ODY1XV0sIFsnZG91YmxlYmFyd2VkZ2UnLCBbODk2Nl1dLCBbJ0RvdWJsZUNvbnRvdXJJbnRlZ3JhbCcsIFs4NzUxXV0sIFsnRG91YmxlRG90JywgWzE2OF1dLCBbJ0RvdWJsZURvd25BcnJvdycsIFs4NjU5XV0sIFsnRG91YmxlTGVmdEFycm93JywgWzg2NTZdXSwgWydEb3VibGVMZWZ0UmlnaHRBcnJvdycsIFs4NjYwXV0sIFsnRG91YmxlTGVmdFRlZScsIFsxMDk4MF1dLCBbJ0RvdWJsZUxvbmdMZWZ0QXJyb3cnLCBbMTAyMzJdXSwgWydEb3VibGVMb25nTGVmdFJpZ2h0QXJyb3cnLCBbMTAyMzRdXSwgWydEb3VibGVMb25nUmlnaHRBcnJvdycsIFsxMDIzM11dLCBbJ0RvdWJsZVJpZ2h0QXJyb3cnLCBbODY1OF1dLCBbJ0RvdWJsZVJpZ2h0VGVlJywgWzg4NzJdXSwgWydEb3VibGVVcEFycm93JywgWzg2NTddXSwgWydEb3VibGVVcERvd25BcnJvdycsIFs4NjYxXV0sIFsnRG91YmxlVmVydGljYWxCYXInLCBbODc0MV1dLCBbJ0Rvd25BcnJvd0JhcicsIFsxMDUxNV1dLCBbJ2Rvd25hcnJvdycsIFs4NTk1XV0sIFsnRG93bkFycm93JywgWzg1OTVdXSwgWydEb3duYXJyb3cnLCBbODY1OV1dLCBbJ0Rvd25BcnJvd1VwQXJyb3cnLCBbODY5M11dLCBbJ0Rvd25CcmV2ZScsIFs3ODVdXSwgWydkb3duZG93bmFycm93cycsIFs4NjUwXV0sIFsnZG93bmhhcnBvb25sZWZ0JywgWzg2NDNdXSwgWydkb3duaGFycG9vbnJpZ2h0JywgWzg2NDJdXSwgWydEb3duTGVmdFJpZ2h0VmVjdG9yJywgWzEwNTc2XV0sIFsnRG93bkxlZnRUZWVWZWN0b3InLCBbMTA1OTBdXSwgWydEb3duTGVmdFZlY3RvckJhcicsIFsxMDU4Ml1dLCBbJ0Rvd25MZWZ0VmVjdG9yJywgWzg2MzddXSwgWydEb3duUmlnaHRUZWVWZWN0b3InLCBbMTA1OTFdXSwgWydEb3duUmlnaHRWZWN0b3JCYXInLCBbMTA1ODNdXSwgWydEb3duUmlnaHRWZWN0b3InLCBbODY0MV1dLCBbJ0Rvd25UZWVBcnJvdycsIFs4NjE1XV0sIFsnRG93blRlZScsIFs4ODY4XV0sIFsnZHJia2Fyb3cnLCBbMTA1MTJdXSwgWydkcmNvcm4nLCBbODk5MV1dLCBbJ2RyY3JvcCcsIFs4OTcyXV0sIFsnRHNjcicsIFsxMTk5NjddXSwgWydkc2NyJywgWzExOTk5M11dLCBbJ0RTY3knLCBbMTAyOV1dLCBbJ2RzY3knLCBbMTEwOV1dLCBbJ2Rzb2wnLCBbMTA3NDJdXSwgWydEc3Ryb2snLCBbMjcyXV0sIFsnZHN0cm9rJywgWzI3M11dLCBbJ2R0ZG90JywgWzg5NDVdXSwgWydkdHJpJywgWzk2NjNdXSwgWydkdHJpZicsIFs5NjYyXV0sIFsnZHVhcnInLCBbODY5M11dLCBbJ2R1aGFyJywgWzEwNjA3XV0sIFsnZHdhbmdsZScsIFsxMDY2Ml1dLCBbJ0RaY3knLCBbMTAzOV1dLCBbJ2R6Y3knLCBbMTExOV1dLCBbJ2R6aWdyYXJyJywgWzEwMjM5XV0sIFsnRWFjdXRlJywgWzIwMV1dLCBbJ2VhY3V0ZScsIFsyMzNdXSwgWydlYXN0ZXInLCBbMTA4NjJdXSwgWydFY2Fyb24nLCBbMjgyXV0sIFsnZWNhcm9uJywgWzI4M11dLCBbJ0VjaXJjJywgWzIwMl1dLCBbJ2VjaXJjJywgWzIzNF1dLCBbJ2VjaXInLCBbODc5MF1dLCBbJ2Vjb2xvbicsIFs4Nzg5XV0sIFsnRWN5JywgWzEwNjldXSwgWydlY3knLCBbMTEwMV1dLCBbJ2VERG90JywgWzEwODcxXV0sIFsnRWRvdCcsIFsyNzhdXSwgWydlZG90JywgWzI3OV1dLCBbJ2VEb3QnLCBbODc4NV1dLCBbJ2VlJywgWzg1MTldXSwgWydlZkRvdCcsIFs4Nzg2XV0sIFsnRWZyJywgWzEyMDA3Ml1dLCBbJ2VmcicsIFsxMjAwOThdXSwgWydlZycsIFsxMDkwNl1dLCBbJ0VncmF2ZScsIFsyMDBdXSwgWydlZ3JhdmUnLCBbMjMyXV0sIFsnZWdzJywgWzEwOTAyXV0sIFsnZWdzZG90JywgWzEwOTA0XV0sIFsnZWwnLCBbMTA5MDVdXSwgWydFbGVtZW50JywgWzg3MTJdXSwgWydlbGludGVycycsIFs5MTkxXV0sIFsnZWxsJywgWzg0NjddXSwgWydlbHMnLCBbMTA5MDFdXSwgWydlbHNkb3QnLCBbMTA5MDNdXSwgWydFbWFjcicsIFsyNzRdXSwgWydlbWFjcicsIFsyNzVdXSwgWydlbXB0eScsIFs4NzA5XV0sIFsnZW1wdHlzZXQnLCBbODcwOV1dLCBbJ0VtcHR5U21hbGxTcXVhcmUnLCBbOTcyM11dLCBbJ2VtcHR5dicsIFs4NzA5XV0sIFsnRW1wdHlWZXJ5U21hbGxTcXVhcmUnLCBbOTY0M11dLCBbJ2Vtc3AxMycsIFs4MTk2XV0sIFsnZW1zcDE0JywgWzgxOTddXSwgWydlbXNwJywgWzgxOTVdXSwgWydFTkcnLCBbMzMwXV0sIFsnZW5nJywgWzMzMV1dLCBbJ2Vuc3AnLCBbODE5NF1dLCBbJ0VvZ29uJywgWzI4MF1dLCBbJ2VvZ29uJywgWzI4MV1dLCBbJ0VvcGYnLCBbMTIwMTI0XV0sIFsnZW9wZicsIFsxMjAxNTBdXSwgWydlcGFyJywgWzg5MTddXSwgWydlcGFyc2wnLCBbMTA3MjNdXSwgWydlcGx1cycsIFsxMDg2NV1dLCBbJ2Vwc2knLCBbOTQ5XV0sIFsnRXBzaWxvbicsIFs5MTddXSwgWydlcHNpbG9uJywgWzk0OV1dLCBbJ2Vwc2l2JywgWzEwMTNdXSwgWydlcWNpcmMnLCBbODc5MF1dLCBbJ2VxY29sb24nLCBbODc4OV1dLCBbJ2Vxc2ltJywgWzg3NzBdXSwgWydlcXNsYW50Z3RyJywgWzEwOTAyXV0sIFsnZXFzbGFudGxlc3MnLCBbMTA5MDFdXSwgWydFcXVhbCcsIFsxMDg2OV1dLCBbJ2VxdWFscycsIFs2MV1dLCBbJ0VxdWFsVGlsZGUnLCBbODc3MF1dLCBbJ2VxdWVzdCcsIFs4Nzk5XV0sIFsnRXF1aWxpYnJpdW0nLCBbODY1Ml1dLCBbJ2VxdWl2JywgWzg4MDFdXSwgWydlcXVpdkREJywgWzEwODcyXV0sIFsnZXF2cGFyc2wnLCBbMTA3MjVdXSwgWydlcmFycicsIFsxMDYwOV1dLCBbJ2VyRG90JywgWzg3ODddXSwgWydlc2NyJywgWzg0OTVdXSwgWydFc2NyJywgWzg0OTZdXSwgWydlc2RvdCcsIFs4Nzg0XV0sIFsnRXNpbScsIFsxMDg2N11dLCBbJ2VzaW0nLCBbODc3MF1dLCBbJ0V0YScsIFs5MTldXSwgWydldGEnLCBbOTUxXV0sIFsnRVRIJywgWzIwOF1dLCBbJ2V0aCcsIFsyNDBdXSwgWydFdW1sJywgWzIwM11dLCBbJ2V1bWwnLCBbMjM1XV0sIFsnZXVybycsIFs4MzY0XV0sIFsnZXhjbCcsIFszM11dLCBbJ2V4aXN0JywgWzg3MDddXSwgWydFeGlzdHMnLCBbODcwN11dLCBbJ2V4cGVjdGF0aW9uJywgWzg0OTZdXSwgWydleHBvbmVudGlhbGUnLCBbODUxOV1dLCBbJ0V4cG9uZW50aWFsRScsIFs4NTE5XV0sIFsnZmFsbGluZ2RvdHNlcScsIFs4Nzg2XV0sIFsnRmN5JywgWzEwNjBdXSwgWydmY3knLCBbMTA5Ml1dLCBbJ2ZlbWFsZScsIFs5NzkyXV0sIFsnZmZpbGlnJywgWzY0MjU5XV0sIFsnZmZsaWcnLCBbNjQyNTZdXSwgWydmZmxsaWcnLCBbNjQyNjBdXSwgWydGZnInLCBbMTIwMDczXV0sIFsnZmZyJywgWzEyMDA5OV1dLCBbJ2ZpbGlnJywgWzY0MjU3XV0sIFsnRmlsbGVkU21hbGxTcXVhcmUnLCBbOTcyNF1dLCBbJ0ZpbGxlZFZlcnlTbWFsbFNxdWFyZScsIFs5NjQyXV0sIFsnZmpsaWcnLCBbMTAyLCAxMDZdXSwgWydmbGF0JywgWzk4MzddXSwgWydmbGxpZycsIFs2NDI1OF1dLCBbJ2ZsdG5zJywgWzk2NDldXSwgWydmbm9mJywgWzQwMl1dLCBbJ0ZvcGYnLCBbMTIwMTI1XV0sIFsnZm9wZicsIFsxMjAxNTFdXSwgWydmb3JhbGwnLCBbODcwNF1dLCBbJ0ZvckFsbCcsIFs4NzA0XV0sIFsnZm9yaycsIFs4OTE2XV0sIFsnZm9ya3YnLCBbMTA5NjldXSwgWydGb3VyaWVydHJmJywgWzg0OTddXSwgWydmcGFydGludCcsIFsxMDc2NV1dLCBbJ2ZyYWMxMicsIFsxODldXSwgWydmcmFjMTMnLCBbODUzMV1dLCBbJ2ZyYWMxNCcsIFsxODhdXSwgWydmcmFjMTUnLCBbODUzM11dLCBbJ2ZyYWMxNicsIFs4NTM3XV0sIFsnZnJhYzE4JywgWzg1MzldXSwgWydmcmFjMjMnLCBbODUzMl1dLCBbJ2ZyYWMyNScsIFs4NTM0XV0sIFsnZnJhYzM0JywgWzE5MF1dLCBbJ2ZyYWMzNScsIFs4NTM1XV0sIFsnZnJhYzM4JywgWzg1NDBdXSwgWydmcmFjNDUnLCBbODUzNl1dLCBbJ2ZyYWM1NicsIFs4NTM4XV0sIFsnZnJhYzU4JywgWzg1NDFdXSwgWydmcmFjNzgnLCBbODU0Ml1dLCBbJ2ZyYXNsJywgWzgyNjBdXSwgWydmcm93bicsIFs4OTk0XV0sIFsnZnNjcicsIFsxMTk5OTVdXSwgWydGc2NyJywgWzg0OTddXSwgWydnYWN1dGUnLCBbNTAxXV0sIFsnR2FtbWEnLCBbOTE1XV0sIFsnZ2FtbWEnLCBbOTQ3XV0sIFsnR2FtbWFkJywgWzk4OF1dLCBbJ2dhbW1hZCcsIFs5ODldXSwgWydnYXAnLCBbMTA4ODZdXSwgWydHYnJldmUnLCBbMjg2XV0sIFsnZ2JyZXZlJywgWzI4N11dLCBbJ0djZWRpbCcsIFsyOTBdXSwgWydHY2lyYycsIFsyODRdXSwgWydnY2lyYycsIFsyODVdXSwgWydHY3knLCBbMTA0M11dLCBbJ2djeScsIFsxMDc1XV0sIFsnR2RvdCcsIFsyODhdXSwgWydnZG90JywgWzI4OV1dLCBbJ2dlJywgWzg4MDVdXSwgWydnRScsIFs4ODA3XV0sIFsnZ0VsJywgWzEwODkyXV0sIFsnZ2VsJywgWzg5MjNdXSwgWydnZXEnLCBbODgwNV1dLCBbJ2dlcXEnLCBbODgwN11dLCBbJ2dlcXNsYW50JywgWzEwODc4XV0sIFsnZ2VzY2MnLCBbMTA5MjFdXSwgWydnZXMnLCBbMTA4NzhdXSwgWydnZXNkb3QnLCBbMTA4ODBdXSwgWydnZXNkb3RvJywgWzEwODgyXV0sIFsnZ2VzZG90b2wnLCBbMTA4ODRdXSwgWydnZXNsJywgWzg5MjMsIDY1MDI0XV0sIFsnZ2VzbGVzJywgWzEwOTAwXV0sIFsnR2ZyJywgWzEyMDA3NF1dLCBbJ2dmcicsIFsxMjAxMDBdXSwgWydnZycsIFs4ODExXV0sIFsnR2cnLCBbODkyMV1dLCBbJ2dnZycsIFs4OTIxXV0sIFsnZ2ltZWwnLCBbODUwM11dLCBbJ0dKY3knLCBbMTAyN11dLCBbJ2dqY3knLCBbMTEwN11dLCBbJ2dsYScsIFsxMDkxN11dLCBbJ2dsJywgWzg4MjNdXSwgWydnbEUnLCBbMTA4OThdXSwgWydnbGonLCBbMTA5MTZdXSwgWydnbmFwJywgWzEwODkwXV0sIFsnZ25hcHByb3gnLCBbMTA4OTBdXSwgWydnbmUnLCBbMTA4ODhdXSwgWydnbkUnLCBbODgwOV1dLCBbJ2duZXEnLCBbMTA4ODhdXSwgWydnbmVxcScsIFs4ODA5XV0sIFsnZ25zaW0nLCBbODkzNV1dLCBbJ0dvcGYnLCBbMTIwMTI2XV0sIFsnZ29wZicsIFsxMjAxNTJdXSwgWydncmF2ZScsIFs5Nl1dLCBbJ0dyZWF0ZXJFcXVhbCcsIFs4ODA1XV0sIFsnR3JlYXRlckVxdWFsTGVzcycsIFs4OTIzXV0sIFsnR3JlYXRlckZ1bGxFcXVhbCcsIFs4ODA3XV0sIFsnR3JlYXRlckdyZWF0ZXInLCBbMTA5MTRdXSwgWydHcmVhdGVyTGVzcycsIFs4ODIzXV0sIFsnR3JlYXRlclNsYW50RXF1YWwnLCBbMTA4NzhdXSwgWydHcmVhdGVyVGlsZGUnLCBbODgxOV1dLCBbJ0dzY3InLCBbMTE5OTcwXV0sIFsnZ3NjcicsIFs4NDU4XV0sIFsnZ3NpbScsIFs4ODE5XV0sIFsnZ3NpbWUnLCBbMTA4OTRdXSwgWydnc2ltbCcsIFsxMDg5Nl1dLCBbJ2d0Y2MnLCBbMTA5MTldXSwgWydndGNpcicsIFsxMDg3NF1dLCBbJ2d0JywgWzYyXV0sIFsnR1QnLCBbNjJdXSwgWydHdCcsIFs4ODExXV0sIFsnZ3Rkb3QnLCBbODkxOV1dLCBbJ2d0bFBhcicsIFsxMDY0NV1dLCBbJ2d0cXVlc3QnLCBbMTA4NzZdXSwgWydndHJhcHByb3gnLCBbMTA4ODZdXSwgWydndHJhcnInLCBbMTA2MTZdXSwgWydndHJkb3QnLCBbODkxOV1dLCBbJ2d0cmVxbGVzcycsIFs4OTIzXV0sIFsnZ3RyZXFxbGVzcycsIFsxMDg5Ml1dLCBbJ2d0cmxlc3MnLCBbODgyM11dLCBbJ2d0cnNpbScsIFs4ODE5XV0sIFsnZ3ZlcnRuZXFxJywgWzg4MDksIDY1MDI0XV0sIFsnZ3ZuRScsIFs4ODA5LCA2NTAyNF1dLCBbJ0hhY2VrJywgWzcxMV1dLCBbJ2hhaXJzcCcsIFs4MjAyXV0sIFsnaGFsZicsIFsxODldXSwgWydoYW1pbHQnLCBbODQ1OV1dLCBbJ0hBUkRjeScsIFsxMDY2XV0sIFsnaGFyZGN5JywgWzEwOThdXSwgWydoYXJyY2lyJywgWzEwNTY4XV0sIFsnaGFycicsIFs4NTk2XV0sIFsnaEFycicsIFs4NjYwXV0sIFsnaGFycncnLCBbODYyMV1dLCBbJ0hhdCcsIFs5NF1dLCBbJ2hiYXInLCBbODQ2M11dLCBbJ0hjaXJjJywgWzI5Ml1dLCBbJ2hjaXJjJywgWzI5M11dLCBbJ2hlYXJ0cycsIFs5ODI5XV0sIFsnaGVhcnRzdWl0JywgWzk4MjldXSwgWydoZWxsaXAnLCBbODIzMF1dLCBbJ2hlcmNvbicsIFs4ODg5XV0sIFsnaGZyJywgWzEyMDEwMV1dLCBbJ0hmcicsIFs4NDYwXV0sIFsnSGlsYmVydFNwYWNlJywgWzg0NTldXSwgWydoa3NlYXJvdycsIFsxMDUzM11dLCBbJ2hrc3dhcm93JywgWzEwNTM0XV0sIFsnaG9hcnInLCBbODcwM11dLCBbJ2hvbXRodCcsIFs4NzYzXV0sIFsnaG9va2xlZnRhcnJvdycsIFs4NjE3XV0sIFsnaG9va3JpZ2h0YXJyb3cnLCBbODYxOF1dLCBbJ2hvcGYnLCBbMTIwMTUzXV0sIFsnSG9wZicsIFs4NDYxXV0sIFsnaG9yYmFyJywgWzgyMTNdXSwgWydIb3Jpem9udGFsTGluZScsIFs5NDcyXV0sIFsnaHNjcicsIFsxMTk5OTddXSwgWydIc2NyJywgWzg0NTldXSwgWydoc2xhc2gnLCBbODQ2M11dLCBbJ0hzdHJvaycsIFsyOTRdXSwgWydoc3Ryb2snLCBbMjk1XV0sIFsnSHVtcERvd25IdW1wJywgWzg3ODJdXSwgWydIdW1wRXF1YWwnLCBbODc4M11dLCBbJ2h5YnVsbCcsIFs4MjU5XV0sIFsnaHlwaGVuJywgWzgyMDhdXSwgWydJYWN1dGUnLCBbMjA1XV0sIFsnaWFjdXRlJywgWzIzN11dLCBbJ2ljJywgWzgyOTFdXSwgWydJY2lyYycsIFsyMDZdXSwgWydpY2lyYycsIFsyMzhdXSwgWydJY3knLCBbMTA0OF1dLCBbJ2ljeScsIFsxMDgwXV0sIFsnSWRvdCcsIFszMDRdXSwgWydJRWN5JywgWzEwNDVdXSwgWydpZWN5JywgWzEwNzddXSwgWydpZXhjbCcsIFsxNjFdXSwgWydpZmYnLCBbODY2MF1dLCBbJ2lmcicsIFsxMjAxMDJdXSwgWydJZnInLCBbODQ2NV1dLCBbJ0lncmF2ZScsIFsyMDRdXSwgWydpZ3JhdmUnLCBbMjM2XV0sIFsnaWknLCBbODUyMF1dLCBbJ2lpaWludCcsIFsxMDc2NF1dLCBbJ2lpaW50JywgWzg3NDldXSwgWydpaW5maW4nLCBbMTA3MTZdXSwgWydpaW90YScsIFs4NDg5XV0sIFsnSUpsaWcnLCBbMzA2XV0sIFsnaWpsaWcnLCBbMzA3XV0sIFsnSW1hY3InLCBbMjk4XV0sIFsnaW1hY3InLCBbMjk5XV0sIFsnaW1hZ2UnLCBbODQ2NV1dLCBbJ0ltYWdpbmFyeUknLCBbODUyMF1dLCBbJ2ltYWdsaW5lJywgWzg0NjRdXSwgWydpbWFncGFydCcsIFs4NDY1XV0sIFsnaW1hdGgnLCBbMzA1XV0sIFsnSW0nLCBbODQ2NV1dLCBbJ2ltb2YnLCBbODg4N11dLCBbJ2ltcGVkJywgWzQzN11dLCBbJ0ltcGxpZXMnLCBbODY1OF1dLCBbJ2luY2FyZScsIFs4NDUzXV0sIFsnaW4nLCBbODcxMl1dLCBbJ2luZmluJywgWzg3MzRdXSwgWydpbmZpbnRpZScsIFsxMDcxN11dLCBbJ2lub2RvdCcsIFszMDVdXSwgWydpbnRjYWwnLCBbODg5MF1dLCBbJ2ludCcsIFs4NzQ3XV0sIFsnSW50JywgWzg3NDhdXSwgWydpbnRlZ2VycycsIFs4NDg0XV0sIFsnSW50ZWdyYWwnLCBbODc0N11dLCBbJ2ludGVyY2FsJywgWzg4OTBdXSwgWydJbnRlcnNlY3Rpb24nLCBbODg5OF1dLCBbJ2ludGxhcmhrJywgWzEwNzc1XV0sIFsnaW50cHJvZCcsIFsxMDgxMl1dLCBbJ0ludmlzaWJsZUNvbW1hJywgWzgyOTFdXSwgWydJbnZpc2libGVUaW1lcycsIFs4MjkwXV0sIFsnSU9jeScsIFsxMDI1XV0sIFsnaW9jeScsIFsxMTA1XV0sIFsnSW9nb24nLCBbMzAyXV0sIFsnaW9nb24nLCBbMzAzXV0sIFsnSW9wZicsIFsxMjAxMjhdXSwgWydpb3BmJywgWzEyMDE1NF1dLCBbJ0lvdGEnLCBbOTIxXV0sIFsnaW90YScsIFs5NTNdXSwgWydpcHJvZCcsIFsxMDgxMl1dLCBbJ2lxdWVzdCcsIFsxOTFdXSwgWydpc2NyJywgWzExOTk5OF1dLCBbJ0lzY3InLCBbODQ2NF1dLCBbJ2lzaW4nLCBbODcxMl1dLCBbJ2lzaW5kb3QnLCBbODk0OV1dLCBbJ2lzaW5FJywgWzg5NTNdXSwgWydpc2lucycsIFs4OTQ4XV0sIFsnaXNpbnN2JywgWzg5NDddXSwgWydpc2ludicsIFs4NzEyXV0sIFsnaXQnLCBbODI5MF1dLCBbJ0l0aWxkZScsIFsyOTZdXSwgWydpdGlsZGUnLCBbMjk3XV0sIFsnSXVrY3knLCBbMTAzMF1dLCBbJ2l1a2N5JywgWzExMTBdXSwgWydJdW1sJywgWzIwN11dLCBbJ2l1bWwnLCBbMjM5XV0sIFsnSmNpcmMnLCBbMzA4XV0sIFsnamNpcmMnLCBbMzA5XV0sIFsnSmN5JywgWzEwNDldXSwgWydqY3knLCBbMTA4MV1dLCBbJ0pmcicsIFsxMjAwNzddXSwgWydqZnInLCBbMTIwMTAzXV0sIFsnam1hdGgnLCBbNTY3XV0sIFsnSm9wZicsIFsxMjAxMjldXSwgWydqb3BmJywgWzEyMDE1NV1dLCBbJ0pzY3InLCBbMTE5OTczXV0sIFsnanNjcicsIFsxMTk5OTldXSwgWydKc2VyY3knLCBbMTAzMl1dLCBbJ2pzZXJjeScsIFsxMTEyXV0sIFsnSnVrY3knLCBbMTAyOF1dLCBbJ2p1a2N5JywgWzExMDhdXSwgWydLYXBwYScsIFs5MjJdXSwgWydrYXBwYScsIFs5NTRdXSwgWydrYXBwYXYnLCBbMTAwOF1dLCBbJ0tjZWRpbCcsIFszMTBdXSwgWydrY2VkaWwnLCBbMzExXV0sIFsnS2N5JywgWzEwNTBdXSwgWydrY3knLCBbMTA4Ml1dLCBbJ0tmcicsIFsxMjAwNzhdXSwgWydrZnInLCBbMTIwMTA0XV0sIFsna2dyZWVuJywgWzMxMl1dLCBbJ0tIY3knLCBbMTA2MV1dLCBbJ2toY3knLCBbMTA5M11dLCBbJ0tKY3knLCBbMTAzNl1dLCBbJ2tqY3knLCBbMTExNl1dLCBbJ0tvcGYnLCBbMTIwMTMwXV0sIFsna29wZicsIFsxMjAxNTZdXSwgWydLc2NyJywgWzExOTk3NF1dLCBbJ2tzY3InLCBbMTIwMDAwXV0sIFsnbEFhcnInLCBbODY2Nl1dLCBbJ0xhY3V0ZScsIFszMTNdXSwgWydsYWN1dGUnLCBbMzE0XV0sIFsnbGFlbXB0eXYnLCBbMTA2NzZdXSwgWydsYWdyYW4nLCBbODQ2Nl1dLCBbJ0xhbWJkYScsIFs5MjNdXSwgWydsYW1iZGEnLCBbOTU1XV0sIFsnbGFuZycsIFsxMDIxNl1dLCBbJ0xhbmcnLCBbMTAyMThdXSwgWydsYW5nZCcsIFsxMDY0MV1dLCBbJ2xhbmdsZScsIFsxMDIxNl1dLCBbJ2xhcCcsIFsxMDg4NV1dLCBbJ0xhcGxhY2V0cmYnLCBbODQ2Nl1dLCBbJ2xhcXVvJywgWzE3MV1dLCBbJ2xhcnJiJywgWzg2NzZdXSwgWydsYXJyYmZzJywgWzEwNTI3XV0sIFsnbGFycicsIFs4NTkyXV0sIFsnTGFycicsIFs4NjA2XV0sIFsnbEFycicsIFs4NjU2XV0sIFsnbGFycmZzJywgWzEwNTI1XV0sIFsnbGFycmhrJywgWzg2MTddXSwgWydsYXJybHAnLCBbODYxOV1dLCBbJ2xhcnJwbCcsIFsxMDU1M11dLCBbJ2xhcnJzaW0nLCBbMTA2MTFdXSwgWydsYXJydGwnLCBbODYxMF1dLCBbJ2xhdGFpbCcsIFsxMDUyMV1dLCBbJ2xBdGFpbCcsIFsxMDUyM11dLCBbJ2xhdCcsIFsxMDkyM11dLCBbJ2xhdGUnLCBbMTA5MjVdXSwgWydsYXRlcycsIFsxMDkyNSwgNjUwMjRdXSwgWydsYmFycicsIFsxMDUwOF1dLCBbJ2xCYXJyJywgWzEwNTEwXV0sIFsnbGJicmsnLCBbMTAwOThdXSwgWydsYnJhY2UnLCBbMTIzXV0sIFsnbGJyYWNrJywgWzkxXV0sIFsnbGJya2UnLCBbMTA2MzVdXSwgWydsYnJrc2xkJywgWzEwNjM5XV0sIFsnbGJya3NsdScsIFsxMDYzN11dLCBbJ0xjYXJvbicsIFszMTddXSwgWydsY2Fyb24nLCBbMzE4XV0sIFsnTGNlZGlsJywgWzMxNV1dLCBbJ2xjZWRpbCcsIFszMTZdXSwgWydsY2VpbCcsIFs4OTY4XV0sIFsnbGN1YicsIFsxMjNdXSwgWydMY3knLCBbMTA1MV1dLCBbJ2xjeScsIFsxMDgzXV0sIFsnbGRjYScsIFsxMDU1MF1dLCBbJ2xkcXVvJywgWzgyMjBdXSwgWydsZHF1b3InLCBbODIyMl1dLCBbJ2xkcmRoYXInLCBbMTA1OTldXSwgWydsZHJ1c2hhcicsIFsxMDU3MV1dLCBbJ2xkc2gnLCBbODYyNl1dLCBbJ2xlJywgWzg4MDRdXSwgWydsRScsIFs4ODA2XV0sIFsnTGVmdEFuZ2xlQnJhY2tldCcsIFsxMDIxNl1dLCBbJ0xlZnRBcnJvd0JhcicsIFs4Njc2XV0sIFsnbGVmdGFycm93JywgWzg1OTJdXSwgWydMZWZ0QXJyb3cnLCBbODU5Ml1dLCBbJ0xlZnRhcnJvdycsIFs4NjU2XV0sIFsnTGVmdEFycm93UmlnaHRBcnJvdycsIFs4NjQ2XV0sIFsnbGVmdGFycm93dGFpbCcsIFs4NjEwXV0sIFsnTGVmdENlaWxpbmcnLCBbODk2OF1dLCBbJ0xlZnREb3VibGVCcmFja2V0JywgWzEwMjE0XV0sIFsnTGVmdERvd25UZWVWZWN0b3InLCBbMTA1OTNdXSwgWydMZWZ0RG93blZlY3RvckJhcicsIFsxMDU4NV1dLCBbJ0xlZnREb3duVmVjdG9yJywgWzg2NDNdXSwgWydMZWZ0Rmxvb3InLCBbODk3MF1dLCBbJ2xlZnRoYXJwb29uZG93bicsIFs4NjM3XV0sIFsnbGVmdGhhcnBvb251cCcsIFs4NjM2XV0sIFsnbGVmdGxlZnRhcnJvd3MnLCBbODY0N11dLCBbJ2xlZnRyaWdodGFycm93JywgWzg1OTZdXSwgWydMZWZ0UmlnaHRBcnJvdycsIFs4NTk2XV0sIFsnTGVmdHJpZ2h0YXJyb3cnLCBbODY2MF1dLCBbJ2xlZnRyaWdodGFycm93cycsIFs4NjQ2XV0sIFsnbGVmdHJpZ2h0aGFycG9vbnMnLCBbODY1MV1dLCBbJ2xlZnRyaWdodHNxdWlnYXJyb3cnLCBbODYyMV1dLCBbJ0xlZnRSaWdodFZlY3RvcicsIFsxMDU3NF1dLCBbJ0xlZnRUZWVBcnJvdycsIFs4NjEyXV0sIFsnTGVmdFRlZScsIFs4ODY3XV0sIFsnTGVmdFRlZVZlY3RvcicsIFsxMDU4Nl1dLCBbJ2xlZnR0aHJlZXRpbWVzJywgWzg5MDddXSwgWydMZWZ0VHJpYW5nbGVCYXInLCBbMTA3MDNdXSwgWydMZWZ0VHJpYW5nbGUnLCBbODg4Ml1dLCBbJ0xlZnRUcmlhbmdsZUVxdWFsJywgWzg4ODRdXSwgWydMZWZ0VXBEb3duVmVjdG9yJywgWzEwNTc3XV0sIFsnTGVmdFVwVGVlVmVjdG9yJywgWzEwNTkyXV0sIFsnTGVmdFVwVmVjdG9yQmFyJywgWzEwNTg0XV0sIFsnTGVmdFVwVmVjdG9yJywgWzg2MzldXSwgWydMZWZ0VmVjdG9yQmFyJywgWzEwNTc4XV0sIFsnTGVmdFZlY3RvcicsIFs4NjM2XV0sIFsnbEVnJywgWzEwODkxXV0sIFsnbGVnJywgWzg5MjJdXSwgWydsZXEnLCBbODgwNF1dLCBbJ2xlcXEnLCBbODgwNl1dLCBbJ2xlcXNsYW50JywgWzEwODc3XV0sIFsnbGVzY2MnLCBbMTA5MjBdXSwgWydsZXMnLCBbMTA4NzddXSwgWydsZXNkb3QnLCBbMTA4NzldXSwgWydsZXNkb3RvJywgWzEwODgxXV0sIFsnbGVzZG90b3InLCBbMTA4ODNdXSwgWydsZXNnJywgWzg5MjIsIDY1MDI0XV0sIFsnbGVzZ2VzJywgWzEwODk5XV0sIFsnbGVzc2FwcHJveCcsIFsxMDg4NV1dLCBbJ2xlc3Nkb3QnLCBbODkxOF1dLCBbJ2xlc3NlcWd0cicsIFs4OTIyXV0sIFsnbGVzc2VxcWd0cicsIFsxMDg5MV1dLCBbJ0xlc3NFcXVhbEdyZWF0ZXInLCBbODkyMl1dLCBbJ0xlc3NGdWxsRXF1YWwnLCBbODgwNl1dLCBbJ0xlc3NHcmVhdGVyJywgWzg4MjJdXSwgWydsZXNzZ3RyJywgWzg4MjJdXSwgWydMZXNzTGVzcycsIFsxMDkxM11dLCBbJ2xlc3NzaW0nLCBbODgxOF1dLCBbJ0xlc3NTbGFudEVxdWFsJywgWzEwODc3XV0sIFsnTGVzc1RpbGRlJywgWzg4MThdXSwgWydsZmlzaHQnLCBbMTA2MjBdXSwgWydsZmxvb3InLCBbODk3MF1dLCBbJ0xmcicsIFsxMjAwNzldXSwgWydsZnInLCBbMTIwMTA1XV0sIFsnbGcnLCBbODgyMl1dLCBbJ2xnRScsIFsxMDg5N11dLCBbJ2xIYXInLCBbMTA1OTRdXSwgWydsaGFyZCcsIFs4NjM3XV0sIFsnbGhhcnUnLCBbODYzNl1dLCBbJ2xoYXJ1bCcsIFsxMDYwMl1dLCBbJ2xoYmxrJywgWzk2MDRdXSwgWydMSmN5JywgWzEwMzNdXSwgWydsamN5JywgWzExMTNdXSwgWydsbGFycicsIFs4NjQ3XV0sIFsnbGwnLCBbODgxMF1dLCBbJ0xsJywgWzg5MjBdXSwgWydsbGNvcm5lcicsIFs4OTkwXV0sIFsnTGxlZnRhcnJvdycsIFs4NjY2XV0sIFsnbGxoYXJkJywgWzEwNjAzXV0sIFsnbGx0cmknLCBbOTcyMl1dLCBbJ0xtaWRvdCcsIFszMTldXSwgWydsbWlkb3QnLCBbMzIwXV0sIFsnbG1vdXN0YWNoZScsIFs5MTM2XV0sIFsnbG1vdXN0JywgWzkxMzZdXSwgWydsbmFwJywgWzEwODg5XV0sIFsnbG5hcHByb3gnLCBbMTA4ODldXSwgWydsbmUnLCBbMTA4ODddXSwgWydsbkUnLCBbODgwOF1dLCBbJ2xuZXEnLCBbMTA4ODddXSwgWydsbmVxcScsIFs4ODA4XV0sIFsnbG5zaW0nLCBbODkzNF1dLCBbJ2xvYW5nJywgWzEwMjIwXV0sIFsnbG9hcnInLCBbODcwMV1dLCBbJ2xvYnJrJywgWzEwMjE0XV0sIFsnbG9uZ2xlZnRhcnJvdycsIFsxMDIyOV1dLCBbJ0xvbmdMZWZ0QXJyb3cnLCBbMTAyMjldXSwgWydMb25nbGVmdGFycm93JywgWzEwMjMyXV0sIFsnbG9uZ2xlZnRyaWdodGFycm93JywgWzEwMjMxXV0sIFsnTG9uZ0xlZnRSaWdodEFycm93JywgWzEwMjMxXV0sIFsnTG9uZ2xlZnRyaWdodGFycm93JywgWzEwMjM0XV0sIFsnbG9uZ21hcHN0bycsIFsxMDIzNl1dLCBbJ2xvbmdyaWdodGFycm93JywgWzEwMjMwXV0sIFsnTG9uZ1JpZ2h0QXJyb3cnLCBbMTAyMzBdXSwgWydMb25ncmlnaHRhcnJvdycsIFsxMDIzM11dLCBbJ2xvb3BhcnJvd2xlZnQnLCBbODYxOV1dLCBbJ2xvb3BhcnJvd3JpZ2h0JywgWzg2MjBdXSwgWydsb3BhcicsIFsxMDYyOV1dLCBbJ0xvcGYnLCBbMTIwMTMxXV0sIFsnbG9wZicsIFsxMjAxNTddXSwgWydsb3BsdXMnLCBbMTA3OTddXSwgWydsb3RpbWVzJywgWzEwODA0XV0sIFsnbG93YXN0JywgWzg3MjddXSwgWydsb3diYXInLCBbOTVdXSwgWydMb3dlckxlZnRBcnJvdycsIFs4NjAxXV0sIFsnTG93ZXJSaWdodEFycm93JywgWzg2MDBdXSwgWydsb3onLCBbOTY3NF1dLCBbJ2xvemVuZ2UnLCBbOTY3NF1dLCBbJ2xvemYnLCBbMTA3MzFdXSwgWydscGFyJywgWzQwXV0sIFsnbHBhcmx0JywgWzEwNjQzXV0sIFsnbHJhcnInLCBbODY0Nl1dLCBbJ2xyY29ybmVyJywgWzg5OTFdXSwgWydscmhhcicsIFs4NjUxXV0sIFsnbHJoYXJkJywgWzEwNjA1XV0sIFsnbHJtJywgWzgyMDZdXSwgWydscnRyaScsIFs4ODk1XV0sIFsnbHNhcXVvJywgWzgyNDldXSwgWydsc2NyJywgWzEyMDAwMV1dLCBbJ0xzY3InLCBbODQ2Nl1dLCBbJ2xzaCcsIFs4NjI0XV0sIFsnTHNoJywgWzg2MjRdXSwgWydsc2ltJywgWzg4MThdXSwgWydsc2ltZScsIFsxMDg5M11dLCBbJ2xzaW1nJywgWzEwODk1XV0sIFsnbHNxYicsIFs5MV1dLCBbJ2xzcXVvJywgWzgyMTZdXSwgWydsc3F1b3InLCBbODIxOF1dLCBbJ0xzdHJvaycsIFszMjFdXSwgWydsc3Ryb2snLCBbMzIyXV0sIFsnbHRjYycsIFsxMDkxOF1dLCBbJ2x0Y2lyJywgWzEwODczXV0sIFsnbHQnLCBbNjBdXSwgWydMVCcsIFs2MF1dLCBbJ0x0JywgWzg4MTBdXSwgWydsdGRvdCcsIFs4OTE4XV0sIFsnbHRocmVlJywgWzg5MDddXSwgWydsdGltZXMnLCBbODkwNV1dLCBbJ2x0bGFycicsIFsxMDYxNF1dLCBbJ2x0cXVlc3QnLCBbMTA4NzVdXSwgWydsdHJpJywgWzk2NjddXSwgWydsdHJpZScsIFs4ODg0XV0sIFsnbHRyaWYnLCBbOTY2Nl1dLCBbJ2x0clBhcicsIFsxMDY0Nl1dLCBbJ2x1cmRzaGFyJywgWzEwNTcwXV0sIFsnbHVydWhhcicsIFsxMDU5OF1dLCBbJ2x2ZXJ0bmVxcScsIFs4ODA4LCA2NTAyNF1dLCBbJ2x2bkUnLCBbODgwOCwgNjUwMjRdXSwgWydtYWNyJywgWzE3NV1dLCBbJ21hbGUnLCBbOTc5NF1dLCBbJ21hbHQnLCBbMTAwMTZdXSwgWydtYWx0ZXNlJywgWzEwMDE2XV0sIFsnTWFwJywgWzEwNTAxXV0sIFsnbWFwJywgWzg2MTRdXSwgWydtYXBzdG8nLCBbODYxNF1dLCBbJ21hcHN0b2Rvd24nLCBbODYxNV1dLCBbJ21hcHN0b2xlZnQnLCBbODYxMl1dLCBbJ21hcHN0b3VwJywgWzg2MTNdXSwgWydtYXJrZXInLCBbOTY0Nl1dLCBbJ21jb21tYScsIFsxMDc5M11dLCBbJ01jeScsIFsxMDUyXV0sIFsnbWN5JywgWzEwODRdXSwgWydtZGFzaCcsIFs4MjEyXV0sIFsnbUREb3QnLCBbODc2Ml1dLCBbJ21lYXN1cmVkYW5nbGUnLCBbODczN11dLCBbJ01lZGl1bVNwYWNlJywgWzgyODddXSwgWydNZWxsaW50cmYnLCBbODQ5OV1dLCBbJ01mcicsIFsxMjAwODBdXSwgWydtZnInLCBbMTIwMTA2XV0sIFsnbWhvJywgWzg0ODddXSwgWydtaWNybycsIFsxODFdXSwgWydtaWRhc3QnLCBbNDJdXSwgWydtaWRjaXInLCBbMTA5OTJdXSwgWydtaWQnLCBbODczOV1dLCBbJ21pZGRvdCcsIFsxODNdXSwgWydtaW51c2InLCBbODg2M11dLCBbJ21pbnVzJywgWzg3MjJdXSwgWydtaW51c2QnLCBbODc2MF1dLCBbJ21pbnVzZHUnLCBbMTA3OTRdXSwgWydNaW51c1BsdXMnLCBbODcyM11dLCBbJ21sY3AnLCBbMTA5NzFdXSwgWydtbGRyJywgWzgyMzBdXSwgWydtbnBsdXMnLCBbODcyM11dLCBbJ21vZGVscycsIFs4ODcxXV0sIFsnTW9wZicsIFsxMjAxMzJdXSwgWydtb3BmJywgWzEyMDE1OF1dLCBbJ21wJywgWzg3MjNdXSwgWydtc2NyJywgWzEyMDAwMl1dLCBbJ01zY3InLCBbODQ5OV1dLCBbJ21zdHBvcycsIFs4NzY2XV0sIFsnTXUnLCBbOTI0XV0sIFsnbXUnLCBbOTU2XV0sIFsnbXVsdGltYXAnLCBbODg4OF1dLCBbJ211bWFwJywgWzg4ODhdXSwgWyduYWJsYScsIFs4NzExXV0sIFsnTmFjdXRlJywgWzMyM11dLCBbJ25hY3V0ZScsIFszMjRdXSwgWyduYW5nJywgWzg3MzYsIDg0MDJdXSwgWyduYXAnLCBbODc3N11dLCBbJ25hcEUnLCBbMTA4NjQsIDgyNF1dLCBbJ25hcGlkJywgWzg3NzksIDgyNF1dLCBbJ25hcG9zJywgWzMyOV1dLCBbJ25hcHByb3gnLCBbODc3N11dLCBbJ25hdHVyYWwnLCBbOTgzOF1dLCBbJ25hdHVyYWxzJywgWzg0NjldXSwgWyduYXR1cicsIFs5ODM4XV0sIFsnbmJzcCcsIFsxNjBdXSwgWyduYnVtcCcsIFs4NzgyLCA4MjRdXSwgWyduYnVtcGUnLCBbODc4MywgODI0XV0sIFsnbmNhcCcsIFsxMDgxOV1dLCBbJ05jYXJvbicsIFszMjddXSwgWyduY2Fyb24nLCBbMzI4XV0sIFsnTmNlZGlsJywgWzMyNV1dLCBbJ25jZWRpbCcsIFszMjZdXSwgWyduY29uZycsIFs4Nzc1XV0sIFsnbmNvbmdkb3QnLCBbMTA4NjEsIDgyNF1dLCBbJ25jdXAnLCBbMTA4MThdXSwgWydOY3knLCBbMTA1M11dLCBbJ25jeScsIFsxMDg1XV0sIFsnbmRhc2gnLCBbODIxMV1dLCBbJ25lYXJoaycsIFsxMDUzMl1dLCBbJ25lYXJyJywgWzg1OTldXSwgWyduZUFycicsIFs4NjYzXV0sIFsnbmVhcnJvdycsIFs4NTk5XV0sIFsnbmUnLCBbODgwMF1dLCBbJ25lZG90JywgWzg3ODQsIDgyNF1dLCBbJ05lZ2F0aXZlTWVkaXVtU3BhY2UnLCBbODIwM11dLCBbJ05lZ2F0aXZlVGhpY2tTcGFjZScsIFs4MjAzXV0sIFsnTmVnYXRpdmVUaGluU3BhY2UnLCBbODIwM11dLCBbJ05lZ2F0aXZlVmVyeVRoaW5TcGFjZScsIFs4MjAzXV0sIFsnbmVxdWl2JywgWzg4MDJdXSwgWyduZXNlYXInLCBbMTA1MzZdXSwgWyduZXNpbScsIFs4NzcwLCA4MjRdXSwgWydOZXN0ZWRHcmVhdGVyR3JlYXRlcicsIFs4ODExXV0sIFsnTmVzdGVkTGVzc0xlc3MnLCBbODgxMF1dLCBbJ25leGlzdCcsIFs4NzA4XV0sIFsnbmV4aXN0cycsIFs4NzA4XV0sIFsnTmZyJywgWzEyMDA4MV1dLCBbJ25mcicsIFsxMjAxMDddXSwgWyduZ0UnLCBbODgwNywgODI0XV0sIFsnbmdlJywgWzg4MTddXSwgWyduZ2VxJywgWzg4MTddXSwgWyduZ2VxcScsIFs4ODA3LCA4MjRdXSwgWyduZ2Vxc2xhbnQnLCBbMTA4NzgsIDgyNF1dLCBbJ25nZXMnLCBbMTA4NzgsIDgyNF1dLCBbJ25HZycsIFs4OTIxLCA4MjRdXSwgWyduZ3NpbScsIFs4ODIxXV0sIFsnbkd0JywgWzg4MTEsIDg0MDJdXSwgWyduZ3QnLCBbODgxNV1dLCBbJ25ndHInLCBbODgxNV1dLCBbJ25HdHYnLCBbODgxMSwgODI0XV0sIFsnbmhhcnInLCBbODYyMl1dLCBbJ25oQXJyJywgWzg2NTRdXSwgWyduaHBhcicsIFsxMDk5NF1dLCBbJ25pJywgWzg3MTVdXSwgWyduaXMnLCBbODk1Nl1dLCBbJ25pc2QnLCBbODk1NF1dLCBbJ25pdicsIFs4NzE1XV0sIFsnTkpjeScsIFsxMDM0XV0sIFsnbmpjeScsIFsxMTE0XV0sIFsnbmxhcnInLCBbODYwMl1dLCBbJ25sQXJyJywgWzg2NTNdXSwgWydubGRyJywgWzgyMjldXSwgWydubEUnLCBbODgwNiwgODI0XV0sIFsnbmxlJywgWzg4MTZdXSwgWydubGVmdGFycm93JywgWzg2MDJdXSwgWyduTGVmdGFycm93JywgWzg2NTNdXSwgWydubGVmdHJpZ2h0YXJyb3cnLCBbODYyMl1dLCBbJ25MZWZ0cmlnaHRhcnJvdycsIFs4NjU0XV0sIFsnbmxlcScsIFs4ODE2XV0sIFsnbmxlcXEnLCBbODgwNiwgODI0XV0sIFsnbmxlcXNsYW50JywgWzEwODc3LCA4MjRdXSwgWydubGVzJywgWzEwODc3LCA4MjRdXSwgWydubGVzcycsIFs4ODE0XV0sIFsnbkxsJywgWzg5MjAsIDgyNF1dLCBbJ25sc2ltJywgWzg4MjBdXSwgWyduTHQnLCBbODgxMCwgODQwMl1dLCBbJ25sdCcsIFs4ODE0XV0sIFsnbmx0cmknLCBbODkzOF1dLCBbJ25sdHJpZScsIFs4OTQwXV0sIFsnbkx0dicsIFs4ODEwLCA4MjRdXSwgWydubWlkJywgWzg3NDBdXSwgWydOb0JyZWFrJywgWzgyODhdXSwgWydOb25CcmVha2luZ1NwYWNlJywgWzE2MF1dLCBbJ25vcGYnLCBbMTIwMTU5XV0sIFsnTm9wZicsIFs4NDY5XV0sIFsnTm90JywgWzEwOTg4XV0sIFsnbm90JywgWzE3Ml1dLCBbJ05vdENvbmdydWVudCcsIFs4ODAyXV0sIFsnTm90Q3VwQ2FwJywgWzg4MTNdXSwgWydOb3REb3VibGVWZXJ0aWNhbEJhcicsIFs4NzQyXV0sIFsnTm90RWxlbWVudCcsIFs4NzEzXV0sIFsnTm90RXF1YWwnLCBbODgwMF1dLCBbJ05vdEVxdWFsVGlsZGUnLCBbODc3MCwgODI0XV0sIFsnTm90RXhpc3RzJywgWzg3MDhdXSwgWydOb3RHcmVhdGVyJywgWzg4MTVdXSwgWydOb3RHcmVhdGVyRXF1YWwnLCBbODgxN11dLCBbJ05vdEdyZWF0ZXJGdWxsRXF1YWwnLCBbODgwNywgODI0XV0sIFsnTm90R3JlYXRlckdyZWF0ZXInLCBbODgxMSwgODI0XV0sIFsnTm90R3JlYXRlckxlc3MnLCBbODgyNV1dLCBbJ05vdEdyZWF0ZXJTbGFudEVxdWFsJywgWzEwODc4LCA4MjRdXSwgWydOb3RHcmVhdGVyVGlsZGUnLCBbODgyMV1dLCBbJ05vdEh1bXBEb3duSHVtcCcsIFs4NzgyLCA4MjRdXSwgWydOb3RIdW1wRXF1YWwnLCBbODc4MywgODI0XV0sIFsnbm90aW4nLCBbODcxM11dLCBbJ25vdGluZG90JywgWzg5NDksIDgyNF1dLCBbJ25vdGluRScsIFs4OTUzLCA4MjRdXSwgWydub3RpbnZhJywgWzg3MTNdXSwgWydub3RpbnZiJywgWzg5NTFdXSwgWydub3RpbnZjJywgWzg5NTBdXSwgWydOb3RMZWZ0VHJpYW5nbGVCYXInLCBbMTA3MDMsIDgyNF1dLCBbJ05vdExlZnRUcmlhbmdsZScsIFs4OTM4XV0sIFsnTm90TGVmdFRyaWFuZ2xlRXF1YWwnLCBbODk0MF1dLCBbJ05vdExlc3MnLCBbODgxNF1dLCBbJ05vdExlc3NFcXVhbCcsIFs4ODE2XV0sIFsnTm90TGVzc0dyZWF0ZXInLCBbODgyNF1dLCBbJ05vdExlc3NMZXNzJywgWzg4MTAsIDgyNF1dLCBbJ05vdExlc3NTbGFudEVxdWFsJywgWzEwODc3LCA4MjRdXSwgWydOb3RMZXNzVGlsZGUnLCBbODgyMF1dLCBbJ05vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyJywgWzEwOTE0LCA4MjRdXSwgWydOb3ROZXN0ZWRMZXNzTGVzcycsIFsxMDkxMywgODI0XV0sIFsnbm90bmknLCBbODcxNl1dLCBbJ25vdG5pdmEnLCBbODcxNl1dLCBbJ25vdG5pdmInLCBbODk1OF1dLCBbJ25vdG5pdmMnLCBbODk1N11dLCBbJ05vdFByZWNlZGVzJywgWzg4MzJdXSwgWydOb3RQcmVjZWRlc0VxdWFsJywgWzEwOTI3LCA4MjRdXSwgWydOb3RQcmVjZWRlc1NsYW50RXF1YWwnLCBbODkyOF1dLCBbJ05vdFJldmVyc2VFbGVtZW50JywgWzg3MTZdXSwgWydOb3RSaWdodFRyaWFuZ2xlQmFyJywgWzEwNzA0LCA4MjRdXSwgWydOb3RSaWdodFRyaWFuZ2xlJywgWzg5MzldXSwgWydOb3RSaWdodFRyaWFuZ2xlRXF1YWwnLCBbODk0MV1dLCBbJ05vdFNxdWFyZVN1YnNldCcsIFs4ODQ3LCA4MjRdXSwgWydOb3RTcXVhcmVTdWJzZXRFcXVhbCcsIFs4OTMwXV0sIFsnTm90U3F1YXJlU3VwZXJzZXQnLCBbODg0OCwgODI0XV0sIFsnTm90U3F1YXJlU3VwZXJzZXRFcXVhbCcsIFs4OTMxXV0sIFsnTm90U3Vic2V0JywgWzg4MzQsIDg0MDJdXSwgWydOb3RTdWJzZXRFcXVhbCcsIFs4ODQwXV0sIFsnTm90U3VjY2VlZHMnLCBbODgzM11dLCBbJ05vdFN1Y2NlZWRzRXF1YWwnLCBbMTA5MjgsIDgyNF1dLCBbJ05vdFN1Y2NlZWRzU2xhbnRFcXVhbCcsIFs4OTI5XV0sIFsnTm90U3VjY2VlZHNUaWxkZScsIFs4ODMxLCA4MjRdXSwgWydOb3RTdXBlcnNldCcsIFs4ODM1LCA4NDAyXV0sIFsnTm90U3VwZXJzZXRFcXVhbCcsIFs4ODQxXV0sIFsnTm90VGlsZGUnLCBbODc2OV1dLCBbJ05vdFRpbGRlRXF1YWwnLCBbODc3Ml1dLCBbJ05vdFRpbGRlRnVsbEVxdWFsJywgWzg3NzVdXSwgWydOb3RUaWxkZVRpbGRlJywgWzg3NzddXSwgWydOb3RWZXJ0aWNhbEJhcicsIFs4NzQwXV0sIFsnbnBhcmFsbGVsJywgWzg3NDJdXSwgWyducGFyJywgWzg3NDJdXSwgWyducGFyc2wnLCBbMTEwMDUsIDg0MjFdXSwgWyducGFydCcsIFs4NzA2LCA4MjRdXSwgWyducG9saW50JywgWzEwNzcyXV0sIFsnbnByJywgWzg4MzJdXSwgWyducHJjdWUnLCBbODkyOF1dLCBbJ25wcmVjJywgWzg4MzJdXSwgWyducHJlY2VxJywgWzEwOTI3LCA4MjRdXSwgWyducHJlJywgWzEwOTI3LCA4MjRdXSwgWyducmFycmMnLCBbMTA1NDcsIDgyNF1dLCBbJ25yYXJyJywgWzg2MDNdXSwgWyduckFycicsIFs4NjU1XV0sIFsnbnJhcnJ3JywgWzg2MDUsIDgyNF1dLCBbJ25yaWdodGFycm93JywgWzg2MDNdXSwgWyduUmlnaHRhcnJvdycsIFs4NjU1XV0sIFsnbnJ0cmknLCBbODkzOV1dLCBbJ25ydHJpZScsIFs4OTQxXV0sIFsnbnNjJywgWzg4MzNdXSwgWyduc2NjdWUnLCBbODkyOV1dLCBbJ25zY2UnLCBbMTA5MjgsIDgyNF1dLCBbJ05zY3InLCBbMTE5OTc3XV0sIFsnbnNjcicsIFsxMjAwMDNdXSwgWyduc2hvcnRtaWQnLCBbODc0MF1dLCBbJ25zaG9ydHBhcmFsbGVsJywgWzg3NDJdXSwgWyduc2ltJywgWzg3NjldXSwgWyduc2ltZScsIFs4NzcyXV0sIFsnbnNpbWVxJywgWzg3NzJdXSwgWyduc21pZCcsIFs4NzQwXV0sIFsnbnNwYXInLCBbODc0Ml1dLCBbJ25zcXN1YmUnLCBbODkzMF1dLCBbJ25zcXN1cGUnLCBbODkzMV1dLCBbJ25zdWInLCBbODgzNl1dLCBbJ25zdWJFJywgWzEwOTQ5LCA4MjRdXSwgWyduc3ViZScsIFs4ODQwXV0sIFsnbnN1YnNldCcsIFs4ODM0LCA4NDAyXV0sIFsnbnN1YnNldGVxJywgWzg4NDBdXSwgWyduc3Vic2V0ZXFxJywgWzEwOTQ5LCA4MjRdXSwgWyduc3VjYycsIFs4ODMzXV0sIFsnbnN1Y2NlcScsIFsxMDkyOCwgODI0XV0sIFsnbnN1cCcsIFs4ODM3XV0sIFsnbnN1cEUnLCBbMTA5NTAsIDgyNF1dLCBbJ25zdXBlJywgWzg4NDFdXSwgWyduc3Vwc2V0JywgWzg4MzUsIDg0MDJdXSwgWyduc3Vwc2V0ZXEnLCBbODg0MV1dLCBbJ25zdXBzZXRlcXEnLCBbMTA5NTAsIDgyNF1dLCBbJ250Z2wnLCBbODgyNV1dLCBbJ050aWxkZScsIFsyMDldXSwgWydudGlsZGUnLCBbMjQxXV0sIFsnbnRsZycsIFs4ODI0XV0sIFsnbnRyaWFuZ2xlbGVmdCcsIFs4OTM4XV0sIFsnbnRyaWFuZ2xlbGVmdGVxJywgWzg5NDBdXSwgWydudHJpYW5nbGVyaWdodCcsIFs4OTM5XV0sIFsnbnRyaWFuZ2xlcmlnaHRlcScsIFs4OTQxXV0sIFsnTnUnLCBbOTI1XV0sIFsnbnUnLCBbOTU3XV0sIFsnbnVtJywgWzM1XV0sIFsnbnVtZXJvJywgWzg0NzBdXSwgWydudW1zcCcsIFs4MTk5XV0sIFsnbnZhcCcsIFs4NzgxLCA4NDAyXV0sIFsnbnZkYXNoJywgWzg4NzZdXSwgWydudkRhc2gnLCBbODg3N11dLCBbJ25WZGFzaCcsIFs4ODc4XV0sIFsnblZEYXNoJywgWzg4NzldXSwgWydudmdlJywgWzg4MDUsIDg0MDJdXSwgWydudmd0JywgWzYyLCA4NDAyXV0sIFsnbnZIYXJyJywgWzEwNTAwXV0sIFsnbnZpbmZpbicsIFsxMDcxOF1dLCBbJ252bEFycicsIFsxMDQ5OF1dLCBbJ252bGUnLCBbODgwNCwgODQwMl1dLCBbJ252bHQnLCBbNjAsIDg0MDJdXSwgWydudmx0cmllJywgWzg4ODQsIDg0MDJdXSwgWydudnJBcnInLCBbMTA0OTldXSwgWydudnJ0cmllJywgWzg4ODUsIDg0MDJdXSwgWydudnNpbScsIFs4NzY0LCA4NDAyXV0sIFsnbndhcmhrJywgWzEwNTMxXV0sIFsnbndhcnInLCBbODU5OF1dLCBbJ253QXJyJywgWzg2NjJdXSwgWydud2Fycm93JywgWzg1OThdXSwgWydud25lYXInLCBbMTA1MzVdXSwgWydPYWN1dGUnLCBbMjExXV0sIFsnb2FjdXRlJywgWzI0M11dLCBbJ29hc3QnLCBbODg1OV1dLCBbJ09jaXJjJywgWzIxMl1dLCBbJ29jaXJjJywgWzI0NF1dLCBbJ29jaXInLCBbODg1OF1dLCBbJ09jeScsIFsxMDU0XV0sIFsnb2N5JywgWzEwODZdXSwgWydvZGFzaCcsIFs4ODYxXV0sIFsnT2RibGFjJywgWzMzNl1dLCBbJ29kYmxhYycsIFszMzddXSwgWydvZGl2JywgWzEwODA4XV0sIFsnb2RvdCcsIFs4ODU3XV0sIFsnb2Rzb2xkJywgWzEwNjg0XV0sIFsnT0VsaWcnLCBbMzM4XV0sIFsnb2VsaWcnLCBbMzM5XV0sIFsnb2ZjaXInLCBbMTA2ODddXSwgWydPZnInLCBbMTIwMDgyXV0sIFsnb2ZyJywgWzEyMDEwOF1dLCBbJ29nb24nLCBbNzMxXV0sIFsnT2dyYXZlJywgWzIxMF1dLCBbJ29ncmF2ZScsIFsyNDJdXSwgWydvZ3QnLCBbMTA2ODldXSwgWydvaGJhcicsIFsxMDY3N11dLCBbJ29obScsIFs5MzddXSwgWydvaW50JywgWzg3NTBdXSwgWydvbGFycicsIFs4NjM0XV0sIFsnb2xjaXInLCBbMTA2ODZdXSwgWydvbGNyb3NzJywgWzEwNjgzXV0sIFsnb2xpbmUnLCBbODI1NF1dLCBbJ29sdCcsIFsxMDY4OF1dLCBbJ09tYWNyJywgWzMzMl1dLCBbJ29tYWNyJywgWzMzM11dLCBbJ09tZWdhJywgWzkzN11dLCBbJ29tZWdhJywgWzk2OV1dLCBbJ09taWNyb24nLCBbOTI3XV0sIFsnb21pY3JvbicsIFs5NTldXSwgWydvbWlkJywgWzEwNjc4XV0sIFsnb21pbnVzJywgWzg4NTRdXSwgWydPb3BmJywgWzEyMDEzNF1dLCBbJ29vcGYnLCBbMTIwMTYwXV0sIFsnb3BhcicsIFsxMDY3OV1dLCBbJ09wZW5DdXJseURvdWJsZVF1b3RlJywgWzgyMjBdXSwgWydPcGVuQ3VybHlRdW90ZScsIFs4MjE2XV0sIFsnb3BlcnAnLCBbMTA2ODFdXSwgWydvcGx1cycsIFs4ODUzXV0sIFsnb3JhcnInLCBbODYzNV1dLCBbJ09yJywgWzEwODM2XV0sIFsnb3InLCBbODc0NF1dLCBbJ29yZCcsIFsxMDg0NV1dLCBbJ29yZGVyJywgWzg1MDBdXSwgWydvcmRlcm9mJywgWzg1MDBdXSwgWydvcmRmJywgWzE3MF1dLCBbJ29yZG0nLCBbMTg2XV0sIFsnb3JpZ29mJywgWzg4ODZdXSwgWydvcm9yJywgWzEwODM4XV0sIFsnb3JzbG9wZScsIFsxMDgzOV1dLCBbJ29ydicsIFsxMDg0M11dLCBbJ29TJywgWzk0MTZdXSwgWydPc2NyJywgWzExOTk3OF1dLCBbJ29zY3InLCBbODUwMF1dLCBbJ09zbGFzaCcsIFsyMTZdXSwgWydvc2xhc2gnLCBbMjQ4XV0sIFsnb3NvbCcsIFs4ODU2XV0sIFsnT3RpbGRlJywgWzIxM11dLCBbJ290aWxkZScsIFsyNDVdXSwgWydvdGltZXNhcycsIFsxMDgwNl1dLCBbJ090aW1lcycsIFsxMDgwN11dLCBbJ290aW1lcycsIFs4ODU1XV0sIFsnT3VtbCcsIFsyMTRdXSwgWydvdW1sJywgWzI0Nl1dLCBbJ292YmFyJywgWzkwMjFdXSwgWydPdmVyQmFyJywgWzgyNTRdXSwgWydPdmVyQnJhY2UnLCBbOTE4Ml1dLCBbJ092ZXJCcmFja2V0JywgWzkxNDBdXSwgWydPdmVyUGFyZW50aGVzaXMnLCBbOTE4MF1dLCBbJ3BhcmEnLCBbMTgyXV0sIFsncGFyYWxsZWwnLCBbODc0MV1dLCBbJ3BhcicsIFs4NzQxXV0sIFsncGFyc2ltJywgWzEwOTk1XV0sIFsncGFyc2wnLCBbMTEwMDVdXSwgWydwYXJ0JywgWzg3MDZdXSwgWydQYXJ0aWFsRCcsIFs4NzA2XV0sIFsnUGN5JywgWzEwNTVdXSwgWydwY3knLCBbMTA4N11dLCBbJ3BlcmNudCcsIFszN11dLCBbJ3BlcmlvZCcsIFs0Nl1dLCBbJ3Blcm1pbCcsIFs4MjQwXV0sIFsncGVycCcsIFs4ODY5XV0sIFsncGVydGVuaycsIFs4MjQxXV0sIFsnUGZyJywgWzEyMDA4M11dLCBbJ3BmcicsIFsxMjAxMDldXSwgWydQaGknLCBbOTM0XV0sIFsncGhpJywgWzk2Nl1dLCBbJ3BoaXYnLCBbOTgxXV0sIFsncGhtbWF0JywgWzg0OTldXSwgWydwaG9uZScsIFs5NzQyXV0sIFsnUGknLCBbOTI4XV0sIFsncGknLCBbOTYwXV0sIFsncGl0Y2hmb3JrJywgWzg5MTZdXSwgWydwaXYnLCBbOTgyXV0sIFsncGxhbmNrJywgWzg0NjNdXSwgWydwbGFuY2toJywgWzg0NjJdXSwgWydwbGFua3YnLCBbODQ2M11dLCBbJ3BsdXNhY2lyJywgWzEwNzg3XV0sIFsncGx1c2InLCBbODg2Ml1dLCBbJ3BsdXNjaXInLCBbMTA3ODZdXSwgWydwbHVzJywgWzQzXV0sIFsncGx1c2RvJywgWzg3MjRdXSwgWydwbHVzZHUnLCBbMTA3ODldXSwgWydwbHVzZScsIFsxMDg2Nl1dLCBbJ1BsdXNNaW51cycsIFsxNzddXSwgWydwbHVzbW4nLCBbMTc3XV0sIFsncGx1c3NpbScsIFsxMDc5MF1dLCBbJ3BsdXN0d28nLCBbMTA3OTFdXSwgWydwbScsIFsxNzddXSwgWydQb2luY2FyZXBsYW5lJywgWzg0NjBdXSwgWydwb2ludGludCcsIFsxMDc3M11dLCBbJ3BvcGYnLCBbMTIwMTYxXV0sIFsnUG9wZicsIFs4NDczXV0sIFsncG91bmQnLCBbMTYzXV0sIFsncHJhcCcsIFsxMDkzNV1dLCBbJ1ByJywgWzEwOTM5XV0sIFsncHInLCBbODgyNl1dLCBbJ3ByY3VlJywgWzg4MjhdXSwgWydwcmVjYXBwcm94JywgWzEwOTM1XV0sIFsncHJlYycsIFs4ODI2XV0sIFsncHJlY2N1cmx5ZXEnLCBbODgyOF1dLCBbJ1ByZWNlZGVzJywgWzg4MjZdXSwgWydQcmVjZWRlc0VxdWFsJywgWzEwOTI3XV0sIFsnUHJlY2VkZXNTbGFudEVxdWFsJywgWzg4MjhdXSwgWydQcmVjZWRlc1RpbGRlJywgWzg4MzBdXSwgWydwcmVjZXEnLCBbMTA5MjddXSwgWydwcmVjbmFwcHJveCcsIFsxMDkzN11dLCBbJ3ByZWNuZXFxJywgWzEwOTMzXV0sIFsncHJlY25zaW0nLCBbODkzNl1dLCBbJ3ByZScsIFsxMDkyN11dLCBbJ3ByRScsIFsxMDkzMV1dLCBbJ3ByZWNzaW0nLCBbODgzMF1dLCBbJ3ByaW1lJywgWzgyNDJdXSwgWydQcmltZScsIFs4MjQzXV0sIFsncHJpbWVzJywgWzg0NzNdXSwgWydwcm5hcCcsIFsxMDkzN11dLCBbJ3BybkUnLCBbMTA5MzNdXSwgWydwcm5zaW0nLCBbODkzNl1dLCBbJ3Byb2QnLCBbODcxOV1dLCBbJ1Byb2R1Y3QnLCBbODcxOV1dLCBbJ3Byb2ZhbGFyJywgWzkwMDZdXSwgWydwcm9mbGluZScsIFs4OTc4XV0sIFsncHJvZnN1cmYnLCBbODk3OV1dLCBbJ3Byb3AnLCBbODczM11dLCBbJ1Byb3BvcnRpb25hbCcsIFs4NzMzXV0sIFsnUHJvcG9ydGlvbicsIFs4NzU5XV0sIFsncHJvcHRvJywgWzg3MzNdXSwgWydwcnNpbScsIFs4ODMwXV0sIFsncHJ1cmVsJywgWzg4ODBdXSwgWydQc2NyJywgWzExOTk3OV1dLCBbJ3BzY3InLCBbMTIwMDA1XV0sIFsnUHNpJywgWzkzNl1dLCBbJ3BzaScsIFs5NjhdXSwgWydwdW5jc3AnLCBbODIwMF1dLCBbJ1FmcicsIFsxMjAwODRdXSwgWydxZnInLCBbMTIwMTEwXV0sIFsncWludCcsIFsxMDc2NF1dLCBbJ3FvcGYnLCBbMTIwMTYyXV0sIFsnUW9wZicsIFs4NDc0XV0sIFsncXByaW1lJywgWzgyNzldXSwgWydRc2NyJywgWzExOTk4MF1dLCBbJ3FzY3InLCBbMTIwMDA2XV0sIFsncXVhdGVybmlvbnMnLCBbODQ2MV1dLCBbJ3F1YXRpbnQnLCBbMTA3NzRdXSwgWydxdWVzdCcsIFs2M11dLCBbJ3F1ZXN0ZXEnLCBbODc5OV1dLCBbJ3F1b3QnLCBbMzRdXSwgWydRVU9UJywgWzM0XV0sIFsnckFhcnInLCBbODY2N11dLCBbJ3JhY2UnLCBbODc2NSwgODE3XV0sIFsnUmFjdXRlJywgWzM0MF1dLCBbJ3JhY3V0ZScsIFszNDFdXSwgWydyYWRpYycsIFs4NzMwXV0sIFsncmFlbXB0eXYnLCBbMTA2NzVdXSwgWydyYW5nJywgWzEwMjE3XV0sIFsnUmFuZycsIFsxMDIxOV1dLCBbJ3JhbmdkJywgWzEwNjQyXV0sIFsncmFuZ2UnLCBbMTA2NjFdXSwgWydyYW5nbGUnLCBbMTAyMTddXSwgWydyYXF1bycsIFsxODddXSwgWydyYXJyYXAnLCBbMTA2MTNdXSwgWydyYXJyYicsIFs4Njc3XV0sIFsncmFycmJmcycsIFsxMDUyOF1dLCBbJ3JhcnJjJywgWzEwNTQ3XV0sIFsncmFycicsIFs4NTk0XV0sIFsnUmFycicsIFs4NjA4XV0sIFsnckFycicsIFs4NjU4XV0sIFsncmFycmZzJywgWzEwNTI2XV0sIFsncmFycmhrJywgWzg2MThdXSwgWydyYXJybHAnLCBbODYyMF1dLCBbJ3JhcnJwbCcsIFsxMDU2NV1dLCBbJ3JhcnJzaW0nLCBbMTA2MTJdXSwgWydSYXJydGwnLCBbMTA1MThdXSwgWydyYXJydGwnLCBbODYxMV1dLCBbJ3JhcnJ3JywgWzg2MDVdXSwgWydyYXRhaWwnLCBbMTA1MjJdXSwgWydyQXRhaWwnLCBbMTA1MjRdXSwgWydyYXRpbycsIFs4NzU4XV0sIFsncmF0aW9uYWxzJywgWzg0NzRdXSwgWydyYmFycicsIFsxMDUwOV1dLCBbJ3JCYXJyJywgWzEwNTExXV0sIFsnUkJhcnInLCBbMTA1MTJdXSwgWydyYmJyaycsIFsxMDA5OV1dLCBbJ3JicmFjZScsIFsxMjVdXSwgWydyYnJhY2snLCBbOTNdXSwgWydyYnJrZScsIFsxMDYzNl1dLCBbJ3JicmtzbGQnLCBbMTA2MzhdXSwgWydyYnJrc2x1JywgWzEwNjQwXV0sIFsnUmNhcm9uJywgWzM0NF1dLCBbJ3JjYXJvbicsIFszNDVdXSwgWydSY2VkaWwnLCBbMzQyXV0sIFsncmNlZGlsJywgWzM0M11dLCBbJ3JjZWlsJywgWzg5NjldXSwgWydyY3ViJywgWzEyNV1dLCBbJ1JjeScsIFsxMDU2XV0sIFsncmN5JywgWzEwODhdXSwgWydyZGNhJywgWzEwNTUxXV0sIFsncmRsZGhhcicsIFsxMDYwMV1dLCBbJ3JkcXVvJywgWzgyMjFdXSwgWydyZHF1b3InLCBbODIyMV1dLCBbJ0Nsb3NlQ3VybHlEb3VibGVRdW90ZScsIFs4MjIxXV0sIFsncmRzaCcsIFs4NjI3XV0sIFsncmVhbCcsIFs4NDc2XV0sIFsncmVhbGluZScsIFs4NDc1XV0sIFsncmVhbHBhcnQnLCBbODQ3Nl1dLCBbJ3JlYWxzJywgWzg0NzddXSwgWydSZScsIFs4NDc2XV0sIFsncmVjdCcsIFs5NjQ1XV0sIFsncmVnJywgWzE3NF1dLCBbJ1JFRycsIFsxNzRdXSwgWydSZXZlcnNlRWxlbWVudCcsIFs4NzE1XV0sIFsnUmV2ZXJzZUVxdWlsaWJyaXVtJywgWzg2NTFdXSwgWydSZXZlcnNlVXBFcXVpbGlicml1bScsIFsxMDYwN11dLCBbJ3JmaXNodCcsIFsxMDYyMV1dLCBbJ3JmbG9vcicsIFs4OTcxXV0sIFsncmZyJywgWzEyMDExMV1dLCBbJ1JmcicsIFs4NDc2XV0sIFsnckhhcicsIFsxMDU5Nl1dLCBbJ3JoYXJkJywgWzg2NDFdXSwgWydyaGFydScsIFs4NjQwXV0sIFsncmhhcnVsJywgWzEwNjA0XV0sIFsnUmhvJywgWzkyOV1dLCBbJ3JobycsIFs5NjFdXSwgWydyaG92JywgWzEwMDldXSwgWydSaWdodEFuZ2xlQnJhY2tldCcsIFsxMDIxN11dLCBbJ1JpZ2h0QXJyb3dCYXInLCBbODY3N11dLCBbJ3JpZ2h0YXJyb3cnLCBbODU5NF1dLCBbJ1JpZ2h0QXJyb3cnLCBbODU5NF1dLCBbJ1JpZ2h0YXJyb3cnLCBbODY1OF1dLCBbJ1JpZ2h0QXJyb3dMZWZ0QXJyb3cnLCBbODY0NF1dLCBbJ3JpZ2h0YXJyb3d0YWlsJywgWzg2MTFdXSwgWydSaWdodENlaWxpbmcnLCBbODk2OV1dLCBbJ1JpZ2h0RG91YmxlQnJhY2tldCcsIFsxMDIxNV1dLCBbJ1JpZ2h0RG93blRlZVZlY3RvcicsIFsxMDU4OV1dLCBbJ1JpZ2h0RG93blZlY3RvckJhcicsIFsxMDU4MV1dLCBbJ1JpZ2h0RG93blZlY3RvcicsIFs4NjQyXV0sIFsnUmlnaHRGbG9vcicsIFs4OTcxXV0sIFsncmlnaHRoYXJwb29uZG93bicsIFs4NjQxXV0sIFsncmlnaHRoYXJwb29udXAnLCBbODY0MF1dLCBbJ3JpZ2h0bGVmdGFycm93cycsIFs4NjQ0XV0sIFsncmlnaHRsZWZ0aGFycG9vbnMnLCBbODY1Ml1dLCBbJ3JpZ2h0cmlnaHRhcnJvd3MnLCBbODY0OV1dLCBbJ3JpZ2h0c3F1aWdhcnJvdycsIFs4NjA1XV0sIFsnUmlnaHRUZWVBcnJvdycsIFs4NjE0XV0sIFsnUmlnaHRUZWUnLCBbODg2Nl1dLCBbJ1JpZ2h0VGVlVmVjdG9yJywgWzEwNTg3XV0sIFsncmlnaHR0aHJlZXRpbWVzJywgWzg5MDhdXSwgWydSaWdodFRyaWFuZ2xlQmFyJywgWzEwNzA0XV0sIFsnUmlnaHRUcmlhbmdsZScsIFs4ODgzXV0sIFsnUmlnaHRUcmlhbmdsZUVxdWFsJywgWzg4ODVdXSwgWydSaWdodFVwRG93blZlY3RvcicsIFsxMDU3NV1dLCBbJ1JpZ2h0VXBUZWVWZWN0b3InLCBbMTA1ODhdXSwgWydSaWdodFVwVmVjdG9yQmFyJywgWzEwNTgwXV0sIFsnUmlnaHRVcFZlY3RvcicsIFs4NjM4XV0sIFsnUmlnaHRWZWN0b3JCYXInLCBbMTA1NzldXSwgWydSaWdodFZlY3RvcicsIFs4NjQwXV0sIFsncmluZycsIFs3MzBdXSwgWydyaXNpbmdkb3RzZXEnLCBbODc4N11dLCBbJ3JsYXJyJywgWzg2NDRdXSwgWydybGhhcicsIFs4NjUyXV0sIFsncmxtJywgWzgyMDddXSwgWydybW91c3RhY2hlJywgWzkxMzddXSwgWydybW91c3QnLCBbOTEzN11dLCBbJ3JubWlkJywgWzEwOTkwXV0sIFsncm9hbmcnLCBbMTAyMjFdXSwgWydyb2FycicsIFs4NzAyXV0sIFsncm9icmsnLCBbMTAyMTVdXSwgWydyb3BhcicsIFsxMDYzMF1dLCBbJ3JvcGYnLCBbMTIwMTYzXV0sIFsnUm9wZicsIFs4NDc3XV0sIFsncm9wbHVzJywgWzEwNzk4XV0sIFsncm90aW1lcycsIFsxMDgwNV1dLCBbJ1JvdW5kSW1wbGllcycsIFsxMDYwOF1dLCBbJ3JwYXInLCBbNDFdXSwgWydycGFyZ3QnLCBbMTA2NDRdXSwgWydycHBvbGludCcsIFsxMDc3MF1dLCBbJ3JyYXJyJywgWzg2NDldXSwgWydScmlnaHRhcnJvdycsIFs4NjY3XV0sIFsncnNhcXVvJywgWzgyNTBdXSwgWydyc2NyJywgWzEyMDAwN11dLCBbJ1JzY3InLCBbODQ3NV1dLCBbJ3JzaCcsIFs4NjI1XV0sIFsnUnNoJywgWzg2MjVdXSwgWydyc3FiJywgWzkzXV0sIFsncnNxdW8nLCBbODIxN11dLCBbJ3JzcXVvcicsIFs4MjE3XV0sIFsnQ2xvc2VDdXJseVF1b3RlJywgWzgyMTddXSwgWydydGhyZWUnLCBbODkwOF1dLCBbJ3J0aW1lcycsIFs4OTA2XV0sIFsncnRyaScsIFs5NjU3XV0sIFsncnRyaWUnLCBbODg4NV1dLCBbJ3J0cmlmJywgWzk2NTZdXSwgWydydHJpbHRyaScsIFsxMDcwMl1dLCBbJ1J1bGVEZWxheWVkJywgWzEwNzQwXV0sIFsncnVsdWhhcicsIFsxMDYwMF1dLCBbJ3J4JywgWzg0NzhdXSwgWydTYWN1dGUnLCBbMzQ2XV0sIFsnc2FjdXRlJywgWzM0N11dLCBbJ3NicXVvJywgWzgyMThdXSwgWydzY2FwJywgWzEwOTM2XV0sIFsnU2Nhcm9uJywgWzM1Ml1dLCBbJ3NjYXJvbicsIFszNTNdXSwgWydTYycsIFsxMDk0MF1dLCBbJ3NjJywgWzg4MjddXSwgWydzY2N1ZScsIFs4ODI5XV0sIFsnc2NlJywgWzEwOTI4XV0sIFsnc2NFJywgWzEwOTMyXV0sIFsnU2NlZGlsJywgWzM1MF1dLCBbJ3NjZWRpbCcsIFszNTFdXSwgWydTY2lyYycsIFszNDhdXSwgWydzY2lyYycsIFszNDldXSwgWydzY25hcCcsIFsxMDkzOF1dLCBbJ3NjbkUnLCBbMTA5MzRdXSwgWydzY25zaW0nLCBbODkzN11dLCBbJ3NjcG9saW50JywgWzEwNzcxXV0sIFsnc2NzaW0nLCBbODgzMV1dLCBbJ1NjeScsIFsxMDU3XV0sIFsnc2N5JywgWzEwODldXSwgWydzZG90YicsIFs4ODY1XV0sIFsnc2RvdCcsIFs4OTAxXV0sIFsnc2RvdGUnLCBbMTA4NTRdXSwgWydzZWFyaGsnLCBbMTA1MzNdXSwgWydzZWFycicsIFs4NjAwXV0sIFsnc2VBcnInLCBbODY2NF1dLCBbJ3NlYXJyb3cnLCBbODYwMF1dLCBbJ3NlY3QnLCBbMTY3XV0sIFsnc2VtaScsIFs1OV1dLCBbJ3Nlc3dhcicsIFsxMDUzN11dLCBbJ3NldG1pbnVzJywgWzg3MjZdXSwgWydzZXRtbicsIFs4NzI2XV0sIFsnc2V4dCcsIFsxMDAzOF1dLCBbJ1NmcicsIFsxMjAwODZdXSwgWydzZnInLCBbMTIwMTEyXV0sIFsnc2Zyb3duJywgWzg5OTRdXSwgWydzaGFycCcsIFs5ODM5XV0sIFsnU0hDSGN5JywgWzEwNjVdXSwgWydzaGNoY3knLCBbMTA5N11dLCBbJ1NIY3knLCBbMTA2NF1dLCBbJ3NoY3knLCBbMTA5Nl1dLCBbJ1Nob3J0RG93bkFycm93JywgWzg1OTVdXSwgWydTaG9ydExlZnRBcnJvdycsIFs4NTkyXV0sIFsnc2hvcnRtaWQnLCBbODczOV1dLCBbJ3Nob3J0cGFyYWxsZWwnLCBbODc0MV1dLCBbJ1Nob3J0UmlnaHRBcnJvdycsIFs4NTk0XV0sIFsnU2hvcnRVcEFycm93JywgWzg1OTNdXSwgWydzaHknLCBbMTczXV0sIFsnU2lnbWEnLCBbOTMxXV0sIFsnc2lnbWEnLCBbOTYzXV0sIFsnc2lnbWFmJywgWzk2Ml1dLCBbJ3NpZ21hdicsIFs5NjJdXSwgWydzaW0nLCBbODc2NF1dLCBbJ3NpbWRvdCcsIFsxMDg1OF1dLCBbJ3NpbWUnLCBbODc3MV1dLCBbJ3NpbWVxJywgWzg3NzFdXSwgWydzaW1nJywgWzEwOTEwXV0sIFsnc2ltZ0UnLCBbMTA5MTJdXSwgWydzaW1sJywgWzEwOTA5XV0sIFsnc2ltbEUnLCBbMTA5MTFdXSwgWydzaW1uZScsIFs4Nzc0XV0sIFsnc2ltcGx1cycsIFsxMDc4OF1dLCBbJ3NpbXJhcnInLCBbMTA2MTBdXSwgWydzbGFycicsIFs4NTkyXV0sIFsnU21hbGxDaXJjbGUnLCBbODcyOF1dLCBbJ3NtYWxsc2V0bWludXMnLCBbODcyNl1dLCBbJ3NtYXNocCcsIFsxMDgwM11dLCBbJ3NtZXBhcnNsJywgWzEwNzI0XV0sIFsnc21pZCcsIFs4NzM5XV0sIFsnc21pbGUnLCBbODk5NV1dLCBbJ3NtdCcsIFsxMDkyMl1dLCBbJ3NtdGUnLCBbMTA5MjRdXSwgWydzbXRlcycsIFsxMDkyNCwgNjUwMjRdXSwgWydTT0ZUY3knLCBbMTA2OF1dLCBbJ3NvZnRjeScsIFsxMTAwXV0sIFsnc29sYmFyJywgWzkwMjNdXSwgWydzb2xiJywgWzEwNjkyXV0sIFsnc29sJywgWzQ3XV0sIFsnU29wZicsIFsxMjAxMzhdXSwgWydzb3BmJywgWzEyMDE2NF1dLCBbJ3NwYWRlcycsIFs5ODI0XV0sIFsnc3BhZGVzdWl0JywgWzk4MjRdXSwgWydzcGFyJywgWzg3NDFdXSwgWydzcWNhcCcsIFs4ODUxXV0sIFsnc3FjYXBzJywgWzg4NTEsIDY1MDI0XV0sIFsnc3FjdXAnLCBbODg1Ml1dLCBbJ3NxY3VwcycsIFs4ODUyLCA2NTAyNF1dLCBbJ1NxcnQnLCBbODczMF1dLCBbJ3Nxc3ViJywgWzg4NDddXSwgWydzcXN1YmUnLCBbODg0OV1dLCBbJ3Nxc3Vic2V0JywgWzg4NDddXSwgWydzcXN1YnNldGVxJywgWzg4NDldXSwgWydzcXN1cCcsIFs4ODQ4XV0sIFsnc3FzdXBlJywgWzg4NTBdXSwgWydzcXN1cHNldCcsIFs4ODQ4XV0sIFsnc3FzdXBzZXRlcScsIFs4ODUwXV0sIFsnc3F1YXJlJywgWzk2MzNdXSwgWydTcXVhcmUnLCBbOTYzM11dLCBbJ1NxdWFyZUludGVyc2VjdGlvbicsIFs4ODUxXV0sIFsnU3F1YXJlU3Vic2V0JywgWzg4NDddXSwgWydTcXVhcmVTdWJzZXRFcXVhbCcsIFs4ODQ5XV0sIFsnU3F1YXJlU3VwZXJzZXQnLCBbODg0OF1dLCBbJ1NxdWFyZVN1cGVyc2V0RXF1YWwnLCBbODg1MF1dLCBbJ1NxdWFyZVVuaW9uJywgWzg4NTJdXSwgWydzcXVhcmYnLCBbOTY0Ml1dLCBbJ3NxdScsIFs5NjMzXV0sIFsnc3F1ZicsIFs5NjQyXV0sIFsnc3JhcnInLCBbODU5NF1dLCBbJ1NzY3InLCBbMTE5OTgyXV0sIFsnc3NjcicsIFsxMjAwMDhdXSwgWydzc2V0bW4nLCBbODcyNl1dLCBbJ3NzbWlsZScsIFs4OTk1XV0sIFsnc3N0YXJmJywgWzg5MDJdXSwgWydTdGFyJywgWzg5MDJdXSwgWydzdGFyJywgWzk3MzRdXSwgWydzdGFyZicsIFs5NzMzXV0sIFsnc3RyYWlnaHRlcHNpbG9uJywgWzEwMTNdXSwgWydzdHJhaWdodHBoaScsIFs5ODFdXSwgWydzdHJucycsIFsxNzVdXSwgWydzdWInLCBbODgzNF1dLCBbJ1N1YicsIFs4OTEyXV0sIFsnc3ViZG90JywgWzEwOTQxXV0sIFsnc3ViRScsIFsxMDk0OV1dLCBbJ3N1YmUnLCBbODgzOF1dLCBbJ3N1YmVkb3QnLCBbMTA5NDddXSwgWydzdWJtdWx0JywgWzEwOTQ1XV0sIFsnc3VibkUnLCBbMTA5NTVdXSwgWydzdWJuZScsIFs4ODQyXV0sIFsnc3VicGx1cycsIFsxMDk0M11dLCBbJ3N1YnJhcnInLCBbMTA2MTddXSwgWydzdWJzZXQnLCBbODgzNF1dLCBbJ1N1YnNldCcsIFs4OTEyXV0sIFsnc3Vic2V0ZXEnLCBbODgzOF1dLCBbJ3N1YnNldGVxcScsIFsxMDk0OV1dLCBbJ1N1YnNldEVxdWFsJywgWzg4MzhdXSwgWydzdWJzZXRuZXEnLCBbODg0Ml1dLCBbJ3N1YnNldG5lcXEnLCBbMTA5NTVdXSwgWydzdWJzaW0nLCBbMTA5NTFdXSwgWydzdWJzdWInLCBbMTA5NjVdXSwgWydzdWJzdXAnLCBbMTA5NjNdXSwgWydzdWNjYXBwcm94JywgWzEwOTM2XV0sIFsnc3VjYycsIFs4ODI3XV0sIFsnc3VjY2N1cmx5ZXEnLCBbODgyOV1dLCBbJ1N1Y2NlZWRzJywgWzg4MjddXSwgWydTdWNjZWVkc0VxdWFsJywgWzEwOTI4XV0sIFsnU3VjY2VlZHNTbGFudEVxdWFsJywgWzg4MjldXSwgWydTdWNjZWVkc1RpbGRlJywgWzg4MzFdXSwgWydzdWNjZXEnLCBbMTA5MjhdXSwgWydzdWNjbmFwcHJveCcsIFsxMDkzOF1dLCBbJ3N1Y2NuZXFxJywgWzEwOTM0XV0sIFsnc3VjY25zaW0nLCBbODkzN11dLCBbJ3N1Y2NzaW0nLCBbODgzMV1dLCBbJ1N1Y2hUaGF0JywgWzg3MTVdXSwgWydzdW0nLCBbODcyMV1dLCBbJ1N1bScsIFs4NzIxXV0sIFsnc3VuZycsIFs5ODM0XV0sIFsnc3VwMScsIFsxODVdXSwgWydzdXAyJywgWzE3OF1dLCBbJ3N1cDMnLCBbMTc5XV0sIFsnc3VwJywgWzg4MzVdXSwgWydTdXAnLCBbODkxM11dLCBbJ3N1cGRvdCcsIFsxMDk0Ml1dLCBbJ3N1cGRzdWInLCBbMTA5NjhdXSwgWydzdXBFJywgWzEwOTUwXV0sIFsnc3VwZScsIFs4ODM5XV0sIFsnc3VwZWRvdCcsIFsxMDk0OF1dLCBbJ1N1cGVyc2V0JywgWzg4MzVdXSwgWydTdXBlcnNldEVxdWFsJywgWzg4MzldXSwgWydzdXBoc29sJywgWzEwMTg1XV0sIFsnc3VwaHN1YicsIFsxMDk2N11dLCBbJ3N1cGxhcnInLCBbMTA2MTldXSwgWydzdXBtdWx0JywgWzEwOTQ2XV0sIFsnc3VwbkUnLCBbMTA5NTZdXSwgWydzdXBuZScsIFs4ODQzXV0sIFsnc3VwcGx1cycsIFsxMDk0NF1dLCBbJ3N1cHNldCcsIFs4ODM1XV0sIFsnU3Vwc2V0JywgWzg5MTNdXSwgWydzdXBzZXRlcScsIFs4ODM5XV0sIFsnc3Vwc2V0ZXFxJywgWzEwOTUwXV0sIFsnc3Vwc2V0bmVxJywgWzg4NDNdXSwgWydzdXBzZXRuZXFxJywgWzEwOTU2XV0sIFsnc3Vwc2ltJywgWzEwOTUyXV0sIFsnc3Vwc3ViJywgWzEwOTY0XV0sIFsnc3Vwc3VwJywgWzEwOTY2XV0sIFsnc3dhcmhrJywgWzEwNTM0XV0sIFsnc3dhcnInLCBbODYwMV1dLCBbJ3N3QXJyJywgWzg2NjVdXSwgWydzd2Fycm93JywgWzg2MDFdXSwgWydzd253YXInLCBbMTA1MzhdXSwgWydzemxpZycsIFsyMjNdXSwgWydUYWInLCBbOV1dLCBbJ3RhcmdldCcsIFs4OTgyXV0sIFsnVGF1JywgWzkzMl1dLCBbJ3RhdScsIFs5NjRdXSwgWyd0YnJrJywgWzkxNDBdXSwgWydUY2Fyb24nLCBbMzU2XV0sIFsndGNhcm9uJywgWzM1N11dLCBbJ1RjZWRpbCcsIFszNTRdXSwgWyd0Y2VkaWwnLCBbMzU1XV0sIFsnVGN5JywgWzEwNThdXSwgWyd0Y3knLCBbMTA5MF1dLCBbJ3Rkb3QnLCBbODQxMV1dLCBbJ3RlbHJlYycsIFs4OTgxXV0sIFsnVGZyJywgWzEyMDA4N11dLCBbJ3RmcicsIFsxMjAxMTNdXSwgWyd0aGVyZTQnLCBbODc1Nl1dLCBbJ3RoZXJlZm9yZScsIFs4NzU2XV0sIFsnVGhlcmVmb3JlJywgWzg3NTZdXSwgWydUaGV0YScsIFs5MjBdXSwgWyd0aGV0YScsIFs5NTJdXSwgWyd0aGV0YXN5bScsIFs5NzddXSwgWyd0aGV0YXYnLCBbOTc3XV0sIFsndGhpY2thcHByb3gnLCBbODc3Nl1dLCBbJ3RoaWNrc2ltJywgWzg3NjRdXSwgWydUaGlja1NwYWNlJywgWzgyODcsIDgyMDJdXSwgWydUaGluU3BhY2UnLCBbODIwMV1dLCBbJ3RoaW5zcCcsIFs4MjAxXV0sIFsndGhrYXAnLCBbODc3Nl1dLCBbJ3Roa3NpbScsIFs4NzY0XV0sIFsnVEhPUk4nLCBbMjIyXV0sIFsndGhvcm4nLCBbMjU0XV0sIFsndGlsZGUnLCBbNzMyXV0sIFsnVGlsZGUnLCBbODc2NF1dLCBbJ1RpbGRlRXF1YWwnLCBbODc3MV1dLCBbJ1RpbGRlRnVsbEVxdWFsJywgWzg3NzNdXSwgWydUaWxkZVRpbGRlJywgWzg3NzZdXSwgWyd0aW1lc2JhcicsIFsxMDgwMV1dLCBbJ3RpbWVzYicsIFs4ODY0XV0sIFsndGltZXMnLCBbMjE1XV0sIFsndGltZXNkJywgWzEwODAwXV0sIFsndGludCcsIFs4NzQ5XV0sIFsndG9lYScsIFsxMDUzNl1dLCBbJ3RvcGJvdCcsIFs5MDE0XV0sIFsndG9wY2lyJywgWzEwOTkzXV0sIFsndG9wJywgWzg4NjhdXSwgWydUb3BmJywgWzEyMDEzOV1dLCBbJ3RvcGYnLCBbMTIwMTY1XV0sIFsndG9wZm9yaycsIFsxMDk3MF1dLCBbJ3Rvc2EnLCBbMTA1MzddXSwgWyd0cHJpbWUnLCBbODI0NF1dLCBbJ3RyYWRlJywgWzg0ODJdXSwgWydUUkFERScsIFs4NDgyXV0sIFsndHJpYW5nbGUnLCBbOTY1M11dLCBbJ3RyaWFuZ2xlZG93bicsIFs5NjYzXV0sIFsndHJpYW5nbGVsZWZ0JywgWzk2NjddXSwgWyd0cmlhbmdsZWxlZnRlcScsIFs4ODg0XV0sIFsndHJpYW5nbGVxJywgWzg3OTZdXSwgWyd0cmlhbmdsZXJpZ2h0JywgWzk2NTddXSwgWyd0cmlhbmdsZXJpZ2h0ZXEnLCBbODg4NV1dLCBbJ3RyaWRvdCcsIFs5NzA4XV0sIFsndHJpZScsIFs4Nzk2XV0sIFsndHJpbWludXMnLCBbMTA4MTBdXSwgWydUcmlwbGVEb3QnLCBbODQxMV1dLCBbJ3RyaXBsdXMnLCBbMTA4MDldXSwgWyd0cmlzYicsIFsxMDcwMV1dLCBbJ3RyaXRpbWUnLCBbMTA4MTFdXSwgWyd0cnBleml1bScsIFs5MTg2XV0sIFsnVHNjcicsIFsxMTk5ODNdXSwgWyd0c2NyJywgWzEyMDAwOV1dLCBbJ1RTY3knLCBbMTA2Ml1dLCBbJ3RzY3knLCBbMTA5NF1dLCBbJ1RTSGN5JywgWzEwMzVdXSwgWyd0c2hjeScsIFsxMTE1XV0sIFsnVHN0cm9rJywgWzM1OF1dLCBbJ3RzdHJvaycsIFszNTldXSwgWyd0d2l4dCcsIFs4ODEyXV0sIFsndHdvaGVhZGxlZnRhcnJvdycsIFs4NjA2XV0sIFsndHdvaGVhZHJpZ2h0YXJyb3cnLCBbODYwOF1dLCBbJ1VhY3V0ZScsIFsyMThdXSwgWyd1YWN1dGUnLCBbMjUwXV0sIFsndWFycicsIFs4NTkzXV0sIFsnVWFycicsIFs4NjA3XV0sIFsndUFycicsIFs4NjU3XV0sIFsnVWFycm9jaXInLCBbMTA1NjldXSwgWydVYnJjeScsIFsxMDM4XV0sIFsndWJyY3knLCBbMTExOF1dLCBbJ1VicmV2ZScsIFszNjRdXSwgWyd1YnJldmUnLCBbMzY1XV0sIFsnVWNpcmMnLCBbMjE5XV0sIFsndWNpcmMnLCBbMjUxXV0sIFsnVWN5JywgWzEwNTldXSwgWyd1Y3knLCBbMTA5MV1dLCBbJ3VkYXJyJywgWzg2NDVdXSwgWydVZGJsYWMnLCBbMzY4XV0sIFsndWRibGFjJywgWzM2OV1dLCBbJ3VkaGFyJywgWzEwNjA2XV0sIFsndWZpc2h0JywgWzEwNjIyXV0sIFsnVWZyJywgWzEyMDA4OF1dLCBbJ3VmcicsIFsxMjAxMTRdXSwgWydVZ3JhdmUnLCBbMjE3XV0sIFsndWdyYXZlJywgWzI0OV1dLCBbJ3VIYXInLCBbMTA1OTVdXSwgWyd1aGFybCcsIFs4NjM5XV0sIFsndWhhcnInLCBbODYzOF1dLCBbJ3VoYmxrJywgWzk2MDBdXSwgWyd1bGNvcm4nLCBbODk4OF1dLCBbJ3VsY29ybmVyJywgWzg5ODhdXSwgWyd1bGNyb3AnLCBbODk3NV1dLCBbJ3VsdHJpJywgWzk3MjBdXSwgWydVbWFjcicsIFszNjJdXSwgWyd1bWFjcicsIFszNjNdXSwgWyd1bWwnLCBbMTY4XV0sIFsnVW5kZXJCYXInLCBbOTVdXSwgWydVbmRlckJyYWNlJywgWzkxODNdXSwgWydVbmRlckJyYWNrZXQnLCBbOTE0MV1dLCBbJ1VuZGVyUGFyZW50aGVzaXMnLCBbOTE4MV1dLCBbJ1VuaW9uJywgWzg4OTldXSwgWydVbmlvblBsdXMnLCBbODg0Nl1dLCBbJ1VvZ29uJywgWzM3MF1dLCBbJ3VvZ29uJywgWzM3MV1dLCBbJ1VvcGYnLCBbMTIwMTQwXV0sIFsndW9wZicsIFsxMjAxNjZdXSwgWydVcEFycm93QmFyJywgWzEwNTE0XV0sIFsndXBhcnJvdycsIFs4NTkzXV0sIFsnVXBBcnJvdycsIFs4NTkzXV0sIFsnVXBhcnJvdycsIFs4NjU3XV0sIFsnVXBBcnJvd0Rvd25BcnJvdycsIFs4NjQ1XV0sIFsndXBkb3duYXJyb3cnLCBbODU5N11dLCBbJ1VwRG93bkFycm93JywgWzg1OTddXSwgWydVcGRvd25hcnJvdycsIFs4NjYxXV0sIFsnVXBFcXVpbGlicml1bScsIFsxMDYwNl1dLCBbJ3VwaGFycG9vbmxlZnQnLCBbODYzOV1dLCBbJ3VwaGFycG9vbnJpZ2h0JywgWzg2MzhdXSwgWyd1cGx1cycsIFs4ODQ2XV0sIFsnVXBwZXJMZWZ0QXJyb3cnLCBbODU5OF1dLCBbJ1VwcGVyUmlnaHRBcnJvdycsIFs4NTk5XV0sIFsndXBzaScsIFs5NjVdXSwgWydVcHNpJywgWzk3OF1dLCBbJ3Vwc2loJywgWzk3OF1dLCBbJ1Vwc2lsb24nLCBbOTMzXV0sIFsndXBzaWxvbicsIFs5NjVdXSwgWydVcFRlZUFycm93JywgWzg2MTNdXSwgWydVcFRlZScsIFs4ODY5XV0sIFsndXB1cGFycm93cycsIFs4NjQ4XV0sIFsndXJjb3JuJywgWzg5ODldXSwgWyd1cmNvcm5lcicsIFs4OTg5XV0sIFsndXJjcm9wJywgWzg5NzRdXSwgWydVcmluZycsIFszNjZdXSwgWyd1cmluZycsIFszNjddXSwgWyd1cnRyaScsIFs5NzIxXV0sIFsnVXNjcicsIFsxMTk5ODRdXSwgWyd1c2NyJywgWzEyMDAxMF1dLCBbJ3V0ZG90JywgWzg5NDRdXSwgWydVdGlsZGUnLCBbMzYwXV0sIFsndXRpbGRlJywgWzM2MV1dLCBbJ3V0cmknLCBbOTY1M11dLCBbJ3V0cmlmJywgWzk2NTJdXSwgWyd1dWFycicsIFs4NjQ4XV0sIFsnVXVtbCcsIFsyMjBdXSwgWyd1dW1sJywgWzI1Ml1dLCBbJ3V3YW5nbGUnLCBbMTA2NjNdXSwgWyd2YW5ncnQnLCBbMTA2NTJdXSwgWyd2YXJlcHNpbG9uJywgWzEwMTNdXSwgWyd2YXJrYXBwYScsIFsxMDA4XV0sIFsndmFybm90aGluZycsIFs4NzA5XV0sIFsndmFycGhpJywgWzk4MV1dLCBbJ3ZhcnBpJywgWzk4Ml1dLCBbJ3ZhcnByb3B0bycsIFs4NzMzXV0sIFsndmFycicsIFs4NTk3XV0sIFsndkFycicsIFs4NjYxXV0sIFsndmFycmhvJywgWzEwMDldXSwgWyd2YXJzaWdtYScsIFs5NjJdXSwgWyd2YXJzdWJzZXRuZXEnLCBbODg0MiwgNjUwMjRdXSwgWyd2YXJzdWJzZXRuZXFxJywgWzEwOTU1LCA2NTAyNF1dLCBbJ3ZhcnN1cHNldG5lcScsIFs4ODQzLCA2NTAyNF1dLCBbJ3ZhcnN1cHNldG5lcXEnLCBbMTA5NTYsIDY1MDI0XV0sIFsndmFydGhldGEnLCBbOTc3XV0sIFsndmFydHJpYW5nbGVsZWZ0JywgWzg4ODJdXSwgWyd2YXJ0cmlhbmdsZXJpZ2h0JywgWzg4ODNdXSwgWyd2QmFyJywgWzEwOTg0XV0sIFsnVmJhcicsIFsxMDk4N11dLCBbJ3ZCYXJ2JywgWzEwOTg1XV0sIFsnVmN5JywgWzEwNDJdXSwgWyd2Y3knLCBbMTA3NF1dLCBbJ3ZkYXNoJywgWzg4NjZdXSwgWyd2RGFzaCcsIFs4ODcyXV0sIFsnVmRhc2gnLCBbODg3M11dLCBbJ1ZEYXNoJywgWzg4NzVdXSwgWydWZGFzaGwnLCBbMTA5ODJdXSwgWyd2ZWViYXInLCBbODg5MV1dLCBbJ3ZlZScsIFs4NzQ0XV0sIFsnVmVlJywgWzg4OTddXSwgWyd2ZWVlcScsIFs4Nzk0XV0sIFsndmVsbGlwJywgWzg5NDJdXSwgWyd2ZXJiYXInLCBbMTI0XV0sIFsnVmVyYmFyJywgWzgyMTRdXSwgWyd2ZXJ0JywgWzEyNF1dLCBbJ1ZlcnQnLCBbODIxNF1dLCBbJ1ZlcnRpY2FsQmFyJywgWzg3MzldXSwgWydWZXJ0aWNhbExpbmUnLCBbMTI0XV0sIFsnVmVydGljYWxTZXBhcmF0b3InLCBbMTAwNzJdXSwgWydWZXJ0aWNhbFRpbGRlJywgWzg3NjhdXSwgWydWZXJ5VGhpblNwYWNlJywgWzgyMDJdXSwgWydWZnInLCBbMTIwMDg5XV0sIFsndmZyJywgWzEyMDExNV1dLCBbJ3ZsdHJpJywgWzg4ODJdXSwgWyd2bnN1YicsIFs4ODM0LCA4NDAyXV0sIFsndm5zdXAnLCBbODgzNSwgODQwMl1dLCBbJ1ZvcGYnLCBbMTIwMTQxXV0sIFsndm9wZicsIFsxMjAxNjddXSwgWyd2cHJvcCcsIFs4NzMzXV0sIFsndnJ0cmknLCBbODg4M11dLCBbJ1ZzY3InLCBbMTE5OTg1XV0sIFsndnNjcicsIFsxMjAwMTFdXSwgWyd2c3VibkUnLCBbMTA5NTUsIDY1MDI0XV0sIFsndnN1Ym5lJywgWzg4NDIsIDY1MDI0XV0sIFsndnN1cG5FJywgWzEwOTU2LCA2NTAyNF1dLCBbJ3ZzdXBuZScsIFs4ODQzLCA2NTAyNF1dLCBbJ1Z2ZGFzaCcsIFs4ODc0XV0sIFsndnppZ3phZycsIFsxMDY1MF1dLCBbJ1djaXJjJywgWzM3Ml1dLCBbJ3djaXJjJywgWzM3M11dLCBbJ3dlZGJhcicsIFsxMDg0N11dLCBbJ3dlZGdlJywgWzg3NDNdXSwgWydXZWRnZScsIFs4ODk2XV0sIFsnd2VkZ2VxJywgWzg3OTNdXSwgWyd3ZWllcnAnLCBbODQ3Ml1dLCBbJ1dmcicsIFsxMjAwOTBdXSwgWyd3ZnInLCBbMTIwMTE2XV0sIFsnV29wZicsIFsxMjAxNDJdXSwgWyd3b3BmJywgWzEyMDE2OF1dLCBbJ3dwJywgWzg0NzJdXSwgWyd3cicsIFs4NzY4XV0sIFsnd3JlYXRoJywgWzg3NjhdXSwgWydXc2NyJywgWzExOTk4Nl1dLCBbJ3dzY3InLCBbMTIwMDEyXV0sIFsneGNhcCcsIFs4ODk4XV0sIFsneGNpcmMnLCBbOTcxMV1dLCBbJ3hjdXAnLCBbODg5OV1dLCBbJ3hkdHJpJywgWzk2NjFdXSwgWydYZnInLCBbMTIwMDkxXV0sIFsneGZyJywgWzEyMDExN11dLCBbJ3hoYXJyJywgWzEwMjMxXV0sIFsneGhBcnInLCBbMTAyMzRdXSwgWydYaScsIFs5MjZdXSwgWyd4aScsIFs5NThdXSwgWyd4bGFycicsIFsxMDIyOV1dLCBbJ3hsQXJyJywgWzEwMjMyXV0sIFsneG1hcCcsIFsxMDIzNl1dLCBbJ3huaXMnLCBbODk1NV1dLCBbJ3hvZG90JywgWzEwNzUyXV0sIFsnWG9wZicsIFsxMjAxNDNdXSwgWyd4b3BmJywgWzEyMDE2OV1dLCBbJ3hvcGx1cycsIFsxMDc1M11dLCBbJ3hvdGltZScsIFsxMDc1NF1dLCBbJ3hyYXJyJywgWzEwMjMwXV0sIFsneHJBcnInLCBbMTAyMzNdXSwgWydYc2NyJywgWzExOTk4N11dLCBbJ3hzY3InLCBbMTIwMDEzXV0sIFsneHNxY3VwJywgWzEwNzU4XV0sIFsneHVwbHVzJywgWzEwNzU2XV0sIFsneHV0cmknLCBbOTY1MV1dLCBbJ3h2ZWUnLCBbODg5N11dLCBbJ3h3ZWRnZScsIFs4ODk2XV0sIFsnWWFjdXRlJywgWzIyMV1dLCBbJ3lhY3V0ZScsIFsyNTNdXSwgWydZQWN5JywgWzEwNzFdXSwgWyd5YWN5JywgWzExMDNdXSwgWydZY2lyYycsIFszNzRdXSwgWyd5Y2lyYycsIFszNzVdXSwgWydZY3knLCBbMTA2N11dLCBbJ3ljeScsIFsxMDk5XV0sIFsneWVuJywgWzE2NV1dLCBbJ1lmcicsIFsxMjAwOTJdXSwgWyd5ZnInLCBbMTIwMTE4XV0sIFsnWUljeScsIFsxMDMxXV0sIFsneWljeScsIFsxMTExXV0sIFsnWW9wZicsIFsxMjAxNDRdXSwgWyd5b3BmJywgWzEyMDE3MF1dLCBbJ1lzY3InLCBbMTE5OTg4XV0sIFsneXNjcicsIFsxMjAwMTRdXSwgWydZVWN5JywgWzEwNzBdXSwgWyd5dWN5JywgWzExMDJdXSwgWyd5dW1sJywgWzI1NV1dLCBbJ1l1bWwnLCBbMzc2XV0sIFsnWmFjdXRlJywgWzM3N11dLCBbJ3phY3V0ZScsIFszNzhdXSwgWydaY2Fyb24nLCBbMzgxXV0sIFsnemNhcm9uJywgWzM4Ml1dLCBbJ1pjeScsIFsxMDQ3XV0sIFsnemN5JywgWzEwNzldXSwgWydaZG90JywgWzM3OV1dLCBbJ3pkb3QnLCBbMzgwXV0sIFsnemVldHJmJywgWzg0ODhdXSwgWydaZXJvV2lkdGhTcGFjZScsIFs4MjAzXV0sIFsnWmV0YScsIFs5MThdXSwgWyd6ZXRhJywgWzk1MF1dLCBbJ3pmcicsIFsxMjAxMTldXSwgWydaZnInLCBbODQ4OF1dLCBbJ1pIY3knLCBbMTA0Nl1dLCBbJ3poY3knLCBbMTA3OF1dLCBbJ3ppZ3JhcnInLCBbODY2OV1dLCBbJ3pvcGYnLCBbMTIwMTcxXV0sIFsnWm9wZicsIFs4NDg0XV0sIFsnWnNjcicsIFsxMTk5ODldXSwgWyd6c2NyJywgWzEyMDAxNV1dLCBbJ3p3aicsIFs4MjA1XV0sIFsnenduaicsIFs4MjA0XV1dO1xudmFyIERFQ09ERV9PTkxZX0VOVElUSUVTID0gW1snTmV3TGluZScsIFsxMF1dXTtcbnZhciBhbHBoYUluZGV4ID0ge307XG52YXIgY2hhckluZGV4ID0ge307XG5jcmVhdGVJbmRleGVzKGFscGhhSW5kZXgsIGNoYXJJbmRleCk7XG52YXIgSHRtbDVFbnRpdGllcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdG1sNUVudGl0aWVzKCkge1xuICAgIH1cbiAgICBIdG1sNUVudGl0aWVzLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mKCM/W1xcd1xcZF0rKTs/L2csIGZ1bmN0aW9uIChzLCBlbnRpdHkpIHtcbiAgICAgICAgICAgIHZhciBjaHI7XG4gICAgICAgICAgICBpZiAoZW50aXR5LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IGVudGl0eS5jaGFyQXQoMSkgPT09ICd4JyA/XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGVudGl0eS5zdWJzdHIoMikudG9Mb3dlckNhc2UoKSwgMTYpIDpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoZW50aXR5LnN1YnN0cigxKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihjb2RlKSB8fCBjb2RlID49IC0zMjc2OCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA8PSA2NTUzNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNociA9IHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaHIgPSBhbHBoYUluZGV4W2VudGl0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2hyIHx8IHM7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDVFbnRpdGllcygpLmRlY29kZShzdHIpO1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjaGFySW5mbyA9IGNoYXJJbmRleFtzdHIuY2hhckNvZGVBdChpKV07XG4gICAgICAgICAgICBpZiAoY2hhckluZm8pIHtcbiAgICAgICAgICAgICAgICB2YXIgYWxwaGEgPSBjaGFySW5mb1tzdHIuY2hhckNvZGVBdChpICsgMSldO1xuICAgICAgICAgICAgICAgIGlmIChhbHBoYSkge1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbHBoYSA9IGNoYXJJbmZvWycnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIiZcIiArIGFscGhhICsgXCI7XCI7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIEh0bWw1RW50aXRpZXMuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWw1RW50aXRpZXMoKS5lbmNvZGUoc3RyKTtcbiAgICB9O1xuICAgIEh0bWw1RW50aXRpZXMucHJvdG90eXBlLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3RyTGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgdmFyIGNoYXJJbmZvID0gY2hhckluZGV4W2NdO1xuICAgICAgICAgICAgaWYgKGNoYXJJbmZvKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFscGhhID0gY2hhckluZm9bc3RyLmNoYXJDb2RlQXQoaSArIDEpXTtcbiAgICAgICAgICAgICAgICBpZiAoYWxwaGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWxwaGEgPSBjaGFySW5mb1snJ107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhbHBoYSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCImXCIgKyBhbHBoYSArIFwiO1wiO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjIDwgMzIgfHwgYyA+IDEyNikge1xuICAgICAgICAgICAgICAgIGlmIChjID49IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVGcm9tICYmIGMgPD0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZVRvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgc3Vycm9nYXRlX3BhaXJzXzEuZ2V0Q29kZVBvaW50KHN0ciwgaSkgKyAnOyc7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgYyArICc7JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5lbmNvZGVOb25VVEYgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDVFbnRpdGllcygpLmVuY29kZU5vblVURihzdHIpO1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlTm9uQVNDSUkgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmIChjIDw9IDI1NSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdHJbaSsrXTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID49IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVGcm9tICYmIGMgPD0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZVRvKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBzdXJyb2dhdGVfcGFpcnNfMS5nZXRDb2RlUG9pbnQoc3RyLCBpKSArICc7JztcbiAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIGMgKyAnOyc7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBIdG1sNUVudGl0aWVzLmVuY29kZU5vbkFTQ0lJID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWw1RW50aXRpZXMoKS5lbmNvZGVOb25BU0NJSShzdHIpO1xuICAgIH07XG4gICAgcmV0dXJuIEh0bWw1RW50aXRpZXM7XG59KCkpO1xuZXhwb3J0cy5IdG1sNUVudGl0aWVzID0gSHRtbDVFbnRpdGllcztcbmZ1bmN0aW9uIGNyZWF0ZUluZGV4ZXMoYWxwaGFJbmRleCwgY2hhckluZGV4KSB7XG4gICAgdmFyIGkgPSBFTlRJVElFUy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2YXIgX2EgPSBFTlRJVElFU1tpXSwgYWxwaGEgPSBfYVswXSwgX2IgPSBfYVsxXSwgY2hyID0gX2JbMF0sIGNocjIgPSBfYlsxXTtcbiAgICAgICAgdmFyIGFkZENoYXIgPSAoY2hyIDwgMzIgfHwgY2hyID4gMTI2KSB8fCBjaHIgPT09IDYyIHx8IGNociA9PT0gNjAgfHwgY2hyID09PSAzOCB8fCBjaHIgPT09IDM0IHx8IGNociA9PT0gMzk7XG4gICAgICAgIHZhciBjaGFySW5mbyA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGFkZENoYXIpIHtcbiAgICAgICAgICAgIGNoYXJJbmZvID0gY2hhckluZGV4W2Nocl0gPSBjaGFySW5kZXhbY2hyXSB8fCB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hyMikge1xuICAgICAgICAgICAgYWxwaGFJbmRleFthbHBoYV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjIpO1xuICAgICAgICAgICAgYWRkQ2hhciAmJiAoY2hhckluZm9bY2hyMl0gPSBhbHBoYSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhbHBoYUluZGV4W2FscGhhXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyKTtcbiAgICAgICAgICAgIGFkZENoYXIgJiYgKGNoYXJJbmZvWycnXSA9IGFscGhhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpID0gREVDT0RFX09OTFlfRU5USVRJRVMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdmFyIF9jID0gREVDT0RFX09OTFlfRU5USVRJRVNbaV0sIGFscGhhID0gX2NbMF0sIF9kID0gX2NbMV0sIGNociA9IF9kWzBdLCBjaHIyID0gX2RbMV07XG4gICAgICAgIGFscGhhSW5kZXhbYWxwaGFdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpICsgKGNocjIgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjIpIDogJycpO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHhtbF9lbnRpdGllc18xID0gcmVxdWlyZShcIi4veG1sLWVudGl0aWVzXCIpO1xuZXhwb3J0cy5YbWxFbnRpdGllcyA9IHhtbF9lbnRpdGllc18xLlhtbEVudGl0aWVzO1xudmFyIGh0bWw0X2VudGl0aWVzXzEgPSByZXF1aXJlKFwiLi9odG1sNC1lbnRpdGllc1wiKTtcbmV4cG9ydHMuSHRtbDRFbnRpdGllcyA9IGh0bWw0X2VudGl0aWVzXzEuSHRtbDRFbnRpdGllcztcbnZhciBodG1sNV9lbnRpdGllc18xID0gcmVxdWlyZShcIi4vaHRtbDUtZW50aXRpZXNcIik7XG5leHBvcnRzLkh0bWw1RW50aXRpZXMgPSBodG1sNV9lbnRpdGllc18xLkh0bWw1RW50aXRpZXM7XG5leHBvcnRzLkFsbEh0bWxFbnRpdGllcyA9IGh0bWw1X2VudGl0aWVzXzEuSHRtbDVFbnRpdGllcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQgfHwgZnVuY3Rpb24gKGFzdHJhbENvZGVQb2ludCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKE1hdGguZmxvb3IoKGFzdHJhbENvZGVQb2ludCAtIDB4MTAwMDApIC8gMHg0MDApICsgMHhEODAwLCAoYXN0cmFsQ29kZVBvaW50IC0gMHgxMDAwMCkgJSAweDQwMCArIDB4REMwMCk7XG59O1xuZXhwb3J0cy5nZXRDb2RlUG9pbnQgPSBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0ID9cbiAgICBmdW5jdGlvbiAoaW5wdXQsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5jb2RlUG9pbnRBdChwb3NpdGlvbik7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24gKGlucHV0LCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gKGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24pIC0gMHhEODAwKSAqIDB4NDAwXG4gICAgICAgICAgICArIGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSAtIDB4REMwMCArIDB4MTAwMDA7XG4gICAgfTtcbmV4cG9ydHMuaGlnaFN1cnJvZ2F0ZUZyb20gPSAweEQ4MDA7XG5leHBvcnRzLmhpZ2hTdXJyb2dhdGVUbyA9IDB4REJGRjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHN1cnJvZ2F0ZV9wYWlyc18xID0gcmVxdWlyZShcIi4vc3Vycm9nYXRlLXBhaXJzXCIpO1xudmFyIEFMUEhBX0lOREVYID0ge1xuICAgICcmbHQnOiAnPCcsXG4gICAgJyZndCc6ICc+JyxcbiAgICAnJnF1b3QnOiAnXCInLFxuICAgICcmYXBvcyc6ICdcXCcnLFxuICAgICcmYW1wJzogJyYnLFxuICAgICcmbHQ7JzogJzwnLFxuICAgICcmZ3Q7JzogJz4nLFxuICAgICcmcXVvdDsnOiAnXCInLFxuICAgICcmYXBvczsnOiAnXFwnJyxcbiAgICAnJmFtcDsnOiAnJidcbn07XG52YXIgQ0hBUl9JTkRFWCA9IHtcbiAgICA2MDogJ2x0JyxcbiAgICA2MjogJ2d0JyxcbiAgICAzNDogJ3F1b3QnLFxuICAgIDM5OiAnYXBvcycsXG4gICAgMzg6ICdhbXAnXG59O1xudmFyIENIQVJfU19JTkRFWCA9IHtcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICAnXFwnJzogJyZhcG9zOycsXG4gICAgJyYnOiAnJmFtcDsnXG59O1xudmFyIFhtbEVudGl0aWVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFhtbEVudGl0aWVzKCkge1xuICAgIH1cbiAgICBYbWxFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvWzw+XCInJl0vZywgZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIHJldHVybiBDSEFSX1NfSU5ERVhbc107XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgWG1sRW50aXRpZXMuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IFhtbEVudGl0aWVzKCkuZW5jb2RlKHN0cik7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJiM/WzAtOWEtekEtWl0rOz8vZywgZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIGlmIChzLmNoYXJBdCgxKSA9PT0gJyMnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBzLmNoYXJBdCgyKS50b0xvd2VyQ2FzZSgpID09PSAneCcgP1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChzLnN1YnN0cigzKSwgMTYpIDpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQocy5zdWJzdHIoMikpO1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oY29kZSkgfHwgY29kZSA+PSAtMzI3NjgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgPD0gNjU1MzUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEFMUEhBX0lOREVYW3NdIHx8IHM7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgWG1sRW50aXRpZXMuZGVjb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IFhtbEVudGl0aWVzKCkuZGVjb2RlKHN0cik7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICB2YXIgYWxwaGEgPSBDSEFSX0lOREVYW2NdO1xuICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiJlwiICsgYWxwaGEgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA8IDMyIHx8IGMgPiAxMjYpIHtcbiAgICAgICAgICAgICAgICBpZiAoYyA+PSBzdXJyb2dhdGVfcGFpcnNfMS5oaWdoU3Vycm9nYXRlRnJvbSAmJiBjIDw9IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVUbykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIHN1cnJvZ2F0ZV9wYWlyc18xLmdldENvZGVQb2ludChzdHIsIGkpICsgJzsnO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIGMgKyAnOyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFhtbEVudGl0aWVzLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBYbWxFbnRpdGllcygpLmVuY29kZU5vblVURihzdHIpO1xuICAgIH07XG4gICAgWG1sRW50aXRpZXMucHJvdG90eXBlLmVuY29kZU5vbkFTQ0lJID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoYyA8PSAyNTUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc3RyW2krK107XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA+PSBzdXJyb2dhdGVfcGFpcnNfMS5oaWdoU3Vycm9nYXRlRnJvbSAmJiBjIDw9IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVUbykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgc3Vycm9nYXRlX3BhaXJzXzEuZ2V0Q29kZVBvaW50KHN0ciwgaSkgKyAnOyc7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBjICsgJzsnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBYbWxFbnRpdGllcygpLmVuY29kZU5vbkFTQ0lJKHN0cik7XG4gICAgfTtcbiAgICByZXR1cm4gWG1sRW50aXRpZXM7XG59KCkpO1xuZXhwb3J0cy5YbWxFbnRpdGllcyA9IFhtbEVudGl0aWVzO1xuIiwiLyoqXG4gKiBJZGVudGljb24uanMgMi4zLjNcbiAqIGh0dHA6Ly9naXRodWIuY29tL3N0ZXdhcnRsb3JkL2lkZW50aWNvbi5qc1xuICpcbiAqIFBOR0xpYiByZXF1aXJlZCBmb3IgUE5HIG91dHB1dFxuICogaHR0cDovL3d3dy54YXJnLm9yZy9kb3dubG9hZC9wbmdsaWIuanNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxOCwgU3Rld2FydCBMb3JkXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgQlNEIGxpY2Vuc2VcbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvYnNkLWxpY2Vuc2UucGhwXG4gKi9cblxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBQTkdsaWI7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgUE5HbGliID0gcmVxdWlyZSgnLi9wbmdsaWInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBQTkdsaWIgPSB3aW5kb3cuUE5HbGliO1xuICAgIH1cblxuICAgIHZhciBJZGVudGljb24gPSBmdW5jdGlvbihoYXNoLCBvcHRpb25zKXtcbiAgICAgICAgaWYgKHR5cGVvZihoYXNoKSAhPT0gJ3N0cmluZycgfHwgaGFzaC5sZW5ndGggPCAxNSkge1xuICAgICAgICAgICAgdGhyb3cgJ0EgaGFzaCBvZiBhdCBsZWFzdCAxNSBjaGFyYWN0ZXJzIGlzIHJlcXVpcmVkLic7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogWzI0MCwgMjQwLCAyNDAsIDI1NV0sXG4gICAgICAgICAgICBtYXJnaW46ICAgICAwLjA4LFxuICAgICAgICAgICAgc2l6ZTogICAgICAgNjQsXG4gICAgICAgICAgICBzYXR1cmF0aW9uOiAwLjcsXG4gICAgICAgICAgICBicmlnaHRuZXNzOiAwLjUsXG4gICAgICAgICAgICBmb3JtYXQ6ICAgICAncG5nJ1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHR5cGVvZihvcHRpb25zKSA9PT0gJ29iamVjdCcgPyBvcHRpb25zIDogdGhpcy5kZWZhdWx0cztcblxuICAgICAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggb2xkIGNvbnN0cnVjdG9yIChoYXNoLCBzaXplLCBtYXJnaW4pXG4gICAgICAgIGlmICh0eXBlb2YoYXJndW1lbnRzWzFdKSA9PT0gJ251bWJlcicpIHsgdGhpcy5vcHRpb25zLnNpemUgICA9IGFyZ3VtZW50c1sxXTsgfVxuICAgICAgICBpZiAoYXJndW1lbnRzWzJdKSAgICAgICAgICAgICAgICAgICAgICB7IHRoaXMub3B0aW9ucy5tYXJnaW4gPSBhcmd1bWVudHNbMl07IH1cblxuICAgICAgICB0aGlzLmhhc2ggICAgICAgID0gaGFzaFxuICAgICAgICB0aGlzLmJhY2tncm91bmQgID0gdGhpcy5vcHRpb25zLmJhY2tncm91bmQgfHwgdGhpcy5kZWZhdWx0cy5iYWNrZ3JvdW5kO1xuICAgICAgICB0aGlzLnNpemUgICAgICAgID0gdGhpcy5vcHRpb25zLnNpemUgICAgICAgfHwgdGhpcy5kZWZhdWx0cy5zaXplO1xuICAgICAgICB0aGlzLmZvcm1hdCAgICAgID0gdGhpcy5vcHRpb25zLmZvcm1hdCAgICAgfHwgdGhpcy5kZWZhdWx0cy5mb3JtYXQ7XG4gICAgICAgIHRoaXMubWFyZ2luICAgICAgPSB0aGlzLm9wdGlvbnMubWFyZ2luICE9PSB1bmRlZmluZWQgPyB0aGlzLm9wdGlvbnMubWFyZ2luIDogdGhpcy5kZWZhdWx0cy5tYXJnaW47XG5cbiAgICAgICAgLy8gZm9yZWdyb3VuZCBkZWZhdWx0cyB0byBsYXN0IDcgY2hhcnMgYXMgaHVlIGF0IDcwJSBzYXR1cmF0aW9uLCA1MCUgYnJpZ2h0bmVzc1xuICAgICAgICB2YXIgaHVlICAgICAgICAgID0gcGFyc2VJbnQodGhpcy5oYXNoLnN1YnN0cigtNyksIDE2KSAvIDB4ZmZmZmZmZjtcbiAgICAgICAgdmFyIHNhdHVyYXRpb24gICA9IHRoaXMub3B0aW9ucy5zYXR1cmF0aW9uIHx8IHRoaXMuZGVmYXVsdHMuc2F0dXJhdGlvbjtcbiAgICAgICAgdmFyIGJyaWdodG5lc3MgICA9IHRoaXMub3B0aW9ucy5icmlnaHRuZXNzIHx8IHRoaXMuZGVmYXVsdHMuYnJpZ2h0bmVzcztcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kICA9IHRoaXMub3B0aW9ucy5mb3JlZ3JvdW5kIHx8IHRoaXMuaHNsMnJnYihodWUsIHNhdHVyYXRpb24sIGJyaWdodG5lc3MpO1xuICAgIH07XG5cbiAgICBJZGVudGljb24ucHJvdG90eXBlID0ge1xuICAgICAgICBiYWNrZ3JvdW5kOiBudWxsLFxuICAgICAgICBmb3JlZ3JvdW5kOiBudWxsLFxuICAgICAgICBoYXNoOiAgICAgICBudWxsLFxuICAgICAgICBtYXJnaW46ICAgICBudWxsLFxuICAgICAgICBzaXplOiAgICAgICBudWxsLFxuICAgICAgICBmb3JtYXQ6ICAgICBudWxsLFxuXG4gICAgICAgIGltYWdlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNTdmcoKVxuICAgICAgICAgICAgICAgID8gbmV3IFN2Zyh0aGlzLnNpemUsIHRoaXMuZm9yZWdyb3VuZCwgdGhpcy5iYWNrZ3JvdW5kKVxuICAgICAgICAgICAgICAgIDogbmV3IFBOR2xpYih0aGlzLnNpemUsIHRoaXMuc2l6ZSwgMjU2KTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgaW1hZ2UgICAgICA9IHRoaXMuaW1hZ2UoKSxcbiAgICAgICAgICAgICAgICBzaXplICAgICAgID0gdGhpcy5zaXplLFxuICAgICAgICAgICAgICAgIGJhc2VNYXJnaW4gPSBNYXRoLmZsb29yKHNpemUgKiB0aGlzLm1hcmdpbiksXG4gICAgICAgICAgICAgICAgY2VsbCAgICAgICA9IE1hdGguZmxvb3IoKHNpemUgLSAoYmFzZU1hcmdpbiAqIDIpKSAvIDUpLFxuICAgICAgICAgICAgICAgIG1hcmdpbiAgICAgPSBNYXRoLmZsb29yKChzaXplIC0gY2VsbCAqIDUpIC8gMiksXG4gICAgICAgICAgICAgICAgYmcgICAgICAgICA9IGltYWdlLmNvbG9yLmFwcGx5KGltYWdlLCB0aGlzLmJhY2tncm91bmQpLFxuICAgICAgICAgICAgICAgIGZnICAgICAgICAgPSBpbWFnZS5jb2xvci5hcHBseShpbWFnZSwgdGhpcy5mb3JlZ3JvdW5kKTtcblxuICAgICAgICAgICAgLy8gdGhlIGZpcnN0IDE1IGNoYXJhY3RlcnMgb2YgdGhlIGhhc2ggY29udHJvbCB0aGUgcGl4ZWxzIChldmVuL29kZClcbiAgICAgICAgICAgIC8vIHRoZXkgYXJlIGRyYXduIGRvd24gdGhlIG1pZGRsZSBmaXJzdCwgdGhlbiBtaXJyb3JlZCBvdXR3YXJkc1xuICAgICAgICAgICAgdmFyIGksIGNvbG9yO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDE1OyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9IHBhcnNlSW50KHRoaXMuaGFzaC5jaGFyQXQoaSksIDE2KSAlIDIgPyBiZyA6IGZnO1xuICAgICAgICAgICAgICAgIGlmIChpIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3RhbmdsZSgyICogY2VsbCArIG1hcmdpbiwgaSAqIGNlbGwgKyBtYXJnaW4sIGNlbGwsIGNlbGwsIGNvbG9yLCBpbWFnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIDwgMTApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWN0YW5nbGUoMSAqIGNlbGwgKyBtYXJnaW4sIChpIC0gNSkgKiBjZWxsICsgbWFyZ2luLCBjZWxsLCBjZWxsLCBjb2xvciwgaW1hZ2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3RhbmdsZSgzICogY2VsbCArIG1hcmdpbiwgKGkgLSA1KSAqIGNlbGwgKyBtYXJnaW4sIGNlbGwsIGNlbGwsIGNvbG9yLCBpbWFnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIDwgMTUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWN0YW5nbGUoMCAqIGNlbGwgKyBtYXJnaW4sIChpIC0gMTApICogY2VsbCArIG1hcmdpbiwgY2VsbCwgY2VsbCwgY29sb3IsIGltYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWN0YW5nbGUoNCAqIGNlbGwgKyBtYXJnaW4sIChpIC0gMTApICogY2VsbCArIG1hcmdpbiwgY2VsbCwgY2VsbCwgY29sb3IsIGltYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpbWFnZTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWN0YW5nbGU6IGZ1bmN0aW9uKHgsIHksIHcsIGgsIGNvbG9yLCBpbWFnZSl7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1N2ZygpKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2UucmVjdGFuZ2xlcy5wdXNoKHt4OiB4LCB5OiB5LCB3OiB3LCBoOiBoLCBjb2xvcjogY29sb3J9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGksIGo7XG4gICAgICAgICAgICAgICAgZm9yIChpID0geDsgaSA8IHggKyB3OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0geTsgaiA8IHkgKyBoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLmJ1ZmZlcltpbWFnZS5pbmRleChpLCBqKV0gPSBjb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyBhZGFwdGVkIGZyb206IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2FlbWtlaS8xMzI1OTM3XG4gICAgICAgIGhzbDJyZ2I6IGZ1bmN0aW9uKGgsIHMsIGIpe1xuICAgICAgICAgICAgaCAqPSA2O1xuICAgICAgICAgICAgcyA9IFtcbiAgICAgICAgICAgICAgICBiICs9IHMgKj0gYiA8IC41ID8gYiA6IDEgLSBiLFxuICAgICAgICAgICAgICAgIGIgLSBoICUgMSAqIHMgKiAyLFxuICAgICAgICAgICAgICAgIGIgLT0gcyAqPSAyLFxuICAgICAgICAgICAgICAgIGIsXG4gICAgICAgICAgICAgICAgYiArIGggJSAxICogcyxcbiAgICAgICAgICAgICAgICBiICsgc1xuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgcmV0dXJuW1xuICAgICAgICAgICAgICAgIHNbIH5+aCAgICAlIDYgXSAqIDI1NSwgLy8gcmVkXG4gICAgICAgICAgICAgICAgc1sgKGh8MTYpICUgNiBdICogMjU1LCAvLyBncmVlblxuICAgICAgICAgICAgICAgIHNbIChofDgpICAlIDYgXSAqIDI1NSAgLy8gYmx1ZVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSxcblxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24ocmF3KXtcbiAgICAgICAgICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBvbGQgdG9TdHJpbmcsIGRlZmF1bHQgdG8gYmFzZTY0XG4gICAgICAgICAgICBpZiAocmF3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKCkuZ2V0RHVtcCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIoKS5nZXRCYXNlNjQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpc1N2ZzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdC5tYXRjaCgvc3ZnL2kpXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIFN2ZyA9IGZ1bmN0aW9uKHNpemUsIGZvcmVncm91bmQsIGJhY2tncm91bmQpe1xuICAgICAgICB0aGlzLnNpemUgICAgICAgPSBzaXplO1xuICAgICAgICB0aGlzLmZvcmVncm91bmQgPSB0aGlzLmNvbG9yLmFwcGx5KHRoaXMsIGZvcmVncm91bmQpO1xuICAgICAgICB0aGlzLmJhY2tncm91bmQgPSB0aGlzLmNvbG9yLmFwcGx5KHRoaXMsIGJhY2tncm91bmQpO1xuICAgICAgICB0aGlzLnJlY3RhbmdsZXMgPSBbXTtcbiAgICB9O1xuXG4gICAgU3ZnLnByb3RvdHlwZSA9IHtcbiAgICAgICAgc2l6ZTogICAgICAgbnVsbCxcbiAgICAgICAgZm9yZWdyb3VuZDogbnVsbCxcbiAgICAgICAgYmFja2dyb3VuZDogbnVsbCxcbiAgICAgICAgcmVjdGFuZ2xlczogbnVsbCxcblxuICAgICAgICBjb2xvcjogZnVuY3Rpb24ociwgZywgYiwgYSl7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gW3IsIGcsIGJdLm1hcChNYXRoLnJvdW5kKTtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKChhID49IDApICYmIChhIDw9IDI1NSkgPyBhLzI1NSA6IDEpO1xuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKCcgKyB2YWx1ZXMuam9pbignLCcpICsgJyknO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldER1bXA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgeG1sLFxuICAgICAgICAgICAgICAgIHJlY3QsXG4gICAgICAgICAgICAgICAgZmcgICAgID0gdGhpcy5mb3JlZ3JvdW5kLFxuICAgICAgICAgICAgICAgIGJnICAgICA9IHRoaXMuYmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBzdHJva2UgPSB0aGlzLnNpemUgKiAwLjAwNTtcblxuICAgICAgICAgICAgeG1sID0gXCI8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcIlxuICAgICAgICAgICAgICAgICsgXCIgd2lkdGg9J1wiICsgdGhpcy5zaXplICsgXCInIGhlaWdodD0nXCIgKyB0aGlzLnNpemUgKyBcIidcIlxuICAgICAgICAgICAgICAgICsgXCIgc3R5bGU9J2JhY2tncm91bmQtY29sb3I6XCIgKyBiZyArIFwiOyc+XCJcbiAgICAgICAgICAgICAgICArIFwiPGcgc3R5bGU9J2ZpbGw6XCIgKyBmZyArIFwiOyBzdHJva2U6XCIgKyBmZyArIFwiOyBzdHJva2Utd2lkdGg6XCIgKyBzdHJva2UgKyBcIjsnPlwiO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5yZWN0YW5nbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVjdCA9IHRoaXMucmVjdGFuZ2xlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAocmVjdC5jb2xvciA9PSBiZykgY29udGludWU7XG4gICAgICAgICAgICAgICAgeG1sICs9IFwiPHJlY3QgXCJcbiAgICAgICAgICAgICAgICAgICAgKyBcIiB4PSdcIiAgICAgICsgcmVjdC54ICsgXCInXCJcbiAgICAgICAgICAgICAgICAgICAgKyBcIiB5PSdcIiAgICAgICsgcmVjdC55ICsgXCInXCJcbiAgICAgICAgICAgICAgICAgICAgKyBcIiB3aWR0aD0nXCIgICsgcmVjdC53ICsgXCInXCJcbiAgICAgICAgICAgICAgICAgICAgKyBcIiBoZWlnaHQ9J1wiICsgcmVjdC5oICsgXCInXCJcbiAgICAgICAgICAgICAgICAgICAgKyBcIi8+XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4bWwgKz0gXCI8L2c+PC9zdmc+XCJcblxuICAgICAgICAgICAgcmV0dXJuIHhtbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRCYXNlNjQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGJ0b2EpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnRvYSh0aGlzLmdldER1bXAoKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyKHRoaXMuZ2V0RHVtcCgpLCAnYmluYXJ5JykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyAnQ2Fubm90IGdlbmVyYXRlIGJhc2U2NCBvdXRwdXQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gSWRlbnRpY29uO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5JZGVudGljb24gPSBJZGVudGljb247XG4gICAgfVxufSkoKTtcbiIsIi8qKlxuKiBBIGhhbmR5IGNsYXNzIHRvIGNhbGN1bGF0ZSBjb2xvciB2YWx1ZXMuXG4qXG4qIEB2ZXJzaW9uIDEuMFxuKiBAYXV0aG9yIFJvYmVydCBFaXNlbGUgPHJvYmVydEB4YXJnLm9yZz5cbiogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTAsIFJvYmVydCBFaXNlbGVcbiogQGxpbmsgaHR0cDovL3d3dy54YXJnLm9yZy8yMDEwLzAzL2dlbmVyYXRlLWNsaWVudC1zaWRlLXBuZy1maWxlcy11c2luZy1qYXZhc2NyaXB0L1xuKiBAbGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL2JzZC1saWNlbnNlLnBocCBCU0QgTGljZW5zZVxuKlxuKi9cblxuKGZ1bmN0aW9uKCkge1xuXG5cdC8vIGhlbHBlciBmdW5jdGlvbnMgZm9yIHRoYXQgY3R4XG5cdGZ1bmN0aW9uIHdyaXRlKGJ1ZmZlciwgb2Zmcykge1xuXHRcdGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGFyZ3VtZW50c1tpXS5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRidWZmZXJbb2ZmcysrXSA9IGFyZ3VtZW50c1tpXS5jaGFyQXQoaik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gYnl0ZTIodykge1xuXHRcdHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKCh3ID4+IDgpICYgMjU1LCB3ICYgMjU1KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJ5dGU0KHcpIHtcblx0XHRyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgodyA+PiAyNCkgJiAyNTUsICh3ID4+IDE2KSAmIDI1NSwgKHcgPj4gOCkgJiAyNTUsIHcgJiAyNTUpO1xuXHR9XG5cblx0ZnVuY3Rpb24gYnl0ZTJsc2Iodykge1xuXHRcdHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHcgJiAyNTUsICh3ID4+IDgpICYgMjU1KTtcblx0fVxuXG5cdC8vIG1vZGlmaWVkIGZyb20gb3JpZ2luYWwgc291cmNlIHRvIHN1cHBvcnQgTlBNXG5cdHZhciBQTkdsaWIgPSBmdW5jdGlvbih3aWR0aCxoZWlnaHQsZGVwdGgpIHtcblxuXHRcdHRoaXMud2lkdGggICA9IHdpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ICA9IGhlaWdodDtcblx0XHR0aGlzLmRlcHRoICAgPSBkZXB0aDtcblxuXHRcdC8vIHBpeGVsIGRhdGEgYW5kIHJvdyBmaWx0ZXIgaWRlbnRpZmllciBzaXplXG5cdFx0dGhpcy5waXhfc2l6ZSA9IGhlaWdodCAqICh3aWR0aCArIDEpO1xuXG5cdFx0Ly8gZGVmbGF0ZSBoZWFkZXIsIHBpeF9zaXplLCBibG9jayBoZWFkZXJzLCBhZGxlcjMyIGNoZWNrc3VtXG5cdFx0dGhpcy5kYXRhX3NpemUgPSAyICsgdGhpcy5waXhfc2l6ZSArIDUgKiBNYXRoLmZsb29yKCgweGZmZmUgKyB0aGlzLnBpeF9zaXplKSAvIDB4ZmZmZikgKyA0O1xuXG5cdFx0Ly8gb2Zmc2V0cyBhbmQgc2l6ZXMgb2YgUG5nIGNodW5rc1xuXHRcdHRoaXMuaWhkcl9vZmZzID0gMDtcdFx0XHRcdFx0XHRcdFx0XHQvLyBJSERSIG9mZnNldCBhbmQgc2l6ZVxuXHRcdHRoaXMuaWhkcl9zaXplID0gNCArIDQgKyAxMyArIDQ7XG5cdFx0dGhpcy5wbHRlX29mZnMgPSB0aGlzLmloZHJfb2ZmcyArIHRoaXMuaWhkcl9zaXplO1x0Ly8gUExURSBvZmZzZXQgYW5kIHNpemVcblx0XHR0aGlzLnBsdGVfc2l6ZSA9IDQgKyA0ICsgMyAqIGRlcHRoICsgNDtcblx0XHR0aGlzLnRybnNfb2ZmcyA9IHRoaXMucGx0ZV9vZmZzICsgdGhpcy5wbHRlX3NpemU7XHQvLyB0Uk5TIG9mZnNldCBhbmQgc2l6ZVxuXHRcdHRoaXMudHJuc19zaXplID0gNCArIDQgKyBkZXB0aCArIDQ7XG5cdFx0dGhpcy5pZGF0X29mZnMgPSB0aGlzLnRybnNfb2ZmcyArIHRoaXMudHJuc19zaXplO1x0Ly8gSURBVCBvZmZzZXQgYW5kIHNpemVcblx0XHR0aGlzLmlkYXRfc2l6ZSA9IDQgKyA0ICsgdGhpcy5kYXRhX3NpemUgKyA0O1xuXHRcdHRoaXMuaWVuZF9vZmZzID0gdGhpcy5pZGF0X29mZnMgKyB0aGlzLmlkYXRfc2l6ZTtcdC8vIElFTkQgb2Zmc2V0IGFuZCBzaXplXG5cdFx0dGhpcy5pZW5kX3NpemUgPSA0ICsgNCArIDQ7XG5cdFx0dGhpcy5idWZmZXJfc2l6ZSAgPSB0aGlzLmllbmRfb2ZmcyArIHRoaXMuaWVuZF9zaXplO1x0Ly8gdG90YWwgUE5HIHNpemVcblxuXHRcdHRoaXMuYnVmZmVyICA9IG5ldyBBcnJheSgpO1xuXHRcdHRoaXMucGFsZXR0ZSA9IG5ldyBPYmplY3QoKTtcblx0XHR0aGlzLnBpbmRleCAgPSAwO1xuXG5cdFx0dmFyIF9jcmMzMiA9IG5ldyBBcnJheSgpO1xuXG5cdFx0Ly8gaW5pdGlhbGl6ZSBidWZmZXIgd2l0aCB6ZXJvIGJ5dGVzXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJ1ZmZlcl9zaXplOyBpKyspIHtcblx0XHRcdHRoaXMuYnVmZmVyW2ldID0gXCJcXHgwMFwiO1xuXHRcdH1cblxuXHRcdC8vIGluaXRpYWxpemUgbm9uLXplcm8gZWxlbWVudHNcblx0XHR3cml0ZSh0aGlzLmJ1ZmZlciwgdGhpcy5paGRyX29mZnMsIGJ5dGU0KHRoaXMuaWhkcl9zaXplIC0gMTIpLCAnSUhEUicsIGJ5dGU0KHdpZHRoKSwgYnl0ZTQoaGVpZ2h0KSwgXCJcXHgwOFxceDAzXCIpO1xuXHRcdHdyaXRlKHRoaXMuYnVmZmVyLCB0aGlzLnBsdGVfb2ZmcywgYnl0ZTQodGhpcy5wbHRlX3NpemUgLSAxMiksICdQTFRFJyk7XG5cdFx0d3JpdGUodGhpcy5idWZmZXIsIHRoaXMudHJuc19vZmZzLCBieXRlNCh0aGlzLnRybnNfc2l6ZSAtIDEyKSwgJ3RSTlMnKTtcblx0XHR3cml0ZSh0aGlzLmJ1ZmZlciwgdGhpcy5pZGF0X29mZnMsIGJ5dGU0KHRoaXMuaWRhdF9zaXplIC0gMTIpLCAnSURBVCcpO1xuXHRcdHdyaXRlKHRoaXMuYnVmZmVyLCB0aGlzLmllbmRfb2ZmcywgYnl0ZTQodGhpcy5pZW5kX3NpemUgLSAxMiksICdJRU5EJyk7XG5cblx0XHQvLyBpbml0aWFsaXplIGRlZmxhdGUgaGVhZGVyXG5cdFx0dmFyIGhlYWRlciA9ICgoOCArICg3IDw8IDQpKSA8PCA4KSB8ICgzIDw8IDYpO1xuXHRcdGhlYWRlcis9IDMxIC0gKGhlYWRlciAlIDMxKTtcblxuXHRcdHdyaXRlKHRoaXMuYnVmZmVyLCB0aGlzLmlkYXRfb2ZmcyArIDgsIGJ5dGUyKGhlYWRlcikpO1xuXG5cdFx0Ly8gaW5pdGlhbGl6ZSBkZWZsYXRlIGJsb2NrIGhlYWRlcnNcblx0XHRmb3IgKHZhciBpID0gMDsgKGkgPDwgMTYpIC0gMSA8IHRoaXMucGl4X3NpemU7IGkrKykge1xuXHRcdFx0dmFyIHNpemUsIGJpdHM7XG5cdFx0XHRpZiAoaSArIDB4ZmZmZiA8IHRoaXMucGl4X3NpemUpIHtcblx0XHRcdFx0c2l6ZSA9IDB4ZmZmZjtcblx0XHRcdFx0Yml0cyA9IFwiXFx4MDBcIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNpemUgPSB0aGlzLnBpeF9zaXplIC0gKGkgPDwgMTYpIC0gaTtcblx0XHRcdFx0Yml0cyA9IFwiXFx4MDFcIjtcblx0XHRcdH1cblx0XHRcdHdyaXRlKHRoaXMuYnVmZmVyLCB0aGlzLmlkYXRfb2ZmcyArIDggKyAyICsgKGkgPDwgMTYpICsgKGkgPDwgMiksIGJpdHMsIGJ5dGUybHNiKHNpemUpLCBieXRlMmxzYih+c2l6ZSkpO1xuXHRcdH1cblxuXHRcdC8qIENyZWF0ZSBjcmMzMiBsb29rdXAgdGFibGUgKi9cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG5cdFx0XHR2YXIgYyA9IGk7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IDg7IGorKykge1xuXHRcdFx0XHRpZiAoYyAmIDEpIHtcblx0XHRcdFx0XHRjID0gLTMwNjY3NDkxMiBeICgoYyA+PiAxKSAmIDB4N2ZmZmZmZmYpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGMgPSAoYyA+PiAxKSAmIDB4N2ZmZmZmZmY7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdF9jcmMzMltpXSA9IGM7XG5cdFx0fVxuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgaW5kZXggaW50byBhIHBuZyBmb3IgYSBnaXZlbiBwaXhlbFxuXHRcdHRoaXMuaW5kZXggPSBmdW5jdGlvbih4LHkpIHtcblx0XHRcdHZhciBpID0geSAqICh0aGlzLndpZHRoICsgMSkgKyB4ICsgMTtcblx0XHRcdHZhciBqID0gdGhpcy5pZGF0X29mZnMgKyA4ICsgMiArIDUgKiBNYXRoLmZsb29yKChpIC8gMHhmZmZmKSArIDEpICsgaTtcblx0XHRcdHJldHVybiBqO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgYSBjb2xvciBhbmQgYnVpbGQgdXAgdGhlIHBhbGV0dGVcblx0XHR0aGlzLmNvbG9yID0gZnVuY3Rpb24ocmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEpIHtcblxuXHRcdFx0YWxwaGEgPSBhbHBoYSA+PSAwID8gYWxwaGEgOiAyNTU7XG5cdFx0XHR2YXIgY29sb3IgPSAoKCgoKGFscGhhIDw8IDgpIHwgcmVkKSA8PCA4KSB8IGdyZWVuKSA8PCA4KSB8IGJsdWU7XG5cblx0XHRcdGlmICh0eXBlb2YgdGhpcy5wYWxldHRlW2NvbG9yXSA9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdGlmICh0aGlzLnBpbmRleCA9PSB0aGlzLmRlcHRoKSByZXR1cm4gXCJcXHgwMFwiO1xuXG5cdFx0XHRcdHZhciBuZHggPSB0aGlzLnBsdGVfb2ZmcyArIDggKyAzICogdGhpcy5waW5kZXg7XG5cblx0XHRcdFx0dGhpcy5idWZmZXJbbmR4ICsgMF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHJlZCk7XG5cdFx0XHRcdHRoaXMuYnVmZmVyW25keCArIDFdID0gU3RyaW5nLmZyb21DaGFyQ29kZShncmVlbik7XG5cdFx0XHRcdHRoaXMuYnVmZmVyW25keCArIDJdID0gU3RyaW5nLmZyb21DaGFyQ29kZShibHVlKTtcblx0XHRcdFx0dGhpcy5idWZmZXJbdGhpcy50cm5zX29mZnMrOCt0aGlzLnBpbmRleF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGFscGhhKTtcblxuXHRcdFx0XHR0aGlzLnBhbGV0dGVbY29sb3JdID0gU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLnBpbmRleCsrKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnBhbGV0dGVbY29sb3JdO1xuXHRcdH1cblxuXHRcdC8vIG91dHB1dCBhIFBORyBzdHJpbmcsIEJhc2U2NCBlbmNvZGVkXG5cdFx0dGhpcy5nZXRCYXNlNjQgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHMgPSB0aGlzLmdldER1bXAoKTtcblxuXHRcdFx0dmFyIGNoID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO1xuXHRcdFx0dmFyIGMxLCBjMiwgYzMsIGUxLCBlMiwgZTMsIGU0O1xuXHRcdFx0dmFyIGwgPSBzLmxlbmd0aDtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdHZhciByID0gXCJcIjtcblxuXHRcdFx0ZG8ge1xuXHRcdFx0XHRjMSA9IHMuY2hhckNvZGVBdChpKTtcblx0XHRcdFx0ZTEgPSBjMSA+PiAyO1xuXHRcdFx0XHRjMiA9IHMuY2hhckNvZGVBdChpKzEpO1xuXHRcdFx0XHRlMiA9ICgoYzEgJiAzKSA8PCA0KSB8IChjMiA+PiA0KTtcblx0XHRcdFx0YzMgPSBzLmNoYXJDb2RlQXQoaSsyKTtcblx0XHRcdFx0aWYgKGwgPCBpKzIpIHsgZTMgPSA2NDsgfSBlbHNlIHsgZTMgPSAoKGMyICYgMHhmKSA8PCAyKSB8IChjMyA+PiA2KTsgfVxuXHRcdFx0XHRpZiAobCA8IGkrMykgeyBlNCA9IDY0OyB9IGVsc2UgeyBlNCA9IGMzICYgMHgzZjsgfVxuXHRcdFx0XHRyKz0gY2guY2hhckF0KGUxKSArIGNoLmNoYXJBdChlMikgKyBjaC5jaGFyQXQoZTMpICsgY2guY2hhckF0KGU0KTtcblx0XHRcdH0gd2hpbGUgKChpKz0gMykgPCBsKTtcblx0XHRcdHJldHVybiByO1xuXHRcdH1cblxuXHRcdC8vIG91dHB1dCBhIFBORyBzdHJpbmdcblx0XHR0aGlzLmdldER1bXAgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gY29tcHV0ZSBhZGxlcjMyIG9mIG91dHB1dCBwaXhlbHMgKyByb3cgZmlsdGVyIGJ5dGVzXG5cdFx0XHR2YXIgQkFTRSA9IDY1NTIxOyAvKiBsYXJnZXN0IHByaW1lIHNtYWxsZXIgdGhhbiA2NTUzNiAqL1xuXHRcdFx0dmFyIE5NQVggPSA1NTUyOyAgLyogTk1BWCBpcyB0aGUgbGFyZ2VzdCBuIHN1Y2ggdGhhdCAyNTVuKG4rMSkvMiArIChuKzEpKEJBU0UtMSkgPD0gMl4zMi0xICovXG5cdFx0XHR2YXIgczEgPSAxO1xuXHRcdFx0dmFyIHMyID0gMDtcblx0XHRcdHZhciBuID0gTk1BWDtcblxuXHRcdFx0Zm9yICh2YXIgeSA9IDA7IHkgPCB0aGlzLmhlaWdodDsgeSsrKSB7XG5cdFx0XHRcdGZvciAodmFyIHggPSAtMTsgeCA8IHRoaXMud2lkdGg7IHgrKykge1xuXHRcdFx0XHRcdHMxKz0gdGhpcy5idWZmZXJbdGhpcy5pbmRleCh4LCB5KV0uY2hhckNvZGVBdCgwKTtcblx0XHRcdFx0XHRzMis9IHMxO1xuXHRcdFx0XHRcdGlmICgobi09IDEpID09IDApIHtcblx0XHRcdFx0XHRcdHMxJT0gQkFTRTtcblx0XHRcdFx0XHRcdHMyJT0gQkFTRTtcblx0XHRcdFx0XHRcdG4gPSBOTUFYO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0czElPSBCQVNFO1xuXHRcdFx0czIlPSBCQVNFO1xuXHRcdFx0d3JpdGUodGhpcy5idWZmZXIsIHRoaXMuaWRhdF9vZmZzICsgdGhpcy5pZGF0X3NpemUgLSA4LCBieXRlNCgoczIgPDwgMTYpIHwgczEpKTtcblxuXHRcdFx0Ly8gY29tcHV0ZSBjcmMzMiBvZiB0aGUgUE5HIGNodW5rc1xuXHRcdFx0ZnVuY3Rpb24gY3JjMzIocG5nLCBvZmZzLCBzaXplKSB7XG5cdFx0XHRcdHZhciBjcmMgPSAtMTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDQ7IGkgPCBzaXplLTQ7IGkgKz0gMSkge1xuXHRcdFx0XHRcdGNyYyA9IF9jcmMzMlsoY3JjIF4gcG5nW29mZnMraV0uY2hhckNvZGVBdCgwKSkgJiAweGZmXSBeICgoY3JjID4+IDgpICYgMHgwMGZmZmZmZik7XG5cdFx0XHRcdH1cblx0XHRcdFx0d3JpdGUocG5nLCBvZmZzK3NpemUtNCwgYnl0ZTQoY3JjIF4gLTEpKTtcblx0XHRcdH1cblxuXHRcdFx0Y3JjMzIodGhpcy5idWZmZXIsIHRoaXMuaWhkcl9vZmZzLCB0aGlzLmloZHJfc2l6ZSk7XG5cdFx0XHRjcmMzMih0aGlzLmJ1ZmZlciwgdGhpcy5wbHRlX29mZnMsIHRoaXMucGx0ZV9zaXplKTtcblx0XHRcdGNyYzMyKHRoaXMuYnVmZmVyLCB0aGlzLnRybnNfb2ZmcywgdGhpcy50cm5zX3NpemUpO1xuXHRcdFx0Y3JjMzIodGhpcy5idWZmZXIsIHRoaXMuaWRhdF9vZmZzLCB0aGlzLmlkYXRfc2l6ZSk7XG5cdFx0XHRjcmMzMih0aGlzLmJ1ZmZlciwgdGhpcy5pZW5kX29mZnMsIHRoaXMuaWVuZF9zaXplKTtcblxuXHRcdFx0Ly8gY29udmVydCBQTkcgdG8gc3RyaW5nXG5cdFx0XHRyZXR1cm4gXCJcXHg4OVBOR1xcclxcblxceDFhXFxuXCIrdGhpcy5idWZmZXIuam9pbignJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gbW9kaWZpZWQgZnJvbSBvcmlnaW5hbCBzb3VyY2UgdG8gc3VwcG9ydCBOUE1cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IFBOR2xpYjtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuUE5HbGliID0gUE5HbGliO1xuXHR9XG59KSgpO1xuIiwiLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNIQSBmYW1pbHkgb2YgaGFzaGVzIC0gZGVmaW5lZCBpbiBGSVBTIFBVQiAxODAtNCwgRklQUyBQVUIgMjAyLFxuICogYW5kIFNQIDgwMC0xODUgLSBhcyB3ZWxsIGFzIHRoZSBjb3JyZXNwb25kaW5nIEhNQUMgaW1wbGVtZW50YXRpb24gYXMgZGVmaW5lZCBpbiBGSVBTIFBVQiAxOTgtMS5cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOC0yMDIwIEJyaWFuIFR1cmVrLCAxOTk4LTIwMDkgUGF1bCBKb2huc3RvbiAmIENvbnRyaWJ1dG9yc1xuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBMaWNlbnNlXG4gKiBTZWUgaHR0cDovL2NhbGlnYXRpby5naXRodWIuY29tL2pzU0hBLyBmb3IgbW9yZSBpbmZvcm1hdGlvblxuICovXG5jb25zdCB0PVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO2Z1bmN0aW9uIG4odCxuLGUscil7bGV0IGkscyxvO2NvbnN0IGg9bnx8WzBdLHU9KGU9ZXx8MCk+Pj4zLHc9LTE9PT1yPzM6MDtmb3IoaT0wO2k8dC5sZW5ndGg7aSs9MSlvPWkrdSxzPW8+Pj4yLGgubGVuZ3RoPD1zJiZoLnB1c2goMCksaFtzXXw9dFtpXTw8OCoodytyKihvJTQpKTtyZXR1cm57dmFsdWU6aCxiaW5MZW46OCp0Lmxlbmd0aCtlfX1mdW5jdGlvbiBlKGUscixpKXtzd2l0Y2gocil7Y2FzZVwiVVRGOFwiOmNhc2VcIlVURjE2QkVcIjpjYXNlXCJVVEYxNkxFXCI6YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJlbmNvZGluZyBtdXN0IGJlIFVURjgsIFVURjE2QkUsIG9yIFVURjE2TEVcIil9c3dpdGNoKGUpe2Nhc2VcIkhFWFwiOnJldHVybiBmdW5jdGlvbih0LG4sZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbixlLHIpe2xldCBpLHMsbyxoO2lmKDAhPXQubGVuZ3RoJTIpdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5nIG9mIEhFWCB0eXBlIG11c3QgYmUgaW4gYnl0ZSBpbmNyZW1lbnRzXCIpO2NvbnN0IHU9bnx8WzBdLHc9KGU9ZXx8MCk+Pj4zLGM9LTE9PT1yPzM6MDtmb3IoaT0wO2k8dC5sZW5ndGg7aSs9Mil7aWYocz1wYXJzZUludCh0LnN1YnN0cihpLDIpLDE2KSxpc05hTihzKSl0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmcgb2YgSEVYIHR5cGUgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzXCIpO2ZvcihoPShpPj4+MSkrdyxvPWg+Pj4yO3UubGVuZ3RoPD1vOyl1LnB1c2goMCk7dVtvXXw9czw8OCooYytyKihoJTQpKX1yZXR1cm57dmFsdWU6dSxiaW5MZW46NCp0Lmxlbmd0aCtlfX0odCxuLGUsaSl9O2Nhc2VcIlRFWFRcIjpyZXR1cm4gZnVuY3Rpb24odCxuLGUpe3JldHVybiBmdW5jdGlvbih0LG4sZSxyLGkpe2xldCBzLG8saCx1LHcsYyxmLGEsbD0wO2NvbnN0IEE9ZXx8WzBdLEU9KHI9cnx8MCk+Pj4zO2lmKFwiVVRGOFwiPT09bilmb3IoZj0tMT09PWk/MzowLGg9MDtoPHQubGVuZ3RoO2grPTEpZm9yKHM9dC5jaGFyQ29kZUF0KGgpLG89W10sMTI4PnM/by5wdXNoKHMpOjIwNDg+cz8oby5wdXNoKDE5MnxzPj4+Niksby5wdXNoKDEyOHw2MyZzKSk6NTUyOTY+c3x8NTczNDQ8PXM/by5wdXNoKDIyNHxzPj4+MTIsMTI4fHM+Pj42JjYzLDEyOHw2MyZzKTooaCs9MSxzPTY1NTM2KygoMTAyMyZzKTw8MTB8MTAyMyZ0LmNoYXJDb2RlQXQoaCkpLG8ucHVzaCgyNDB8cz4+PjE4LDEyOHxzPj4+MTImNjMsMTI4fHM+Pj42JjYzLDEyOHw2MyZzKSksdT0wO3U8by5sZW5ndGg7dSs9MSl7Zm9yKGM9bCtFLHc9Yz4+PjI7QS5sZW5ndGg8PXc7KUEucHVzaCgwKTtBW3ddfD1vW3VdPDw4KihmK2kqKGMlNCkpLGwrPTF9ZWxzZSBmb3IoZj0tMT09PWk/MjowLGE9XCJVVEYxNkxFXCI9PT1uJiYxIT09aXx8XCJVVEYxNkxFXCIhPT1uJiYxPT09aSxoPTA7aDx0Lmxlbmd0aDtoKz0xKXtmb3Iocz10LmNoYXJDb2RlQXQoaCksITA9PT1hJiYodT0yNTUmcyxzPXU8PDh8cz4+PjgpLGM9bCtFLHc9Yz4+PjI7QS5sZW5ndGg8PXc7KUEucHVzaCgwKTtBW3ddfD1zPDw4KihmK2kqKGMlNCkpLGwrPTJ9cmV0dXJue3ZhbHVlOkEsYmluTGVuOjgqbCtyfX0odCxyLG4sZSxpKX07Y2FzZVwiQjY0XCI6cmV0dXJuIGZ1bmN0aW9uKG4sZSxyKXtyZXR1cm4gZnVuY3Rpb24obixlLHIsaSl7bGV0IHMsbyxoLHUsdyxjLGYsYT0wO2NvbnN0IGw9ZXx8WzBdLEE9KHI9cnx8MCk+Pj4zLEU9LTE9PT1pPzM6MCxIPW4uaW5kZXhPZihcIj1cIik7aWYoLTE9PT1uLnNlYXJjaCgvXlthLXpBLVowLTk9Ky9dKyQvKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNoYXJhY3RlciBpbiBiYXNlLTY0IHN0cmluZ1wiKTtpZihuPW4ucmVwbGFjZSgvPS9nLFwiXCIpLC0xIT09SCYmSDxuLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkICc9JyBmb3VuZCBpbiBiYXNlLTY0IHN0cmluZ1wiKTtmb3Iobz0wO288bi5sZW5ndGg7bys9NCl7Zm9yKHc9bi5zdWJzdHIobyw0KSx1PTAsaD0wO2g8dy5sZW5ndGg7aCs9MSlzPXQuaW5kZXhPZih3LmNoYXJBdChoKSksdXw9czw8MTgtNipoO2ZvcihoPTA7aDx3Lmxlbmd0aC0xO2grPTEpe2ZvcihmPWErQSxjPWY+Pj4yO2wubGVuZ3RoPD1jOylsLnB1c2goMCk7bFtjXXw9KHU+Pj4xNi04KmgmMjU1KTw8OCooRStpKihmJTQpKSxhKz0xfX1yZXR1cm57dmFsdWU6bCxiaW5MZW46OCphK3J9fShuLGUscixpKX07Y2FzZVwiQllURVNcIjpyZXR1cm4gZnVuY3Rpb24odCxuLGUpe3JldHVybiBmdW5jdGlvbih0LG4sZSxyKXtsZXQgaSxzLG8saDtjb25zdCB1PW58fFswXSx3PShlPWV8fDApPj4+MyxjPS0xPT09cj8zOjA7Zm9yKHM9MDtzPHQubGVuZ3RoO3MrPTEpaT10LmNoYXJDb2RlQXQocyksaD1zK3csbz1oPj4+Mix1Lmxlbmd0aDw9byYmdS5wdXNoKDApLHVbb118PWk8PDgqKGMrciooaCU0KSk7cmV0dXJue3ZhbHVlOnUsYmluTGVuOjgqdC5sZW5ndGgrZX19KHQsbixlLGkpfTtjYXNlXCJBUlJBWUJVRkZFUlwiOnRyeXtuZXcgQXJyYXlCdWZmZXIoMCl9Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwiQVJSQVlCVUZGRVIgbm90IHN1cHBvcnRlZCBieSB0aGlzIGVudmlyb25tZW50XCIpfXJldHVybiBmdW5jdGlvbih0LGUscil7cmV0dXJuIGZ1bmN0aW9uKHQsZSxyLGkpe3JldHVybiBuKG5ldyBVaW50OEFycmF5KHQpLGUscixpKX0odCxlLHIsaSl9O2Nhc2VcIlVJTlQ4QVJSQVlcIjp0cnl7bmV3IFVpbnQ4QXJyYXkoMCl9Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwiVUlOVDhBUlJBWSBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgZW52aXJvbm1lbnRcIil9cmV0dXJuIGZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gbih0LGUscixpKX07ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJmb3JtYXQgbXVzdCBiZSBIRVgsIFRFWFQsIEI2NCwgQllURVMsIEFSUkFZQlVGRkVSLCBvciBVSU5UOEFSUkFZXCIpfX1mdW5jdGlvbiByKG4sZSxyLGkpe3N3aXRjaChuKXtjYXNlXCJIRVhcIjpyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsbixlLHIpe2xldCBpLHMsbz1cIlwiO2NvbnN0IGg9bi84LHU9LTE9PT1lPzM6MDtmb3IoaT0wO2k8aDtpKz0xKXM9dFtpPj4+Ml0+Pj44Kih1K2UqKGklNCkpLG8rPVwiMDEyMzQ1Njc4OWFiY2RlZlwiLmNoYXJBdChzPj4+NCYxNSkrXCIwMTIzNDU2Nzg5YWJjZGVmXCIuY2hhckF0KDE1JnMpO3JldHVybiByLm91dHB1dFVwcGVyP28udG9VcHBlckNhc2UoKTpvfSh0LGUscixpKX07Y2FzZVwiQjY0XCI6cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBmdW5jdGlvbihuLGUscixpKXtsZXQgcyxvLGgsdSx3LGM9XCJcIjtjb25zdCBmPWUvOCxhPS0xPT09cj8zOjA7Zm9yKHM9MDtzPGY7cys9Mylmb3IodT1zKzE8Zj9uW3MrMT4+PjJdOjAsdz1zKzI8Zj9uW3MrMj4+PjJdOjAsaD0obltzPj4+Ml0+Pj44KihhK3IqKHMlNCkpJjI1NSk8PDE2fCh1Pj4+OCooYStyKigocysxKSU0KSkmMjU1KTw8OHx3Pj4+OCooYStyKigocysyKSU0KSkmMjU1LG89MDtvPDQ7bys9MSljKz04KnMrNipvPD1lP3QuY2hhckF0KGg+Pj42KigzLW8pJjYzKTppLmI2NFBhZDtyZXR1cm4gY30obixlLHIsaSl9O2Nhc2VcIkJZVEVTXCI6cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbih0LG4sZSl7bGV0IHIsaSxzPVwiXCI7Y29uc3Qgbz1uLzgsaD0tMT09PWU/MzowO2ZvcihyPTA7cjxvO3IrPTEpaT10W3I+Pj4yXT4+PjgqKGgrZSoociU0KSkmMjU1LHMrPVN0cmluZy5mcm9tQ2hhckNvZGUoaSk7cmV0dXJuIHN9KHQsZSxyKX07Y2FzZVwiQVJSQVlCVUZGRVJcIjp0cnl7bmV3IEFycmF5QnVmZmVyKDApfWNhdGNoKHQpe3Rocm93IG5ldyBFcnJvcihcIkFSUkFZQlVGRkVSIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBlbnZpcm9ubWVudFwiKX1yZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsbixlKXtsZXQgcjtjb25zdCBpPW4vOCxzPW5ldyBBcnJheUJ1ZmZlcihpKSxvPW5ldyBVaW50OEFycmF5KHMpLGg9LTE9PT1lPzM6MDtmb3Iocj0wO3I8aTtyKz0xKW9bcl09dFtyPj4+Ml0+Pj44KihoK2UqKHIlNCkpJjI1NTtyZXR1cm4gc30odCxlLHIpfTtjYXNlXCJVSU5UOEFSUkFZXCI6dHJ5e25ldyBVaW50OEFycmF5KDApfWNhdGNoKHQpe3Rocm93IG5ldyBFcnJvcihcIlVJTlQ4QVJSQVkgbm90IHN1cHBvcnRlZCBieSB0aGlzIGVudmlyb25tZW50XCIpfXJldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCxuLGUpe2xldCByO2NvbnN0IGk9bi84LHM9LTE9PT1lPzM6MCxvPW5ldyBVaW50OEFycmF5KGkpO2ZvcihyPTA7cjxpO3IrPTEpb1tyXT10W3I+Pj4yXT4+PjgqKHMrZSoociU0KSkmMjU1O3JldHVybiBvfSh0LGUscil9O2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiZm9ybWF0IG11c3QgYmUgSEVYLCBCNjQsIEJZVEVTLCBBUlJBWUJVRkZFUiwgb3IgVUlOVDhBUlJBWVwiKX19Y29uc3QgaT1bMTExNjM1MjQwOCwxODk5NDQ3NDQxLDMwNDkzMjM0NzEsMzkyMTAwOTU3Myw5NjE5ODcxNjMsMTUwODk3MDk5MywyNDUzNjM1NzQ4LDI4NzA3NjMyMjEsMzYyNDM4MTA4MCwzMTA1OTg0MDEsNjA3MjI1Mjc4LDE0MjY4ODE5ODcsMTkyNTA3ODM4OCwyMTYyMDc4MjA2LDI2MTQ4ODgxMDMsMzI0ODIyMjU4MCwzODM1MzkwNDAxLDQwMjIyMjQ3NzQsMjY0MzQ3MDc4LDYwNDgwNzYyOCw3NzAyNTU5ODMsMTI0OTE1MDEyMiwxNTU1MDgxNjkyLDE5OTYwNjQ5ODYsMjU1NDIyMDg4MiwyODIxODM0MzQ5LDI5NTI5OTY4MDgsMzIxMDMxMzY3MSwzMzM2NTcxODkxLDM1ODQ1Mjg3MTEsMTEzOTI2OTkzLDMzODI0MTg5NSw2NjYzMDcyMDUsNzczNTI5OTEyLDEyOTQ3NTczNzIsMTM5NjE4MjI5MSwxNjk1MTgzNzAwLDE5ODY2NjEwNTEsMjE3NzAyNjM1MCwyNDU2OTU2MDM3LDI3MzA0ODU5MjEsMjgyMDMwMjQxMSwzMjU5NzMwODAwLDMzNDU3NjQ3NzEsMzUxNjA2NTgxNywzNjAwMzUyODA0LDQwOTQ1NzE5MDksMjc1NDIzMzQ0LDQzMDIyNzczNCw1MDY5NDg2MTYsNjU5MDYwNTU2LDg4Mzk5Nzg3Nyw5NTgxMzk1NzEsMTMyMjgyMjIxOCwxNTM3MDAyMDYzLDE3NDc4NzM3NzksMTk1NTU2MjIyMiwyMDI0MTA0ODE1LDIyMjc3MzA0NTIsMjM2MTg1MjQyNCwyNDI4NDM2NDc0LDI3NTY3MzQxODcsMzIwNDAzMTQ3OSwzMzI5MzI1Mjk4XSxzPVszMjM4MzcxMDMyLDkxNDE1MDY2Myw4MTI3MDI5OTksNDE0NDkxMjY5Nyw0MjkwNzc1ODU3LDE3NTA2MDMwMjUsMTY5NDA3NjgzOSwzMjA0MDc1NDI4XSxvPVsxNzc5MDMzNzAzLDMxNDQxMzQyNzcsMTAxMzkwNDI0MiwyNzczNDgwNzYyLDEzNTk4OTMxMTksMjYwMDgyMjkyNCw1Mjg3MzQ2MzUsMTU0MTQ1OTIyNV0saD1cIkNob3NlbiBTSEEgdmFyaWFudCBpcyBub3Qgc3VwcG9ydGVkXCI7ZnVuY3Rpb24gdSh0LG4pe2xldCBlLHI7Y29uc3QgaT10LmJpbkxlbj4+PjMscz1uLmJpbkxlbj4+PjMsbz1pPDwzLGg9NC1pPDwzO2lmKGklNCE9MCl7Zm9yKGU9MDtlPHM7ZSs9NClyPWkrZT4+PjIsdC52YWx1ZVtyXXw9bi52YWx1ZVtlPj4+Ml08PG8sdC52YWx1ZS5wdXNoKDApLHQudmFsdWVbcisxXXw9bi52YWx1ZVtlPj4+Ml0+Pj5oO3JldHVybih0LnZhbHVlLmxlbmd0aDw8MiktND49cytpJiZ0LnZhbHVlLnBvcCgpLHt2YWx1ZTp0LnZhbHVlLGJpbkxlbjp0LmJpbkxlbituLmJpbkxlbn19cmV0dXJue3ZhbHVlOnQudmFsdWUuY29uY2F0KG4udmFsdWUpLGJpbkxlbjp0LmJpbkxlbituLmJpbkxlbn19ZnVuY3Rpb24gdyh0KXtjb25zdCBuPXtvdXRwdXRVcHBlcjohMSxiNjRQYWQ6XCI9XCIsb3V0cHV0TGVuOi0xfSxlPXR8fHt9LHI9XCJPdXRwdXQgbGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA4XCI7aWYobi5vdXRwdXRVcHBlcj1lLm91dHB1dFVwcGVyfHwhMSxlLmI2NFBhZCYmKG4uYjY0UGFkPWUuYjY0UGFkKSxlLm91dHB1dExlbil7aWYoZS5vdXRwdXRMZW4lOCE9MCl0aHJvdyBuZXcgRXJyb3Iocik7bi5vdXRwdXRMZW49ZS5vdXRwdXRMZW59ZWxzZSBpZihlLnNoYWtlTGVuKXtpZihlLnNoYWtlTGVuJTghPTApdGhyb3cgbmV3IEVycm9yKHIpO24ub3V0cHV0TGVuPWUuc2hha2VMZW59aWYoXCJib29sZWFuXCIhPXR5cGVvZiBuLm91dHB1dFVwcGVyKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgb3V0cHV0VXBwZXIgZm9ybWF0dGluZyBvcHRpb25cIik7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIG4uYjY0UGFkKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYjY0UGFkIGZvcm1hdHRpbmcgb3B0aW9uXCIpO3JldHVybiBufWZ1bmN0aW9uIGModCxuLHIsaSl7Y29uc3Qgcz10K1wiIG11c3QgaW5jbHVkZSBhIHZhbHVlIGFuZCBmb3JtYXRcIjtpZighbil7aWYoIWkpdGhyb3cgbmV3IEVycm9yKHMpO3JldHVybiBpfWlmKHZvaWQgMD09PW4udmFsdWV8fCFuLmZvcm1hdCl0aHJvdyBuZXcgRXJyb3Iocyk7cmV0dXJuIGUobi5mb3JtYXQsbi5lbmNvZGluZ3x8XCJVVEY4XCIscikobi52YWx1ZSl9Y2xhc3MgZntjb25zdHJ1Y3Rvcih0LG4sZSl7Y29uc3Qgcj1lfHx7fTtpZih0aGlzLnQ9bix0aGlzLmk9ci5lbmNvZGluZ3x8XCJVVEY4XCIsdGhpcy5udW1Sb3VuZHM9ci5udW1Sb3VuZHN8fDEsaXNOYU4odGhpcy5udW1Sb3VuZHMpfHx0aGlzLm51bVJvdW5kcyE9PXBhcnNlSW50KHRoaXMubnVtUm91bmRzLDEwKXx8MT50aGlzLm51bVJvdW5kcyl0aHJvdyBuZXcgRXJyb3IoXCJudW1Sb3VuZHMgbXVzdCBhIGludGVnZXIgPj0gMVwiKTt0aGlzLnM9dCx0aGlzLm89W10sdGhpcy5oPTAsdGhpcy51PSExLHRoaXMubD0wLHRoaXMuQT0hMSx0aGlzLkg9W10sdGhpcy5TPVtdfXVwZGF0ZSh0KXtsZXQgbixlPTA7Y29uc3Qgcj10aGlzLnA+Pj41LGk9dGhpcy5tKHQsdGhpcy5vLHRoaXMuaCkscz1pLmJpbkxlbixvPWkudmFsdWUsaD1zPj4+NTtmb3Iobj0wO248aDtuKz1yKWUrdGhpcy5wPD1zJiYodGhpcy5DPXRoaXMuUihvLnNsaWNlKG4sbityKSx0aGlzLkMpLGUrPXRoaXMucCk7dGhpcy5sKz1lLHRoaXMubz1vLnNsaWNlKGU+Pj41KSx0aGlzLmg9cyV0aGlzLnAsdGhpcy51PSEwfWdldEhhc2godCxuKXtsZXQgZSxpLHM9dGhpcy5VO2NvbnN0IG89dyhuKTtpZih0aGlzLnYpe2lmKC0xPT09by5vdXRwdXRMZW4pdGhyb3cgbmV3IEVycm9yKFwiT3V0cHV0IGxlbmd0aCBtdXN0IGJlIHNwZWNpZmllZCBpbiBvcHRpb25zXCIpO3M9by5vdXRwdXRMZW59Y29uc3QgaD1yKHQscyx0aGlzLkssbyk7aWYodGhpcy5BJiZ0aGlzLlQpcmV0dXJuIGgodGhpcy5UKG8pKTtmb3IoaT10aGlzLkYodGhpcy5vLnNsaWNlKCksdGhpcy5oLHRoaXMubCx0aGlzLmcodGhpcy5DKSxzKSxlPTE7ZTx0aGlzLm51bVJvdW5kcztlKz0xKXRoaXMudiYmcyUzMiE9MCYmKGlbaS5sZW5ndGgtMV0mPTE2Nzc3MjE1Pj4+MjQtcyUzMiksaT10aGlzLkYoaSxzLDAsdGhpcy5CKHRoaXMucykscyk7cmV0dXJuIGgoaSl9c2V0SE1BQ0tleSh0LG4scil7aWYoIXRoaXMuTCl0aHJvdyBuZXcgRXJyb3IoXCJWYXJpYW50IGRvZXMgbm90IHN1cHBvcnQgSE1BQ1wiKTtpZih0aGlzLnUpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBNQUMga2V5IGFmdGVyIGNhbGxpbmcgdXBkYXRlXCIpO2NvbnN0IGk9ZShuLChyfHx7fSkuZW5jb2Rpbmd8fFwiVVRGOFwiLHRoaXMuSyk7dGhpcy5NKGkodCkpfU0odCl7Y29uc3Qgbj10aGlzLnA+Pj4zLGU9bi80LTE7bGV0IHI7aWYoMSE9PXRoaXMubnVtUm91bmRzKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzZXQgbnVtUm91bmRzIHdpdGggTUFDXCIpO2lmKHRoaXMuQSl0aHJvdyBuZXcgRXJyb3IoXCJNQUMga2V5IGFscmVhZHkgc2V0XCIpO2ZvcihuPHQuYmluTGVuLzgmJih0LnZhbHVlPXRoaXMuRih0LnZhbHVlLHQuYmluTGVuLDAsdGhpcy5CKHRoaXMucyksdGhpcy5VKSk7dC52YWx1ZS5sZW5ndGg8PWU7KXQudmFsdWUucHVzaCgwKTtmb3Iocj0wO3I8PWU7cis9MSl0aGlzLkhbcl09OTA5NTIyNDg2XnQudmFsdWVbcl0sdGhpcy5TW3JdPTE1NDk1NTY4MjhedC52YWx1ZVtyXTt0aGlzLkM9dGhpcy5SKHRoaXMuSCx0aGlzLkMpLHRoaXMubD10aGlzLnAsdGhpcy5BPSEwfWdldEhNQUModCxuKXtjb25zdCBlPXcobik7cmV0dXJuIHIodCx0aGlzLlUsdGhpcy5LLGUpKHRoaXMuaygpKX1rKCl7bGV0IHQ7aWYoIXRoaXMuQSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY2FsbCBnZXRITUFDIHdpdGhvdXQgZmlyc3Qgc2V0dGluZyBNQUMga2V5XCIpO2NvbnN0IG49dGhpcy5GKHRoaXMuby5zbGljZSgpLHRoaXMuaCx0aGlzLmwsdGhpcy5nKHRoaXMuQyksdGhpcy5VKTtyZXR1cm4gdD10aGlzLlIodGhpcy5TLHRoaXMuQih0aGlzLnMpKSx0PXRoaXMuRihuLHRoaXMuVSx0aGlzLnAsdCx0aGlzLlUpLHR9fWZ1bmN0aW9uIGEodCxuKXtyZXR1cm4gdDw8bnx0Pj4+MzItbn1mdW5jdGlvbiBsKHQsbil7cmV0dXJuIHQ+Pj5ufHQ8PDMyLW59ZnVuY3Rpb24gQSh0LG4pe3JldHVybiB0Pj4+bn1mdW5jdGlvbiBFKHQsbixlKXtyZXR1cm4gdF5uXmV9ZnVuY3Rpb24gSCh0LG4sZSl7cmV0dXJuIHQmbl5+dCZlfWZ1bmN0aW9uIFModCxuLGUpe3JldHVybiB0Jm5edCZlXm4mZX1mdW5jdGlvbiBiKHQpe3JldHVybiBsKHQsMilebCh0LDEzKV5sKHQsMjIpfWZ1bmN0aW9uIHAodCxuKXtjb25zdCBlPSg2NTUzNSZ0KSsoNjU1MzUmbik7cmV0dXJuKDY1NTM1Jih0Pj4+MTYpKyhuPj4+MTYpKyhlPj4+MTYpKTw8MTZ8NjU1MzUmZX1mdW5jdGlvbiBkKHQsbixlLHIpe2NvbnN0IGk9KDY1NTM1JnQpKyg2NTUzNSZuKSsoNjU1MzUmZSkrKDY1NTM1JnIpO3JldHVybig2NTUzNSYodD4+PjE2KSsobj4+PjE2KSsoZT4+PjE2KSsocj4+PjE2KSsoaT4+PjE2KSk8PDE2fDY1NTM1Jml9ZnVuY3Rpb24gbSh0LG4sZSxyLGkpe2NvbnN0IHM9KDY1NTM1JnQpKyg2NTUzNSZuKSsoNjU1MzUmZSkrKDY1NTM1JnIpKyg2NTUzNSZpKTtyZXR1cm4oNjU1MzUmKHQ+Pj4xNikrKG4+Pj4xNikrKGU+Pj4xNikrKHI+Pj4xNikrKGk+Pj4xNikrKHM+Pj4xNikpPDwxNnw2NTUzNSZzfWZ1bmN0aW9uIEModCl7cmV0dXJuIGwodCw3KV5sKHQsMTgpXkEodCwzKX1mdW5jdGlvbiB5KHQpe3JldHVybiBsKHQsNilebCh0LDExKV5sKHQsMjUpfWZ1bmN0aW9uIFIodCl7cmV0dXJuWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXX1mdW5jdGlvbiBVKHQsbil7bGV0IGUscixpLHMsbyxoLHU7Y29uc3Qgdz1bXTtmb3IoZT1uWzBdLHI9blsxXSxpPW5bMl0scz1uWzNdLG89bls0XSx1PTA7dTw4MDt1Kz0xKXdbdV09dTwxNj90W3VdOmEod1t1LTNdXndbdS04XV53W3UtMTRdXndbdS0xNl0sMSksaD11PDIwP20oYShlLDUpLEgocixpLHMpLG8sMTUxODUwMDI0OSx3W3VdKTp1PDQwP20oYShlLDUpLEUocixpLHMpLG8sMTg1OTc3NTM5Myx3W3VdKTp1PDYwP20oYShlLDUpLFMocixpLHMpLG8sMjQwMDk1OTcwOCx3W3VdKTptKGEoZSw1KSxFKHIsaSxzKSxvLDMzOTU0Njk3ODIsd1t1XSksbz1zLHM9aSxpPWEociwzMCkscj1lLGU9aDtyZXR1cm4gblswXT1wKGUsblswXSksblsxXT1wKHIsblsxXSksblsyXT1wKGksblsyXSksblszXT1wKHMsblszXSksbls0XT1wKG8sbls0XSksbn1mdW5jdGlvbiB2KHQsbixlLHIpe2xldCBpO2NvbnN0IHM9MTUrKG4rNjU+Pj45PDw0KSxvPW4rZTtmb3IoO3QubGVuZ3RoPD1zOyl0LnB1c2goMCk7Zm9yKHRbbj4+PjVdfD0xMjg8PDI0LW4lMzIsdFtzXT00Mjk0OTY3Mjk1Jm8sdFtzLTFdPW8vNDI5NDk2NzI5NnwwLGk9MDtpPHQubGVuZ3RoO2krPTE2KXI9VSh0LnNsaWNlKGksaSsxNikscik7cmV0dXJuIHJ9Y2xhc3MgSyBleHRlbmRzIGZ7Y29uc3RydWN0b3IodCxuLHIpe2lmKFwiU0hBLTFcIiE9PXQpdGhyb3cgbmV3IEVycm9yKGgpO3N1cGVyKHQsbixyKTtjb25zdCBpPXJ8fHt9O3RoaXMuTD0hMCx0aGlzLlQ9dGhpcy5rLHRoaXMuSz0tMSx0aGlzLm09ZSh0aGlzLnQsdGhpcy5pLHRoaXMuSyksdGhpcy5SPVUsdGhpcy5nPWZ1bmN0aW9uKHQpe3JldHVybiB0LnNsaWNlKCl9LHRoaXMuQj1SLHRoaXMuRj12LHRoaXMuQz1bMTczMjU4NDE5Myw0MDIzMjMzNDE3LDI1NjIzODMxMDIsMjcxNzMzODc4LDMyODUzNzc1MjBdLHRoaXMucD01MTIsdGhpcy5VPTE2MCx0aGlzLnY9ITEsaS5obWFjS2V5JiZ0aGlzLk0oYyhcImhtYWNLZXlcIixpLmhtYWNLZXksdGhpcy5LKSl9fWZ1bmN0aW9uIFQodCl7bGV0IG47cmV0dXJuIG49XCJTSEEtMjI0XCI9PXQ/cy5zbGljZSgpOm8uc2xpY2UoKSxufWZ1bmN0aW9uIEYodCxuKXtsZXQgZSxyLHMsbyxoLHUsdyxjLGYsYSxFO2NvbnN0IFI9W107Zm9yKGU9blswXSxyPW5bMV0scz1uWzJdLG89blszXSxoPW5bNF0sdT1uWzVdLHc9bls2XSxjPW5bN10sRT0wO0U8NjQ7RSs9MSlSW0VdPUU8MTY/dFtFXTpkKGwoVT1SW0UtMl0sMTcpXmwoVSwxOSleQShVLDEwKSxSW0UtN10sQyhSW0UtMTVdKSxSW0UtMTZdKSxmPW0oYyx5KGgpLEgoaCx1LHcpLGlbRV0sUltFXSksYT1wKGIoZSksUyhlLHIscykpLGM9dyx3PXUsdT1oLGg9cChvLGYpLG89cyxzPXIscj1lLGU9cChmLGEpO3ZhciBVO3JldHVybiBuWzBdPXAoZSxuWzBdKSxuWzFdPXAocixuWzFdKSxuWzJdPXAocyxuWzJdKSxuWzNdPXAobyxuWzNdKSxuWzRdPXAoaCxuWzRdKSxuWzVdPXAodSxuWzVdKSxuWzZdPXAodyxuWzZdKSxuWzddPXAoYyxuWzddKSxufWNsYXNzIGcgZXh0ZW5kcyBme2NvbnN0cnVjdG9yKHQsbixyKXtpZihcIlNIQS0yMjRcIiE9PXQmJlwiU0hBLTI1NlwiIT09dCl0aHJvdyBuZXcgRXJyb3IoaCk7c3VwZXIodCxuLHIpO2NvbnN0IGk9cnx8e307dGhpcy5UPXRoaXMuayx0aGlzLkw9ITAsdGhpcy5LPS0xLHRoaXMubT1lKHRoaXMudCx0aGlzLmksdGhpcy5LKSx0aGlzLlI9Rix0aGlzLmc9ZnVuY3Rpb24odCl7cmV0dXJuIHQuc2xpY2UoKX0sdGhpcy5CPVQsdGhpcy5GPWZ1bmN0aW9uKG4sZSxyLGkpe3JldHVybiBmdW5jdGlvbih0LG4sZSxyLGkpe2xldCBzLG87Y29uc3QgaD0xNSsobis2NT4+Pjk8PDQpLHU9bitlO2Zvcig7dC5sZW5ndGg8PWg7KXQucHVzaCgwKTtmb3IodFtuPj4+NV18PTEyODw8MjQtbiUzMix0W2hdPTQyOTQ5NjcyOTUmdSx0W2gtMV09dS80Mjk0OTY3Mjk2fDAscz0wO3M8dC5sZW5ndGg7cys9MTYpcj1GKHQuc2xpY2UocyxzKzE2KSxyKTtyZXR1cm4gbz1cIlNIQS0yMjRcIj09PWk/W3JbMF0sclsxXSxyWzJdLHJbM10scls0XSxyWzVdLHJbNl1dOnIsb30obixlLHIsaSx0KX0sdGhpcy5DPVQodCksdGhpcy5wPTUxMix0aGlzLlU9XCJTSEEtMjI0XCI9PT10PzIyNDoyNTYsdGhpcy52PSExLGkuaG1hY0tleSYmdGhpcy5NKGMoXCJobWFjS2V5XCIsaS5obWFjS2V5LHRoaXMuSykpfX1jbGFzcyBCe2NvbnN0cnVjdG9yKHQsbil7dGhpcy5ZPXQsdGhpcy5OPW59fWZ1bmN0aW9uIEwodCxuKXtsZXQgZTtyZXR1cm4gbj4zMj8oZT02NC1uLG5ldyBCKHQuTjw8bnx0Llk+Pj5lLHQuWTw8bnx0Lk4+Pj5lKSk6MCE9PW4/KGU9MzItbixuZXcgQih0Llk8PG58dC5OPj4+ZSx0Lk48PG58dC5ZPj4+ZSkpOnR9ZnVuY3Rpb24gTSh0LG4pe2xldCBlO3JldHVybiBuPDMyPyhlPTMyLW4sbmV3IEIodC5ZPj4+bnx0Lk48PGUsdC5OPj4+bnx0Llk8PGUpKTooZT02NC1uLG5ldyBCKHQuTj4+Pm58dC5ZPDxlLHQuWT4+Pm58dC5OPDxlKSl9ZnVuY3Rpb24gayh0LG4pe3JldHVybiBuZXcgQih0Llk+Pj5uLHQuTj4+Pm58dC5ZPDwzMi1uKX1mdW5jdGlvbiBZKHQsbixlKXtyZXR1cm4gbmV3IEIodC5ZJm4uWV50LlkmZS5ZXm4uWSZlLlksdC5OJm4uTl50Lk4mZS5OXm4uTiZlLk4pfWZ1bmN0aW9uIE4odCl7Y29uc3Qgbj1NKHQsMjgpLGU9TSh0LDM0KSxyPU0odCwzOSk7cmV0dXJuIG5ldyBCKG4uWV5lLlleci5ZLG4uTl5lLk5eci5OKX1mdW5jdGlvbiBJKHQsbil7bGV0IGUscjtlPSg2NTUzNSZ0Lk4pKyg2NTUzNSZuLk4pLHI9KHQuTj4+PjE2KSsobi5OPj4+MTYpKyhlPj4+MTYpO2NvbnN0IGk9KDY1NTM1JnIpPDwxNnw2NTUzNSZlO2U9KDY1NTM1JnQuWSkrKDY1NTM1Jm4uWSkrKHI+Pj4xNikscj0odC5ZPj4+MTYpKyhuLlk+Pj4xNikrKGU+Pj4xNik7cmV0dXJuIG5ldyBCKCg2NTUzNSZyKTw8MTZ8NjU1MzUmZSxpKX1mdW5jdGlvbiBYKHQsbixlLHIpe2xldCBpLHM7aT0oNjU1MzUmdC5OKSsoNjU1MzUmbi5OKSsoNjU1MzUmZS5OKSsoNjU1MzUmci5OKSxzPSh0Lk4+Pj4xNikrKG4uTj4+PjE2KSsoZS5OPj4+MTYpKyhyLk4+Pj4xNikrKGk+Pj4xNik7Y29uc3Qgbz0oNjU1MzUmcyk8PDE2fDY1NTM1Jmk7aT0oNjU1MzUmdC5ZKSsoNjU1MzUmbi5ZKSsoNjU1MzUmZS5ZKSsoNjU1MzUmci5ZKSsocz4+PjE2KSxzPSh0Llk+Pj4xNikrKG4uWT4+PjE2KSsoZS5ZPj4+MTYpKyhyLlk+Pj4xNikrKGk+Pj4xNik7cmV0dXJuIG5ldyBCKCg2NTUzNSZzKTw8MTZ8NjU1MzUmaSxvKX1mdW5jdGlvbiB6KHQsbixlLHIsaSl7bGV0IHMsbztzPSg2NTUzNSZ0Lk4pKyg2NTUzNSZuLk4pKyg2NTUzNSZlLk4pKyg2NTUzNSZyLk4pKyg2NTUzNSZpLk4pLG89KHQuTj4+PjE2KSsobi5OPj4+MTYpKyhlLk4+Pj4xNikrKHIuTj4+PjE2KSsoaS5OPj4+MTYpKyhzPj4+MTYpO2NvbnN0IGg9KDY1NTM1Jm8pPDwxNnw2NTUzNSZzO3M9KDY1NTM1JnQuWSkrKDY1NTM1Jm4uWSkrKDY1NTM1JmUuWSkrKDY1NTM1JnIuWSkrKDY1NTM1JmkuWSkrKG8+Pj4xNiksbz0odC5ZPj4+MTYpKyhuLlk+Pj4xNikrKGUuWT4+PjE2KSsoci5ZPj4+MTYpKyhpLlk+Pj4xNikrKHM+Pj4xNik7cmV0dXJuIG5ldyBCKCg2NTUzNSZvKTw8MTZ8NjU1MzUmcyxoKX1mdW5jdGlvbiB4KHQsbil7cmV0dXJuIG5ldyBCKHQuWV5uLlksdC5OXm4uTil9ZnVuY3Rpb24gXyh0KXtjb25zdCBuPU0odCwxOSksZT1NKHQsNjEpLHI9ayh0LDYpO3JldHVybiBuZXcgQihuLlleZS5ZXnIuWSxuLk5eZS5OXnIuTil9ZnVuY3Rpb24gTyh0KXtjb25zdCBuPU0odCwxKSxlPU0odCw4KSxyPWsodCw3KTtyZXR1cm4gbmV3IEIobi5ZXmUuWV5yLlksbi5OXmUuTl5yLk4pfWZ1bmN0aW9uIFAodCl7Y29uc3Qgbj1NKHQsMTQpLGU9TSh0LDE4KSxyPU0odCw0MSk7cmV0dXJuIG5ldyBCKG4uWV5lLlleci5ZLG4uTl5lLk5eci5OKX1jb25zdCBWPVtuZXcgQihpWzBdLDM2MDk3Njc0NTgpLG5ldyBCKGlbMV0sNjAyODkxNzI1KSxuZXcgQihpWzJdLDM5NjQ0ODQzOTkpLG5ldyBCKGlbM10sMjE3MzI5NTU0OCksbmV3IEIoaVs0XSw0MDgxNjI4NDcyKSxuZXcgQihpWzVdLDMwNTM4MzQyNjUpLG5ldyBCKGlbNl0sMjkzNzY3MTU3OSksbmV3IEIoaVs3XSwzNjY0NjA5NTYwKSxuZXcgQihpWzhdLDI3MzQ4ODMzOTQpLG5ldyBCKGlbOV0sMTE2NDk5NjU0MiksbmV3IEIoaVsxMF0sMTMyMzYxMDc2NCksbmV3IEIoaVsxMV0sMzU5MDMwNDk5NCksbmV3IEIoaVsxMl0sNDA2ODE4MjM4MyksbmV3IEIoaVsxM10sOTkxMzM2MTEzKSxuZXcgQihpWzE0XSw2MzM4MDMzMTcpLG5ldyBCKGlbMTVdLDM0Nzk3NzQ4NjgpLG5ldyBCKGlbMTZdLDI2NjY2MTM0NTgpLG5ldyBCKGlbMTddLDk0NDcxMTEzOSksbmV3IEIoaVsxOF0sMjM0MTI2Mjc3MyksbmV3IEIoaVsxOV0sMjAwNzgwMDkzMyksbmV3IEIoaVsyMF0sMTQ5NTk5MDkwMSksbmV3IEIoaVsyMV0sMTg1NjQzMTIzNSksbmV3IEIoaVsyMl0sMzE3NTIxODEzMiksbmV3IEIoaVsyM10sMjE5ODk1MDgzNyksbmV3IEIoaVsyNF0sMzk5OTcxOTMzOSksbmV3IEIoaVsyNV0sNzY2Nzg0MDE2KSxuZXcgQihpWzI2XSwyNTY2NTk0ODc5KSxuZXcgQihpWzI3XSwzMjAzMzM3OTU2KSxuZXcgQihpWzI4XSwxMDM0NDU3MDI2KSxuZXcgQihpWzI5XSwyNDY2OTQ4OTAxKSxuZXcgQihpWzMwXSwzNzU4MzI2MzgzKSxuZXcgQihpWzMxXSwxNjg3MTc5MzYpLG5ldyBCKGlbMzJdLDExODgxNzk5NjQpLG5ldyBCKGlbMzNdLDE1NDYwNDU3MzQpLG5ldyBCKGlbMzRdLDE1MjI4MDU0ODUpLG5ldyBCKGlbMzVdLDI2NDM4MzM4MjMpLG5ldyBCKGlbMzZdLDIzNDM1MjczOTApLG5ldyBCKGlbMzddLDEwMTQ0Nzc0ODApLG5ldyBCKGlbMzhdLDEyMDY3NTkxNDIpLG5ldyBCKGlbMzldLDM0NDA3NzYyNyksbmV3IEIoaVs0MF0sMTI5MDg2MzQ2MCksbmV3IEIoaVs0MV0sMzE1ODQ1NDI3MyksbmV3IEIoaVs0Ml0sMzUwNTk1MjY1NyksbmV3IEIoaVs0M10sMTA2MjE3MDA4KSxuZXcgQihpWzQ0XSwzNjA2MDA4MzQ0KSxuZXcgQihpWzQ1XSwxNDMyNzI1Nzc2KSxuZXcgQihpWzQ2XSwxNDY3MDMxNTk0KSxuZXcgQihpWzQ3XSw4NTExNjk3MjApLG5ldyBCKGlbNDhdLDMxMDA4MjM3NTIpLG5ldyBCKGlbNDldLDEzNjMyNTgxOTUpLG5ldyBCKGlbNTBdLDM3NTA2ODU1OTMpLG5ldyBCKGlbNTFdLDM3ODUwNTAyODApLG5ldyBCKGlbNTJdLDMzMTgzMDc0MjcpLG5ldyBCKGlbNTNdLDM4MTI3MjM0MDMpLG5ldyBCKGlbNTRdLDIwMDMwMzQ5OTUpLG5ldyBCKGlbNTVdLDM2MDIwMzY4OTkpLG5ldyBCKGlbNTZdLDE1NzU5OTAwMTIpLG5ldyBCKGlbNTddLDExMjU1OTI5MjgpLG5ldyBCKGlbNThdLDI3MTY5MDQzMDYpLG5ldyBCKGlbNTldLDQ0Mjc3NjA0NCksbmV3IEIoaVs2MF0sNTkzNjk4MzQ0KSxuZXcgQihpWzYxXSwzNzMzMTEwMjQ5KSxuZXcgQihpWzYyXSwyOTk5MzUxNTczKSxuZXcgQihpWzYzXSwzODE1OTIwNDI3KSxuZXcgQigzMzkxNTY5NjE0LDM5MjgzODM5MDApLG5ldyBCKDM1MTUyNjcyNzEsNTY2MjgwNzExKSxuZXcgQigzOTQwMTg3NjA2LDM0NTQwNjk1MzQpLG5ldyBCKDQxMTg2MzAyNzEsNDAwMDIzOTk5MiksbmV3IEIoMTE2NDE4NDc0LDE5MTQxMzg1NTQpLG5ldyBCKDE3NDI5MjQyMSwyNzMxMDU1MjcwKSxuZXcgQigyODkzODAzNTYsMzIwMzk5MzAwNiksbmV3IEIoNDYwMzkzMjY5LDMyMDYyMDMxNSksbmV3IEIoNjg1NDcxNzMzLDU4NzQ5NjgzNiksbmV3IEIoODUyMTQyOTcxLDEwODY3OTI4NTEpLG5ldyBCKDEwMTcwMzYyOTgsMzY1NTQzMTAwKSxuZXcgQigxMTI2MDAwNTgwLDI2MTgyOTc2NzYpLG5ldyBCKDEyODgwMzM0NzAsMzQwOTg1NTE1OCksbmV3IEIoMTUwMTUwNTk0OCw0MjM0NTA5ODY2KSxuZXcgQigxNjA3MTY3OTE1LDk4NzE2NzQ2OCksbmV3IEIoMTgxNjQwMjMxNiwxMjQ2MTg5NTkxKV07ZnVuY3Rpb24gWih0KXtyZXR1cm5cIlNIQS0zODRcIj09PXQ/W25ldyBCKDM0MTgwNzAzNjUsc1swXSksbmV3IEIoMTY1NDI3MDI1MCxzWzFdKSxuZXcgQigyNDM4NTI5MzcwLHNbMl0pLG5ldyBCKDM1NTQ2MjM2MCxzWzNdKSxuZXcgQigxNzMxNDA1NDE1LHNbNF0pLG5ldyBCKDQxMDQ4ODg1ODk1LHNbNV0pLG5ldyBCKDM2NzUwMDg1MjUsc1s2XSksbmV3IEIoMTIwMzA2MjgxMyxzWzddKV06W25ldyBCKG9bMF0sNDA4OTIzNTcyMCksbmV3IEIob1sxXSwyMjI3ODczNTk1KSxuZXcgQihvWzJdLDQyNzExNzU3MjMpLG5ldyBCKG9bM10sMTU5NTc1MDEyOSksbmV3IEIob1s0XSwyOTE3NTY1MTM3KSxuZXcgQihvWzVdLDcyNTUxMTE5OSksbmV3IEIob1s2XSw0MjE1Mzg5NTQ3KSxuZXcgQihvWzddLDMyNzAzMzIwOSldfWZ1bmN0aW9uIGoodCxuKXtsZXQgZSxyLGkscyxvLGgsdSx3LGMsZixhLGw7Y29uc3QgQT1bXTtmb3IoZT1uWzBdLHI9blsxXSxpPW5bMl0scz1uWzNdLG89bls0XSxoPW5bNV0sdT1uWzZdLHc9bls3XSxhPTA7YTw4MDthKz0xKWE8MTY/KGw9MiphLEFbYV09bmV3IEIodFtsXSx0W2wrMV0pKTpBW2FdPVgoXyhBW2EtMl0pLEFbYS03XSxPKEFbYS0xNV0pLEFbYS0xNl0pLGM9eih3LFAobyksKEg9aCxTPXUsbmV3IEIoKEU9bykuWSZILllefkUuWSZTLlksRS5OJkguTl5+RS5OJlMuTikpLFZbYV0sQVthXSksZj1JKE4oZSksWShlLHIsaSkpLHc9dSx1PWgsaD1vLG89SShzLGMpLHM9aSxpPXIscj1lLGU9SShjLGYpO3ZhciBFLEgsUztyZXR1cm4gblswXT1JKGUsblswXSksblsxXT1JKHIsblsxXSksblsyXT1JKGksblsyXSksblszXT1JKHMsblszXSksbls0XT1JKG8sbls0XSksbls1XT1JKGgsbls1XSksbls2XT1JKHUsbls2XSksbls3XT1JKHcsbls3XSksbn1jbGFzcyBxIGV4dGVuZHMgZntjb25zdHJ1Y3Rvcih0LG4scil7aWYoXCJTSEEtMzg0XCIhPT10JiZcIlNIQS01MTJcIiE9PXQpdGhyb3cgbmV3IEVycm9yKGgpO3N1cGVyKHQsbixyKTtjb25zdCBpPXJ8fHt9O3RoaXMuVD10aGlzLmssdGhpcy5MPSEwLHRoaXMuSz0tMSx0aGlzLm09ZSh0aGlzLnQsdGhpcy5pLHRoaXMuSyksdGhpcy5SPWosdGhpcy5nPWZ1bmN0aW9uKHQpe3JldHVybiB0LnNsaWNlKCl9LHRoaXMuQj1aLHRoaXMuRj1mdW5jdGlvbihuLGUscixpKXtyZXR1cm4gZnVuY3Rpb24odCxuLGUscixpKXtsZXQgcyxvO2NvbnN0IGg9MzErKG4rMTI5Pj4+MTA8PDUpLHU9bitlO2Zvcig7dC5sZW5ndGg8PWg7KXQucHVzaCgwKTtmb3IodFtuPj4+NV18PTEyODw8MjQtbiUzMix0W2hdPTQyOTQ5NjcyOTUmdSx0W2gtMV09dS80Mjk0OTY3Mjk2fDAscz0wO3M8dC5sZW5ndGg7cys9MzIpcj1qKHQuc2xpY2UocyxzKzMyKSxyKTtyZXR1cm4gbz1cIlNIQS0zODRcIj09PWk/WyhyPXIpWzBdLlksclswXS5OLHJbMV0uWSxyWzFdLk4sclsyXS5ZLHJbMl0uTixyWzNdLlksclszXS5OLHJbNF0uWSxyWzRdLk4scls1XS5ZLHJbNV0uTl06W3JbMF0uWSxyWzBdLk4sclsxXS5ZLHJbMV0uTixyWzJdLlksclsyXS5OLHJbM10uWSxyWzNdLk4scls0XS5ZLHJbNF0uTixyWzVdLlkscls1XS5OLHJbNl0uWSxyWzZdLk4scls3XS5ZLHJbN10uTl0sb30obixlLHIsaSx0KX0sdGhpcy5DPVoodCksdGhpcy5wPTEwMjQsdGhpcy5VPVwiU0hBLTM4NFwiPT09dD8zODQ6NTEyLHRoaXMudj0hMSxpLmhtYWNLZXkmJnRoaXMuTShjKFwiaG1hY0tleVwiLGkuaG1hY0tleSx0aGlzLkspKX19Y29uc3QgRD1bbmV3IEIoMCwxKSxuZXcgQigwLDMyODk4KSxuZXcgQigyMTQ3NDgzNjQ4LDMyOTA2KSxuZXcgQigyMTQ3NDgzNjQ4LDIxNDc1MTY0MTYpLG5ldyBCKDAsMzI5MDcpLG5ldyBCKDAsMjE0NzQ4MzY0OSksbmV3IEIoMjE0NzQ4MzY0OCwyMTQ3NTE2NTQ1KSxuZXcgQigyMTQ3NDgzNjQ4LDMyNzc3KSxuZXcgQigwLDEzOCksbmV3IEIoMCwxMzYpLG5ldyBCKDAsMjE0NzUxNjQyNSksbmV3IEIoMCwyMTQ3NDgzNjU4KSxuZXcgQigwLDIxNDc1MTY1NTUpLG5ldyBCKDIxNDc0ODM2NDgsMTM5KSxuZXcgQigyMTQ3NDgzNjQ4LDMyOTA1KSxuZXcgQigyMTQ3NDgzNjQ4LDMyNzcxKSxuZXcgQigyMTQ3NDgzNjQ4LDMyNzcwKSxuZXcgQigyMTQ3NDgzNjQ4LDEyOCksbmV3IEIoMCwzMjc3OCksbmV3IEIoMjE0NzQ4MzY0OCwyMTQ3NDgzNjU4KSxuZXcgQigyMTQ3NDgzNjQ4LDIxNDc1MTY1NDUpLG5ldyBCKDIxNDc0ODM2NDgsMzI4OTYpLG5ldyBCKDAsMjE0NzQ4MzY0OSksbmV3IEIoMjE0NzQ4MzY0OCwyMTQ3NTE2NDI0KV0sRz1bWzAsMzYsMyw0MSwxOF0sWzEsNDQsMTAsNDUsMl0sWzYyLDYsNDMsMTUsNjFdLFsyOCw1NSwyNSwyMSw1Nl0sWzI3LDIwLDM5LDgsMTRdXTtmdW5jdGlvbiBKKHQpe2xldCBuO2NvbnN0IGU9W107Zm9yKG49MDtuPDU7bis9MSllW25dPVtuZXcgQigwLDApLG5ldyBCKDAsMCksbmV3IEIoMCwwKSxuZXcgQigwLDApLG5ldyBCKDAsMCldO3JldHVybiBlfWZ1bmN0aW9uIFEodCl7bGV0IG47Y29uc3QgZT1bXTtmb3Iobj0wO248NTtuKz0xKWVbbl09dFtuXS5zbGljZSgpO3JldHVybiBlfWZ1bmN0aW9uIFcodCxuKXtsZXQgZSxyLGkscztjb25zdCBvPVtdLGg9W107aWYobnVsbCE9PXQpZm9yKHI9MDtyPHQubGVuZ3RoO3IrPTIpblsocj4+PjEpJTVdWyhyPj4+MSkvNXwwXT14KG5bKHI+Pj4xKSU1XVsocj4+PjEpLzV8MF0sbmV3IEIodFtyKzFdLHRbcl0pKTtmb3IoZT0wO2U8MjQ7ZSs9MSl7Zm9yKHM9SigpLHI9MDtyPDU7cis9MSlvW3JdPSh1PW5bcl1bMF0sdz1uW3JdWzFdLGM9bltyXVsyXSxmPW5bcl1bM10sYT1uW3JdWzRdLG5ldyBCKHUuWV53LlleYy5ZXmYuWV5hLlksdS5OXncuTl5jLk5eZi5OXmEuTikpO2ZvcihyPTA7cjw1O3IrPTEpaFtyXT14KG9bKHIrNCklNV0sTChvWyhyKzEpJTVdLDEpKTtmb3Iocj0wO3I8NTtyKz0xKWZvcihpPTA7aTw1O2krPTEpbltyXVtpXT14KG5bcl1baV0saFtyXSk7Zm9yKHI9MDtyPDU7cis9MSlmb3IoaT0wO2k8NTtpKz0xKXNbaV1bKDIqciszKmkpJTVdPUwobltyXVtpXSxHW3JdW2ldKTtmb3Iocj0wO3I8NTtyKz0xKWZvcihpPTA7aTw1O2krPTEpbltyXVtpXT14KHNbcl1baV0sbmV3IEIofnNbKHIrMSklNV1baV0uWSZzWyhyKzIpJTVdW2ldLlksfnNbKHIrMSklNV1baV0uTiZzWyhyKzIpJTVdW2ldLk4pKTtuWzBdWzBdPXgoblswXVswXSxEW2VdKX12YXIgdSx3LGMsZixhO3JldHVybiBufWZ1bmN0aW9uICQodCl7bGV0IG4sZSxyPTA7Y29uc3QgaT1bMCwwXSxzPVs0Mjk0OTY3Mjk1JnQsdC80Mjk0OTY3Mjk2JjIwOTcxNTFdO2ZvcihuPTY7bj49MDtuLS0pZT1zW24+PjJdPj4+OCpuJjI1NSwwPT09ZSYmMD09PXJ8fChpW3IrMT4+Ml18PWU8PDgqKHIrMSkscis9MSk7cmV0dXJuIHI9MCE9PXI/cjoxLGlbMF18PXIse3ZhbHVlOnIrMT40P2k6W2lbMF1dLGJpbkxlbjo4Kzgqcn19ZnVuY3Rpb24gdHQodCl7cmV0dXJuIHUoJCh0LmJpbkxlbiksdCl9ZnVuY3Rpb24gbnQodCxuKXtsZXQgZSxyPSQobik7cj11KHIsdCk7Y29uc3QgaT1uPj4+MixzPShpLXIudmFsdWUubGVuZ3RoJWkpJWk7Zm9yKGU9MDtlPHM7ZSsrKXIudmFsdWUucHVzaCgwKTtyZXR1cm4gci52YWx1ZX1jbGFzcyBldCBleHRlbmRzIGZ7Y29uc3RydWN0b3IodCxuLHIpe2xldCBpPTYscz0wO3N1cGVyKHQsbixyKTtjb25zdCBvPXJ8fHt9O2lmKDEhPT10aGlzLm51bVJvdW5kcyl7aWYoby5rbWFjS2V5fHxvLmhtYWNLZXkpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBudW1Sb3VuZHMgd2l0aCBNQUNcIik7aWYoXCJDU0hBS0UxMjhcIj09PXRoaXMuc3x8XCJDU0hBS0UyNTZcIj09PXRoaXMucyl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2V0IG51bVJvdW5kcyBmb3IgQ1NIQUtFIHZhcmlhbnRzXCIpfXN3aXRjaCh0aGlzLks9MSx0aGlzLm09ZSh0aGlzLnQsdGhpcy5pLHRoaXMuSyksdGhpcy5SPVcsdGhpcy5nPVEsdGhpcy5CPUosdGhpcy5DPUooKSx0aGlzLnY9ITEsdCl7Y2FzZVwiU0hBMy0yMjRcIjp0aGlzLnA9cz0xMTUyLHRoaXMuVT0yMjQsdGhpcy5MPSEwLHRoaXMuVD10aGlzLms7YnJlYWs7Y2FzZVwiU0hBMy0yNTZcIjp0aGlzLnA9cz0xMDg4LHRoaXMuVT0yNTYsdGhpcy5MPSEwLHRoaXMuVD10aGlzLms7YnJlYWs7Y2FzZVwiU0hBMy0zODRcIjp0aGlzLnA9cz04MzIsdGhpcy5VPTM4NCx0aGlzLkw9ITAsdGhpcy5UPXRoaXMuazticmVhaztjYXNlXCJTSEEzLTUxMlwiOnRoaXMucD1zPTU3Nix0aGlzLlU9NTEyLHRoaXMuTD0hMCx0aGlzLlQ9dGhpcy5rO2JyZWFrO2Nhc2VcIlNIQUtFMTI4XCI6aT0zMSx0aGlzLnA9cz0xMzQ0LHRoaXMuVT0tMSx0aGlzLnY9ITAsdGhpcy5MPSExLHRoaXMuVD1udWxsO2JyZWFrO2Nhc2VcIlNIQUtFMjU2XCI6aT0zMSx0aGlzLnA9cz0xMDg4LHRoaXMuVT0tMSx0aGlzLnY9ITAsdGhpcy5MPSExLHRoaXMuVD1udWxsO2JyZWFrO2Nhc2VcIktNQUMxMjhcIjppPTQsdGhpcy5wPXM9MTM0NCx0aGlzLkkociksdGhpcy5VPS0xLHRoaXMudj0hMCx0aGlzLkw9ITEsdGhpcy5UPXRoaXMuWDticmVhaztjYXNlXCJLTUFDMjU2XCI6aT00LHRoaXMucD1zPTEwODgsdGhpcy5JKHIpLHRoaXMuVT0tMSx0aGlzLnY9ITAsdGhpcy5MPSExLHRoaXMuVD10aGlzLlg7YnJlYWs7Y2FzZVwiQ1NIQUtFMTI4XCI6dGhpcy5wPXM9MTM0NCxpPXRoaXMuXyhyKSx0aGlzLlU9LTEsdGhpcy52PSEwLHRoaXMuTD0hMSx0aGlzLlQ9bnVsbDticmVhaztjYXNlXCJDU0hBS0UyNTZcIjp0aGlzLnA9cz0xMDg4LGk9dGhpcy5fKHIpLHRoaXMuVT0tMSx0aGlzLnY9ITAsdGhpcy5MPSExLHRoaXMuVD1udWxsO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKGgpfXRoaXMuRj1mdW5jdGlvbih0LG4sZSxyLG8pe3JldHVybiBmdW5jdGlvbih0LG4sZSxyLGkscyxvKXtsZXQgaCx1LHc9MDtjb25zdCBjPVtdLGY9aT4+PjUsYT1uPj4+NTtmb3IoaD0wO2g8YSYmbj49aTtoKz1mKXI9Vyh0LnNsaWNlKGgsaCtmKSxyKSxuLT1pO2Zvcih0PXQuc2xpY2UoaCksbiU9aTt0Lmxlbmd0aDxmOyl0LnB1c2goMCk7Zm9yKGg9bj4+PjMsdFtoPj4yXV49czw8aCU0KjgsdFtmLTFdXj0yMTQ3NDgzNjQ4LHI9Vyh0LHIpOzMyKmMubGVuZ3RoPG8mJih1PXJbdyU1XVt3LzV8MF0sYy5wdXNoKHUuTiksISgzMipjLmxlbmd0aD49bykpOyljLnB1c2godS5ZKSx3Kz0xLDA9PTY0KnclaSYmKFcobnVsbCxyKSx3PTApO3JldHVybiBjfSh0LG4sMCxyLHMsaSxvKX0sby5obWFjS2V5JiZ0aGlzLk0oYyhcImhtYWNLZXlcIixvLmhtYWNLZXksdGhpcy5LKSl9Xyh0LG4pe2NvbnN0IGU9ZnVuY3Rpb24odCl7Y29uc3Qgbj10fHx7fTtyZXR1cm57ZnVuY05hbWU6YyhcImZ1bmNOYW1lXCIsbi5mdW5jTmFtZSwxLHt2YWx1ZTpbXSxiaW5MZW46MH0pLGN1c3RvbWl6YXRpb246YyhcIkN1c3RvbWl6YXRpb25cIixuLmN1c3RvbWl6YXRpb24sMSx7dmFsdWU6W10sYmluTGVuOjB9KX19KHR8fHt9KTtuJiYoZS5mdW5jTmFtZT1uKTtjb25zdCByPXUodHQoZS5mdW5jTmFtZSksdHQoZS5jdXN0b21pemF0aW9uKSk7aWYoMCE9PWUuY3VzdG9taXphdGlvbi5iaW5MZW58fDAhPT1lLmZ1bmNOYW1lLmJpbkxlbil7Y29uc3QgdD1udChyLHRoaXMucD4+PjMpO2ZvcihsZXQgbj0wO248dC5sZW5ndGg7bis9dGhpcy5wPj4+NSl0aGlzLkM9dGhpcy5SKHQuc2xpY2UobixuKyh0aGlzLnA+Pj41KSksdGhpcy5DKSx0aGlzLmwrPXRoaXMucDtyZXR1cm4gNH1yZXR1cm4gMzF9SSh0KXtjb25zdCBuPWZ1bmN0aW9uKHQpe2NvbnN0IG49dHx8e307cmV0dXJue2ttYWNLZXk6YyhcImttYWNLZXlcIixuLmttYWNLZXksMSksZnVuY05hbWU6e3ZhbHVlOlsxMTI4MzUzMDk5XSxiaW5MZW46MzJ9LGN1c3RvbWl6YXRpb246YyhcIkN1c3RvbWl6YXRpb25cIixuLmN1c3RvbWl6YXRpb24sMSx7dmFsdWU6W10sYmluTGVuOjB9KX19KHR8fHt9KTt0aGlzLl8odCxuLmZ1bmNOYW1lKTtjb25zdCBlPW50KHR0KG4ua21hY0tleSksdGhpcy5wPj4+Myk7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kz10aGlzLnA+Pj41KXRoaXMuQz10aGlzLlIoZS5zbGljZSh0LHQrKHRoaXMucD4+PjUpKSx0aGlzLkMpLHRoaXMubCs9dGhpcy5wO3RoaXMuQT0hMH1YKHQpe2NvbnN0IG49dSh7dmFsdWU6dGhpcy5vLnNsaWNlKCksYmluTGVuOnRoaXMuaH0sZnVuY3Rpb24odCl7bGV0IG4sZSxyPTA7Y29uc3QgaT1bMCwwXSxzPVs0Mjk0OTY3Mjk1JnQsdC80Mjk0OTY3Mjk2JjIwOTcxNTFdO2ZvcihuPTY7bj49MDtuLS0pZT1zW24+PjJdPj4+OCpuJjI1NSwwPT09ZSYmMD09PXJ8fChpW3I+PjJdfD1lPDw4KnIscis9MSk7cmV0dXJuIHI9MCE9PXI/cjoxLGlbcj4+Ml18PXI8PDgqcix7dmFsdWU6cisxPjQ/aTpbaVswXV0sYmluTGVuOjgrOCpyfX0odC5vdXRwdXRMZW4pKTtyZXR1cm4gdGhpcy5GKG4udmFsdWUsbi5iaW5MZW4sdGhpcy5sLHRoaXMuZyh0aGlzLkMpLHQub3V0cHV0TGVuKX19ZXhwb3J0IGRlZmF1bHQgY2xhc3N7Y29uc3RydWN0b3IodCxuLGUpe2lmKFwiU0hBLTFcIj09dCl0aGlzLk89bmV3IEsodCxuLGUpO2Vsc2UgaWYoXCJTSEEtMjI0XCI9PXR8fFwiU0hBLTI1NlwiPT10KXRoaXMuTz1uZXcgZyh0LG4sZSk7ZWxzZSBpZihcIlNIQS0zODRcIj09dHx8XCJTSEEtNTEyXCI9PXQpdGhpcy5PPW5ldyBxKHQsbixlKTtlbHNle2lmKFwiU0hBMy0yMjRcIiE9dCYmXCJTSEEzLTI1NlwiIT10JiZcIlNIQTMtMzg0XCIhPXQmJlwiU0hBMy01MTJcIiE9dCYmXCJTSEFLRTEyOFwiIT10JiZcIlNIQUtFMjU2XCIhPXQmJlwiQ1NIQUtFMTI4XCIhPXQmJlwiQ1NIQUtFMjU2XCIhPXQmJlwiS01BQzEyOFwiIT10JiZcIktNQUMyNTZcIiE9dCl0aHJvdyBuZXcgRXJyb3IoaCk7dGhpcy5PPW5ldyBldCh0LG4sZSl9fXVwZGF0ZSh0KXt0aGlzLk8udXBkYXRlKHQpfWdldEhhc2godCxuKXtyZXR1cm4gdGhpcy5PLmdldEhhc2godCxuKX1zZXRITUFDS2V5KHQsbixlKXt0aGlzLk8uc2V0SE1BQ0tleSh0LG4sZSl9Z2V0SE1BQyh0LG4pe3JldHVybiB0aGlzLk8uZ2V0SE1BQyh0LG4pfX1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYS5tanMubWFwXG4iLCIvKlxuKiBsb2dsZXZlbCAtIGh0dHBzOi8vZ2l0aHViLmNvbS9waW10ZXJyeS9sb2dsZXZlbFxuKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTMgVGltIFBlcnJ5XG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiovXG4oZnVuY3Rpb24gKHJvb3QsIGRlZmluaXRpb24pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShkZWZpbml0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QubG9nID0gZGVmaW5pdGlvbigpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLy8gU2xpZ2h0bHkgZHViaW91cyB0cmlja3MgdG8gY3V0IGRvd24gbWluaW1pemVkIGZpbGUgc2l6ZVxuICAgIHZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcbiAgICB2YXIgdW5kZWZpbmVkVHlwZSA9IFwidW5kZWZpbmVkXCI7XG4gICAgdmFyIGlzSUUgPSAodHlwZW9mIHdpbmRvdyAhPT0gdW5kZWZpbmVkVHlwZSkgJiYgKHR5cGVvZiB3aW5kb3cubmF2aWdhdG9yICE9PSB1bmRlZmluZWRUeXBlKSAmJiAoXG4gICAgICAgIC9UcmlkZW50XFwvfE1TSUUgLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICAgICk7XG5cbiAgICB2YXIgbG9nTWV0aG9kcyA9IFtcbiAgICAgICAgXCJ0cmFjZVwiLFxuICAgICAgICBcImRlYnVnXCIsXG4gICAgICAgIFwiaW5mb1wiLFxuICAgICAgICBcIndhcm5cIixcbiAgICAgICAgXCJlcnJvclwiXG4gICAgXTtcblxuICAgIC8vIENyb3NzLWJyb3dzZXIgYmluZCBlcXVpdmFsZW50IHRoYXQgd29ya3MgYXQgbGVhc3QgYmFjayB0byBJRTZcbiAgICBmdW5jdGlvbiBiaW5kTWV0aG9kKG9iaiwgbWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgbWV0aG9kID0gb2JqW21ldGhvZE5hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZC5iaW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kLmJpbmQob2JqKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwobWV0aG9kLCBvYmopO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIE1pc3NpbmcgYmluZCBzaGltIG9yIElFOCArIE1vZGVybml6ciwgZmFsbGJhY2sgdG8gd3JhcHBpbmdcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYXBwbHkobWV0aG9kLCBbb2JqLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVHJhY2UoKSBkb2Vzbid0IHByaW50IHRoZSBtZXNzYWdlIGluIElFLCBzbyBmb3IgdGhhdCBjYXNlIHdlIG5lZWQgdG8gd3JhcCBpdFxuICAgIGZ1bmN0aW9uIHRyYWNlRm9ySUUoKSB7XG4gICAgICAgIGlmIChjb25zb2xlLmxvZykge1xuICAgICAgICAgICAgaWYgKGNvbnNvbGUubG9nLmFwcGx5KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gb2xkIElFLCBuYXRpdmUgY29uc29sZSBtZXRob2RzIHRoZW1zZWx2ZXMgZG9uJ3QgaGF2ZSBhcHBseSgpLlxuICAgICAgICAgICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5hcHBseShjb25zb2xlLmxvZywgW2NvbnNvbGUsIGFyZ3VtZW50c10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb25zb2xlLnRyYWNlKSBjb25zb2xlLnRyYWNlKCk7XG4gICAgfVxuXG4gICAgLy8gQnVpbGQgdGhlIGJlc3QgbG9nZ2luZyBtZXRob2QgcG9zc2libGUgZm9yIHRoaXMgZW52XG4gICAgLy8gV2hlcmV2ZXIgcG9zc2libGUgd2Ugd2FudCB0byBiaW5kLCBub3Qgd3JhcCwgdG8gcHJlc2VydmUgc3RhY2sgdHJhY2VzXG4gICAgZnVuY3Rpb24gcmVhbE1ldGhvZChtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmIChtZXRob2ROYW1lID09PSAnZGVidWcnKSB7XG4gICAgICAgICAgICBtZXRob2ROYW1lID0gJ2xvZyc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gTm8gbWV0aG9kIHBvc3NpYmxlLCBmb3Igbm93IC0gZml4ZWQgbGF0ZXIgYnkgZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlc1xuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZE5hbWUgPT09ICd0cmFjZScgJiYgaXNJRSkge1xuICAgICAgICAgICAgcmV0dXJuIHRyYWNlRm9ySUU7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uc29sZVttZXRob2ROYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYmluZE1ldGhvZChjb25zb2xlLCBtZXRob2ROYW1lKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25zb2xlLmxvZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYmluZE1ldGhvZChjb25zb2xlLCAnbG9nJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbm9vcDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoZXNlIHByaXZhdGUgZnVuY3Rpb25zIGFsd2F5cyBuZWVkIGB0aGlzYCB0byBiZSBzZXQgcHJvcGVybHlcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VMb2dnaW5nTWV0aG9kcyhsZXZlbCwgbG9nZ2VyTmFtZSkge1xuICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxvZ01ldGhvZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBtZXRob2ROYW1lID0gbG9nTWV0aG9kc1tpXTtcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0gPSAoaSA8IGxldmVsKSA/XG4gICAgICAgICAgICAgICAgbm9vcCA6XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRob2RGYWN0b3J5KG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmluZSBsb2cubG9nIGFzIGFuIGFsaWFzIGZvciBsb2cuZGVidWdcbiAgICAgICAgdGhpcy5sb2cgPSB0aGlzLmRlYnVnO1xuICAgIH1cblxuICAgIC8vIEluIG9sZCBJRSB2ZXJzaW9ucywgdGhlIGNvbnNvbGUgaXNuJ3QgcHJlc2VudCB1bnRpbCB5b3UgZmlyc3Qgb3BlbiBpdC5cbiAgICAvLyBXZSBidWlsZCByZWFsTWV0aG9kKCkgcmVwbGFjZW1lbnRzIGhlcmUgdGhhdCByZWdlbmVyYXRlIGxvZ2dpbmcgbWV0aG9kc1xuICAgIGZ1bmN0aW9uIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHRoaXMsIGxldmVsLCBsb2dnZXJOYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQnkgZGVmYXVsdCwgd2UgdXNlIGNsb3NlbHkgYm91bmQgcmVhbCBtZXRob2RzIHdoZXJldmVyIHBvc3NpYmxlLCBhbmRcbiAgICAvLyBvdGhlcndpc2Ugd2Ugd2FpdCBmb3IgYSBjb25zb2xlIHRvIGFwcGVhciwgYW5kIHRoZW4gdHJ5IGFnYWluLlxuICAgIGZ1bmN0aW9uIGRlZmF1bHRNZXRob2RGYWN0b3J5KG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICAgIHJldHVybiByZWFsTWV0aG9kKG1ldGhvZE5hbWUpIHx8XG4gICAgICAgICAgICAgICBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9nZ2VyKG5hbWUsIGRlZmF1bHRMZXZlbCwgZmFjdG9yeSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGN1cnJlbnRMZXZlbDtcblxuICAgICAgdmFyIHN0b3JhZ2VLZXkgPSBcImxvZ2xldmVsXCI7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgc3RvcmFnZUtleSArPSBcIjpcIiArIG5hbWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSB7XG4gICAgICAgIHN0b3JhZ2VLZXkgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBlcnNpc3RMZXZlbElmUG9zc2libGUobGV2ZWxOdW0pIHtcbiAgICAgICAgICB2YXIgbGV2ZWxOYW1lID0gKGxvZ01ldGhvZHNbbGV2ZWxOdW1dIHx8ICdzaWxlbnQnKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IHVuZGVmaW5lZFR5cGUgfHwgIXN0b3JhZ2VLZXkpIHJldHVybjtcblxuICAgICAgICAgIC8vIFVzZSBsb2NhbFN0b3JhZ2UgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZVtzdG9yYWdlS2V5XSA9IGxldmVsTmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgICAgIC8vIFVzZSBzZXNzaW9uIGNvb2tpZSBhcyBmYWxsYmFja1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5jb29raWUgPVxuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiICsgbGV2ZWxOYW1lICsgXCI7XCI7XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRQZXJzaXN0ZWRMZXZlbCgpIHtcbiAgICAgICAgICB2YXIgc3RvcmVkTGV2ZWw7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gdW5kZWZpbmVkVHlwZSB8fCAhc3RvcmFnZUtleSkgcmV0dXJuO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSB3aW5kb3cubG9jYWxTdG9yYWdlW3N0b3JhZ2VLZXldO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGNvb2tpZXMgaWYgbG9jYWwgc3RvcmFnZSBnaXZlcyB1cyBub3RoaW5nXG4gICAgICAgICAgaWYgKHR5cGVvZiBzdG9yZWRMZXZlbCA9PT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZSA9IHdpbmRvdy5kb2N1bWVudC5jb29raWU7XG4gICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBjb29raWUuaW5kZXhPZihcbiAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj1cIik7XG4gICAgICAgICAgICAgICAgICBpZiAobG9jYXRpb24gIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSAvXihbXjtdKykvLmV4ZWMoY29va2llLnNsaWNlKGxvY2F0aW9uKSlbMV07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiB0aGUgc3RvcmVkIGxldmVsIGlzIG5vdCB2YWxpZCwgdHJlYXQgaXQgYXMgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuICAgICAgICAgIGlmIChzZWxmLmxldmVsc1tzdG9yZWRMZXZlbF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3RvcmVkTGV2ZWw7XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICAgKlxuICAgICAgICogUHVibGljIGxvZ2dlciBBUEkgLSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsIGZvciBkZXRhaWxzXG4gICAgICAgKlxuICAgICAgICovXG5cbiAgICAgIHNlbGYubmFtZSA9IG5hbWU7XG5cbiAgICAgIHNlbGYubGV2ZWxzID0geyBcIlRSQUNFXCI6IDAsIFwiREVCVUdcIjogMSwgXCJJTkZPXCI6IDIsIFwiV0FSTlwiOiAzLFxuICAgICAgICAgIFwiRVJST1JcIjogNCwgXCJTSUxFTlRcIjogNX07XG5cbiAgICAgIHNlbGYubWV0aG9kRmFjdG9yeSA9IGZhY3RvcnkgfHwgZGVmYXVsdE1ldGhvZEZhY3Rvcnk7XG5cbiAgICAgIHNlbGYuZ2V0TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRMZXZlbDtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2V0TGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwsIHBlcnNpc3QpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGxldmVsID09PSBcInN0cmluZ1wiICYmIHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgbGV2ZWwgPSBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJudW1iZXJcIiAmJiBsZXZlbCA+PSAwICYmIGxldmVsIDw9IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuICAgICAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgICAgICAgaWYgKHBlcnNpc3QgIT09IGZhbHNlKSB7ICAvLyBkZWZhdWx0cyB0byB0cnVlXG4gICAgICAgICAgICAgICAgICBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbChzZWxmLCBsZXZlbCwgbmFtZSk7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gdW5kZWZpbmVkVHlwZSAmJiBsZXZlbCA8IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTm8gY29uc29sZSBhdmFpbGFibGUgZm9yIGxvZ2dpbmdcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IFwibG9nLnNldExldmVsKCkgY2FsbGVkIHdpdGggaW52YWxpZCBsZXZlbDogXCIgKyBsZXZlbDtcbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnNldERlZmF1bHRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICAgIGlmICghZ2V0UGVyc2lzdGVkTGV2ZWwoKSkge1xuICAgICAgICAgICAgICBzZWxmLnNldExldmVsKGxldmVsLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5lbmFibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5UUkFDRSwgcGVyc2lzdCk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmRpc2FibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5TSUxFTlQsIHBlcnNpc3QpO1xuICAgICAgfTtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSB3aXRoIHRoZSByaWdodCBsZXZlbFxuICAgICAgdmFyIGluaXRpYWxMZXZlbCA9IGdldFBlcnNpc3RlZExldmVsKCk7XG4gICAgICBpZiAoaW5pdGlhbExldmVsID09IG51bGwpIHtcbiAgICAgICAgICBpbml0aWFsTGV2ZWwgPSBkZWZhdWx0TGV2ZWwgPT0gbnVsbCA/IFwiV0FSTlwiIDogZGVmYXVsdExldmVsO1xuICAgICAgfVxuICAgICAgc2VsZi5zZXRMZXZlbChpbml0aWFsTGV2ZWwsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqXG4gICAgICogVG9wLWxldmVsIEFQSVxuICAgICAqXG4gICAgICovXG5cbiAgICB2YXIgZGVmYXVsdExvZ2dlciA9IG5ldyBMb2dnZXIoKTtcblxuICAgIHZhciBfbG9nZ2Vyc0J5TmFtZSA9IHt9O1xuICAgIGRlZmF1bHRMb2dnZXIuZ2V0TG9nZ2VyID0gZnVuY3Rpb24gZ2V0TG9nZ2VyKG5hbWUpIHtcbiAgICAgICAgaWYgKCh0eXBlb2YgbmFtZSAhPT0gXCJzeW1ib2xcIiAmJiB0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikgfHwgbmFtZSA9PT0gXCJcIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJZb3UgbXVzdCBzdXBwbHkgYSBuYW1lIHdoZW4gY3JlYXRpbmcgYSBsb2dnZXIuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvZ2dlciA9IF9sb2dnZXJzQnlOYW1lW25hbWVdO1xuICAgICAgICBpZiAoIWxvZ2dlcikge1xuICAgICAgICAgIGxvZ2dlciA9IF9sb2dnZXJzQnlOYW1lW25hbWVdID0gbmV3IExvZ2dlcihcbiAgICAgICAgICAgIG5hbWUsIGRlZmF1bHRMb2dnZXIuZ2V0TGV2ZWwoKSwgZGVmYXVsdExvZ2dlci5tZXRob2RGYWN0b3J5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nZ2VyO1xuICAgIH07XG5cbiAgICAvLyBHcmFiIHRoZSBjdXJyZW50IGdsb2JhbCBsb2cgdmFyaWFibGUgaW4gY2FzZSBvZiBvdmVyd3JpdGVcbiAgICB2YXIgX2xvZyA9ICh0eXBlb2Ygd2luZG93ICE9PSB1bmRlZmluZWRUeXBlKSA/IHdpbmRvdy5sb2cgOiB1bmRlZmluZWQ7XG4gICAgZGVmYXVsdExvZ2dlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSB1bmRlZmluZWRUeXBlICYmXG4gICAgICAgICAgICAgICB3aW5kb3cubG9nID09PSBkZWZhdWx0TG9nZ2VyKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9nID0gX2xvZztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyO1xuICAgIH07XG5cbiAgICBkZWZhdWx0TG9nZ2VyLmdldExvZ2dlcnMgPSBmdW5jdGlvbiBnZXRMb2dnZXJzKCkge1xuICAgICAgICByZXR1cm4gX2xvZ2dlcnNCeU5hbWU7XG4gICAgfTtcblxuICAgIC8vIEVTNiBkZWZhdWx0IGV4cG9ydCwgZm9yIGNvbXBhdGliaWxpdHlcbiAgICBkZWZhdWx0TG9nZ2VyWydkZWZhdWx0J10gPSBkZWZhdWx0TG9nZ2VyO1xuXG4gICAgcmV0dXJuIGRlZmF1bHRMb2dnZXI7XG59KSk7XG4iLCIvLyEgbW9tZW50LmpzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIGdsb2JhbC5tb21lbnQgPSBmYWN0b3J5KClcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGhvb2tDYWxsYmFjaztcblxuICAgIGZ1bmN0aW9uIGhvb2tzICgpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgZG9uZSB0byByZWdpc3RlciB0aGUgbWV0aG9kIGNhbGxlZCB3aXRoIG1vbWVudCgpXG4gICAgLy8gd2l0aG91dCBjcmVhdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG4gICAgZnVuY3Rpb24gc2V0SG9va0NhbGxiYWNrIChjYWxsYmFjaykge1xuICAgICAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FycmF5KGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEFycmF5IHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IHdpbGwgdHJlYXQgdW5kZWZpbmVkIGFuZCBudWxsIGFzIG9iamVjdCBpZiBpdCB3YXNuJ3QgZm9yXG4gICAgICAgIC8vIGlucHV0ICE9IG51bGxcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID09PSAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBrO1xuICAgICAgICAgICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXRlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcChhcnIsIGZuKSB7XG4gICAgICAgIHZhciByZXMgPSBbXSwgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcmVzLnB1c2goZm4oYXJyW2ldLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgICAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGIsIGkpKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0UGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbXB0eSAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHVudXNlZFRva2VucyAgICA6IFtdLFxuICAgICAgICAgICAgdW51c2VkSW5wdXQgICAgIDogW10sXG4gICAgICAgICAgICBvdmVyZmxvdyAgICAgICAgOiAtMixcbiAgICAgICAgICAgIGNoYXJzTGVmdE92ZXIgICA6IDAsXG4gICAgICAgICAgICBudWxsSW5wdXQgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIGludmFsaWRNb250aCAgICA6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkRm9ybWF0ICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHVzZXJJbnZhbGlkYXRlZCA6IGZhbHNlLFxuICAgICAgICAgICAgaXNvICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBwYXJzZWREYXRlUGFydHMgOiBbXSxcbiAgICAgICAgICAgIG1lcmlkaWVtICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICByZmMyODIyICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHdlZWtkYXlNaXNtYXRjaCA6IGZhbHNlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2luZ0ZsYWdzKG0pIHtcbiAgICAgICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgICAgIG0uX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9wZjtcbiAgICB9XG5cbiAgICB2YXIgc29tZTtcbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcbiAgICAgICAgc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNvbWUgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHQgJiYgZnVuLmNhbGwodGhpcywgdFtpXSwgaSwgdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZChtKSB7XG4gICAgICAgIGlmIChtLl9pc1ZhbGlkID09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKTtcbiAgICAgICAgICAgIHZhciBwYXJzZWRQYXJ0cyA9IHNvbWUuY2FsbChmbGFncy5wYXJzZWREYXRlUGFydHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGlzTm93VmFsaWQgPSAhaXNOYU4obS5fZC5nZXRUaW1lKCkpICYmXG4gICAgICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmVtcHR5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRNb250aCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy53ZWVrZGF5TWlzbWF0Y2ggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MubnVsbElucHV0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MudXNlckludmFsaWRhdGVkICYmXG4gICAgICAgICAgICAgICAgKCFmbGFncy5tZXJpZGllbSB8fCAoZmxhZ3MubWVyaWRpZW0gJiYgcGFyc2VkUGFydHMpKTtcblxuICAgICAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgPSBpc05vd1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4gPT0gbnVsbCB8fCAhT2JqZWN0LmlzRnJvemVuKG0pKSB7XG4gICAgICAgICAgICAgICAgbS5faXNWYWxpZCA9IGlzTm93VmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNOb3dWYWxpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkIChmbGFncykge1xuICAgICAgICB2YXIgbSA9IGNyZWF0ZVVUQyhOYU4pO1xuICAgICAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksXG4gICAgLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cbiAgICB2YXIgbW9tZW50UHJvcGVydGllcyA9IGhvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGNvcHlDb25maWcodG8sIGZyb20pIHtcbiAgICAgICAgdmFyIGksIHByb3AsIHZhbDtcblxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICAgICAgdG8uX2kgPSBmcm9tLl9pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgICAgIHRvLl9mID0gZnJvbS5fZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgICAgICB0by5fbCA9IGZyb20uX2w7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgICAgICB0by5fcGYgPSBnZXRQYXJzaW5nRmxhZ3MoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgICAgICB0by5fbG9jYWxlID0gZnJvbS5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vbWVudFByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1vbWVudFByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgICAgIGlmICghaXNVbmRlZmluZWQodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuXG4gICAgdmFyIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgIC8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgICAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AgaW4gY2FzZSB1cGRhdGVPZmZzZXQgY3JlYXRlcyBuZXcgbW9tZW50XG4gICAgICAgIC8vIG9iamVjdHMuXG4gICAgICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudCAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBNb21lbnQgfHwgKG9iaiAhPSBudWxsICYmIG9iai5faXNBTW9tZW50T2JqZWN0ICE9IG51bGwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0Zsb29yIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIC8vIC0wIC0+IDBcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKSB8fCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHtcbiAgICAgICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgICAgIHZhbHVlID0gMDtcblxuICAgICAgICBpZiAoY29lcmNlZE51bWJlciAhPT0gMCAmJiBpc0Zpbml0ZShjb2VyY2VkTnVtYmVyKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBjb21wYXJlIHR3byBhcnJheXMsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRpZmZlcmVuY2VzXG4gICAgZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheTEsIGFycmF5MiwgZG9udENvbnZlcnQpIHtcbiAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgbGVuZ3RoRGlmZiA9IE1hdGguYWJzKGFycmF5MS5sZW5ndGggLSBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGRpZmZzID0gMCxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKChkb250Q29udmVydCAmJiBhcnJheTFbaV0gIT09IGFycmF5MltpXSkgfHxcbiAgICAgICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpKSB7XG4gICAgICAgICAgICAgICAgZGlmZnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlmZnMgKyBsZW5ndGhEaWZmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgICAgIGlmIChob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBjb25zb2xlICE9PSAgJ3VuZGVmaW5lZCcpICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG51bGwsIG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgYXJnO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0ga2V5ICsgJzogJyArIGFyZ3VtZW50c1swXVtrZXldICsgJywgJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgwLCAtMik7IC8vIFJlbW92ZSB0cmFpbGluZyBjb21tYSBhbmQgc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2Fybihtc2cgKyAnXFxuQXJndW1lbnRzOiAnICsgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncykuam9pbignJykgKyAnXFxuJyArIChuZXcgRXJyb3IoKSkuc3RhY2spO1xuICAgICAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sIGZuKTtcbiAgICB9XG5cbiAgICB2YXIgZGVwcmVjYXRpb25zID0ge307XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGVTaW1wbGUobmFtZSwgbXNnKSB7XG4gICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG5hbWUsIG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmYWxzZTtcbiAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbiB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldCAoY29uZmlnKSB7XG4gICAgICAgIHZhciBwcm9wLCBpO1xuICAgICAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgICAgICBwcm9wID0gY29uZmlnW2ldO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAgICAgLy8gbnVtYmVyICsgKHBvc3NpYmx5KSBzdHVmZiBjb21pbmcgZnJvbSBfZGF5T2ZNb250aE9yZGluYWxQYXJzZS5cbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICB0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAodGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZS5zb3VyY2UgfHwgdGhpcy5fb3JkaW5hbFBhcnNlLnNvdXJjZSkgK1xuICAgICAgICAgICAgICAgICd8JyArICgvXFxkezEsMn0vKS5zb3VyY2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBleHRlbmQoe30sIHBhcmVudENvbmZpZyksIHByb3A7XG4gICAgICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkgJiYgaXNPYmplY3QoY2hpbGRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBwYXJlbnRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBjaGlsZENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGNoaWxkQ29uZmlnW3Byb3BdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcCBpbiBwYXJlbnRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKHBhcmVudENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAgICAgIWhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgICAgIGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIGRvbid0IG1vZGlmeSBwYXJlbnQgY29uZmlnXG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gZXh0ZW5kKHt9LCByZXNbcHJvcF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9jYWxlKGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cztcblxuICAgIGlmIChPYmplY3Qua2V5cykge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAga2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHZhciBpLCByZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhciAoa2V5LCBtb20sIG5vdykge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XSB8fCB0aGlzLl9jYWxlbmRhclsnc2FtZUVsc2UnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KSA/IG91dHB1dC5jYWxsKG1vbSwgbm93KSA6IG91dHB1dDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvbmdEYXRlRm9ybWF0ID0ge1xuICAgICAgICBMVFMgIDogJ2g6bW06c3MgQScsXG4gICAgICAgIExUICAgOiAnaDptbSBBJyxcbiAgICAgICAgTCAgICA6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgTEwgICA6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICBMTEwgIDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0IChrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0sXG4gICAgICAgICAgICBmb3JtYXRVcHBlciA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlci5yZXBsYWNlKC9NTU1NfE1NfEREfGRkZGQvZywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbC5zbGljZSgxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRJbnZhbGlkRGF0ZSA9ICdJbnZhbGlkIGRhdGUnO1xuXG4gICAgZnVuY3Rpb24gaW52YWxpZERhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRPcmRpbmFsID0gJyVkJztcbiAgICB2YXIgZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UgPSAvXFxkezEsMn0vO1xuXG4gICAgZnVuY3Rpb24gb3JkaW5hbCAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoJyVkJywgbnVtYmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCAgIDogJyVzIGFnbycsXG4gICAgICAgIHMgIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgbSAgOiAnYSBtaW51dGUnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgaCAgOiAnYW4gaG91cicsXG4gICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgZCAgOiAnYSBkYXknLFxuICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgTSAgOiAnYSBtb250aCcsXG4gICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgIHkgIDogJ2EgeWVhcicsXG4gICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUgKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW3N0cmluZ107XG4gICAgICAgIHJldHVybiAoaXNGdW5jdGlvbihvdXRwdXQpKSA/XG4gICAgICAgICAgICBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSA6XG4gICAgICAgICAgICBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXN0RnV0dXJlIChkaWZmLCBvdXRwdXQpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX3JlbGF0aXZlVGltZVtkaWZmID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24oZm9ybWF0KSA/IGZvcm1hdChvdXRwdXQpIDogZm9ybWF0LnJlcGxhY2UoLyVzL2ksIG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFsaWFzZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRBbGlhcyAodW5pdCwgc2hvcnRoYW5kKSB7XG4gICAgICAgIHZhciBsb3dlckNhc2UgPSB1bml0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9IGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9IGFsaWFzZXNbc2hvcnRoYW5kXSA9IHVuaXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZycgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdFVuaXRzKGlucHV0T2JqZWN0KSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICAgICAgcHJvcDtcblxuICAgICAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRJbnB1dFtub3JtYWxpemVkUHJvcF0gPSBpbnB1dE9iamVjdFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZElucHV0O1xuICAgIH1cblxuICAgIHZhciBwcmlvcml0aWVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRVbml0UHJpb3JpdHkodW5pdCwgcHJpb3JpdHkpIHtcbiAgICAgICAgcHJpb3JpdGllc1t1bml0XSA9IHByaW9yaXR5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFByaW9yaXRpemVkVW5pdHModW5pdHNPYmopIHtcbiAgICAgICAgdmFyIHVuaXRzID0gW107XG4gICAgICAgIGZvciAodmFyIHUgaW4gdW5pdHNPYmopIHtcbiAgICAgICAgICAgIHVuaXRzLnB1c2goe3VuaXQ6IHUsIHByaW9yaXR5OiBwcmlvcml0aWVzW3VdfSk7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHVuaXRzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgICAgICAgdmFyIGFic051bWJlciA9ICcnICsgTWF0aC5hYnMobnVtYmVyKSxcbiAgICAgICAgICAgIHplcm9zVG9GaWxsID0gdGFyZ2V0TGVuZ3RoIC0gYWJzTnVtYmVyLmxlbmd0aCxcbiAgICAgICAgICAgIHNpZ24gPSBudW1iZXIgPj0gMDtcbiAgICAgICAgcmV0dXJuIChzaWduID8gKGZvcmNlU2lnbiA/ICcrJyA6ICcnKSA6ICctJykgK1xuICAgICAgICAgICAgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgKyBhYnNOdW1iZXI7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oW0hoXW1tKHNzKT98TW98TU0/TT9NP3xEb3xERERvfEREP0Q/RD98ZGRkP2Q/fGRvP3x3W298d10/fFdbb3xXXT98UW8/fFlZWVlZWXxZWVlZWXxZWVlZfFlZfGdnKGdnZz8pP3xHRyhHR0c/KT98ZXxFfGF8QXxoaD98SEg/fGtrP3xtbT98c3M/fFN7MSw5fXx4fFh8eno/fFpaP3wuKS9nO1xuXG4gICAgdmFyIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2c7XG5cbiAgICB2YXIgZm9ybWF0RnVuY3Rpb25zID0ge307XG5cbiAgICB2YXIgZm9ybWF0VG9rZW5GdW5jdGlvbnMgPSB7fTtcblxuICAgIC8vIHRva2VuOiAgICAnTSdcbiAgICAvLyBwYWRkZWQ6ICAgWydNTScsIDJdXG4gICAgLy8gb3JkaW5hbDogICdNbydcbiAgICAvLyBjYWxsYmFjazogZnVuY3Rpb24gKCkgeyB0aGlzLm1vbnRoKCkgKyAxIH1cbiAgICBmdW5jdGlvbiBhZGRGb3JtYXRUb2tlbiAodG9rZW4sIHBhZGRlZCwgb3JkaW5hbCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbY2FsbGJhY2tdKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFkZGVkKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGluYWwpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW29yZGluYWxdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdG9rZW4pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0Lm1hdGNoKC9cXFtbXFxzXFxTXS8pKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBmb3JtYXQubWF0Y2goZm9ybWF0dGluZ1Rva2VucyksIGksIGxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAnJywgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBpc0Z1bmN0aW9uKGFycmF5W2ldKSA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpIDogYXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID0gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKG0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgICAgICB2YXIgaSA9IDU7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxvY2FsRm9ybWF0dGluZ1Rva2VucywgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKTtcbiAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2gxICAgICAgICAgPSAvXFxkLzsgICAgICAgICAgICAvLyAgICAgICAwIC0gOVxuICAgIHZhciBtYXRjaDIgICAgICAgICA9IC9cXGRcXGQvOyAgICAgICAgICAvLyAgICAgIDAwIC0gOTlcbiAgICB2YXIgbWF0Y2gzICAgICAgICAgPSAvXFxkezN9LzsgICAgICAgICAvLyAgICAgMDAwIC0gOTk5XG4gICAgdmFyIG1hdGNoNCAgICAgICAgID0gL1xcZHs0fS87ICAgICAgICAgLy8gICAgMDAwMCAtIDk5OTlcbiAgICB2YXIgbWF0Y2g2ICAgICAgICAgPSAvWystXT9cXGR7Nn0vOyAgICAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgdmFyIG1hdGNoMXRvMiAgICAgID0gL1xcZFxcZD8vOyAgICAgICAgIC8vICAgICAgIDAgLSA5OVxuICAgIHZhciBtYXRjaDN0bzQgICAgICA9IC9cXGRcXGRcXGRcXGQ/LzsgICAgIC8vICAgICA5OTkgLSA5OTk5XG4gICAgdmFyIG1hdGNoNXRvNiAgICAgID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vOyAvLyAgIDk5OTk5IC0gOTk5OTk5XG4gICAgdmFyIG1hdGNoMXRvMyAgICAgID0gL1xcZHsxLDN9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OVxuICAgIHZhciBtYXRjaDF0bzQgICAgICA9IC9cXGR7MSw0fS87ICAgICAgIC8vICAgICAgIDAgLSA5OTk5XG4gICAgdmFyIG1hdGNoMXRvNiAgICAgID0gL1srLV0/XFxkezEsNn0vOyAgLy8gLTk5OTk5OSAtIDk5OTk5OVxuXG4gICAgdmFyIG1hdGNoVW5zaWduZWQgID0gL1xcZCsvOyAgICAgICAgICAgLy8gICAgICAgMCAtIGluZlxuICAgIHZhciBtYXRjaFNpZ25lZCAgICA9IC9bKy1dP1xcZCsvOyAgICAgIC8vICAgIC1pbmYgLSBpbmZcblxuICAgIHZhciBtYXRjaE9mZnNldCAgICA9IC9afFsrLV1cXGRcXGQ6P1xcZFxcZC9naTsgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgdmFyIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naTsgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcblxuICAgIHZhciBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy87IC8vIDEyMzQ1Njc4OSAxMjM0NTY3ODkuMTIzXG5cbiAgICAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbiAgICAvLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG4gICAgdmFyIG1hdGNoV29yZCA9IC9bMC05XXswLDI1Nn1bJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkYwN1xcdUZGMTAtXFx1RkZFRl17MSwyNTZ9fFtcXHUwNjAwLVxcdTA2RkZcXC9dezEsMjU2fShcXHMqP1tcXHUwNjAwLVxcdTA2RkZdezEsMjU2fSl7MSwyfS9pO1xuXG4gICAgdmFyIHJlZ2V4ZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFJlZ2V4VG9rZW4gKHRva2VuLCByZWdleCwgc3RyaWN0UmVnZXgpIHtcbiAgICAgICAgcmVnZXhlc1t0b2tlbl0gPSBpc0Z1bmN0aW9uKHJlZ2V4KSA/IHJlZ2V4IDogZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGVEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gKGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4KSA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuICh0b2tlbiwgY29uZmlnKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVuZXNjYXBlRm9ybWF0KHRva2VuKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVnZXhlc1t0b2tlbl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKTtcbiAgICB9XG5cbiAgICAvLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG4gICAgZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgICAgICByZXR1cm4gcmVnZXhFc2NhcGUocy5yZXBsYWNlKCdcXFxcJywgJycpLnJlcGxhY2UoL1xcXFwoXFxbKXxcXFxcKFxcXSl8XFxbKFteXFxdXFxbXSopXFxdfFxcXFwoLikvZywgZnVuY3Rpb24gKG1hdGNoZWQsIHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICAgIH1cblxuICAgIHZhciB0b2tlbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgaSwgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdG9rZW4gPSBbdG9rZW5dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbY2FsbGJhY2tdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307XG4gICAgICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaGFzT3duUHJvcCh0b2tlbnMsIHRva2VuKSkge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuXShpbnB1dCwgY29uZmlnLl9hLCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBZRUFSID0gMDtcbiAgICB2YXIgTU9OVEggPSAxO1xuICAgIHZhciBEQVRFID0gMjtcbiAgICB2YXIgSE9VUiA9IDM7XG4gICAgdmFyIE1JTlVURSA9IDQ7XG4gICAgdmFyIFNFQ09ORCA9IDU7XG4gICAgdmFyIE1JTExJU0VDT05EID0gNjtcbiAgICB2YXIgV0VFSyA9IDc7XG4gICAgdmFyIFdFRUtEQVkgPSA4O1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1knLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB5ID0gdGhpcy55ZWFyKCk7XG4gICAgICAgIHJldHVybiB5IDw9IDk5OTkgPyAnJyArIHkgOiAnKycgKyB5O1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnllYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWScsICAgNF0sICAgICAgIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsICA1XSwgICAgICAgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZWScsIDYsIHRydWVdLCAwLCAneWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd5ZWFyJywgJ3knKTtcblxuICAgIC8vIFBSSU9SSVRJRVNcblxuICAgIGFkZFVuaXRQcmlvcml0eSgneWVhcicsIDEpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWScsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVknLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBpbnB1dC5sZW5ndGggPT09IDIgPyBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCkgOiB0b0ludChpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICBob29rcy5wYXJzZVR3b0RpZ2l0WWVhciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xuICAgIH07XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgdHJ1ZSk7XG5cbiAgICBmdW5jdGlvbiBnZXRJc0xlYXBZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXRTZXQgKHVuaXQsIGtlZXBUaW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2V0JDEodGhpcywgdW5pdCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0IChtb20sIHVuaXQpIHtcbiAgICAgICAgcmV0dXJuIG1vbS5pc1ZhbGlkKCkgP1xuICAgICAgICAgICAgbW9tLl9kWydnZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKCkgOiBOYU47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0JDEgKG1vbSwgdW5pdCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG1vbS5pc1ZhbGlkKCkgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHVuaXQgPT09ICdGdWxsWWVhcicgJiYgaXNMZWFwWWVhcihtb20ueWVhcigpKSAmJiBtb20ubW9udGgoKSA9PT0gMSAmJiBtb20uZGF0ZSgpID09PSAyOSkge1xuICAgICAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSwgbW9tLm1vbnRoKCksIGRheXNJbk1vbnRoKHZhbHVlLCBtb20ubW9udGgoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHN0cmluZ0dldCAodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBzdHJpbmdTZXQgKHVuaXRzLCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHVuaXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVPYmplY3RVbml0cyh1bml0cyk7XG4gICAgICAgICAgICB2YXIgcHJpb3JpdGl6ZWQgPSBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzW3ByaW9yaXRpemVkW2ldLnVuaXRdKHVuaXRzW3ByaW9yaXRpemVkW2ldLnVuaXRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb2QobiwgeCkge1xuICAgICAgICByZXR1cm4gKChuICUgeCkgKyB4KSAlIHg7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4T2Y7XG5cbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICAgICAgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4T2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgLy8gSSBrbm93XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IG8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIGlmIChpc05hTih5ZWFyKSB8fCBpc05hTihtb250aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1vZE1vbnRoID0gbW9kKG1vbnRoLCAxMik7XG4gICAgICAgIHllYXIgKz0gKG1vbnRoIC0gbW9kTW9udGgpIC8gMTI7XG4gICAgICAgIHJldHVybiBtb2RNb250aCA9PT0gMSA/IChpc0xlYXBZZWFyKHllYXIpID8gMjkgOiAyOCkgOiAoMzEgLSBtb2RNb250aCAlIDcgJSAyKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb250aCgpICsgMTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbW9udGgnLCAnTScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbW9udGgnLCA4KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ00nLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NJywgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NJywgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ01NTScsICdNTU1NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBmaW5kIGEgbW9udGggbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkLlxuICAgICAgICBpZiAobW9udGggIT0gbnVsbCkge1xuICAgICAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgdmFyIE1PTlRIU19JTl9GT1JNQVQgPSAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NPy87XG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHMgPSAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHMgKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHMgOlxuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1snc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHNbbS5tb250aCgpXSA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNbKHRoaXMuX21vbnRocy5pc0Zvcm1hdCB8fCBNT05USFNfSU5fRk9STUFUKS50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID0gJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0IChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydCkgPyB0aGlzLl9tb250aHNTaG9ydCA6XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydCkgPyB0aGlzLl9tb250aHNTaG9ydFttLm1vbnRoKCldIDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0W01PTlRIU19JTl9GT1JNQVQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgaWksIG1vbSwgbGxjID0gbW9udGhOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHVzZWRcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRocyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNQYXJzZSAobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlLmNhbGwodGhpcywgbW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBhZGQgc29ydGluZ1xuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyXG4gICAgICAgIC8vIHNlZSBzb3J0aW5nIGluIGNvbXB1dGVNb250aHNQYXJzZVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU1NJyAmJiB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU0nICYmIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzZXRNb250aCAobW9tLCB2YWx1ZSkge1xuICAgICAgICB2YXIgZGF5T2ZNb250aDtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICgvXlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEFub3RoZXIgc2lsZW50IGZhaWx1cmU/XG4gICAgICAgICAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkYXlPZk1vbnRoID0gTWF0aC5taW4obW9tLmRhdGUoKSwgZGF5c0luTW9udGgobW9tLnllYXIoKSwgdmFsdWUpKTtcbiAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArICdNb250aCddKHZhbHVlLCBkYXlPZk1vbnRoKTtcbiAgICAgICAgcmV0dXJuIG1vbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRNb250aCAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERheXNJbk1vbnRoICgpIHtcbiAgICAgICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiBtb250aHNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRNb250aHNSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiBtb250aHNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gZGVmYXVsdE1vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZU1vbnRoc1BhcnNlICgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksIG1vbTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgICAgICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEYXRlICh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgICAgICAvLyBjYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE4MTM0OFxuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSAoeSkge1xuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgLy8gdGhlIERhdGUuVVRDIGZ1bmN0aW9uIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBhcmdzWzBdID0geSArIDQwMDtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmdzKSk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICAvLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuICAgIGZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICAgICAgZndkbHcgPSAoNyArIGNyZWF0ZVVUQ0RhdGUoeWVhciwgMCwgZndkKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuXG4gICAgICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5XG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtzKHllYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBsb2NhbFdlZWtkYXkgPSAoNyArIHdlZWtkYXkgLSBkb3cpICUgNyxcbiAgICAgICAgICAgIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF5T2ZZZWFyID0gMSArIDcgKiAod2VlayAtIDEpICsgbG9jYWxXZWVrZGF5ICsgd2Vla09mZnNldCxcbiAgICAgICAgICAgIHJlc1llYXIsIHJlc0RheU9mWWVhcjtcblxuICAgICAgICBpZiAoZGF5T2ZZZWFyIDw9IDApIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyIC0gMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyKSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyIC0gZGF5c0luWWVhcih5ZWFyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgICAgICBkYXlPZlllYXI6IHJlc0RheU9mWWVhclxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICAgICAgcmVzV2VlaywgcmVzWWVhcjtcblxuICAgICAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpIC0gMTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrICsgd2Vla3NJblllYXIocmVzWWVhciwgZG93LCBkb3kpO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrIC0gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCk7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3ZWVrOiByZXNXZWVrLFxuICAgICAgICAgICAgeWVhcjogcmVzWWVhclxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWtPZmZzZXROZXh0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIgKyAxLCBkb3csIGRveSk7XG4gICAgICAgIHJldHVybiAoZGF5c0luWWVhcih5ZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrJywgJ3cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWsnLCAnVycpO1xuXG4gICAgLy8gUFJJT1JJVElFU1xuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrJywgNSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrJywgNSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd3JywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignVycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWsgKG1vbSkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2VlaztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG95O1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbiAgICBhZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheScsICdkJyk7XG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrZGF5JywgJ2UnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWtkYXknLCAnRScpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtkYXknLCAxMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrZGF5JywgMTEpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignZCcsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignRScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpICUgNyB8fCA3O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc05hTihpbnB1dCkgPyBudWxsIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gTE9DQUxFU1xuICAgIGZ1bmN0aW9uIHNoaWZ0V2Vla2RheXMgKHdzLCBuKSB7XG4gICAgICAgIHJldHVybiB3cy5zbGljZShuLCA3KS5jb25jYXQod3Muc2xpY2UoMCwgbikpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPSAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXMgKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKSA/IHRoaXMuX3dlZWtkYXlzIDpcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzWyhtICYmIG0gIT09IHRydWUgJiYgdGhpcy5fd2Vla2RheXMuaXNGb3JtYXQudGVzdChmb3JtYXQpKSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgcmV0dXJuIChtID09PSB0cnVlKSA/IHNoaWZ0V2Vla2RheXMod2Vla2RheXMsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiAobSkgPyB3ZWVrZGF5c1ttLmRheSgpXSA6IHdlZWtkYXlzO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCA9ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydCAobSkge1xuICAgICAgICByZXR1cm4gKG0gPT09IHRydWUpID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c1Nob3J0LCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogKG0pID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbiAobSkge1xuICAgICAgICByZXR1cm4gKG0gPT09IHRydWUpID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c01pbiwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IChtKSA/IHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNNaW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UkMSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNQYXJzZSAod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZSQxLmNhbGwodGhpcywgd2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG5cbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkZCcgJiYgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZCcgJiYgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZCcgJiYgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpO1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2Vla2RheSA9ICh0aGlzLmRheSgpICsgNyAtIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdykgJSA3O1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWtkYXkgOiB0aGlzLmFkZChpbnB1dCAtIHdlZWtkYXksICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiZWhhdmVzIHRoZSBzYW1lIGFzIG1vbWVudCNkYXkgZXhjZXB0XG4gICAgICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgICAgIC8vIGFzIGEgc2V0dGVyLCBzdW5kYXkgc2hvdWxkIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgd2Vlay5cblxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSh0aGlzLmRheSgpICUgNyA/IHdlZWtkYXkgOiB3ZWVrZGF5IC0gNyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSB8fCA3O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRXZWVrZGF5c1JlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIHdlZWtkYXlzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIHdlZWtkYXlzTWluUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c01pblJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVXZWVrZGF5c1BhcnNlICgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1pblBpZWNlcyA9IFtdLCBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLCBtb20sIG1pbnAsIHNob3J0cCwgbG9uZ3A7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgbWlucCA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICBzaG9ydHAgPSB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICBsb25ncCA9IHRoaXMud2Vla2RheXMobW9tLCAnJyk7XG4gICAgICAgICAgICBtaW5QaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgbWluUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaW5QaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIGhGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpIHx8IDI0O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdIJywgWydISCcsIDJdLCAwLCAnaG91cicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KTtcbiAgICBhZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdCk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtICh0b2tlbiwgbG93ZXJjYXNlKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0odGhpcy5ob3VycygpLCB0aGlzLm1pbnV0ZXMoKSwgbG93ZXJjYXNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWVyaWRpZW0oJ2EnLCB0cnVlKTtcbiAgICBtZXJpZGllbSgnQScsIGZhbHNlKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnaG91cicsICdoJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnaG91cicsIDEzKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGZ1bmN0aW9uIG1hdGNoTWVyaWRpZW0gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5fbWVyaWRpZW1QYXJzZTtcbiAgICB9XG5cbiAgICBhZGRSZWdleFRva2VuKCdhJywgIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0EnLCAgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignSCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2gnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdrJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignaGgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbigna2snLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbXNzJywgbWF0Y2g1dG82KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydIJywgJ0hIJ10sIEhPVVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydrJywgJ2trJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIga0lucHV0ID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBhcnJheVtIT1VSXSA9IGtJbnB1dCA9PT0gMjQgPyAwIDoga0lucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5faXNQbSA9IGNvbmZpZy5fbG9jYWxlLmlzUE0oaW5wdXQpO1xuICAgICAgICBjb25maWcuX21lcmlkaWVtID0gaW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2gnLCAnaGgnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgICAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlSXNQTSAoaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgICAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICAgICAgcmV0dXJuICgoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJyk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlID0gL1thcF1cXC4/bT9cXC4/L2k7XG4gICAgZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYW0nIDogJ0FNJztcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4gICAgLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgdGhleSB3YW50LiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW5cbiAgICAvLyBhIG5ldyB0aW1lem9uZSkgbWFrZXMgc2Vuc2UuIEFkZGluZy9zdWJ0cmFjdGluZyBob3VycyBkb2VzIG5vdCBmb2xsb3dcbiAgICAvLyB0aGlzIHJ1bGUuXG4gICAgdmFyIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG4gICAgdmFyIGJhc2VDb25maWcgPSB7XG4gICAgICAgIGNhbGVuZGFyOiBkZWZhdWx0Q2FsZW5kYXIsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQsXG4gICAgICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgICAgIG9yZGluYWw6IGRlZmF1bHRPcmRpbmFsLFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuXG4gICAgICAgIG1vbnRoczogZGVmYXVsdExvY2FsZU1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcblxuICAgICAgICB3ZWVrOiBkZWZhdWx0TG9jYWxlV2VlayxcblxuICAgICAgICB3ZWVrZGF5czogZGVmYXVsdExvY2FsZVdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcblxuICAgICAgICBtZXJpZGllbVBhcnNlOiBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZVxuICAgIH07XG5cbiAgICAvLyBpbnRlcm5hbCBzdG9yYWdlIGZvciBsb2NhbGUgY29uZmlnIGZpbGVzXG4gICAgdmFyIGxvY2FsZXMgPSB7fTtcbiAgICB2YXIgbG9jYWxlRmFtaWxpZXMgPSB7fTtcbiAgICB2YXIgZ2xvYmFsTG9jYWxlO1xuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG4gICAgfVxuXG4gICAgLy8gcGljayB0aGUgbG9jYWxlIGZyb20gdGhlIGFycmF5XG4gICAgLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbiAgICAvLyBzdWJzdHJpbmcgZnJvbSBtb3N0IHNwZWNpZmljIHRvIGxlYXN0LCBidXQgbW92ZSB0byB0aGUgbmV4dCBhcnJheSBpdGVtIGlmIGl0J3MgYSBtb3JlIHNwZWNpZmljIHZhcmlhbnQgdGhhbiB0aGUgY3VycmVudCByb290XG4gICAgZnVuY3Rpb24gY2hvb3NlTG9jYWxlKG5hbWVzKSB7XG4gICAgICAgIHZhciBpID0gMCwgaiwgbmV4dCwgbG9jYWxlLCBzcGxpdDtcblxuICAgICAgICB3aGlsZSAoaSA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7XG4gICAgICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICAgICAgbmV4dCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpICsgMV0pO1xuICAgICAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsO1xuICAgICAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShzcGxpdC5zbGljZSgwLCBqKS5qb2luKCctJykpO1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5sZW5ndGggPj0gaiAmJiBjb21wYXJlQXJyYXlzKHNwbGl0LCBuZXh0LCB0cnVlKSA+PSBqIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvL3RoZSBuZXh0IGFycmF5IGl0ZW0gaXMgYmV0dGVyIHRoYW4gYSBzaGFsbG93ZXIgc3Vic3RyaW5nIG9mIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICAgICAgdmFyIG9sZExvY2FsZSA9IG51bGw7XG4gICAgICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgICAgIGlmICghbG9jYWxlc1tuYW1lXSAmJiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgICAgICB2YXIgYWxpYXNlZFJlcXVpcmUgPSByZXF1aXJlO1xuICAgICAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlKCcuL2xvY2FsZS8nICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG9sZExvY2FsZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBsb2FkIGxvY2FsZSBhbmQgdGhlbiBzZXQgdGhlIGdsb2JhbCBsb2NhbGUuICBJZlxuICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4gICAgLy8gbG9jYWxlIGtleS5cbiAgICBmdW5jdGlvbiBnZXRTZXRHbG9iYWxMb2NhbGUgKGtleSwgdmFsdWVzKSB7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBjb25zb2xlICE9PSAgJ3VuZGVmaW5lZCcpICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgICAgICAgICAvL3dhcm4gdXNlciBpZiBhcmd1bWVudHMgYXJlIHBhc3NlZCBidXQgdGhlIGxvY2FsZSBjb3VsZCBub3QgYmUgc2V0XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTG9jYWxlICcgKyBrZXkgKyAgJyBub3QgZm91bmQuIERpZCB5b3UgZm9yZ2V0IHRvIGxvYWQgaXQ/Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVMb2NhbGUgKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLCBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZSgnZGVmaW5lTG9jYWxlT3ZlcnJpZGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcpIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbbmFtZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLl9jb25maWc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShjb25maWcucGFyZW50TG9jYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBuZXcgTG9jYWxlKG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZykpO1xuXG4gICAgICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZUxvY2FsZSh4Lm5hbWUsIHguY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgICAgICAvLyBjcmVhdGVkLCBzbyB3ZSB3b24ndCBlbmQgdXAgd2l0aCB0aGUgY2hpbGQgbG9jYWxlIHNldC5cbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcblxuXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHVzZWZ1bCBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLCB0bXBMb2NhbGUsIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICAvLyBNRVJHRVxuICAgICAgICAgICAgdG1wTG9jYWxlID0gbG9hZExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgIGlmICh0bXBMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IHRtcExvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgICAgIGxvY2FsZSA9IG5ldyBMb2NhbGUoY29uZmlnKTtcbiAgICAgICAgICAgIGxvY2FsZS5wYXJlbnRMb2NhbGUgPSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZTtcblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwYXNzIG51bGwgZm9yIGNvbmZpZyB0byB1bnVwZGF0ZSwgdXNlZnVsIGZvciB0ZXN0c1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxuICAgIGZ1bmN0aW9uIGdldExvY2FsZSAoa2V5KSB7XG4gICAgICAgIHZhciBsb2NhbGU7XG5cbiAgICAgICAgaWYgKGtleSAmJiBrZXkuX2xvY2FsZSAmJiBrZXkuX2xvY2FsZS5fYWJicikge1xuICAgICAgICAgICAga2V5ID0ga2V5Ll9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAgICAvL3Nob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBlbHNlXG4gICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleSA9IFtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNob29zZUxvY2FsZShrZXkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RMb2NhbGVzKCkge1xuICAgICAgICByZXR1cm4ga2V5cyhsb2NhbGVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93IChtKSB7XG4gICAgICAgIHZhciBvdmVyZmxvdztcbiAgICAgICAgdmFyIGEgPSBtLl9hO1xuXG4gICAgICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgICAgICBhW01PTlRIXSAgICAgICA8IDAgfHwgYVtNT05USF0gICAgICAgPiAxMSAgPyBNT05USCA6XG4gICAgICAgICAgICAgICAgYVtEQVRFXSAgICAgICAgPCAxIHx8IGFbREFURV0gICAgICAgID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pID8gREFURSA6XG4gICAgICAgICAgICAgICAgYVtIT1VSXSAgICAgICAgPCAwIHx8IGFbSE9VUl0gICAgICAgID4gMjQgfHwgKGFbSE9VUl0gPT09IDI0ICYmIChhW01JTlVURV0gIT09IDAgfHwgYVtTRUNPTkRdICE9PSAwIHx8IGFbTUlMTElTRUNPTkRdICE9PSAwKSkgPyBIT1VSIDpcbiAgICAgICAgICAgICAgICBhW01JTlVURV0gICAgICA8IDAgfHwgYVtNSU5VVEVdICAgICAgPiA1OSAgPyBNSU5VVEUgOlxuICAgICAgICAgICAgICAgIGFbU0VDT05EXSAgICAgIDwgMCB8fCBhW1NFQ09ORF0gICAgICA+IDU5ICA/IFNFQ09ORCA6XG4gICAgICAgICAgICAgICAgYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5ID8gTUlMTElTRUNPTkQgOlxuICAgICAgICAgICAgICAgIC0xO1xuXG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJiAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSkpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtzICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla2RheSAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gUGljayB0aGUgZmlyc3QgZGVmaW5lZCBvZiB0d28gb3IgdGhyZWUgYXJndW1lbnRzLlxuICAgIGZ1bmN0aW9uIGRlZmF1bHRzKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3VycmVudERhdGVBcnJheShjb25maWcpIHtcbiAgICAgICAgLy8gaG9va3MgaXMgYWN0dWFsbHkgdGhlIGV4cG9ydGVkIG1vbWVudCBvYmplY3RcbiAgICAgICAgdmFyIG5vd1ZhbHVlID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0VVRDTW9udGgoKSwgbm93VmFsdWUuZ2V0VVRDRGF0ZSgpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV07XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4gICAgLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbiAgICAvLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbiAgICAvLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tQXJyYXkgKGNvbmZpZykge1xuICAgICAgICB2YXIgaSwgZGF0ZSwgaW5wdXQgPSBbXSwgY3VycmVudERhdGUsIGV4cGVjdGVkV2Vla2RheSwgeWVhclRvVXNlO1xuXG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpO1xuXG4gICAgICAgIC8vY29tcHV0ZSBkYXkgb2YgdGhlIHllYXIgZnJvbSB3ZWVrcyBhbmQgd2Vla2RheXNcbiAgICAgICAgaWYgKGNvbmZpZy5fdyAmJiBjb25maWcuX2FbREFURV0gPT0gbnVsbCAmJiBjb25maWcuX2FbTU9OVEhdID09IG51bGwpIHtcbiAgICAgICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiB0aGUgZGF5IG9mIHRoZSB5ZWFyIGlzIHNldCwgZmlndXJlIG91dCB3aGF0IGl0IGlzXG4gICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKTtcblxuICAgICAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpIHx8IGNvbmZpZy5fZGF5T2ZZZWFyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoeWVhclRvVXNlLCAwLCBjb25maWcuX2RheU9mWWVhcik7XG4gICAgICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAgICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgICAgICAvLyAqIGlmIGRheSBvZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBtb250aCBhbmQgeWVhclxuICAgICAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgICAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDMgJiYgY29uZmlnLl9hW2ldID09IG51bGw7ICsraSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZVxuICAgICAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSAoY29uZmlnLl9hW2ldID09IG51bGwpID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgICAgIGlmIChjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW01JTlVURV0gPT09IDAgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDApIHtcbiAgICAgICAgICAgIGNvbmZpZy5fbmV4dERheSA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gY3JlYXRlVVRDRGF0ZSA6IGNyZWF0ZURhdGUpLmFwcGx5KG51bGwsIGlucHV0KTtcbiAgICAgICAgZXhwZWN0ZWRXZWVrZGF5ID0gY29uZmlnLl91c2VVVEMgPyBjb25maWcuX2QuZ2V0VVRDRGF5KCkgOiBjb25maWcuX2QuZ2V0RGF5KCk7XG5cbiAgICAgICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgICAgIC8vIHdpdGggcGFyc2Vab25lLlxuICAgICAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX25leHREYXkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIG1pc21hdGNoaW5nIGRheSBvZiB3ZWVrXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgdHlwZW9mIGNvbmZpZy5fdy5kICE9PSAndW5kZWZpbmVkJyAmJiBjb25maWcuX3cuZCAhPT0gZXhwZWN0ZWRXZWVrZGF5KSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgICAgICB2YXIgdywgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95LCB0ZW1wLCB3ZWVrZGF5T3ZlcmZsb3c7XG5cbiAgICAgICAgdyA9IGNvbmZpZy5fdztcbiAgICAgICAgaWYgKHcuR0cgIT0gbnVsbCB8fCB3LlcgIT0gbnVsbCB8fCB3LkUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZG93ID0gMTtcbiAgICAgICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gdGFrZSB0aGUgY3VycmVudCBpc29XZWVrWWVhciwgYnV0IHRoYXQgZGVwZW5kcyBvblxuICAgICAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBub3cpLlxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LkdHLCBjb25maWcuX2FbWUVBUl0sIHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhcik7XG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody5XLCAxKTtcbiAgICAgICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAxIHx8IHdlZWtkYXkgPiA3KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveTtcblxuICAgICAgICAgICAgdmFyIGN1cldlZWsgPSB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIGRvdywgZG95KTtcblxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCB3ZWVrLlxuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcudywgY3VyV2Vlay53ZWVrKTtcblxuICAgICAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gd2Vla2RheSAtLSBsb3cgZGF5IG51bWJlcnMgYXJlIGNvbnNpZGVyZWQgbmV4dCB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZDtcbiAgICAgICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlZWsgPCAxIHx8IHdlZWsgPiB3ZWVrc0luWWVhcih3ZWVrWWVhciwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtkYXkgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlzbyA4NjAxIHJlZ2V4XG4gICAgLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG4gICAgdmFyIGV4dGVuZGVkSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG4gICAgdmFyIGJhc2ljSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pKD86XFxkXFxkXFxkXFxkfFdcXGRcXGRcXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xuXG4gICAgdmFyIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy87XG5cbiAgICB2YXIgaXNvRGF0ZXMgPSBbXG4gICAgICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICAgICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAgICAgLy8gWVlZWU1NIGlzIE5PVCBhbGxvd2VkIGJ5IHRoZSBzdGFuZGFyZFxuICAgICAgICBbJ0dHR0dbV11XV0UnLCAvXFxkezR9V1xcZHszfS9dLFxuICAgICAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVlEREQnLCAvXFxkezd9L11cbiAgICBdO1xuXG4gICAgLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xuICAgIHZhciBpc29UaW1lcyA9IFtcbiAgICAgICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgICAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgICAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgICAgICBbJ0hIJywgL1xcZFxcZC9dXG4gICAgXTtcblxuICAgIHZhciBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKFxcLT9cXGQrKS9pO1xuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgICAgICB2YXIgaSwgbCxcbiAgICAgICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIG1hdGNoID0gZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHwgYmFzaWNJc29SZWdleC5leGVjKHN0cmluZyksXG4gICAgICAgICAgICBhbGxvd1RpbWUsIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQsIHR6Rm9ybWF0O1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcblxuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG4gICAgdmFyIHJmYzI4MjIgPSAvXig/OihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLD9cXHMpPyhcXGR7MSwyfSlcXHMoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKFxcZHsyLDR9KVxccyhcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKT9cXHMoPzooVVR8R01UfFtFQ01QXVtTRF1UKXwoW1p6XSl8KFsrLV1cXGR7NH0pKSQvO1xuXG4gICAgZnVuY3Rpb24gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyh5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICAgICAgdW50cnVuY2F0ZVllYXIoeWVhclN0ciksXG4gICAgICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0ciksXG4gICAgICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGhvdXJTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1pbnV0ZVN0ciwgMTApXG4gICAgICAgIF07XG5cbiAgICAgICAgaWYgKHNlY29uZFN0cikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoc2Vjb25kU3RyLCAxMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSB7XG4gICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQoeWVhclN0ciwgMTApO1xuICAgICAgICBpZiAoeWVhciA8PSA0OSkge1xuICAgICAgICAgICAgcmV0dXJuIDIwMDAgKyB5ZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKHllYXIgPD0gOTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gMTkwMCArIHllYXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHllYXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAgICAgICAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZSBhbmQgcmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9cXChbXildKlxcKXxbXFxuXFx0XS9nLCAnICcpLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpLnJlcGxhY2UoL15cXHNcXHMqLywgJycpLnJlcGxhY2UoL1xcc1xccyokLywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmICh3ZWVrZGF5U3RyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHRoZSB2YW5pbGxhIEpTIERhdGUgb2JqZWN0IHdpdGggYW4gaW5kZXBlbnRlbnQgZGF5LW9mLXdlZWsgY2hlY2suXG4gICAgICAgICAgICB2YXIgd2Vla2RheVByb3ZpZGVkID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgICAgICB3ZWVrZGF5QWN0dWFsID0gbmV3IERhdGUocGFyc2VkSW5wdXRbMF0sIHBhcnNlZElucHV0WzFdLCBwYXJzZWRJbnB1dFsyXSkuZ2V0RGF5KCk7XG4gICAgICAgICAgICBpZiAod2Vla2RheVByb3ZpZGVkICE9PSB3ZWVrZGF5QWN0dWFsKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIG9ic09mZnNldHMgPSB7XG4gICAgICAgIFVUOiAwLFxuICAgICAgICBHTVQ6IDAsXG4gICAgICAgIEVEVDogLTQgKiA2MCxcbiAgICAgICAgRVNUOiAtNSAqIDYwLFxuICAgICAgICBDRFQ6IC01ICogNjAsXG4gICAgICAgIENTVDogLTYgKiA2MCxcbiAgICAgICAgTURUOiAtNiAqIDYwLFxuICAgICAgICBNU1Q6IC03ICogNjAsXG4gICAgICAgIFBEVDogLTcgKiA2MCxcbiAgICAgICAgUFNUOiAtOCAqIDYwXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvYnNPZmZzZXQsIG1pbGl0YXJ5T2Zmc2V0LCBudW1PZmZzZXQpIHtcbiAgICAgICAgaWYgKG9ic09mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgICAgICAgfSBlbHNlIGlmIChtaWxpdGFyeU9mZnNldCkge1xuICAgICAgICAgICAgLy8gdGhlIG9ubHkgYWxsb3dlZCBtaWxpdGFyeSB0eiBpcyBaXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBobSA9IHBhcnNlSW50KG51bU9mZnNldCwgMTApO1xuICAgICAgICAgICAgdmFyIG0gPSBobSAlIDEwMCwgaCA9IChobSAtIG0pIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIGggKiA2MCArIG07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGFuZCB0aW1lIGZyb20gcmVmIDI4MjIgZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VkQXJyYXkgPSBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKG1hdGNoWzRdLCBtYXRjaFszXSwgbWF0Y2hbMl0sIG1hdGNoWzVdLCBtYXRjaFs2XSwgbWF0Y2hbN10pO1xuICAgICAgICAgICAgaWYgKCFjaGVja1dlZWtkYXkobWF0Y2hbMV0sIHBhcnNlZEFycmF5LCBjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25maWcuX2EgPSBwYXJzZWRBcnJheTtcbiAgICAgICAgICAgIGNvbmZpZy5fdHptID0gY2FsY3VsYXRlT2Zmc2V0KG1hdGNoWzhdLCBtYXRjaFs5XSwgbWF0Y2hbMTBdKTtcblxuICAgICAgICAgICAgY29uZmlnLl9kID0gY3JlYXRlVVRDRGF0ZS5hcHBseShudWxsLCBjb25maWcuX2EpO1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucmZjMjgyMiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0IG9yIGZhbGxiYWNrXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuXG4gICAgICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5hbCBhdHRlbXB0LCB1c2UgSW5wdXQgRmFsbGJhY2tcbiAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICB9XG5cbiAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCAnICtcbiAgICAgICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgICAgICdkaXNjb3VyYWdlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGFuIHVwY29taW5nIG1ham9yIHJlbGVhc2UuIFBsZWFzZSByZWZlciB0byAnICtcbiAgICAgICAgJ2h0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvanMtZGF0ZS8gZm9yIG1vcmUgaW5mby4nLFxuICAgICAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJykpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBJU08gc3RhbmRhcmRcbiAgICBob29rcy5JU09fODYwMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbiAgICBob29rcy5SRkNfMjgyMiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyB0byBhbm90aGVyIHBhcnQgb2YgdGhlIGNyZWF0aW9uIGZsb3cgdG8gcHJldmVudCBjaXJjdWxhciBkZXBzXG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLklTT184NjAxKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLl9hID0gW107XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgICAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgICAgICB2YXIgc3RyaW5nID0gJycgKyBjb25maWcuX2ksXG4gICAgICAgICAgICBpLCBwYXJzZWRJbnB1dCwgdG9rZW5zLCB0b2tlbiwgc2tpcHBlZCxcbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoID0gMDtcblxuICAgICAgICB0b2tlbnMgPSBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fCBbXSlbMF07XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygndG9rZW4nLCB0b2tlbiwgJ3BhcnNlZElucHV0JywgcGFyc2VkSW5wdXQsXG4gICAgICAgICAgICAvLyAgICAgICAgICdyZWdleCcsIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSk7XG4gICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgICAgIGlmIChza2lwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuXG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuY2hhcnNMZWZ0T3ZlciA9IHN0cmluZ0xlbmd0aCAtIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGg7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgXzEyaCBmbGFnIGlmIGhvdXIgaXMgPD0gMTJcbiAgICAgICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnBhcnNlZERhdGVQYXJ0cyA9IGNvbmZpZy5fYS5zbGljZSgwKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgICAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKGNvbmZpZy5fbG9jYWxlLCBjb25maWcuX2FbSE9VUl0sIGNvbmZpZy5fbWVyaWRpZW0pO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICBjaGVja092ZXJmbG93KGNvbmZpZyk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAgKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgdmFyIGlzUG07XG5cbiAgICAgICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubWVyaWRpZW1Ib3VyKGhvdXIsIG1lcmlkaWVtKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICAgICAgaXNQbSA9IGxvY2FsZS5pc1BNKG1lcmlkaWVtKTtcbiAgICAgICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3Qgc3VwcG9zZWQgdG8gaGFwcGVuXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGFycmF5IG9mIGZvcm1hdCBzdHJpbmdzXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgdGVtcENvbmZpZyxcbiAgICAgICAgICAgIGJlc3RNb21lbnQsXG5cbiAgICAgICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9mLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZy5fZi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoIWlzVmFsaWQodGVtcENvbmZpZykpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW55IGlucHV0IHRoYXQgd2FzIG5vdCBwYXJzZWQgYWRkIGEgcGVuYWx0eSBmb3IgdGhhdCBmb3JtYXRcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuY2hhcnNMZWZ0T3ZlcjtcblxuICAgICAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuc2NvcmUgPSBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgICAgIGlmIChzY29yZVRvQmVhdCA9PSBudWxsIHx8IGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHRlbmQoY29uZmlnLCBiZXN0TW9tZW50IHx8IHRlbXBDb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoY29uZmlnLl9pKTtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKFtpLnllYXIsIGkubW9udGgsIGkuZGF5IHx8IGkuZGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGcm9tQ29uZmlnIChjb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICAgICAgaWYgKHJlcy5fbmV4dERheSkge1xuICAgICAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICByZXMuX25leHREYXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVDb25maWcgKGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBmb3JtYXQgPSBjb25maWcuX2Y7XG5cbiAgICAgICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBnZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKHtudWxsSW5wdXQ6IHRydWV9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWcuX2kgPSBpbnB1dCA9IGNvbmZpZy5fbG9jYWxlLnByZXBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3coaW5wdXQpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9ICBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IG1hcChpbnB1dC5zbGljZSgwKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAvLyBmcm9tIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsT3JVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBpc1VUQykge1xuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGlmIChsb2NhbGUgPT09IHRydWUgfHwgbG9jYWxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RyaWN0ID0gbG9jYWxlO1xuICAgICAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChpc09iamVjdChpbnB1dCkgJiYgaXNPYmplY3RFbXB0eShpbnB1dCkpIHx8XG4gICAgICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgIGlucHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xuICAgICAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlO1xuICAgICAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgICAgICBjLl9sID0gbG9jYWxlO1xuICAgICAgICBjLl9pID0gaW5wdXQ7XG4gICAgICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgICAgIGMuX3N0cmljdCA9IHN0cmljdDtcblxuICAgICAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbCAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGZhbHNlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlTWluID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgdmFyIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXG4gICAgLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuICAgIC8vXG4gICAgLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxuICAgIC8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG4gICAgZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgICAgIHZhciByZXMsIGk7XG4gICAgICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgICAgICBtb21lbnRzID0gbW9tZW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG4gICAgZnVuY3Rpb24gbWluICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXggKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICsobmV3IERhdGUoKSk7XG4gICAgfTtcblxuICAgIHZhciBvcmRlcmluZyA9IFsneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsICdtaWxsaXNlY29uZCddO1xuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG0pIHtcbiAgICAgICAgICAgIGlmICghKGluZGV4T2YuY2FsbChvcmRlcmluZywga2V5KSAhPT0gLTEgJiYgKG1ba2V5XSA9PSBudWxsIHx8ICFpc05hTihtW2tleV0pKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlcmluZy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKG1bb3JkZXJpbmdbaV1dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gb25seSBhbGxvdyBub24taW50ZWdlcnMgZm9yIHNtYWxsZXN0IHVuaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oTmFOKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBEdXJhdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGR1cmF0aW9uKSxcbiAgICAgICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgICAgIG1vbnRocyA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCBub3JtYWxpemVkSW5wdXQuaXNvV2VlayB8fCAwLFxuICAgICAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgICAgIGhvdXJzID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDA7XG5cbiAgICAgICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgICAgIC8vIHJlcHJlc2VudGF0aW9uIGZvciBkYXRlQWRkUmVtb3ZlXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9ICttaWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgICAgIG1pbnV0ZXMgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGhvdXJzICogMTAwMCAqIDYwICogNjA7IC8vdXNpbmcgMTAwMCAqIDYwICogNjAgaW5zdGVhZCBvZiAzNmU1IHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjk3OFxuICAgICAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAgICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgICAgICB0aGlzLl9kYXlzID0gK2RheXMgK1xuICAgICAgICAgICAgd2Vla3MgKiA3O1xuICAgICAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRvIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZ1xuICAgICAgICAvLyB3aGljaCBtb250aHMgeW91IGFyZSBhcmUgdGFsa2luZyBhYm91dCwgc28gd2UgaGF2ZSB0byBzdG9yZVxuICAgICAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgICAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICtcbiAgICAgICAgICAgIHF1YXJ0ZXJzICogMyArXG4gICAgICAgICAgICB5ZWFycyAqIDEyO1xuXG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgICAgICB0aGlzLl9sb2NhbGUgPSBnZXRMb2NhbGUoKTtcblxuICAgICAgICB0aGlzLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic1JvdW5kIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKC0xICogbnVtYmVyKSAqIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIG9mZnNldCAodG9rZW4sIHNlcGFyYXRvcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgICAgICB2YXIgc2lnbiA9ICcrJztcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKyB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICsgc2VwYXJhdG9yICsgemVyb0ZpbGwofn4ob2Zmc2V0KSAlIDYwLCAyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KCdaJywgJzonKTtcbiAgICBvZmZzZXQoJ1paJywgJycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWicsICBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRSZWdleFRva2VuKCdaWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5fdHptID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyB0aW1lem9uZSBjaHVua2VyXG4gICAgLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4gICAgLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG4gICAgdmFyIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpO1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaGVyLCBzdHJpbmcpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKTtcblxuICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2h1bmsgICA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXTtcbiAgICAgICAgdmFyIHBhcnRzICAgPSAoY2h1bmsgKyAnJykubWF0Y2goY2h1bmtPZmZzZXQpIHx8IFsnLScsIDAsIDBdO1xuICAgICAgICB2YXIgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICAgICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgP1xuICAgICAgICAgIDAgOlxuICAgICAgICAgIHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGEgbW9tZW50IGZyb20gaW5wdXQsIHRoYXQgaXMgbG9jYWwvdXRjL3pvbmUgZXF1aXZhbGVudCB0byBtb2RlbC5cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgICAgIHZhciByZXMsIGRpZmY7XG4gICAgICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgICAgICBkaWZmID0gKGlzTW9tZW50KGlucHV0KSB8fCBpc0RhdGUoaW5wdXQpID8gaW5wdXQudmFsdWVPZigpIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpO1xuICAgICAgICAgICAgLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxuICAgICAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGVPZmZzZXQgKG0pIHtcbiAgICAgICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgICAgIHJldHVybiAtTWF0aC5yb3VuZChtLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkgLyAxNSkgKiAxNTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciBhIG1vbWVudCBpcyBtdXRhdGVkLlxuICAgIC8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuICAgIGhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8ga2VlcExvY2FsVGltZSA9IHRydWUgbWVhbnMgb25seSBjaGFuZ2UgdGhlIHRpbWV6b25lLCB3aXRob3V0XG4gICAgLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbiAgICAvLyA1OjMxOjI2ICswMjAwIEl0IGlzIHBvc3NpYmxlIHRoYXQgNTozMToyNiBkb2Vzbid0IGV4aXN0IHdpdGggb2Zmc2V0XG4gICAgLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLlxuICAgIC8vXG4gICAgLy8gS2VlcGluZyB0aGUgdGltZSBhY3R1YWxseSBhZGRzL3N1YnRyYWN0cyAob25lIGhvdXIpXG4gICAgLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0XG4gICAgLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuICAgIC8vIF9jaGFuZ2VJblByb2dyZXNzID09IHRydWUgY2FzZSwgdGhlbiB3ZSBoYXZlIHRvIGFkanVzdCwgYmVjYXVzZVxuICAgIC8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuXG4gICAgZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0IChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgKiA2MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgY3JlYXRlRHVyYXRpb24oaW5wdXQgLSBvZmZzZXQsICdtJyksIDEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gb2Zmc2V0IDogZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFpvbmUgKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gLWlucHV0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzVVRDKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChnZXREYXRlT2Zmc2V0KHRoaXMpLCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0ICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciB0Wm9uZSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hPZmZzZXQsIHRoaXMuX2kpO1xuICAgICAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0Wm9uZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldCAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0ID0gaW5wdXQgPyBjcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwO1xuXG4gICAgICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQgKCkge1xuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX2lzRFNUU2hpZnRlZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgICAgIGlmIChjLl9hKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWwgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0Y09mZnNldCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXhcbiAgICB2YXIgYXNwTmV0UmVnZXggPSAvXihcXC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKylcXDooXFxkKykoPzpcXDooXFxkKykoXFwuXFxkKik/KT8kLztcblxuICAgIC8vIGZyb20gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfZGF0ZV9kYXRlLmpzLnNvdXJjZS5odG1sXG4gICAgLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuICAgIC8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbiAgICB2YXIgaXNvUmVnZXggPSAvXigtfFxcKyk/UCg/OihbLStdP1swLTksLl0qKVkpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVcpPyg/OihbLStdP1swLTksLl0qKUQpPyg/OlQoPzooWy0rXT9bMC05LC5dKilIKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilTKT8pPyQvO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24gKGlucHV0LCBrZXkpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICAgICAgbWF0Y2ggPSBudWxsLFxuICAgICAgICAgICAgc2lnbixcbiAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgIGRpZmZSZXM7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBtcyA6IGlucHV0Ll9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICAgICAgZCAgOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgICAgICBNICA6IGlucHV0Ll9tb250aHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSBpbnB1dDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5ICA6IDAsXG4gICAgICAgICAgICAgICAgZCAgOiB0b0ludChtYXRjaFtEQVRFXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIGggIDogdG9JbnQobWF0Y2hbSE9VUl0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBtICA6IHRvSW50KG1hdGNoW01JTlVURV0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgcyAgOiB0b0ludChtYXRjaFtTRUNPTkRdKSAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIG1zIDogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5IDogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIE0gOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgdyA6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBkIDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGggOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgbSA6IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgICAgICBzIDogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiYgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLCBjcmVhdGVMb2NhbChkdXJhdGlvbi50bykpO1xuXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY3JlYXRlRHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG4gICAgY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvIChpbnAsIHNpZ24pIHtcbiAgICAgICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAgICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cbiAgICAgICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICAgICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuXG4gICAgICAgIHJlcy5tb250aHMgPSBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICtcbiAgICAgICAgICAgIChvdGhlci55ZWFyKCkgLSBiYXNlLnllYXIoKSkgKiAxMjtcbiAgICAgICAgaWYgKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKS5pc0FmdGVyKG90aGVyKSkge1xuICAgICAgICAgICAgLS1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9ICtvdGhlciAtICsoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpKTtcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIGlmICghKGJhc2UuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7bWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXIgPSBjbG9uZVdpdGhPZmZzZXQob3RoZXIsIGJhc2UpO1xuICAgICAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShvdGhlciwgYmFzZSk7XG4gICAgICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWRcbiAgICBmdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIGR1ciwgdG1wO1xuICAgICAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgICAgICBpZiAocGVyaW9kICE9PSBudWxsICYmICFpc05hTigrcGVyaW9kKSkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCAnbW9tZW50KCkuJyArIG5hbWUgICsgJyhwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBtb21lbnQoKS4nICsgbmFtZSArICcobnVtYmVyLCBwZXJpb2QpLiAnICtcbiAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgICAgIHRtcCA9IHZhbDsgdmFsID0gcGVyaW9kOyBwZXJpb2QgPSB0bXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbCA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gK3ZhbCA6IHZhbDtcbiAgICAgICAgICAgIGR1ciA9IGNyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0IChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZGF5cyA9IGFic1JvdW5kKGR1cmF0aW9uLl9kYXlzKSxcbiAgICAgICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgICAgICBpZiAobW9udGhzKSB7XG4gICAgICAgICAgICBzZXRNb250aChtb20sIGdldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXlzKSB7XG4gICAgICAgICAgICBzZXQkMShtb20sICdEYXRlJywgZ2V0KG1vbSwgJ0RhdGUnKSArIGRheXMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgbW9tLl9kLnNldFRpbWUobW9tLl9kLnZhbHVlT2YoKSArIG1pbGxpc2Vjb25kcyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQobW9tLCBkYXlzIHx8IG1vbnRocyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWRkICAgICAgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyk7XG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG4gICAgZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgICAgICB2YXIgZGlmZiA9IG15TW9tZW50LmRpZmYobm93LCAnZGF5cycsIHRydWUpO1xuICAgICAgICByZXR1cm4gZGlmZiA8IC02ID8gJ3NhbWVFbHNlJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDAgPyAnbGFzdERheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAxID8gJ3NhbWVEYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDcgPyAnbmV4dFdlZWsnIDogJ3NhbWVFbHNlJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhciQxICh0aW1lLCBmb3JtYXRzKSB7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY29tcGFyZSB0aGUgc3RhcnQgb2YgdG9kYXksIHZzIHRoaXMuXG4gICAgICAgIC8vIEdldHRpbmcgc3RhcnQtb2YtdG9kYXkgZGVwZW5kcyBvbiB3aGV0aGVyIHdlJ3JlIGxvY2FsL3V0Yy9vZmZzZXQgb3Igbm90LlxuICAgICAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICAgICAgc29kID0gY2xvbmVXaXRoT2Zmc2V0KG5vdywgdGhpcykuc3RhcnRPZignZGF5JyksXG4gICAgICAgICAgICBmb3JtYXQgPSBob29rcy5jYWxlbmRhckZvcm1hdCh0aGlzLCBzb2QpIHx8ICdzYW1lRWxzZSc7XG5cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdHMgJiYgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKSA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdykgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChvdXRwdXQgfHwgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0LCB0aGlzLCBjcmVhdGVMb2NhbChub3cpKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPiBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmV0d2VlbiAoZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgICAgICB2YXIgbG9jYWxGcm9tID0gaXNNb21lbnQoZnJvbSkgPyBmcm9tIDogY3JlYXRlTG9jYWwoZnJvbSksXG4gICAgICAgICAgICBsb2NhbFRvID0gaXNNb21lbnQodG8pID8gdG8gOiBjcmVhdGVMb2NhbCh0byk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsRnJvbS5pc1ZhbGlkKCkgJiYgbG9jYWxUby5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknO1xuICAgICAgICByZXR1cm4gKGluY2x1c2l2aXR5WzBdID09PSAnKCcgPyB0aGlzLmlzQWZ0ZXIobG9jYWxGcm9tLCB1bml0cykgOiAhdGhpcy5pc0JlZm9yZShsb2NhbEZyb20sIHVuaXRzKSkgJiZcbiAgICAgICAgICAgIChpbmNsdXNpdml0eVsxXSA9PT0gJyknID8gdGhpcy5pc0JlZm9yZShsb2NhbFRvLCB1bml0cykgOiAhdGhpcy5pc0FmdGVyKGxvY2FsVG8sIHVuaXRzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgICAgIGlucHV0TXM7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID09PSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpIDw9IGlucHV0TXMgJiYgaW5wdXRNcyA8PSB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQWZ0ZXIoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckJlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaWZmIChpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICAgICAgdmFyIHRoYXQsXG4gICAgICAgICAgICB6b25lRGVsdGEsXG4gICAgICAgICAgICBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAxMjsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMWUzOyBicmVhazsgLy8gMTAwMFxuICAgICAgICAgICAgY2FzZSAnbWludXRlJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDZlNDsgYnJlYWs7IC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnaG91cic6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA4NjRlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gNjA0OGU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGRlZmF1bHQ6IG91dHB1dCA9IHRoaXMgLSB0aGF0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzRmxvYXQgPyBvdXRwdXQgOiBhYnNGbG9vcihvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoRGlmZiAoYSwgYikge1xuICAgICAgICAvLyBkaWZmZXJlbmNlIGluIG1vbnRoc1xuICAgICAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIpICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgICAgICAvLyBiIGlzIGluIChhbmNob3IgLSAxIG1vbnRoLCBhbmNob3IgKyAxIG1vbnRoKVxuICAgICAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICAgICAgYW5jaG9yMiwgYWRqdXN0O1xuXG4gICAgICAgIGlmIChiIC0gYW5jaG9yIDwgMCkge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGVjayBmb3IgbmVnYXRpdmUgemVybywgcmV0dXJuIHplcm8gaWYgbmVnYXRpdmUgemVyb1xuICAgICAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCkgfHwgMDtcbiAgICB9XG5cbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJztcbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0VXRjID0gJ1lZWVktTU0tRERUSEg6bW06c3NbWl0nO1xuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmcoa2VlcE9mZnNldCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXRjID0ga2VlcE9mZnNldCAhPT0gdHJ1ZTtcbiAgICAgICAgdmFyIG0gPSB1dGMgPyB0aGlzLmNsb25lKCkudXRjKCkgOiB0aGlzO1xuICAgICAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCB1dGMgPyAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICAgICAgaWYgKHV0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSArIHRoaXMudXRjT2Zmc2V0KCkgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgnWicsIGZvcm1hdE1vbWVudChtLCAnWicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sIHV0YyA/ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIGh1bWFuIHJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbW9tZW50IHRoYXQgY2FuXG4gICAgICogYWxzbyBiZSBldmFsdWF0ZWQgdG8gZ2V0IGEgbmV3IG1vbWVudCB3aGljaCBpcyB0aGUgc2FtZVxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL3V0aWwuaHRtbCN1dGlsX2N1c3RvbV9pbnNwZWN0X2Z1bmN0aW9uX29uX29iamVjdHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuICdtb21lbnQuaW52YWxpZCgvKiAnICsgdGhpcy5faSArICcgKi8pJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnVuYyA9ICdtb21lbnQnO1xuICAgICAgICB2YXIgem9uZSA9ICcnO1xuICAgICAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJztcbiAgICAgICAgICAgIHpvbmUgPSAnWic7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSc7XG4gICAgICAgIHZhciB5ZWFyID0gKDAgPD0gdGhpcy55ZWFyKCkgJiYgdGhpcy55ZWFyKCkgPD0gOTk5OSkgPyAnWVlZWScgOiAnWVlZWVlZJztcbiAgICAgICAgdmFyIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgICAgIHZhciBzdWZmaXggPSB6b25lICsgJ1tcIildJztcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQocHJlZml4ICsgeWVhciArIGRhdGV0aW1lICsgc3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQgKGlucHV0U3RyaW5nKSB7XG4gICAgICAgIGlmICghaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgICAgIGlucHV0U3RyaW5nID0gdGhpcy5pc1V0YygpID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdE1vbWVudCh0aGlzLCBpbnB1dFN0cmluZyk7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbSAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe3RvOiB0aGlzLCBmcm9tOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbU5vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7ZnJvbTogdGhpcywgdG86IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b05vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICAvLyBJZiBwYXNzZWQgYSBsb2NhbGUga2V5LCBpdCB3aWxsIHNldCB0aGUgbG9jYWxlIGZvciB0aGlzXG4gICAgLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuICAgIC8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICBmdW5jdGlvbiBsb2NhbGUgKGtleSkge1xuICAgICAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobmV3TG9jYWxlRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRGF0YSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgdmFyIE1TX1BFUl9TRUNPTkQgPSAxMDAwO1xuICAgIHZhciBNU19QRVJfTUlOVVRFID0gNjAgKiBNU19QRVJfU0VDT05EO1xuICAgIHZhciBNU19QRVJfSE9VUiA9IDYwICogTVNfUEVSX01JTlVURTtcbiAgICB2YXIgTVNfUEVSXzQwMF9ZRUFSUyA9ICgzNjUgKiA0MDAgKyA5NykgKiAyNCAqIE1TX1BFUl9IT1VSO1xuXG4gICAgLy8gYWN0dWFsIG1vZHVsbyAtIGhhbmRsZXMgbmVnYXRpdmUgbnVtYmVycyAoZm9yIGRhdGVzIGJlZm9yZSAxOTcwKTpcbiAgICBmdW5jdGlvbiBtb2QkMShkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgICByZXR1cm4gKGRpdmlkZW5kICUgZGl2aXNvciArIGRpdmlzb3IpICUgZGl2aXNvcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbFN0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSwgbSwgZCkudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXRjU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyBEYXRlLlVUQyByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5LCBtLCBkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0T2YgKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSAtIHRoaXMubW9udGgoKSAlIDMsIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksIE1TX1BFUl9IT1VSKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZE9mICh1bml0cykge1xuICAgICAgICB2YXIgdGltZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCkgKyAxLCAwLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSAtIHRoaXMubW9udGgoKSAlIDMgKyAzLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgKyAxLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKSArIDcpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpICsgNykgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSArIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9IT1VSIC0gbW9kJDEodGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksIE1TX1BFUl9IT1VSKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9NSU5VVEUgLSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9TRUNPTkQgLSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsdWVPZiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kLnZhbHVlT2YoKSAtICgodGhpcy5fb2Zmc2V0IHx8IDApICogNjAwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaXggKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvRGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9BcnJheSAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFttLnllYXIoKSwgbS5tb250aCgpLCBtLmRhdGUoKSwgbS5ob3VyKCksIG0ubWludXRlKCksIG0uc2Vjb25kKCksIG0ubWlsbGlzZWNvbmQoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9PYmplY3QgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogbS55ZWFyKCksXG4gICAgICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICAgICAgaG91cnM6IG0uaG91cnMoKSxcbiAgICAgICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IG0ubWlsbGlzZWNvbmRzKClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgICAgICAvLyBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsXG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQyICgpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzICgpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkQXQgKCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlucHV0OiB0aGlzLl9pLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICAgICBpc1VUQzogdGhpcy5faXNVVEMsXG4gICAgICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuICh0b2tlbiwgZ2V0dGVyKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFt0b2tlbiwgdG9rZW4ubGVuZ3RoXSwgMCwgZ2V0dGVyKTtcbiAgICB9XG5cbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgICAgICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2dnJywgICAgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICAnaXNvV2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrWWVhcicsICdnZycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla1llYXInLCAnR0cnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtZZWFyJywgMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrWWVhcicsIDEpO1xuXG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdHJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignZycsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdnZycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHRycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2cnLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHRycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZ2dnJywgJ2dnZ2dnJywgJ0dHR0cnLCAnR0dHR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2cnLCAnR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCksXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICAgICAgaW5wdXQsIHRoaXMuaXNvV2VlaygpLCB0aGlzLmlzb1dlZWtkYXkoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIgKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyICgpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla3NUYXJnZXQ7XG4gICAgICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB3ZWVrID0gd2Vla3NUYXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyRGF0YSA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICAgICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgICAgIHRoaXMubW9udGgoZGF0ZS5nZXRVVENNb250aCgpKTtcbiAgICAgICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdxdWFydGVyJywgJ1EnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3F1YXJ0ZXInLCA3KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRRdWFydGVyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKSA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgdGhpcy5tb250aCgpICUgMyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RhdGUnLCAnRCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RhdGUnLCA5KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0QnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID9cbiAgICAgICAgICAobG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIHx8IGxvY2FsZS5fb3JkaW5hbFBhcnNlKSA6XG4gICAgICAgICAgbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydEJywgJ0REJ10sIERBVEUpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignREREJywgWydEREREJywgM10sICdERERvJywgJ2RheU9mWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXlPZlllYXInLCAnREREJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5T2ZZZWFyJywgNCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEREQnLCAgbWF0Y2gxdG8zKTtcbiAgICBhZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnREREJywgJ0REREQnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyIChpbnB1dCkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyID0gTWF0aC5yb3VuZCgodGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpIC0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ3llYXInKSkgLyA4NjRlNSkgKyAxO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IGRheU9mWWVhciA6IHRoaXMuYWRkKChpbnB1dCAtIGRheU9mWWVhciksICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ20nLCBbJ21tJywgMl0sIDAsICdtaW51dGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWludXRlJywgJ20nKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21pbnV0ZScsIDE0KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ20nLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnbScsICdtbSddLCBNSU5VVEUpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdzZWNvbmQnLCAncycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnc2Vjb25kJywgMTUpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigncycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDA7XG4gICAgfSk7XG5cblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWlsbGlzZWNvbmQnLCAnbXMnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21pbGxpc2Vjb25kJywgMTYpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUycsICAgIG1hdGNoMXRvMywgbWF0Y2gxKTtcbiAgICBhZGRSZWdleFRva2VuKCdTUycsICAgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTUycsICBtYXRjaDF0bzMsIG1hdGNoMyk7XG5cbiAgICB2YXIgdG9rZW47XG4gICAgZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDEwMDApO1xuICAgIH1cblxuICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgcGFyc2VNcyk7XG4gICAgfVxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaWxsaXNlY29uZCA9IG1ha2VHZXRTZXQoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd6JywgIDAsIDAsICd6b25lQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZUFiYnIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFpvbmVOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ0Nvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lJyA6ICcnO1xuICAgIH1cblxuICAgIHZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbiAgICBwcm90by5hZGQgICAgICAgICAgICAgICA9IGFkZDtcbiAgICBwcm90by5jYWxlbmRhciAgICAgICAgICA9IGNhbGVuZGFyJDE7XG4gICAgcHJvdG8uY2xvbmUgICAgICAgICAgICAgPSBjbG9uZTtcbiAgICBwcm90by5kaWZmICAgICAgICAgICAgICA9IGRpZmY7XG4gICAgcHJvdG8uZW5kT2YgICAgICAgICAgICAgPSBlbmRPZjtcbiAgICBwcm90by5mb3JtYXQgICAgICAgICAgICA9IGZvcm1hdDtcbiAgICBwcm90by5mcm9tICAgICAgICAgICAgICA9IGZyb207XG4gICAgcHJvdG8uZnJvbU5vdyAgICAgICAgICAgPSBmcm9tTm93O1xuICAgIHByb3RvLnRvICAgICAgICAgICAgICAgID0gdG87XG4gICAgcHJvdG8udG9Ob3cgICAgICAgICAgICAgPSB0b05vdztcbiAgICBwcm90by5nZXQgICAgICAgICAgICAgICA9IHN0cmluZ0dldDtcbiAgICBwcm90by5pbnZhbGlkQXQgICAgICAgICA9IGludmFsaWRBdDtcbiAgICBwcm90by5pc0FmdGVyICAgICAgICAgICA9IGlzQWZ0ZXI7XG4gICAgcHJvdG8uaXNCZWZvcmUgICAgICAgICAgPSBpc0JlZm9yZTtcbiAgICBwcm90by5pc0JldHdlZW4gICAgICAgICA9IGlzQmV0d2VlbjtcbiAgICBwcm90by5pc1NhbWUgICAgICAgICAgICA9IGlzU2FtZTtcbiAgICBwcm90by5pc1NhbWVPckFmdGVyICAgICA9IGlzU2FtZU9yQWZ0ZXI7XG4gICAgcHJvdG8uaXNTYW1lT3JCZWZvcmUgICAgPSBpc1NhbWVPckJlZm9yZTtcbiAgICBwcm90by5pc1ZhbGlkICAgICAgICAgICA9IGlzVmFsaWQkMjtcbiAgICBwcm90by5sYW5nICAgICAgICAgICAgICA9IGxhbmc7XG4gICAgcHJvdG8ubG9jYWxlICAgICAgICAgICAgPSBsb2NhbGU7XG4gICAgcHJvdG8ubG9jYWxlRGF0YSAgICAgICAgPSBsb2NhbGVEYXRhO1xuICAgIHByb3RvLm1heCAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWF4O1xuICAgIHByb3RvLm1pbiAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWluO1xuICAgIHByb3RvLnBhcnNpbmdGbGFncyAgICAgID0gcGFyc2luZ0ZsYWdzO1xuICAgIHByb3RvLnNldCAgICAgICAgICAgICAgID0gc3RyaW5nU2V0O1xuICAgIHByb3RvLnN0YXJ0T2YgICAgICAgICAgID0gc3RhcnRPZjtcbiAgICBwcm90by5zdWJ0cmFjdCAgICAgICAgICA9IHN1YnRyYWN0O1xuICAgIHByb3RvLnRvQXJyYXkgICAgICAgICAgID0gdG9BcnJheTtcbiAgICBwcm90by50b09iamVjdCAgICAgICAgICA9IHRvT2JqZWN0O1xuICAgIHByb3RvLnRvRGF0ZSAgICAgICAgICAgID0gdG9EYXRlO1xuICAgIHByb3RvLnRvSVNPU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmc7XG4gICAgcHJvdG8uaW5zcGVjdCAgICAgICAgICAgPSBpbnNwZWN0O1xuICAgIHByb3RvLnRvSlNPTiAgICAgICAgICAgID0gdG9KU09OO1xuICAgIHByb3RvLnRvU3RyaW5nICAgICAgICAgID0gdG9TdHJpbmc7XG4gICAgcHJvdG8udW5peCAgICAgICAgICAgICAgPSB1bml4O1xuICAgIHByb3RvLnZhbHVlT2YgICAgICAgICAgID0gdmFsdWVPZjtcbiAgICBwcm90by5jcmVhdGlvbkRhdGEgICAgICA9IGNyZWF0aW9uRGF0YTtcbiAgICBwcm90by55ZWFyICAgICAgID0gZ2V0U2V0WWVhcjtcbiAgICBwcm90by5pc0xlYXBZZWFyID0gZ2V0SXNMZWFwWWVhcjtcbiAgICBwcm90by53ZWVrWWVhciAgICA9IGdldFNldFdlZWtZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG4gICAgcHJvdG8ucXVhcnRlciA9IHByb3RvLnF1YXJ0ZXJzID0gZ2V0U2V0UXVhcnRlcjtcbiAgICBwcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xuICAgIHByb3RvLmRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGg7XG4gICAgcHJvdG8ud2VlayAgICAgICAgICAgPSBwcm90by53ZWVrcyAgICAgICAgPSBnZXRTZXRXZWVrO1xuICAgIHByb3RvLmlzb1dlZWsgICAgICAgID0gcHJvdG8uaXNvV2Vla3MgICAgID0gZ2V0U2V0SVNPV2VlaztcbiAgICBwcm90by53ZWVrc0luWWVhciAgICA9IGdldFdlZWtzSW5ZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG4gICAgcHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG4gICAgcHJvdG8uZGF5ICAgICAgICA9IHByb3RvLmRheXMgICAgICAgICAgICAgPSBnZXRTZXREYXlPZldlZWs7XG4gICAgcHJvdG8ud2Vla2RheSAgICA9IGdldFNldExvY2FsZURheU9mV2VlaztcbiAgICBwcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xuICAgIHByb3RvLmRheU9mWWVhciAgPSBnZXRTZXREYXlPZlllYXI7XG4gICAgcHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcbiAgICBwcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuICAgIHByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG4gICAgcHJvdG8ubWlsbGlzZWNvbmQgPSBwcm90by5taWxsaXNlY29uZHMgPSBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBwcm90by51dGNPZmZzZXQgICAgICAgICAgICA9IGdldFNldE9mZnNldDtcbiAgICBwcm90by51dGMgICAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvVVRDO1xuICAgIHByb3RvLmxvY2FsICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbiAgICBwcm90by5wYXJzZVpvbmUgICAgICAgICAgICA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xuICAgIHByb3RvLmhhc0FsaWduZWRIb3VyT2Zmc2V0ID0gaGFzQWxpZ25lZEhvdXJPZmZzZXQ7XG4gICAgcHJvdG8uaXNEU1QgICAgICAgICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbiAgICBwcm90by5pc0xvY2FsICAgICAgICAgICAgICA9IGlzTG9jYWw7XG4gICAgcHJvdG8uaXNVdGNPZmZzZXQgICAgICAgICAgPSBpc1V0Y09mZnNldDtcbiAgICBwcm90by5pc1V0YyAgICAgICAgICAgICAgICA9IGlzVXRjO1xuICAgIHByb3RvLmlzVVRDICAgICAgICAgICAgICAgID0gaXNVdGM7XG4gICAgcHJvdG8uem9uZUFiYnIgPSBnZXRab25lQWJicjtcbiAgICBwcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuICAgIHByb3RvLmRhdGVzICA9IGRlcHJlY2F0ZSgnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLCBnZXRTZXREYXlPZk1vbnRoKTtcbiAgICBwcm90by5tb250aHMgPSBkZXByZWNhdGUoJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsIGdldFNldE1vbnRoKTtcbiAgICBwcm90by55ZWFycyAgPSBkZXByZWNhdGUoJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQnLCBnZXRTZXRZZWFyKTtcbiAgICBwcm90by56b25lICAgPSBkZXByZWNhdGUoJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJywgZ2V0U2V0Wm9uZSk7XG4gICAgcHJvdG8uaXNEU1RTaGlmdGVkID0gZGVwcmVjYXRlKCdpc0RTVFNoaWZ0ZWQgaXMgZGVwcmVjYXRlZC4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZHN0LXNoaWZ0ZWQvIGZvciBtb3JlIGluZm9ybWF0aW9uJywgaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkKTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVuaXggKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluWm9uZSAoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZVBhcnNlUG9zdEZvcm1hdCAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDEgPSBMb2NhbGUucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMS5jYWxlbmRhciAgICAgICAgPSBjYWxlbmRhcjtcbiAgICBwcm90byQxLmxvbmdEYXRlRm9ybWF0ICA9IGxvbmdEYXRlRm9ybWF0O1xuICAgIHByb3RvJDEuaW52YWxpZERhdGUgICAgID0gaW52YWxpZERhdGU7XG4gICAgcHJvdG8kMS5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xuICAgIHByb3RvJDEucHJlcGFyc2UgICAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucG9zdGZvcm1hdCAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucmVsYXRpdmVUaW1lICAgID0gcmVsYXRpdmVUaW1lO1xuICAgIHByb3RvJDEucGFzdEZ1dHVyZSAgICAgID0gcGFzdEZ1dHVyZTtcbiAgICBwcm90byQxLnNldCAgICAgICAgICAgICA9IHNldDtcblxuICAgIHByb3RvJDEubW9udGhzICAgICAgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzO1xuICAgIHByb3RvJDEubW9udGhzU2hvcnQgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzU2hvcnQ7XG4gICAgcHJvdG8kMS5tb250aHNQYXJzZSAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNQYXJzZTtcbiAgICBwcm90byQxLm1vbnRoc1JlZ2V4ICAgICAgID0gbW9udGhzUmVnZXg7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ICA9IG1vbnRoc1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrID0gbG9jYWxlV2VlaztcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG4gICAgcHJvdG8kMS5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5cyAgICAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5cztcbiAgICBwcm90byQxLndlZWtkYXlzTWluICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzTWluO1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydCAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNTaG9ydDtcbiAgICBwcm90byQxLndlZWtkYXlzUGFyc2UgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbiAgICBwcm90byQxLndlZWtkYXlzUmVnZXggICAgICAgPSAgICAgICAgd2Vla2RheXNSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCAgPSAgICAgICAgd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNNaW5SZWdleCAgICA9ICAgICAgICB3ZWVrZGF5c01pblJlZ2V4O1xuXG4gICAgcHJvdG8kMS5pc1BNID0gbG9jYWxlSXNQTTtcbiAgICBwcm90byQxLm1lcmlkaWVtID0gbG9jYWxlTWVyaWRpZW07XG5cbiAgICBmdW5jdGlvbiBnZXQkMSAoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG4gICAgICAgIHZhciB1dGMgPSBjcmVhdGVVVEMoKS5zZXQoc2V0dGVyLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzSW1wbCAoZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgaSwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLy8gKClcbiAgICAvLyAoNSlcbiAgICAvLyAoZm10LCA1KVxuICAgIC8vIChmbXQpXG4gICAgLy8gKHRydWUpXG4gICAgLy8gKHRydWUsIDUpXG4gICAgLy8gKHRydWUsIGZtdCwgNSlcbiAgICAvLyAodHJ1ZSwgZm10KVxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c0ltcGwgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGxvY2FsZVNvcnRlZDtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgICAgICBzaGlmdCA9IGxvY2FsZVNvcnRlZCA/IGxvY2FsZS5fd2Vlay5kb3cgOiAwO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCAoaW5kZXggKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzIChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc1Nob3J0IChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXMgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5cycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c1Nob3J0IChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbiAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzTWluJyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0R2xvYmFsTG9jYWxlKCdlbicsIHtcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0b0ludChudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICBob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGdldFNldEdsb2JhbExvY2FsZSk7XG4gICAgaG9va3MubGFuZ0RhdGEgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4nLCBnZXRMb2NhbGUpO1xuXG4gICAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIGFicyAoKSB7XG4gICAgICAgIHZhciBkYXRhICAgICAgICAgICA9IHRoaXMuX2RhdGE7XG5cbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpO1xuICAgICAgICB0aGlzLl9kYXlzICAgICAgICAgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgICAgICB0aGlzLl9tb250aHMgICAgICAgPSBtYXRoQWJzKHRoaXMuX21vbnRocyk7XG5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgID0gbWF0aEFicyhkYXRhLm1pbGxpc2Vjb25kcyk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyAgICAgICA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICAgICAgZGF0YS5taW51dGVzICAgICAgID0gbWF0aEFicyhkYXRhLm1pbnV0ZXMpO1xuICAgICAgICBkYXRhLmhvdXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEuaG91cnMpO1xuICAgICAgICBkYXRhLm1vbnRocyAgICAgICAgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICAgICAgZGF0YS55ZWFycyAgICAgICAgID0gbWF0aEFicyhkYXRhLnllYXJzKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdCQxIChkdXJhdGlvbiwgaW5wdXQsIHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKTtcblxuICAgICAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLl9kYXlzICAgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX2RheXM7XG4gICAgICAgIGR1cmF0aW9uLl9tb250aHMgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX21vbnRocztcblxuICAgICAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIGFkZCgxLCAncycpIG9yIGFkZChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBhZGQkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgMSk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBzdWJ0cmFjdCQxIChpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAtMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzQ2VpbCAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnViYmxlICgpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcbiAgICAgICAgdmFyIGRheXMgICAgICAgICA9IHRoaXMuX2RheXM7XG4gICAgICAgIHZhciBtb250aHMgICAgICAgPSB0aGlzLl9tb250aHM7XG4gICAgICAgIHZhciBkYXRhICAgICAgICAgPSB0aGlzLl9kYXRhO1xuICAgICAgICB2YXIgc2Vjb25kcywgbWludXRlcywgaG91cnMsIHllYXJzLCBtb250aHNGcm9tRGF5cztcblxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbWl4IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMsIGJ1YmJsZSBkb3duIGZpcnN0XG4gICAgICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgICAgICBpZiAoISgobWlsbGlzZWNvbmRzID49IDAgJiYgZGF5cyA+PSAwICYmIG1vbnRocyA+PSAwKSB8fFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPD0gMCAmJiBkYXlzIDw9IDAgJiYgbW9udGhzIDw9IDApKSkge1xuICAgICAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICAgICAgZGF5cyA9IDA7XG4gICAgICAgICAgICBtb250aHMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGJ1YmJsZXMgdXAgdmFsdWVzLCBzZWUgdGhlIHRlc3RzIGZvclxuICAgICAgICAvLyBleGFtcGxlcyBvZiB3aGF0IHRoYXQgbWVhbnMuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgICAgICBzZWNvbmRzICAgICAgICAgICA9IGFic0Zsb29yKG1pbGxpc2Vjb25kcyAvIDEwMDApO1xuICAgICAgICBkYXRhLnNlY29uZHMgICAgICA9IHNlY29uZHMgJSA2MDtcblxuICAgICAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGRhdGEubWludXRlcyAgICAgID0gbWludXRlcyAlIDYwO1xuXG4gICAgICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgZGF0YS5ob3VycyAgICAgICAgPSBob3VycyAlIDI0O1xuXG4gICAgICAgIGRheXMgKz0gYWJzRmxvb3IoaG91cnMgLyAyNCk7XG5cbiAgICAgICAgLy8gY29udmVydCBkYXlzIHRvIG1vbnRoc1xuICAgICAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgICAgIG1vbnRocyArPSBtb250aHNGcm9tRGF5cztcbiAgICAgICAgZGF5cyAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICBkYXRhLmRheXMgICA9IGRheXM7XG4gICAgICAgIGRhdGEubW9udGhzID0gbW9udGhzO1xuICAgICAgICBkYXRhLnllYXJzICA9IHllYXJzO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNUb01vbnRocyAoZGF5cykge1xuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDEyIG1vbnRocyA9PT0gNDgwMFxuICAgICAgICByZXR1cm4gZGF5cyAqIDQ4MDAgLyAxNDYwOTc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzVG9EYXlzIChtb250aHMpIHtcbiAgICAgICAgLy8gdGhlIHJldmVyc2Ugb2YgZGF5c1RvTW9udGhzXG4gICAgICAgIHJldHVybiBtb250aHMgKiAxNDYwOTcgLyA0ODAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzICh1bml0cykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXlzO1xuICAgICAgICB2YXIgbW9udGhzO1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3F1YXJ0ZXInIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMgKyBkYXlzVG9Nb250aHMoZGF5cyk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGgnOiAgIHJldHVybiBtb250aHM7XG4gICAgICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6IHJldHVybiBtb250aHMgLyAzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXInOiAgICByZXR1cm4gbW9udGhzIC8gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3dlZWsnICAgOiByZXR1cm4gZGF5cyAvIDcgICAgICsgbWlsbGlzZWNvbmRzIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnaG91cicgICA6IHJldHVybiBkYXlzICogMjQgICAgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZScgOiByZXR1cm4gZGF5cyAqIDE0NDAgICsgbWlsbGlzZWNvbmRzIC8gNmU0O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAvLyBNYXRoLmZsb29yIHByZXZlbnRzIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIGhlcmVcbiAgICAgICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6IHJldHVybiBNYXRoLmZsb29yKGRheXMgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSB0aGlzLmFzKCdtcycpP1xuICAgIGZ1bmN0aW9uIHZhbHVlT2YkMSAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICB0aGlzLl9kYXlzICogODY0ZTUgK1xuICAgICAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgICAgICB0b0ludCh0aGlzLl9tb250aHMgLyAxMikgKiAzMTUzNmU2XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUFzIChhbGlhcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbiAgICB2YXIgYXNTZWNvbmRzICAgICAgPSBtYWtlQXMoJ3MnKTtcbiAgICB2YXIgYXNNaW51dGVzICAgICAgPSBtYWtlQXMoJ20nKTtcbiAgICB2YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbiAgICB2YXIgYXNEYXlzICAgICAgICAgPSBtYWtlQXMoJ2QnKTtcbiAgICB2YXIgYXNXZWVrcyAgICAgICAgPSBtYWtlQXMoJ3cnKTtcbiAgICB2YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbiAgICB2YXIgYXNRdWFydGVycyAgICAgPSBtYWtlQXMoJ1EnKTtcbiAgICB2YXIgYXNZZWFycyAgICAgICAgPSBtYWtlQXMoJ3knKTtcblxuICAgIGZ1bmN0aW9uIGNsb25lJDEgKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0JDIgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzW3VuaXRzICsgJ3MnXSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5fZGF0YVtuYW1lXSA6IE5hTjtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyk7XG4gICAgdmFyIHNlY29uZHMgICAgICA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKTtcbiAgICB2YXIgbWludXRlcyAgICAgID0gbWFrZUdldHRlcignbWludXRlcycpO1xuICAgIHZhciBob3VycyAgICAgICAgPSBtYWtlR2V0dGVyKCdob3VycycpO1xuICAgIHZhciBkYXlzICAgICAgICAgPSBtYWtlR2V0dGVyKCdkYXlzJyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IG1ha2VHZXR0ZXIoJ21vbnRocycpO1xuICAgIHZhciB5ZWFycyAgICAgICAgPSBtYWtlR2V0dGVyKCd5ZWFycycpO1xuXG4gICAgZnVuY3Rpb24gd2Vla3MgKCkge1xuICAgICAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbiAgICB9XG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xuICAgIHZhciB0aHJlc2hvbGRzID0ge1xuICAgICAgICBzczogNDQsICAgICAgICAgLy8gYSBmZXcgc2Vjb25kcyB0byBzZWNvbmRzXG4gICAgICAgIHMgOiA0NSwgICAgICAgICAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgICAgICBtIDogNDUsICAgICAgICAgLy8gbWludXRlcyB0byBob3VyXG4gICAgICAgIGggOiAyMiwgICAgICAgICAvLyBob3VycyB0byBkYXlcbiAgICAgICAgZCA6IDI2LCAgICAgICAgIC8vIGRheXMgdG8gbW9udGhcbiAgICAgICAgTSA6IDExICAgICAgICAgIC8vIG1vbnRocyB0byB5ZWFyXG4gICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lJDEgKHBvc05lZ0R1cmF0aW9uLCB3aXRob3V0U3VmZml4LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpO1xuICAgICAgICB2YXIgc2Vjb25kcyAgPSByb3VuZChkdXJhdGlvbi5hcygncycpKTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSk7XG4gICAgICAgIHZhciBob3VycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdoJykpO1xuICAgICAgICB2YXIgZGF5cyAgICAgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKTtcbiAgICAgICAgdmFyIG1vbnRocyAgID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSk7XG4gICAgICAgIHZhciB5ZWFycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCd5JykpO1xuXG4gICAgICAgIHZhciBhID0gc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdICB8fFxuICAgICAgICAgICAgICAgIHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgICAmJiBbJ3NzJywgc2Vjb25kc10gfHxcbiAgICAgICAgICAgICAgICBtaW51dGVzIDw9IDEgICAgICAgICAgICAgJiYgWydtJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgbWludXRlcyA8IHRocmVzaG9sZHMubSAgICYmIFsnbW0nLCBtaW51dGVzXSB8fFxuICAgICAgICAgICAgICAgIGhvdXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2gnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBob3VycyAgIDwgdGhyZXNob2xkcy5oICAgJiYgWydoaCcsIGhvdXJzXSAgIHx8XG4gICAgICAgICAgICAgICAgZGF5cyAgICA8PSAxICAgICAgICAgICAgICYmIFsnZCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIGRheXMgICAgPCB0aHJlc2hvbGRzLmQgICAmJiBbJ2RkJywgZGF5c10gICAgfHxcbiAgICAgICAgICAgICAgICBtb250aHMgIDw9IDEgICAgICAgICAgICAgJiYgWydNJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgbW9udGhzICA8IHRocmVzaG9sZHMuTSAgICYmIFsnTU0nLCBtb250aHNdICB8fFxuICAgICAgICAgICAgICAgIHllYXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ3knXSAgICAgICAgICAgfHwgWyd5eScsIHllYXJzXTtcblxuICAgICAgICBhWzJdID0gd2l0aG91dFN1ZmZpeDtcbiAgICAgICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgICAgIGFbNF0gPSBsb2NhbGU7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRlVGltZUFnby5hcHBseShudWxsLCBhKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IHRoZSByb3VuZGluZyBmdW5jdGlvbiBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmcgKHJvdW5kaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Yocm91bmRpbmdGdW5jdGlvbikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJvdW5kID0gcm91bmRpbmdGdW5jdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQgKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICAgICAgaWYgKHRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgICAgIH1cbiAgICAgICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7XG4gICAgICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICAgICAgdGhyZXNob2xkcy5zcyA9IGxpbWl0IC0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodW1hbml6ZSAod2l0aFN1ZmZpeCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgdmFyIG91dHB1dCA9IHJlbGF0aXZlVGltZSQxKHRoaXMsICF3aXRoU3VmZml4LCBsb2NhbGUpO1xuXG4gICAgICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2NhbGUucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhYnMkMSA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gc2lnbih4KSB7XG4gICAgICAgIHJldHVybiAoKHggPiAwKSAtICh4IDwgMCkpIHx8ICt4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nJDEoKSB7XG4gICAgICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgICAgIC8vICAqIG1pbGxpc2Vjb25kcyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgaG91cnNcbiAgICAgICAgLy8gICogZGF5cyBkbyBub3QgYnViYmxlIGF0IGFsbFxuICAgICAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGVyZSBpcyBubyBjb250ZXh0LWZyZWUgY29udmVyc2lvbiBiZXR3ZWVuIGhvdXJzIGFuZCBkYXlzXG4gICAgICAgIC8vICh0aGluayBvZiBjbG9jayBjaGFuZ2VzKVxuICAgICAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWNvbmRzID0gYWJzJDEodGhpcy5fbWlsbGlzZWNvbmRzKSAvIDEwMDA7XG4gICAgICAgIHZhciBkYXlzICAgICAgICAgPSBhYnMkMSh0aGlzLl9kYXlzKTtcbiAgICAgICAgdmFyIG1vbnRocyAgICAgICA9IGFicyQxKHRoaXMuX21vbnRocyk7XG4gICAgICAgIHZhciBtaW51dGVzLCBob3VycywgeWVhcnM7XG5cbiAgICAgICAgLy8gMzYwMCBzZWNvbmRzIC0+IDYwIG1pbnV0ZXMgLT4gMSBob3VyXG4gICAgICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBzZWNvbmRzICU9IDYwO1xuICAgICAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cblxuICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qc1xuICAgICAgICB2YXIgWSA9IHllYXJzO1xuICAgICAgICB2YXIgTSA9IG1vbnRocztcbiAgICAgICAgdmFyIEQgPSBkYXlzO1xuICAgICAgICB2YXIgaCA9IGhvdXJzO1xuICAgICAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgICAgIHZhciBzID0gc2Vjb25kcyA/IHNlY29uZHMudG9GaXhlZCgzKS5yZXBsYWNlKC9cXC4/MCskLywgJycpIDogJyc7XG4gICAgICAgIHZhciB0b3RhbCA9IHRoaXMuYXNTZWNvbmRzKCk7XG5cbiAgICAgICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgc2FtZSBhcyBDIydzIChOb2RhKSBhbmQgcHl0aG9uIChpc29kYXRlKS4uLlxuICAgICAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKVxuICAgICAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdGFsU2lnbiA9IHRvdGFsIDwgMCA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgZGF5c1NpZ24gPSBzaWduKHRoaXMuX2RheXMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgaG1zU2lnbiA9IHNpZ24odGhpcy5fbWlsbGlzZWNvbmRzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcblxuICAgICAgICByZXR1cm4gdG90YWxTaWduICsgJ1AnICtcbiAgICAgICAgICAgIChZID8geW1TaWduICsgWSArICdZJyA6ICcnKSArXG4gICAgICAgICAgICAoTSA/IHltU2lnbiArIE0gKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKEQgPyBkYXlzU2lnbiArIEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAgICAgKChoIHx8IG0gfHwgcykgPyAnVCcgOiAnJykgK1xuICAgICAgICAgICAgKGggPyBobXNTaWduICsgaCArICdIJyA6ICcnKSArXG4gICAgICAgICAgICAobSA/IGhtc1NpZ24gKyBtICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChzID8gaG1zU2lnbiArIHMgKyAnUycgOiAnJyk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbiAgICBwcm90byQyLmlzVmFsaWQgICAgICAgID0gaXNWYWxpZCQxO1xuICAgIHByb3RvJDIuYWJzICAgICAgICAgICAgPSBhYnM7XG4gICAgcHJvdG8kMi5hZGQgICAgICAgICAgICA9IGFkZCQxO1xuICAgIHByb3RvJDIuc3VidHJhY3QgICAgICAgPSBzdWJ0cmFjdCQxO1xuICAgIHByb3RvJDIuYXMgICAgICAgICAgICAgPSBhcztcbiAgICBwcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5hc1NlY29uZHMgICAgICA9IGFzU2Vjb25kcztcbiAgICBwcm90byQyLmFzTWludXRlcyAgICAgID0gYXNNaW51dGVzO1xuICAgIHByb3RvJDIuYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xuICAgIHByb3RvJDIuYXNEYXlzICAgICAgICAgPSBhc0RheXM7XG4gICAgcHJvdG8kMi5hc1dlZWtzICAgICAgICA9IGFzV2Vla3M7XG4gICAgcHJvdG8kMi5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xuICAgIHByb3RvJDIuYXNRdWFydGVycyAgICAgPSBhc1F1YXJ0ZXJzO1xuICAgIHByb3RvJDIuYXNZZWFycyAgICAgICAgPSBhc1llYXJzO1xuICAgIHByb3RvJDIudmFsdWVPZiAgICAgICAgPSB2YWx1ZU9mJDE7XG4gICAgcHJvdG8kMi5fYnViYmxlICAgICAgICA9IGJ1YmJsZTtcbiAgICBwcm90byQyLmNsb25lICAgICAgICAgID0gY2xvbmUkMTtcbiAgICBwcm90byQyLmdldCAgICAgICAgICAgID0gZ2V0JDI7XG4gICAgcHJvdG8kMi5taWxsaXNlY29uZHMgICA9IG1pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLnNlY29uZHMgICAgICAgID0gc2Vjb25kcztcbiAgICBwcm90byQyLm1pbnV0ZXMgICAgICAgID0gbWludXRlcztcbiAgICBwcm90byQyLmhvdXJzICAgICAgICAgID0gaG91cnM7XG4gICAgcHJvdG8kMi5kYXlzICAgICAgICAgICA9IGRheXM7XG4gICAgcHJvdG8kMi53ZWVrcyAgICAgICAgICA9IHdlZWtzO1xuICAgIHByb3RvJDIubW9udGhzICAgICAgICAgPSBtb250aHM7XG4gICAgcHJvdG8kMi55ZWFycyAgICAgICAgICA9IHllYXJzO1xuICAgIHByb3RvJDIuaHVtYW5pemUgICAgICAgPSBodW1hbml6ZTtcbiAgICBwcm90byQyLnRvSVNPU3RyaW5nICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvSlNPTiAgICAgICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLmxvY2FsZSAgICAgICAgID0gbG9jYWxlO1xuICAgIHByb3RvJDIubG9jYWxlRGF0YSAgICAgPSBsb2NhbGVEYXRhO1xuXG4gICAgcHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZSgndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLCB0b0lTT1N0cmluZyQxKTtcbiAgICBwcm90byQyLmxhbmcgPSBsYW5nO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd4JywgMCwgMCwgJ3ZhbHVlT2YnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKTtcbiAgICBhZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQsIDEwKSAqIDEwMDApO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuXG4gICAgaG9va3MudmVyc2lvbiA9ICcyLjI0LjAnO1xuXG4gICAgc2V0SG9va0NhbGxiYWNrKGNyZWF0ZUxvY2FsKTtcblxuICAgIGhvb2tzLmZuICAgICAgICAgICAgICAgICAgICA9IHByb3RvO1xuICAgIGhvb2tzLm1pbiAgICAgICAgICAgICAgICAgICA9IG1pbjtcbiAgICBob29rcy5tYXggICAgICAgICAgICAgICAgICAgPSBtYXg7XG4gICAgaG9va3Mubm93ICAgICAgICAgICAgICAgICAgID0gbm93O1xuICAgIGhvb2tzLnV0YyAgICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVUQztcbiAgICBob29rcy51bml4ICAgICAgICAgICAgICAgICAgPSBjcmVhdGVVbml4O1xuICAgIGhvb2tzLm1vbnRocyAgICAgICAgICAgICAgICA9IGxpc3RNb250aHM7XG4gICAgaG9va3MuaXNEYXRlICAgICAgICAgICAgICAgID0gaXNEYXRlO1xuICAgIGhvb2tzLmxvY2FsZSAgICAgICAgICAgICAgICA9IGdldFNldEdsb2JhbExvY2FsZTtcbiAgICBob29rcy5pbnZhbGlkICAgICAgICAgICAgICAgPSBjcmVhdGVJbnZhbGlkO1xuICAgIGhvb2tzLmR1cmF0aW9uICAgICAgICAgICAgICA9IGNyZWF0ZUR1cmF0aW9uO1xuICAgIGhvb2tzLmlzTW9tZW50ICAgICAgICAgICAgICA9IGlzTW9tZW50O1xuICAgIGhvb2tzLndlZWtkYXlzICAgICAgICAgICAgICA9IGxpc3RXZWVrZGF5cztcbiAgICBob29rcy5wYXJzZVpvbmUgICAgICAgICAgICAgPSBjcmVhdGVJblpvbmU7XG4gICAgaG9va3MubG9jYWxlRGF0YSAgICAgICAgICAgID0gZ2V0TG9jYWxlO1xuICAgIGhvb2tzLmlzRHVyYXRpb24gICAgICAgICAgICA9IGlzRHVyYXRpb247XG4gICAgaG9va3MubW9udGhzU2hvcnQgICAgICAgICAgID0gbGlzdE1vbnRoc1Nob3J0O1xuICAgIGhvb2tzLndlZWtkYXlzTWluICAgICAgICAgICA9IGxpc3RXZWVrZGF5c01pbjtcbiAgICBob29rcy5kZWZpbmVMb2NhbGUgICAgICAgICAgPSBkZWZpbmVMb2NhbGU7XG4gICAgaG9va3MudXBkYXRlTG9jYWxlICAgICAgICAgID0gdXBkYXRlTG9jYWxlO1xuICAgIGhvb2tzLmxvY2FsZXMgICAgICAgICAgICAgICA9IGxpc3RMb2NhbGVzO1xuICAgIGhvb2tzLndlZWtkYXlzU2hvcnQgICAgICAgICA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuICAgIGhvb2tzLm5vcm1hbGl6ZVVuaXRzICAgICAgICA9IG5vcm1hbGl6ZVVuaXRzO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVJvdW5kaW5nICA9IGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbiAgICBob29rcy5jYWxlbmRhckZvcm1hdCAgICAgICAgPSBnZXRDYWxlbmRhckZvcm1hdDtcbiAgICBob29rcy5wcm90b3R5cGUgICAgICAgICAgICAgPSBwcm90bztcblxuICAgIC8vIGN1cnJlbnRseSBIVE1MNSBpbnB1dCB0eXBlIG9ubHkgc3VwcG9ydHMgMjQtaG91ciBmb3JtYXRzXG4gICAgaG9va3MuSFRNTDVfRk1UID0ge1xuICAgICAgICBEQVRFVElNRV9MT0NBTDogJ1lZWVktTU0tRERUSEg6bW0nLCAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfU0VDT05EUzogJ1lZWVktTU0tRERUSEg6bW06c3MnLCAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfTVM6ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIERBVEU6ICdZWVlZLU1NLUREJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIC8+XG4gICAgICAgIFRJTUU6ICdISDptbScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIC8+XG4gICAgICAgIFRJTUVfU0VDT05EUzogJ0hIOm1tOnNzJywgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgVElNRV9NUzogJ0hIOm1tOnNzLlNTUycsICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgV0VFSzogJ0dHR0ctW1ddV1cnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ3ZWVrXCIgLz5cbiAgICAgICAgTU9OVEg6ICdZWVlZLU1NJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJtb250aFwiIC8+XG4gICAgfTtcblxuICAgIHJldHVybiBob29rcztcblxufSkpKTtcbiIsIi8qISBodHRwczovL210aHMuYmUvcHVueWNvZGUgdjEuNC4xIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGVzICovXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiZcblx0XHQhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0IW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChcblx0XHRmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC5zZWxmID09PSBmcmVlR2xvYmFsXG5cdCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBgcHVueWNvZGVgIG9iamVjdC5cblx0ICogQG5hbWUgcHVueWNvZGVcblx0ICogQHR5cGUgT2JqZWN0XG5cdCAqL1xuXHR2YXIgcHVueWNvZGUsXG5cblx0LyoqIEhpZ2hlc3QgcG9zaXRpdmUgc2lnbmVkIDMyLWJpdCBmbG9hdCB2YWx1ZSAqL1xuXHRtYXhJbnQgPSAyMTQ3NDgzNjQ3LCAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cblx0LyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqL1xuXHRiYXNlID0gMzYsXG5cdHRNaW4gPSAxLFxuXHR0TWF4ID0gMjYsXG5cdHNrZXcgPSAzOCxcblx0ZGFtcCA9IDcwMCxcblx0aW5pdGlhbEJpYXMgPSA3Mixcblx0aW5pdGlhbE4gPSAxMjgsIC8vIDB4ODBcblx0ZGVsaW1pdGVyID0gJy0nLCAvLyAnXFx4MkQnXG5cblx0LyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cblx0cmVnZXhQdW55Y29kZSA9IC9eeG4tLS8sXG5cdHJlZ2V4Tm9uQVNDSUkgPSAvW15cXHgyMC1cXHg3RV0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFyc1xuXHRyZWdleFNlcGFyYXRvcnMgPSAvW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nLCAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG5cblx0LyoqIEVycm9yIG1lc3NhZ2VzICovXG5cdGVycm9ycyA9IHtcblx0XHQnb3ZlcmZsb3cnOiAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnLFxuXHRcdCdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG5cdFx0J2ludmFsaWQtaW5wdXQnOiAnSW52YWxpZCBpbnB1dCdcblx0fSxcblxuXHQvKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG5cdGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbixcblx0Zmxvb3IgPSBNYXRoLmZsb29yLFxuXHRzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLFxuXG5cdC8qKiBUZW1wb3JhcnkgdmFyaWFibGUgKi9cblx0a2V5O1xuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuXG5cdCAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cblx0ICovXG5cdGZ1bmN0aW9uIGVycm9yKHR5cGUpIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0cmVzdWx0W2xlbmd0aF0gPSBmbihhcnJheVtsZW5ndGhdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcblx0ICogYWRkcmVzc2VzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0dmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7XG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHQvLyBJbiBlbWFpbCBhZGRyZXNzZXMsIG9ubHkgdGhlIGRvbWFpbiBuYW1lIHNob3VsZCBiZSBwdW55Y29kZWQuIExlYXZlXG5cdFx0XHQvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuXHRcdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0XHRzdHJpbmcgPSBwYXJ0c1sxXTtcblx0XHR9XG5cdFx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1xceDJFJyk7XG5cdFx0dmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuXHRcdHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcblx0XHRyZXR1cm4gcmVzdWx0ICsgZW5jb2RlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBkZWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS5cblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGNvdW50ZXIgPSAwLFxuXHRcdCAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuXHRcdCAgICB2YWx1ZSxcblx0XHQgICAgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGVuY29kZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0cmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cblx0ICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcblx0ICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSAyMjtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA2NTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA5Nztcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3Jcblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2Vcblx0ICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG5cdCAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG5cdCAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0XHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHRcdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRcdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG5cdH1cblxuXHQvKipcblx0ICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cblx0ICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuXHRcdHZhciBrID0gMDtcblx0XHRkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuXHRcdGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcblx0XHRmb3IgKC8qIG5vIGluaXRpYWxpemF0aW9uICovOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuXHRcdFx0ZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuXHRcdH1cblx0XHRyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuXHQgKiBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0XHQvLyBEb24ndCB1c2UgVUNTLTJcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoLFxuXHRcdCAgICBvdXQsXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBuID0gaW5pdGlhbE4sXG5cdFx0ICAgIGJpYXMgPSBpbml0aWFsQmlhcyxcblx0XHQgICAgYmFzaWMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIGluZGV4LFxuXHRcdCAgICBvbGRpLFxuXHRcdCAgICB3LFxuXHRcdCAgICBrLFxuXHRcdCAgICBkaWdpdCxcblx0XHQgICAgdCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGJhc2VNaW51c1Q7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0XHQvLyBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGRlbGltaXRlciwgb3IgYDBgIGlmIHRoZXJlIGlzIG5vbmUsIHRoZW4gY29weVxuXHRcdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdFx0YmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuXHRcdGlmIChiYXNpYyA8IDApIHtcblx0XHRcdGJhc2ljID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdFx0Ly8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG5cdFx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRcdGVycm9yKCdub3QtYmFzaWMnKTtcblx0XHRcdH1cblx0XHRcdG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcblx0XHQvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG5cdFx0Zm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7IC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi8pIHtcblxuXHRcdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdFx0Ly8gRGVjb2RlIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIgaW50byBgZGVsdGFgLFxuXHRcdFx0Ly8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcblx0XHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0XHQvLyB2YWx1ZSBhdCB0aGUgZW5kIHRvIG9idGFpbiBgZGVsdGFgLlxuXHRcdFx0Zm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXG5cdFx0XHRcdGlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRcdGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpICs9IGRpZ2l0ICogdztcblx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0IDwgdCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3ICo9IGJhc2VNaW51c1Q7XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0ID0gb3V0cHV0Lmxlbmd0aCArIDE7XG5cdFx0XHRiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuXHRcdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHRcdC8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6XG5cdFx0XHRpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRuICs9IGZsb29yKGkgLyBvdXQpO1xuXHRcdFx0aSAlPSBvdXQ7XG5cblx0XHRcdC8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXRcblx0XHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKG91dHB1dCk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcblx0ICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG5cdFx0dmFyIG4sXG5cdFx0ICAgIGRlbHRhLFxuXHRcdCAgICBoYW5kbGVkQ1BDb3VudCxcblx0XHQgICAgYmFzaWNMZW5ndGgsXG5cdFx0ICAgIGJpYXMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIG0sXG5cdFx0ICAgIHEsXG5cdFx0ICAgIGssXG5cdFx0ICAgIHQsXG5cdFx0ICAgIGN1cnJlbnRWYWx1ZSxcblx0XHQgICAgb3V0cHV0ID0gW10sXG5cdFx0ICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovXG5cdFx0ICAgIGlucHV0TGVuZ3RoLFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgaGFuZGxlZENQQ291bnRQbHVzT25lLFxuXHRcdCAgICBiYXNlTWludXNULFxuXHRcdCAgICBxTWludXNUO1xuXG5cdFx0Ly8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuXHRcdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0XHQvLyBDYWNoZSB0aGUgbGVuZ3RoXG5cdFx0aW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0XHQvLyBJbml0aWFsaXplIHRoZSBzdGF0ZVxuXHRcdG4gPSBpbml0aWFsTjtcblx0XHRkZWx0YSA9IDA7XG5cdFx0YmlhcyA9IGluaXRpYWxCaWFzO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50c1xuXHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuXHRcdC8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXHRcdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHRcdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuXHRcdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdFx0b3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdFx0d2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcblxuXHRcdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHRcdGZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuXHRcdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcblx0XHRcdGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRcdGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdFx0biA9IG07XG5cblx0XHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuXHRcdFx0XHRcdC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG5cdFx0XHRcdFx0Zm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXHRcdFx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cdFx0XHRcdFx0XHRpZiAocSA8IHQpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRxTWludXNUID0gcSAtIHQ7XG5cdFx0XHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChcblx0XHRcdFx0XHRcdFx0c3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG5cdFx0XHRcdFx0ZGVsdGEgPSAwO1xuXHRcdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0KytkZWx0YTtcblx0XHRcdCsrbjtcblxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3Ncblx0ICogdG8gVW5pY29kZS4gT25seSB0aGUgUHVueWNvZGVkIHBhcnRzIG9mIHRoZSBpbnB1dCB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLlxuXHQgKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW5cblx0ICogY29udmVydGVkIHRvIFVuaWNvZGUuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIGNvbnZlcnQgdG8gVW5pY29kZS5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG5cdCAqIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvVW5pY29kZShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gZGVjb2RlKHN0cmluZy5zbGljZSg0KS50b0xvd2VyQ2FzZSgpKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFVuaWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogUHVueWNvZGUuIE9ubHkgdGhlIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsXG5cdCAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuXHQgKiBBU0NJSS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG5cdCAqIFVuaWNvZGUgc3RyaW5nLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgUHVueWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIGRvbWFpbiBuYW1lIG9yXG5cdCAqIGVtYWlsIGFkZHJlc3MuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyAneG4tLScgKyBlbmNvZGUoc3RyaW5nKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKiBEZWZpbmUgdGhlIHB1YmxpYyBBUEkgKi9cblx0cHVueWNvZGUgPSB7XG5cdFx0LyoqXG5cdFx0ICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IFB1bnljb2RlLmpzIHZlcnNpb24gbnVtYmVyLlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIFN0cmluZ1xuXHRcdCAqL1xuXHRcdCd2ZXJzaW9uJzogJzEuNC4xJyxcblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3Qgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGZyb20gSmF2YVNjcmlwdCdzIGludGVybmFsIGNoYXJhY3RlclxuXHRcdCAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suXG5cdFx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgT2JqZWN0XG5cdFx0ICovXG5cdFx0J3VjczInOiB7XG5cdFx0XHQnZGVjb2RlJzogdWNzMmRlY29kZSxcblx0XHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdFx0fSxcblx0XHQnZGVjb2RlJzogZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J3RvQVNDSUknOiB0b0FTQ0lJLFxuXHRcdCd0b1VuaWNvZGUnOiB0b1VuaWNvZGVcblx0fTtcblxuXHQvKiogRXhwb3NlIGBwdW55Y29kZWAgKi9cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoJ3B1bnljb2RlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gcHVueWNvZGU7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkge1xuXHRcdGlmIChtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cykge1xuXHRcdFx0Ly8gaW4gTm9kZS5qcywgaW8uanMsIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gcHVueWNvZGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHRmb3IgKGtleSBpbiBwdW55Y29kZSkge1xuXHRcdFx0XHRwdW55Y29kZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIChmcmVlRXhwb3J0c1trZXldID0gcHVueWNvZGVba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnB1bnljb2RlID0gcHVueWNvZGU7XG5cdH1cblxufSh0aGlzKSk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG1hcChvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBtYXAob2JqW2tdLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5mdW5jdGlvbiBtYXAgKHhzLCBmKSB7XG4gIGlmICh4cy5tYXApIHJldHVybiB4cy5tYXAoZik7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIHJlcy5wdXNoKGYoeHNbaV0sIGkpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHJlcy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG5leHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcbiIsIi8qIHNvY2tqcy1jbGllbnQgdjEuNS4wIHwgaHR0cDovL3NvY2tqcy5vcmcgfCBNSVQgbGljZW5zZSAqL1xuKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuU29ja0pTID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB0cmFuc3BvcnRMaXN0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQtbGlzdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbWFpbicpKHRyYW5zcG9ydExpc3QpO1xuXG4vLyBUT0RPIGNhbid0IGdldCByaWQgb2YgdGhpcyB1bnRpbCBhbGwgc2VydmVycyBkb1xuaWYgKCdfc29ja2pzX29ubG9hZCcgaW4gZ2xvYmFsKSB7XG4gIHNldFRpbWVvdXQoZ2xvYmFsLl9zb2NranNfb25sb2FkLCAxKTtcbn1cblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiLi9tYWluXCI6MTQsXCIuL3RyYW5zcG9ydC1saXN0XCI6MTZ9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudCcpXG4gIDtcblxuZnVuY3Rpb24gQ2xvc2VFdmVudCgpIHtcbiAgRXZlbnQuY2FsbCh0aGlzKTtcbiAgdGhpcy5pbml0RXZlbnQoJ2Nsb3NlJywgZmFsc2UsIGZhbHNlKTtcbiAgdGhpcy53YXNDbGVhbiA9IGZhbHNlO1xuICB0aGlzLmNvZGUgPSAwO1xuICB0aGlzLnJlYXNvbiA9ICcnO1xufVxuXG5pbmhlcml0cyhDbG9zZUV2ZW50LCBFdmVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xvc2VFdmVudDtcblxufSx7XCIuL2V2ZW50XCI6NCxcImluaGVyaXRzXCI6NTd9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9ldmVudHRhcmdldCcpXG4gIDtcblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudFRhcmdldC5jYWxsKHRoaXMpO1xufVxuXG5pbmhlcml0cyhFdmVudEVtaXR0ZXIsIEV2ZW50VGFyZ2V0KTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIGlmICh0eXBlKSB7XG4gICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1t0eXBlXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gICAgLCBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5vbih0eXBlLCBnKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdHlwZSA9IGFyZ3VtZW50c1swXTtcbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1t0eXBlXTtcbiAgaWYgKCFsaXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZXF1aXZhbGVudCBvZiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBhcmdzID0gbmV3IEFycmF5KGwgLSAxKTtcbiAgZm9yICh2YXIgYWkgPSAxOyBhaSA8IGw7IGFpKyspIHtcbiAgICBhcmdzW2FpIC0gMV0gPSBhcmd1bWVudHNbYWldO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyO1xuXG5tb2R1bGUuZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbn0se1wiLi9ldmVudHRhcmdldFwiOjUsXCJpbmhlcml0c1wiOjU3fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIEV2ZW50KGV2ZW50VHlwZSkge1xuICB0aGlzLnR5cGUgPSBldmVudFR5cGU7XG59XG5cbkV2ZW50LnByb3RvdHlwZS5pbml0RXZlbnQgPSBmdW5jdGlvbihldmVudFR5cGUsIGNhbkJ1YmJsZSwgY2FuY2VsYWJsZSkge1xuICB0aGlzLnR5cGUgPSBldmVudFR5cGU7XG4gIHRoaXMuYnViYmxlcyA9IGNhbkJ1YmJsZTtcbiAgdGhpcy5jYW5jZWxhYmxlID0gY2FuY2VsYWJsZTtcbiAgdGhpcy50aW1lU3RhbXAgPSArbmV3IERhdGUoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudC5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24oKSB7fTtcbkV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkge307XG5cbkV2ZW50LkNBUFRVUklOR19QSEFTRSA9IDE7XG5FdmVudC5BVF9UQVJHRVQgPSAyO1xuRXZlbnQuQlVCQkxJTkdfUEhBU0UgPSAzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50O1xuXG59LHt9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuLyogU2ltcGxpZmllZCBpbXBsZW1lbnRhdGlvbiBvZiBET00yIEV2ZW50VGFyZ2V0LlxuICogICBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1FdmVudHMvZXZlbnRzLmh0bWwjRXZlbnRzLUV2ZW50VGFyZ2V0XG4gKi9cblxuZnVuY3Rpb24gRXZlbnRUYXJnZXQoKSB7XG4gIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xufVxuXG5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50VHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCEoZXZlbnRUeXBlIGluIHRoaXMuX2xpc3RlbmVycykpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXSA9IFtdO1xuICB9XG4gIHZhciBhcnIgPSB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXTtcbiAgLy8gIzRcbiAgaWYgKGFyci5pbmRleE9mKGxpc3RlbmVyKSA9PT0gLTEpIHtcbiAgICAvLyBNYWtlIGEgY29weSBzbyBhcyBub3QgdG8gaW50ZXJmZXJlIHdpdGggYSBjdXJyZW50IGRpc3BhdGNoRXZlbnQuXG4gICAgYXJyID0gYXJyLmNvbmNhdChbbGlzdGVuZXJdKTtcbiAgfVxuICB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXSA9IGFycjtcbn07XG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xuICB2YXIgYXJyID0gdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV07XG4gIGlmICghYXJyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpZHggPSBhcnIuaW5kZXhPZihsaXN0ZW5lcik7XG4gIGlmIChpZHggIT09IC0xKSB7XG4gICAgaWYgKGFyci5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBNYWtlIGEgY29weSBzbyBhcyBub3QgdG8gaW50ZXJmZXJlIHdpdGggYSBjdXJyZW50IGRpc3BhdGNoRXZlbnQuXG4gICAgICB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXSA9IGFyci5zbGljZSgwLCBpZHgpLmNvbmNhdChhcnIuc2xpY2UoaWR4ICsgMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV07XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxufTtcblxuRXZlbnRUYXJnZXQucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGV2ZW50ID0gYXJndW1lbnRzWzBdO1xuICB2YXIgdCA9IGV2ZW50LnR5cGU7XG4gIC8vIGVxdWl2YWxlbnQgb2YgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gW2V2ZW50XSA6IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIC8vIFRPRE86IFRoaXMgZG9lc24ndCBtYXRjaCB0aGUgcmVhbCBiZWhhdmlvcjsgcGVyIHNwZWMsIG9uZm9vIGdldFxuICAvLyB0aGVpciBwbGFjZSBpbiBsaW5lIGZyb20gdGhlIC9maXJzdC8gdGltZSB0aGV5J3JlIHNldCBmcm9tXG4gIC8vIG5vbi1udWxsLiBBbHRob3VnaCBXZWJLaXQgYnVtcHMgaXQgdG8gdGhlIGVuZCBldmVyeSB0aW1lIGl0J3NcbiAgLy8gc2V0LlxuICBpZiAodGhpc1snb24nICsgdF0pIHtcbiAgICB0aGlzWydvbicgKyB0XS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuICBpZiAodCBpbiB0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAvLyBHcmFiIGEgcmVmZXJlbmNlIHRvIHRoZSBsaXN0ZW5lcnMgbGlzdC4gcmVtb3ZlRXZlbnRMaXN0ZW5lciBtYXkgYWx0ZXIgdGhlIGxpc3QuXG4gICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1t0XTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFRhcmdldDtcblxufSx7fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudCA9IHJlcXVpcmUoJy4vZXZlbnQnKVxuICA7XG5cbmZ1bmN0aW9uIFRyYW5zcG9ydE1lc3NhZ2VFdmVudChkYXRhKSB7XG4gIEV2ZW50LmNhbGwodGhpcyk7XG4gIHRoaXMuaW5pdEV2ZW50KCdtZXNzYWdlJywgZmFsc2UsIGZhbHNlKTtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbn1cblxuaW5oZXJpdHMoVHJhbnNwb3J0TWVzc2FnZUV2ZW50LCBFdmVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNwb3J0TWVzc2FnZUV2ZW50O1xuXG59LHtcIi4vZXZlbnRcIjo0LFwiaW5oZXJpdHNcIjo1N31dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgSlNPTjMgPSByZXF1aXJlKCdqc29uMycpXG4gICwgaWZyYW1lVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL2lmcmFtZScpXG4gIDtcblxuZnVuY3Rpb24gRmFjYWRlSlModHJhbnNwb3J0KSB7XG4gIHRoaXMuX3RyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgdHJhbnNwb3J0Lm9uKCdtZXNzYWdlJywgdGhpcy5fdHJhbnNwb3J0TWVzc2FnZS5iaW5kKHRoaXMpKTtcbiAgdHJhbnNwb3J0Lm9uKCdjbG9zZScsIHRoaXMuX3RyYW5zcG9ydENsb3NlLmJpbmQodGhpcykpO1xufVxuXG5GYWNhZGVKUy5wcm90b3R5cGUuX3RyYW5zcG9ydENsb3NlID0gZnVuY3Rpb24oY29kZSwgcmVhc29uKSB7XG4gIGlmcmFtZVV0aWxzLnBvc3RNZXNzYWdlKCdjJywgSlNPTjMuc3RyaW5naWZ5KFtjb2RlLCByZWFzb25dKSk7XG59O1xuRmFjYWRlSlMucHJvdG90eXBlLl90cmFuc3BvcnRNZXNzYWdlID0gZnVuY3Rpb24oZnJhbWUpIHtcbiAgaWZyYW1lVXRpbHMucG9zdE1lc3NhZ2UoJ3QnLCBmcmFtZSk7XG59O1xuRmFjYWRlSlMucHJvdG90eXBlLl9zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xuICB0aGlzLl90cmFuc3BvcnQuc2VuZChkYXRhKTtcbn07XG5GYWNhZGVKUy5wcm90b3R5cGUuX2Nsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3RyYW5zcG9ydC5jbG9zZSgpO1xuICB0aGlzLl90cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZhY2FkZUpTO1xuXG59LHtcIi4vdXRpbHMvaWZyYW1lXCI6NDcsXCJqc29uM1wiOjU4fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXJsVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL3VybCcpXG4gICwgZXZlbnRVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvZXZlbnQnKVxuICAsIEpTT04zID0gcmVxdWlyZSgnanNvbjMnKVxuICAsIEZhY2FkZUpTID0gcmVxdWlyZSgnLi9mYWNhZGUnKVxuICAsIEluZm9JZnJhbWVSZWNlaXZlciA9IHJlcXVpcmUoJy4vaW5mby1pZnJhbWUtcmVjZWl2ZXInKVxuICAsIGlmcmFtZVV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9pZnJhbWUnKVxuICAsIGxvYyA9IHJlcXVpcmUoJy4vbG9jYXRpb24nKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6aWZyYW1lLWJvb3RzdHJhcCcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFNvY2tKUywgYXZhaWxhYmxlVHJhbnNwb3J0cykge1xuICB2YXIgdHJhbnNwb3J0TWFwID0ge307XG4gIGF2YWlsYWJsZVRyYW5zcG9ydHMuZm9yRWFjaChmdW5jdGlvbihhdCkge1xuICAgIGlmIChhdC5mYWNhZGVUcmFuc3BvcnQpIHtcbiAgICAgIHRyYW5zcG9ydE1hcFthdC5mYWNhZGVUcmFuc3BvcnQudHJhbnNwb3J0TmFtZV0gPSBhdC5mYWNhZGVUcmFuc3BvcnQ7XG4gICAgfVxuICB9KTtcblxuICAvLyBoYXJkLWNvZGVkIGZvciB0aGUgaW5mbyBpZnJhbWVcbiAgLy8gVE9ETyBzZWUgaWYgd2UgY2FuIG1ha2UgdGhpcyBtb3JlIGR5bmFtaWNcbiAgdHJhbnNwb3J0TWFwW0luZm9JZnJhbWVSZWNlaXZlci50cmFuc3BvcnROYW1lXSA9IEluZm9JZnJhbWVSZWNlaXZlcjtcbiAgdmFyIHBhcmVudE9yaWdpbjtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbiAgU29ja0pTLmJvb3RzdHJhcF9pZnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIGNhbWVsY2FzZSAqL1xuICAgIHZhciBmYWNhZGU7XG4gICAgaWZyYW1lVXRpbHMuY3VycmVudFdpbmRvd0lkID0gbG9jLmhhc2guc2xpY2UoMSk7XG4gICAgdmFyIG9uTWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChlLnNvdXJjZSAhPT0gcGFyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcGFyZW50T3JpZ2luID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwYXJlbnRPcmlnaW4gPSBlLm9yaWdpbjtcbiAgICAgIH1cbiAgICAgIGlmIChlLm9yaWdpbiAhPT0gcGFyZW50T3JpZ2luKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGlmcmFtZU1lc3NhZ2U7XG4gICAgICB0cnkge1xuICAgICAgICBpZnJhbWVNZXNzYWdlID0gSlNPTjMucGFyc2UoZS5kYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGlnbm9yZWQpIHtcbiAgICAgICAgZGVidWcoJ2JhZCBqc29uJywgZS5kYXRhKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWZyYW1lTWVzc2FnZS53aW5kb3dJZCAhPT0gaWZyYW1lVXRpbHMuY3VycmVudFdpbmRvd0lkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoaWZyYW1lTWVzc2FnZS50eXBlKSB7XG4gICAgICBjYXNlICdzJzpcbiAgICAgICAgdmFyIHA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcCA9IEpTT04zLnBhcnNlKGlmcmFtZU1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIH0gY2F0Y2ggKGlnbm9yZWQpIHtcbiAgICAgICAgICBkZWJ1ZygnYmFkIGpzb24nLCBpZnJhbWVNZXNzYWdlLmRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2ZXJzaW9uID0gcFswXTtcbiAgICAgICAgdmFyIHRyYW5zcG9ydCA9IHBbMV07XG4gICAgICAgIHZhciB0cmFuc1VybCA9IHBbMl07XG4gICAgICAgIHZhciBiYXNlVXJsID0gcFszXTtcbiAgICAgICAgZGVidWcodmVyc2lvbiwgdHJhbnNwb3J0LCB0cmFuc1VybCwgYmFzZVVybCk7XG4gICAgICAgIC8vIGNoYW5nZSB0aGlzIHRvIHNlbXZlciBsb2dpY1xuICAgICAgICBpZiAodmVyc2lvbiAhPT0gU29ja0pTLnZlcnNpb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29tcGF0aWJsZSBTb2NrSlMhIE1haW4gc2l0ZSB1c2VzOicgK1xuICAgICAgICAgICAgICAgICAgICAnIFwiJyArIHZlcnNpb24gKyAnXCIsIHRoZSBpZnJhbWU6JyArXG4gICAgICAgICAgICAgICAgICAgICcgXCInICsgU29ja0pTLnZlcnNpb24gKyAnXCIuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXVybFV0aWxzLmlzT3JpZ2luRXF1YWwodHJhbnNVcmwsIGxvYy5ocmVmKSB8fFxuICAgICAgICAgICAgIXVybFV0aWxzLmlzT3JpZ2luRXF1YWwoYmFzZVVybCwgbG9jLmhyZWYpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IGNvbm5lY3QgdG8gZGlmZmVyZW50IGRvbWFpbiBmcm9tIHdpdGhpbiBhbiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2lmcmFtZS4gKCcgKyBsb2MuaHJlZiArICcsICcgKyB0cmFuc1VybCArICcsICcgKyBiYXNlVXJsICsgJyknKTtcbiAgICAgICAgfVxuICAgICAgICBmYWNhZGUgPSBuZXcgRmFjYWRlSlMobmV3IHRyYW5zcG9ydE1hcFt0cmFuc3BvcnRdKHRyYW5zVXJsLCBiYXNlVXJsKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbSc6XG4gICAgICAgIGZhY2FkZS5fc2VuZChpZnJhbWVNZXNzYWdlLmRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICBpZiAoZmFjYWRlKSB7XG4gICAgICAgICAgZmFjYWRlLl9jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZhY2FkZSA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBldmVudFV0aWxzLmF0dGFjaEV2ZW50KCdtZXNzYWdlJywgb25NZXNzYWdlKTtcblxuICAgIC8vIFN0YXJ0XG4gICAgaWZyYW1lVXRpbHMucG9zdE1lc3NhZ2UoJ3MnKTtcbiAgfTtcbn07XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCIuL2ZhY2FkZVwiOjcsXCIuL2luZm8taWZyYW1lLXJlY2VpdmVyXCI6MTAsXCIuL2xvY2F0aW9uXCI6MTMsXCIuL3V0aWxzL2V2ZW50XCI6NDYsXCIuL3V0aWxzL2lmcmFtZVwiOjQ3LFwiLi91dGlscy91cmxcIjo1MixcImRlYnVnXCI6NTUsXCJqc29uM1wiOjU4fV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgSlNPTjMgPSByZXF1aXJlKCdqc29uMycpXG4gICwgb2JqZWN0VXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL29iamVjdCcpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDppbmZvLWFqYXgnKTtcbn1cblxuZnVuY3Rpb24gSW5mb0FqYXgodXJsLCBBamF4T2JqZWN0KSB7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHQwID0gK25ldyBEYXRlKCk7XG4gIHRoaXMueG8gPSBuZXcgQWpheE9iamVjdCgnR0VUJywgdXJsKTtcblxuICB0aGlzLnhvLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuICAgIHZhciBpbmZvLCBydHQ7XG4gICAgaWYgKHN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICBydHQgPSAoK25ldyBEYXRlKCkpIC0gdDA7XG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGluZm8gPSBKU09OMy5wYXJzZSh0ZXh0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlYnVnKCdiYWQganNvbicsIHRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghb2JqZWN0VXRpbHMuaXNPYmplY3QoaW5mbykpIHtcbiAgICAgICAgaW5mbyA9IHt9O1xuICAgICAgfVxuICAgIH1cbiAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIGluZm8sIHJ0dCk7XG4gICAgc2VsZi5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgfSk7XG59XG5cbmluaGVyaXRzKEluZm9BamF4LCBFdmVudEVtaXR0ZXIpO1xuXG5JbmZvQWpheC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgdGhpcy54by5jbG9zZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmZvQWpheDtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcIi4vdXRpbHMvb2JqZWN0XCI6NDksXCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTcsXCJqc29uM1wiOjU4fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgSlNPTjMgPSByZXF1aXJlKCdqc29uMycpXG4gICwgWEhSTG9jYWxPYmplY3QgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9zZW5kZXIveGhyLWxvY2FsJylcbiAgLCBJbmZvQWpheCA9IHJlcXVpcmUoJy4vaW5mby1hamF4JylcbiAgO1xuXG5mdW5jdGlvbiBJbmZvUmVjZWl2ZXJJZnJhbWUodHJhbnNVcmwpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB0aGlzLmlyID0gbmV3IEluZm9BamF4KHRyYW5zVXJsLCBYSFJMb2NhbE9iamVjdCk7XG4gIHRoaXMuaXIub25jZSgnZmluaXNoJywgZnVuY3Rpb24oaW5mbywgcnR0KSB7XG4gICAgc2VsZi5pciA9IG51bGw7XG4gICAgc2VsZi5lbWl0KCdtZXNzYWdlJywgSlNPTjMuc3RyaW5naWZ5KFtpbmZvLCBydHRdKSk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhJbmZvUmVjZWl2ZXJJZnJhbWUsIEV2ZW50RW1pdHRlcik7XG5cbkluZm9SZWNlaXZlcklmcmFtZS50cmFuc3BvcnROYW1lID0gJ2lmcmFtZS1pbmZvLXJlY2VpdmVyJztcblxuSW5mb1JlY2VpdmVySWZyYW1lLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5pcikge1xuICAgIHRoaXMuaXIuY2xvc2UoKTtcbiAgICB0aGlzLmlyID0gbnVsbDtcbiAgfVxuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmZvUmVjZWl2ZXJJZnJhbWU7XG5cbn0se1wiLi9pbmZvLWFqYXhcIjo5LFwiLi90cmFuc3BvcnQvc2VuZGVyL3hoci1sb2NhbFwiOjM3LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTcsXCJqc29uM1wiOjU4fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBKU09OMyA9IHJlcXVpcmUoJ2pzb24zJylcbiAgLCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvZXZlbnQnKVxuICAsIElmcmFtZVRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0L2lmcmFtZScpXG4gICwgSW5mb1JlY2VpdmVySWZyYW1lID0gcmVxdWlyZSgnLi9pbmZvLWlmcmFtZS1yZWNlaXZlcicpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDppbmZvLWlmcmFtZScpO1xufVxuXG5mdW5jdGlvbiBJbmZvSWZyYW1lKGJhc2VVcmwsIHVybCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZnIgPSBzZWxmLmlmciA9IG5ldyBJZnJhbWVUcmFuc3BvcnQoSW5mb1JlY2VpdmVySWZyYW1lLnRyYW5zcG9ydE5hbWUsIHVybCwgYmFzZVVybCk7XG5cbiAgICBpZnIub25jZSgnbWVzc2FnZScsIGZ1bmN0aW9uKG1zZykge1xuICAgICAgaWYgKG1zZykge1xuICAgICAgICB2YXIgZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkID0gSlNPTjMucGFyc2UobXNnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlYnVnKCdiYWQganNvbicsIG1zZyk7XG4gICAgICAgICAgc2VsZi5lbWl0KCdmaW5pc2gnKTtcbiAgICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGluZm8gPSBkWzBdLCBydHQgPSBkWzFdO1xuICAgICAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIGluZm8sIHJ0dCk7XG4gICAgICB9XG4gICAgICBzZWxmLmNsb3NlKCk7XG4gICAgfSk7XG5cbiAgICBpZnIub25jZSgnY2xvc2UnLCBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYuZW1pdCgnZmluaXNoJyk7XG4gICAgICBzZWxmLmNsb3NlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gVE9ETyB0aGlzIHNlZW1zIHRoZSBzYW1lIGFzIHRoZSAnbmVlZEJvZHknIGZyb20gdHJhbnNwb3J0c1xuICBpZiAoIWdsb2JhbC5kb2N1bWVudC5ib2R5KSB7XG4gICAgdXRpbHMuYXR0YWNoRXZlbnQoJ2xvYWQnLCBnbyk7XG4gIH0gZWxzZSB7XG4gICAgZ28oKTtcbiAgfVxufVxuXG5pbmhlcml0cyhJbmZvSWZyYW1lLCBFdmVudEVtaXR0ZXIpO1xuXG5JbmZvSWZyYW1lLmVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIElmcmFtZVRyYW5zcG9ydC5lbmFibGVkKCk7XG59O1xuXG5JbmZvSWZyYW1lLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5pZnIpIHtcbiAgICB0aGlzLmlmci5jbG9zZSgpO1xuICB9XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMuaWZyID0gbnVsbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW5mb0lmcmFtZTtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9LHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiLi9pbmZvLWlmcmFtZS1yZWNlaXZlclwiOjEwLFwiLi90cmFuc3BvcnQvaWZyYW1lXCI6MjIsXCIuL3V0aWxzL2V2ZW50XCI6NDYsXCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTcsXCJqc29uM1wiOjU4fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy91cmwnKVxuICAsIFhEUiA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0L3NlbmRlci94ZHInKVxuICAsIFhIUkNvcnMgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9zZW5kZXIveGhyLWNvcnMnKVxuICAsIFhIUkxvY2FsID0gcmVxdWlyZSgnLi90cmFuc3BvcnQvc2VuZGVyL3hoci1sb2NhbCcpXG4gICwgWEhSRmFrZSA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0L3NlbmRlci94aHItZmFrZScpXG4gICwgSW5mb0lmcmFtZSA9IHJlcXVpcmUoJy4vaW5mby1pZnJhbWUnKVxuICAsIEluZm9BamF4ID0gcmVxdWlyZSgnLi9pbmZvLWFqYXgnKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6aW5mby1yZWNlaXZlcicpO1xufVxuXG5mdW5jdGlvbiBJbmZvUmVjZWl2ZXIoYmFzZVVybCwgdXJsSW5mbykge1xuICBkZWJ1ZyhiYXNlVXJsKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZG9YaHIoYmFzZVVybCwgdXJsSW5mbyk7XG4gIH0sIDApO1xufVxuXG5pbmhlcml0cyhJbmZvUmVjZWl2ZXIsIEV2ZW50RW1pdHRlcik7XG5cbi8vIFRPRE8gdGhpcyBpcyBjdXJyZW50bHkgaWdub3JpbmcgdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIHRyYW5zcG9ydHMgYW5kIHRoZSB3aGl0ZWxpc3RcblxuSW5mb1JlY2VpdmVyLl9nZXRSZWNlaXZlciA9IGZ1bmN0aW9uKGJhc2VVcmwsIHVybCwgdXJsSW5mbykge1xuICAvLyBkZXRlcm1pbmUgbWV0aG9kIG9mIENPUlMgc3VwcG9ydCAoaWYgbmVlZGVkKVxuICBpZiAodXJsSW5mby5zYW1lT3JpZ2luKSB7XG4gICAgcmV0dXJuIG5ldyBJbmZvQWpheCh1cmwsIFhIUkxvY2FsKTtcbiAgfVxuICBpZiAoWEhSQ29ycy5lbmFibGVkKSB7XG4gICAgcmV0dXJuIG5ldyBJbmZvQWpheCh1cmwsIFhIUkNvcnMpO1xuICB9XG4gIGlmIChYRFIuZW5hYmxlZCAmJiB1cmxJbmZvLnNhbWVTY2hlbWUpIHtcbiAgICByZXR1cm4gbmV3IEluZm9BamF4KHVybCwgWERSKTtcbiAgfVxuICBpZiAoSW5mb0lmcmFtZS5lbmFibGVkKCkpIHtcbiAgICByZXR1cm4gbmV3IEluZm9JZnJhbWUoYmFzZVVybCwgdXJsKTtcbiAgfVxuICByZXR1cm4gbmV3IEluZm9BamF4KHVybCwgWEhSRmFrZSk7XG59O1xuXG5JbmZvUmVjZWl2ZXIucHJvdG90eXBlLmRvWGhyID0gZnVuY3Rpb24oYmFzZVVybCwgdXJsSW5mbykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgICAsIHVybCA9IHVybFV0aWxzLmFkZFBhdGgoYmFzZVVybCwgJy9pbmZvJylcbiAgICA7XG4gIGRlYnVnKCdkb1hocicsIHVybCk7XG5cbiAgdGhpcy54byA9IEluZm9SZWNlaXZlci5fZ2V0UmVjZWl2ZXIoYmFzZVVybCwgdXJsLCB1cmxJbmZvKTtcblxuICB0aGlzLnRpbWVvdXRSZWYgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCd0aW1lb3V0Jyk7XG4gICAgc2VsZi5fY2xlYW51cChmYWxzZSk7XG4gICAgc2VsZi5lbWl0KCdmaW5pc2gnKTtcbiAgfSwgSW5mb1JlY2VpdmVyLnRpbWVvdXQpO1xuXG4gIHRoaXMueG8ub25jZSgnZmluaXNoJywgZnVuY3Rpb24oaW5mbywgcnR0KSB7XG4gICAgZGVidWcoJ2ZpbmlzaCcsIGluZm8sIHJ0dCk7XG4gICAgc2VsZi5fY2xlYW51cCh0cnVlKTtcbiAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIGluZm8sIHJ0dCk7XG4gIH0pO1xufTtcblxuSW5mb1JlY2VpdmVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKHdhc0NsZWFuKSB7XG4gIGRlYnVnKCdfY2xlYW51cCcpO1xuICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0UmVmKTtcbiAgdGhpcy50aW1lb3V0UmVmID0gbnVsbDtcbiAgaWYgKCF3YXNDbGVhbiAmJiB0aGlzLnhvKSB7XG4gICAgdGhpcy54by5jbG9zZSgpO1xuICB9XG4gIHRoaXMueG8gPSBudWxsO1xufTtcblxuSW5mb1JlY2VpdmVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgdGhpcy5fY2xlYW51cChmYWxzZSk7XG59O1xuXG5JbmZvUmVjZWl2ZXIudGltZW91dCA9IDgwMDA7XG5cbm1vZHVsZS5leHBvcnRzID0gSW5mb1JlY2VpdmVyO1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiLi9pbmZvLWFqYXhcIjo5LFwiLi9pbmZvLWlmcmFtZVwiOjExLFwiLi90cmFuc3BvcnQvc2VuZGVyL3hkclwiOjM0LFwiLi90cmFuc3BvcnQvc2VuZGVyL3hoci1jb3JzXCI6MzUsXCIuL3RyYW5zcG9ydC9zZW5kZXIveGhyLWZha2VcIjozNixcIi4vdHJhbnNwb3J0L3NlbmRlci94aHItbG9jYWxcIjozNyxcIi4vdXRpbHMvdXJsXCI6NTIsXCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTd9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmxvY2F0aW9uIHx8IHtcbiAgb3JpZ2luOiAnaHR0cDovL2xvY2FsaG9zdDo4MCdcbiwgcHJvdG9jb2w6ICdodHRwOidcbiwgaG9zdDogJ2xvY2FsaG9zdCdcbiwgcG9ydDogODBcbiwgaHJlZjogJ2h0dHA6Ly9sb2NhbGhvc3QvJ1xuLCBoYXNoOiAnJ1xufTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se31dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW1zJyk7XG5cbnZhciBVUkwgPSByZXF1aXJlKCd1cmwtcGFyc2UnKVxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEpTT04zID0gcmVxdWlyZSgnanNvbjMnKVxuICAsIHJhbmRvbSA9IHJlcXVpcmUoJy4vdXRpbHMvcmFuZG9tJylcbiAgLCBlc2NhcGUgPSByZXF1aXJlKCcuL3V0aWxzL2VzY2FwZScpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL3VybCcpXG4gICwgZXZlbnRVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvZXZlbnQnKVxuICAsIHRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdXRpbHMvdHJhbnNwb3J0JylcbiAgLCBvYmplY3RVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvb2JqZWN0JylcbiAgLCBicm93c2VyID0gcmVxdWlyZSgnLi91dGlscy9icm93c2VyJylcbiAgLCBsb2cgPSByZXF1aXJlKCcuL3V0aWxzL2xvZycpXG4gICwgRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50L2V2ZW50JylcbiAgLCBFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZXZlbnQvZXZlbnR0YXJnZXQnKVxuICAsIGxvYyA9IHJlcXVpcmUoJy4vbG9jYXRpb24nKVxuICAsIENsb3NlRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50L2Nsb3NlJylcbiAgLCBUcmFuc3BvcnRNZXNzYWdlRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50L3RyYW5zLW1lc3NhZ2UnKVxuICAsIEluZm9SZWNlaXZlciA9IHJlcXVpcmUoJy4vaW5mby1yZWNlaXZlcicpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDptYWluJyk7XG59XG5cbnZhciB0cmFuc3BvcnRzO1xuXG4vLyBmb2xsb3cgY29uc3RydWN0b3Igc3RlcHMgZGVmaW5lZCBhdCBodHRwOi8vZGV2LnczLm9yZy9odG1sNS93ZWJzb2NrZXRzLyN0aGUtd2Vic29ja2V0LWludGVyZmFjZVxuZnVuY3Rpb24gU29ja0pTKHVybCwgcHJvdG9jb2xzLCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTb2NrSlMpKSB7XG4gICAgcmV0dXJuIG5ldyBTb2NrSlModXJsLCBwcm90b2NvbHMsIG9wdGlvbnMpO1xuICB9XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdTb2NrSlM6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudFwiKTtcbiAgfVxuICBFdmVudFRhcmdldC5jYWxsKHRoaXMpO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9IFNvY2tKUy5DT05ORUNUSU5HO1xuICB0aGlzLmV4dGVuc2lvbnMgPSAnJztcbiAgdGhpcy5wcm90b2NvbCA9ICcnO1xuXG4gIC8vIG5vbi1zdGFuZGFyZCBleHRlbnNpb25cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmIChvcHRpb25zLnByb3RvY29sc193aGl0ZWxpc3QpIHtcbiAgICBsb2cud2FybihcIidwcm90b2NvbHNfd2hpdGVsaXN0JyBpcyBERVBSRUNBVEVELiBVc2UgJ3RyYW5zcG9ydHMnIGluc3RlYWQuXCIpO1xuICB9XG4gIHRoaXMuX3RyYW5zcG9ydHNXaGl0ZWxpc3QgPSBvcHRpb25zLnRyYW5zcG9ydHM7XG4gIHRoaXMuX3RyYW5zcG9ydE9wdGlvbnMgPSBvcHRpb25zLnRyYW5zcG9ydE9wdGlvbnMgfHwge307XG4gIHRoaXMuX3RpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgfHwgMDtcblxuICB2YXIgc2Vzc2lvbklkID0gb3B0aW9ucy5zZXNzaW9uSWQgfHwgODtcbiAgaWYgKHR5cGVvZiBzZXNzaW9uSWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9nZW5lcmF0ZVNlc3Npb25JZCA9IHNlc3Npb25JZDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2Vzc2lvbklkID09PSAnbnVtYmVyJykge1xuICAgIHRoaXMuX2dlbmVyYXRlU2Vzc2lvbklkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmFuZG9tLnN0cmluZyhzZXNzaW9uSWQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSWYgc2Vzc2lvbklkIGlzIHVzZWQgaW4gdGhlIG9wdGlvbnMsIGl0IG5lZWRzIHRvIGJlIGEgbnVtYmVyIG9yIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB0aGlzLl9zZXJ2ZXIgPSBvcHRpb25zLnNlcnZlciB8fCByYW5kb20ubnVtYmVyU3RyaW5nKDEwMDApO1xuXG4gIC8vIFN0ZXAgMSBvZiBXUyBzcGVjIC0gcGFyc2UgYW5kIHZhbGlkYXRlIHRoZSB1cmwuIElzc3VlICM4XG4gIHZhciBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XG4gIGlmICghcGFyc2VkVXJsLmhvc3QgfHwgIXBhcnNlZFVybC5wcm90b2NvbCkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIlRoZSBVUkwgJ1wiICsgdXJsICsgXCInIGlzIGludmFsaWRcIik7XG4gIH0gZWxzZSBpZiAocGFyc2VkVXJsLmhhc2gpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1RoZSBVUkwgbXVzdCBub3QgY29udGFpbiBhIGZyYWdtZW50Jyk7XG4gIH0gZWxzZSBpZiAocGFyc2VkVXJsLnByb3RvY29sICE9PSAnaHR0cDonICYmIHBhcnNlZFVybC5wcm90b2NvbCAhPT0gJ2h0dHBzOicpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgVVJMJ3Mgc2NoZW1lIG11c3QgYmUgZWl0aGVyICdodHRwOicgb3IgJ2h0dHBzOicuICdcIiArIHBhcnNlZFVybC5wcm90b2NvbCArIFwiJyBpcyBub3QgYWxsb3dlZC5cIik7XG4gIH1cblxuICB2YXIgc2VjdXJlID0gcGFyc2VkVXJsLnByb3RvY29sID09PSAnaHR0cHM6JztcbiAgLy8gU3RlcCAyIC0gZG9uJ3QgYWxsb3cgc2VjdXJlIG9yaWdpbiB3aXRoIGFuIGluc2VjdXJlIHByb3RvY29sXG4gIGlmIChsb2MucHJvdG9jb2wgPT09ICdodHRwczonICYmICFzZWN1cmUpIHtcbiAgICAvLyBleGNlcHRpb24gaXMgMTI3LjAuMC4wLzggYW5kIDo6MSB1cmxzXG4gICAgaWYgKCF1cmxVdGlscy5pc0xvb3BiYWNrQWRkcihwYXJzZWRVcmwuaG9zdG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3VyaXR5RXJyb3I6IEFuIGluc2VjdXJlIFNvY2tKUyBjb25uZWN0aW9uIG1heSBub3QgYmUgaW5pdGlhdGVkIGZyb20gYSBwYWdlIGxvYWRlZCBvdmVyIEhUVFBTJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gU3RlcCAzIC0gY2hlY2sgcG9ydCBhY2Nlc3MgLSBubyBuZWVkIGhlcmVcbiAgLy8gU3RlcCA0IC0gcGFyc2UgcHJvdG9jb2xzIGFyZ3VtZW50XG4gIGlmICghcHJvdG9jb2xzKSB7XG4gICAgcHJvdG9jb2xzID0gW107XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocHJvdG9jb2xzKSkge1xuICAgIHByb3RvY29scyA9IFtwcm90b2NvbHNdO1xuICB9XG5cbiAgLy8gU3RlcCA1IC0gY2hlY2sgcHJvdG9jb2xzIGFyZ3VtZW50XG4gIHZhciBzb3J0ZWRQcm90b2NvbHMgPSBwcm90b2NvbHMuc29ydCgpO1xuICBzb3J0ZWRQcm90b2NvbHMuZm9yRWFjaChmdW5jdGlvbihwcm90bywgaSkge1xuICAgIGlmICghcHJvdG8pIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIlRoZSBwcm90b2NvbHMgZW50cnkgJ1wiICsgcHJvdG8gKyBcIicgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuICAgIGlmIChpIDwgKHNvcnRlZFByb3RvY29scy5sZW5ndGggLSAxKSAmJiBwcm90byA9PT0gc29ydGVkUHJvdG9jb2xzW2kgKyAxXSkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIHByb3RvY29scyBlbnRyeSAnXCIgKyBwcm90byArIFwiJyBpcyBkdXBsaWNhdGVkLlwiKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFN0ZXAgNiAtIGNvbnZlcnQgb3JpZ2luXG4gIHZhciBvID0gdXJsVXRpbHMuZ2V0T3JpZ2luKGxvYy5ocmVmKTtcbiAgdGhpcy5fb3JpZ2luID0gbyA/IG8udG9Mb3dlckNhc2UoKSA6IG51bGw7XG5cbiAgLy8gcmVtb3ZlIHRoZSB0cmFpbGluZyBzbGFzaFxuICBwYXJzZWRVcmwuc2V0KCdwYXRobmFtZScsIHBhcnNlZFVybC5wYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sICcnKSk7XG5cbiAgLy8gc3RvcmUgdGhlIHNhbml0aXplZCB1cmxcbiAgdGhpcy51cmwgPSBwYXJzZWRVcmwuaHJlZjtcbiAgZGVidWcoJ3VzaW5nIHVybCcsIHRoaXMudXJsKTtcblxuICAvLyBTdGVwIDcgLSBzdGFydCBjb25uZWN0aW9uIGluIGJhY2tncm91bmRcbiAgLy8gb2J0YWluIHNlcnZlciBpbmZvXG4gIC8vIGh0dHA6Ly9zb2NranMuZ2l0aHViLmlvL3NvY2tqcy1wcm90b2NvbC9zb2NranMtcHJvdG9jb2wtMC4zLjMuaHRtbCNzZWN0aW9uLTI2XG4gIHRoaXMuX3VybEluZm8gPSB7XG4gICAgbnVsbE9yaWdpbjogIWJyb3dzZXIuaGFzRG9tYWluKClcbiAgLCBzYW1lT3JpZ2luOiB1cmxVdGlscy5pc09yaWdpbkVxdWFsKHRoaXMudXJsLCBsb2MuaHJlZilcbiAgLCBzYW1lU2NoZW1lOiB1cmxVdGlscy5pc1NjaGVtZUVxdWFsKHRoaXMudXJsLCBsb2MuaHJlZilcbiAgfTtcblxuICB0aGlzLl9pciA9IG5ldyBJbmZvUmVjZWl2ZXIodGhpcy51cmwsIHRoaXMuX3VybEluZm8pO1xuICB0aGlzLl9pci5vbmNlKCdmaW5pc2gnLCB0aGlzLl9yZWNlaXZlSW5mby5iaW5kKHRoaXMpKTtcbn1cblxuaW5oZXJpdHMoU29ja0pTLCBFdmVudFRhcmdldCk7XG5cbmZ1bmN0aW9uIHVzZXJTZXRDb2RlKGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPT09IDEwMDAgfHwgKGNvZGUgPj0gMzAwMCAmJiBjb2RlIDw9IDQ5OTkpO1xufVxuXG5Tb2NrSlMucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oY29kZSwgcmVhc29uKSB7XG4gIC8vIFN0ZXAgMVxuICBpZiAoY29kZSAmJiAhdXNlclNldENvZGUoY29kZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRBY2Nlc3NFcnJvcjogSW52YWxpZCBjb2RlJyk7XG4gIH1cbiAgLy8gU3RlcCAyLjQgc3RhdGVzIHRoZSBtYXggaXMgMTIzIGJ5dGVzLCBidXQgd2UgYXJlIGp1c3QgY2hlY2tpbmcgbGVuZ3RoXG4gIGlmIChyZWFzb24gJiYgcmVhc29uLmxlbmd0aCA+IDEyMykge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcigncmVhc29uIGFyZ3VtZW50IGhhcyBhbiBpbnZhbGlkIGxlbmd0aCcpO1xuICB9XG5cbiAgLy8gU3RlcCAzLjFcbiAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gU29ja0pTLkNMT1NJTkcgfHwgdGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ0xPU0VEKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVE9ETyBsb29rIGF0IGRvY3MgdG8gZGV0ZXJtaW5lIGhvdyB0byBzZXQgdGhpc1xuICB2YXIgd2FzQ2xlYW4gPSB0cnVlO1xuICB0aGlzLl9jbG9zZShjb2RlIHx8IDEwMDAsIHJlYXNvbiB8fCAnTm9ybWFsIGNsb3N1cmUnLCB3YXNDbGVhbik7XG59O1xuXG5Tb2NrSlMucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihkYXRhKSB7XG4gIC8vICMxMyAtIGNvbnZlcnQgYW55dGhpbmcgbm9uLXN0cmluZyB0byBzdHJpbmdcbiAgLy8gVE9ETyB0aGlzIGN1cnJlbnRseSB0dXJucyBvYmplY3RzIGludG8gW29iamVjdCBPYmplY3RdXG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICB9XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DT05ORUNUSU5HKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcjogVGhlIGNvbm5lY3Rpb24gaGFzIG5vdCBiZWVuIGVzdGFibGlzaGVkIHlldCcpO1xuICB9XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgIT09IFNvY2tKUy5PUEVOKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuX3RyYW5zcG9ydC5zZW5kKGVzY2FwZS5xdW90ZShkYXRhKSk7XG59O1xuXG5Tb2NrSlMudmVyc2lvbiA9IHJlcXVpcmUoJy4vdmVyc2lvbicpO1xuXG5Tb2NrSlMuQ09OTkVDVElORyA9IDA7XG5Tb2NrSlMuT1BFTiA9IDE7XG5Tb2NrSlMuQ0xPU0lORyA9IDI7XG5Tb2NrSlMuQ0xPU0VEID0gMztcblxuU29ja0pTLnByb3RvdHlwZS5fcmVjZWl2ZUluZm8gPSBmdW5jdGlvbihpbmZvLCBydHQpIHtcbiAgZGVidWcoJ19yZWNlaXZlSW5mbycsIHJ0dCk7XG4gIHRoaXMuX2lyID0gbnVsbDtcbiAgaWYgKCFpbmZvKSB7XG4gICAgdGhpcy5fY2xvc2UoMTAwMiwgJ0Nhbm5vdCBjb25uZWN0IHRvIHNlcnZlcicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGVzdGFibGlzaCBhIHJvdW5kLXRyaXAgdGltZW91dCAoUlRPKSBiYXNlZCBvbiB0aGVcbiAgLy8gcm91bmQtdHJpcCB0aW1lIChSVFQpXG4gIHRoaXMuX3J0byA9IHRoaXMuY291bnRSVE8ocnR0KTtcbiAgLy8gYWxsb3cgc2VydmVyIHRvIG92ZXJyaWRlIHVybCB1c2VkIGZvciB0aGUgYWN0dWFsIHRyYW5zcG9ydFxuICB0aGlzLl90cmFuc1VybCA9IGluZm8uYmFzZV91cmwgPyBpbmZvLmJhc2VfdXJsIDogdGhpcy51cmw7XG4gIGluZm8gPSBvYmplY3RVdGlscy5leHRlbmQoaW5mbywgdGhpcy5fdXJsSW5mbyk7XG4gIGRlYnVnKCdpbmZvJywgaW5mbyk7XG4gIC8vIGRldGVybWluZSBsaXN0IG9mIGRlc2lyZWQgYW5kIHN1cHBvcnRlZCB0cmFuc3BvcnRzXG4gIHZhciBlbmFibGVkVHJhbnNwb3J0cyA9IHRyYW5zcG9ydHMuZmlsdGVyVG9FbmFibGVkKHRoaXMuX3RyYW5zcG9ydHNXaGl0ZWxpc3QsIGluZm8pO1xuICB0aGlzLl90cmFuc3BvcnRzID0gZW5hYmxlZFRyYW5zcG9ydHMubWFpbjtcbiAgZGVidWcodGhpcy5fdHJhbnNwb3J0cy5sZW5ndGggKyAnIGVuYWJsZWQgdHJhbnNwb3J0cycpO1xuXG4gIHRoaXMuX2Nvbm5lY3QoKTtcbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX2Nvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgVHJhbnNwb3J0ID0gdGhpcy5fdHJhbnNwb3J0cy5zaGlmdCgpOyBUcmFuc3BvcnQ7IFRyYW5zcG9ydCA9IHRoaXMuX3RyYW5zcG9ydHMuc2hpZnQoKSkge1xuICAgIGRlYnVnKCdhdHRlbXB0JywgVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUpO1xuICAgIGlmIChUcmFuc3BvcnQubmVlZEJvZHkpIHtcbiAgICAgIGlmICghZ2xvYmFsLmRvY3VtZW50LmJvZHkgfHxcbiAgICAgICAgICAodHlwZW9mIGdsb2JhbC5kb2N1bWVudC5yZWFkeVN0YXRlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgZ2xvYmFsLmRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdjb21wbGV0ZScgJiZcbiAgICAgICAgICAgIGdsb2JhbC5kb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnaW50ZXJhY3RpdmUnKSkge1xuICAgICAgICBkZWJ1Zygnd2FpdGluZyBmb3IgYm9keScpO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRzLnVuc2hpZnQoVHJhbnNwb3J0KTtcbiAgICAgICAgZXZlbnRVdGlscy5hdHRhY2hFdmVudCgnbG9hZCcsIHRoaXMuX2Nvbm5lY3QuYmluZCh0aGlzKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjYWxjdWxhdGUgdGltZW91dCBiYXNlZCBvbiBSVE8gYW5kIHJvdW5kIHRyaXBzLiBEZWZhdWx0IHRvIDVzXG4gICAgdmFyIHRpbWVvdXRNcyA9IE1hdGgubWF4KHRoaXMuX3RpbWVvdXQsICh0aGlzLl9ydG8gKiBUcmFuc3BvcnQucm91bmRUcmlwcykgfHwgNTAwMCk7XG4gICAgdGhpcy5fdHJhbnNwb3J0VGltZW91dElkID0gc2V0VGltZW91dCh0aGlzLl90cmFuc3BvcnRUaW1lb3V0LmJpbmQodGhpcyksIHRpbWVvdXRNcyk7XG4gICAgZGVidWcoJ3VzaW5nIHRpbWVvdXQnLCB0aW1lb3V0TXMpO1xuXG4gICAgdmFyIHRyYW5zcG9ydFVybCA9IHVybFV0aWxzLmFkZFBhdGgodGhpcy5fdHJhbnNVcmwsICcvJyArIHRoaXMuX3NlcnZlciArICcvJyArIHRoaXMuX2dlbmVyYXRlU2Vzc2lvbklkKCkpO1xuICAgIHZhciBvcHRpb25zID0gdGhpcy5fdHJhbnNwb3J0T3B0aW9uc1tUcmFuc3BvcnQudHJhbnNwb3J0TmFtZV07XG4gICAgZGVidWcoJ3RyYW5zcG9ydCB1cmwnLCB0cmFuc3BvcnRVcmwpO1xuICAgIHZhciB0cmFuc3BvcnRPYmogPSBuZXcgVHJhbnNwb3J0KHRyYW5zcG9ydFVybCwgdGhpcy5fdHJhbnNVcmwsIG9wdGlvbnMpO1xuICAgIHRyYW5zcG9ydE9iai5vbignbWVzc2FnZScsIHRoaXMuX3RyYW5zcG9ydE1lc3NhZ2UuYmluZCh0aGlzKSk7XG4gICAgdHJhbnNwb3J0T2JqLm9uY2UoJ2Nsb3NlJywgdGhpcy5fdHJhbnNwb3J0Q2xvc2UuYmluZCh0aGlzKSk7XG4gICAgdHJhbnNwb3J0T2JqLnRyYW5zcG9ydE5hbWUgPSBUcmFuc3BvcnQudHJhbnNwb3J0TmFtZTtcbiAgICB0aGlzLl90cmFuc3BvcnQgPSB0cmFuc3BvcnRPYmo7XG5cbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5fY2xvc2UoMjAwMCwgJ0FsbCB0cmFuc3BvcnRzIGZhaWxlZCcsIGZhbHNlKTtcbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX3RyYW5zcG9ydFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ190cmFuc3BvcnRUaW1lb3V0Jyk7XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DT05ORUNUSU5HKSB7XG4gICAgaWYgKHRoaXMuX3RyYW5zcG9ydCkge1xuICAgICAgdGhpcy5fdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdHJhbnNwb3J0Q2xvc2UoMjAwNywgJ1RyYW5zcG9ydCB0aW1lZCBvdXQnKTtcbiAgfVxufTtcblxuU29ja0pTLnByb3RvdHlwZS5fdHJhbnNwb3J0TWVzc2FnZSA9IGZ1bmN0aW9uKG1zZykge1xuICBkZWJ1ZygnX3RyYW5zcG9ydE1lc3NhZ2UnLCBtc2cpO1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgICAsIHR5cGUgPSBtc2cuc2xpY2UoMCwgMSlcbiAgICAsIGNvbnRlbnQgPSBtc2cuc2xpY2UoMSlcbiAgICAsIHBheWxvYWRcbiAgICA7XG5cbiAgLy8gZmlyc3QgY2hlY2sgZm9yIG1lc3NhZ2VzIHRoYXQgZG9uJ3QgbmVlZCBhIHBheWxvYWRcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnbyc6XG4gICAgICB0aGlzLl9vcGVuKCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAnaCc6XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdoZWFydGJlYXQnKSk7XG4gICAgICBkZWJ1ZygnaGVhcnRiZWF0JywgdGhpcy50cmFuc3BvcnQpO1xuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNvbnRlbnQpIHtcbiAgICB0cnkge1xuICAgICAgcGF5bG9hZCA9IEpTT04zLnBhcnNlKGNvbnRlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRlYnVnKCdiYWQganNvbicsIGNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkZWJ1ZygnZW1wdHkgcGF5bG9hZCcsIGNvbnRlbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2EnOlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGF5bG9hZCkpIHtcbiAgICAgICAgcGF5bG9hZC5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICBkZWJ1ZygnbWVzc2FnZScsIHNlbGYudHJhbnNwb3J0LCBwKTtcbiAgICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQobmV3IFRyYW5zcG9ydE1lc3NhZ2VFdmVudChwKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbSc6XG4gICAgICBkZWJ1ZygnbWVzc2FnZScsIHRoaXMudHJhbnNwb3J0LCBwYXlsb2FkKTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgVHJhbnNwb3J0TWVzc2FnZUV2ZW50KHBheWxvYWQpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2MnOlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGF5bG9hZCkgJiYgcGF5bG9hZC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdGhpcy5fY2xvc2UocGF5bG9hZFswXSwgcGF5bG9hZFsxXSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuU29ja0pTLnByb3RvdHlwZS5fdHJhbnNwb3J0Q2xvc2UgPSBmdW5jdGlvbihjb2RlLCByZWFzb24pIHtcbiAgZGVidWcoJ190cmFuc3BvcnRDbG9zZScsIHRoaXMudHJhbnNwb3J0LCBjb2RlLCByZWFzb24pO1xuICBpZiAodGhpcy5fdHJhbnNwb3J0KSB7XG4gICAgdGhpcy5fdHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIHRoaXMuX3RyYW5zcG9ydCA9IG51bGw7XG4gICAgdGhpcy50cmFuc3BvcnQgPSBudWxsO1xuICB9XG5cbiAgaWYgKCF1c2VyU2V0Q29kZShjb2RlKSAmJiBjb2RlICE9PSAyMDAwICYmIHRoaXMucmVhZHlTdGF0ZSA9PT0gU29ja0pTLkNPTk5FQ1RJTkcpIHtcbiAgICB0aGlzLl9jb25uZWN0KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fY2xvc2UoY29kZSwgcmVhc29uKTtcbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX29wZW4gPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19vcGVuJywgdGhpcy5fdHJhbnNwb3J0ICYmIHRoaXMuX3RyYW5zcG9ydC50cmFuc3BvcnROYW1lLCB0aGlzLnJlYWR5U3RhdGUpO1xuICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ09OTkVDVElORykge1xuICAgIGlmICh0aGlzLl90cmFuc3BvcnRUaW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90cmFuc3BvcnRUaW1lb3V0SWQpO1xuICAgICAgdGhpcy5fdHJhbnNwb3J0VGltZW91dElkID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU29ja0pTLk9QRU47XG4gICAgdGhpcy50cmFuc3BvcnQgPSB0aGlzLl90cmFuc3BvcnQudHJhbnNwb3J0TmFtZTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdvcGVuJykpO1xuICAgIGRlYnVnKCdjb25uZWN0ZWQnLCB0aGlzLnRyYW5zcG9ydCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIHNlcnZlciBtaWdodCBoYXZlIGJlZW4gcmVzdGFydGVkLCBhbmQgbG9zdCB0cmFjayBvZiBvdXJcbiAgICAvLyBjb25uZWN0aW9uLlxuICAgIHRoaXMuX2Nsb3NlKDEwMDYsICdTZXJ2ZXIgbG9zdCBzZXNzaW9uJyk7XG4gIH1cbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX2Nsb3NlID0gZnVuY3Rpb24oY29kZSwgcmVhc29uLCB3YXNDbGVhbikge1xuICBkZWJ1ZygnX2Nsb3NlJywgdGhpcy50cmFuc3BvcnQsIGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4sIHRoaXMucmVhZHlTdGF0ZSk7XG4gIHZhciBmb3JjZUZhaWwgPSBmYWxzZTtcblxuICBpZiAodGhpcy5faXIpIHtcbiAgICBmb3JjZUZhaWwgPSB0cnVlO1xuICAgIHRoaXMuX2lyLmNsb3NlKCk7XG4gICAgdGhpcy5faXIgPSBudWxsO1xuICB9XG4gIGlmICh0aGlzLl90cmFuc3BvcnQpIHtcbiAgICB0aGlzLl90cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB0aGlzLl90cmFuc3BvcnQgPSBudWxsO1xuICAgIHRoaXMudHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DTE9TRUQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yOiBTb2NrSlMgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQnKTtcbiAgfVxuXG4gIHRoaXMucmVhZHlTdGF0ZSA9IFNvY2tKUy5DTE9TSU5HO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNvY2tKUy5DTE9TRUQ7XG5cbiAgICBpZiAoZm9yY2VGYWlsKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdlcnJvcicpKTtcbiAgICB9XG5cbiAgICB2YXIgZSA9IG5ldyBDbG9zZUV2ZW50KCdjbG9zZScpO1xuICAgIGUud2FzQ2xlYW4gPSB3YXNDbGVhbiB8fCBmYWxzZTtcbiAgICBlLmNvZGUgPSBjb2RlIHx8IDEwMDA7XG4gICAgZS5yZWFzb24gPSByZWFzb247XG5cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgdGhpcy5vbm1lc3NhZ2UgPSB0aGlzLm9uY2xvc2UgPSB0aGlzLm9uZXJyb3IgPSBudWxsO1xuICAgIGRlYnVnKCdkaXNjb25uZWN0ZWQnKTtcbiAgfS5iaW5kKHRoaXMpLCAwKTtcbn07XG5cbi8vIFNlZTogaHR0cDovL3d3dy5lcmcuYWJkbi5hYy51ay9+Z2Vycml0L2RjY3Avbm90ZXMvY2NpZDIvcnRvX2VzdGltYXRvci9cbi8vIGFuZCBSRkMgMjk4OC5cblNvY2tKUy5wcm90b3R5cGUuY291bnRSVE8gPSBmdW5jdGlvbihydHQpIHtcbiAgLy8gSW4gYSBsb2NhbCBlbnZpcm9ubWVudCwgd2hlbiB1c2luZyBJRTgvOSBhbmQgdGhlIGBqc29ucC1wb2xsaW5nYFxuICAvLyB0cmFuc3BvcnQgdGhlIHRpbWUgbmVlZGVkIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gKHRoZSB0aW1lIHRoYXQgcGFzc1xuICAvLyBmcm9tIHRoZSBvcGVuaW5nIG9mIHRoZSB0cmFuc3BvcnQgdG8gdGhlIGNhbGwgb2YgYF9kaXNwYXRjaE9wZW5gKSBpc1xuICAvLyBhcm91bmQgMjAwbXNlYyAodGhlIGxvd2VyIGJvdW5kIHVzZWQgaW4gdGhlIGFydGljbGUgYWJvdmUpIGFuZCB0aGlzXG4gIC8vIGNhdXNlcyBzcHVyaW91cyB0aW1lb3V0cy4gRm9yIHRoaXMgcmVhc29uIHdlIGNhbGN1bGF0ZSBhIHZhbHVlIHNsaWdodGx5XG4gIC8vIGxhcmdlciB0aGFuIHRoYXQgdXNlZCBpbiB0aGUgYXJ0aWNsZS5cbiAgaWYgKHJ0dCA+IDEwMCkge1xuICAgIHJldHVybiA0ICogcnR0OyAvLyBydG8gPiA0MDBtc2VjXG4gIH1cbiAgcmV0dXJuIDMwMCArIHJ0dDsgLy8gMzAwbXNlYyA8IHJ0byA8PSA0MDBtc2VjXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGF2YWlsYWJsZVRyYW5zcG9ydHMpIHtcbiAgdHJhbnNwb3J0cyA9IHRyYW5zcG9ydChhdmFpbGFibGVUcmFuc3BvcnRzKTtcbiAgcmVxdWlyZSgnLi9pZnJhbWUtYm9vdHN0cmFwJykoU29ja0pTLCBhdmFpbGFibGVUcmFuc3BvcnRzKTtcbiAgcmV0dXJuIFNvY2tKUztcbn07XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vZXZlbnQvY2xvc2VcIjoyLFwiLi9ldmVudC9ldmVudFwiOjQsXCIuL2V2ZW50L2V2ZW50dGFyZ2V0XCI6NSxcIi4vZXZlbnQvdHJhbnMtbWVzc2FnZVwiOjYsXCIuL2lmcmFtZS1ib290c3RyYXBcIjo4LFwiLi9pbmZvLXJlY2VpdmVyXCI6MTIsXCIuL2xvY2F0aW9uXCI6MTMsXCIuL3NoaW1zXCI6MTUsXCIuL3V0aWxzL2Jyb3dzZXJcIjo0NCxcIi4vdXRpbHMvZXNjYXBlXCI6NDUsXCIuL3V0aWxzL2V2ZW50XCI6NDYsXCIuL3V0aWxzL2xvZ1wiOjQ4LFwiLi91dGlscy9vYmplY3RcIjo0OSxcIi4vdXRpbHMvcmFuZG9tXCI6NTAsXCIuL3V0aWxzL3RyYW5zcG9ydFwiOjUxLFwiLi91dGlscy91cmxcIjo1MixcIi4vdmVyc2lvblwiOjUzLFwiZGVidWdcIjo1NSxcImluaGVyaXRzXCI6NTcsXCJqc29uM1wiOjU4LFwidXJsLXBhcnNlXCI6NjF9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoganNjczogZGlzYWJsZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBwdWxsZWQgc3BlY2lmaWMgc2hpbXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cblxudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgU3RyaW5nUHJvdG90eXBlID0gU3RyaW5nLnByb3RvdHlwZTtcbnZhciBhcnJheV9zbGljZSA9IEFycmF5UHJvdG90eXBlLnNsaWNlO1xuXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIE9iamVjdFByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KG9iaikge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbnZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKG9iaikge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJztcbn07XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHt9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkgeyAvKiB0aGlzIGlzIEVTMyAqL1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufSgpKTtcblxuLy8gRGVmaW5lIGNvbmZpZ3VyYWJsZSwgd3JpdGFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BzXG4vLyBpZiB0aGV5IGRvbid0IGV4aXN0LlxudmFyIGRlZmluZVByb3BlcnR5O1xuaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7IHJldHVybjsgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG1ldGhvZFxuICAgICAgICB9KTtcbiAgICB9O1xufSBlbHNlIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7IHJldHVybjsgfVxuICAgICAgICBvYmplY3RbbmFtZV0gPSBtZXRob2Q7XG4gICAgfTtcbn1cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwLCBmb3JjZUFzc2lnbikge1xuICAgIGZvciAodmFyIG5hbWUgaW4gbWFwKSB7XG4gICAgICAgIGlmIChPYmplY3RQcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtYXAsIG5hbWUpKSB7XG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCBtYXBbbmFtZV0sIGZvcmNlQXNzaWduKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciB0b09iamVjdCA9IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKG8gPT0gbnVsbCkgeyAvLyB0aGlzIG1hdGNoZXMgYm90aCBudWxsIGFuZCB1bmRlZmluZWRcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IGNvbnZlcnQgXCIgKyBvICsgJyB0byBvYmplY3QnKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdChvKTtcbn07XG5cbi8vXG4vLyBVdGlsXG4vLyA9PT09PT1cbi8vXG5cbi8vIEVTNSA5LjRcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDkuNFxuLy8gaHR0cDovL2pzcGVyZi5jb20vdG8taW50ZWdlclxuXG5mdW5jdGlvbiB0b0ludGVnZXIobnVtKSB7XG4gICAgdmFyIG4gPSArbnVtO1xuICAgIGlmIChuICE9PSBuKSB7IC8vIGlzTmFOXG4gICAgICAgIG4gPSAwO1xuICAgIH0gZWxzZSBpZiAobiAhPT0gMCAmJiBuICE9PSAoMSAvIDApICYmIG4gIT09IC0oMSAvIDApKSB7XG4gICAgICAgIG4gPSAobiA+IDAgfHwgLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuXG5mdW5jdGlvbiBUb1VpbnQzMih4KSB7XG4gICAgcmV0dXJuIHggPj4+IDA7XG59XG5cbi8vXG4vLyBGdW5jdGlvblxuLy8gPT09PT09PT1cbi8vXG5cbi8vIEVTLTUgMTUuMy40LjVcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjMuNC41XG5cbmZ1bmN0aW9uIEVtcHR5KCkge31cblxuZGVmaW5lUHJvcGVydGllcyhGdW5jdGlvblByb3RvdHlwZSwge1xuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQodGhhdCkgeyAvLyAubGVuZ3RoIGlzIDFcbiAgICAgICAgLy8gMS4gTGV0IFRhcmdldCBiZSB0aGUgdGhpcyB2YWx1ZS5cbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgICAgIC8vIDIuIElmIElzQ2FsbGFibGUoVGFyZ2V0KSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24odGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnICsgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLiBMZXQgQSBiZSBhIG5ldyAocG9zc2libHkgZW1wdHkpIGludGVybmFsIGxpc3Qgb2YgYWxsIG9mIHRoZVxuICAgICAgICAvLyAgIGFyZ3VtZW50IHZhbHVlcyBwcm92aWRlZCBhZnRlciB0aGlzQXJnIChhcmcxLCBhcmcyIGV0YyksIGluIG9yZGVyLlxuICAgICAgICAvLyBYWFggc2xpY2VkQXJncyB3aWxsIHN0YW5kIGluIGZvciBcIkFcIiBpZiB1c2VkXG4gICAgICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOyAvLyBmb3Igbm9ybWFsIGNhbGxcbiAgICAgICAgLy8gNC4gTGV0IEYgYmUgYSBuZXcgbmF0aXZlIEVDTUFTY3JpcHQgb2JqZWN0LlxuICAgICAgICAvLyAxMS4gU2V0IHRoZSBbW1Byb3RvdHlwZV1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgdG8gdGhlIHN0YW5kYXJkXG4gICAgICAgIC8vICAgYnVpbHQtaW4gRnVuY3Rpb24gcHJvdG90eXBlIG9iamVjdCBhcyBzcGVjaWZpZWQgaW4gMTUuMy4zLjEuXG4gICAgICAgIC8vIDEyLiBTZXQgdGhlIFtbQ2FsbF1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgIC8vICAgMTUuMy40LjUuMS5cbiAgICAgICAgLy8gMTMuIFNldCB0aGUgW1tDb25zdHJ1Y3RdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICAvLyAgIDE1LjMuNC41LjIuXG4gICAgICAgIC8vIDE0LiBTZXQgdGhlIFtbSGFzSW5zdGFuY2VdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICAvLyAgIDE1LjMuNC41LjMuXG4gICAgICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgICAgICAvLyAxNS4zLjQuNS4yIFtbQ29uc3RydWN0XV1cbiAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCBvZiBhIGZ1bmN0aW9uIG9iamVjdCxcbiAgICAgICAgICAgICAgICAvLyBGIHRoYXQgd2FzIGNyZWF0ZWQgdXNpbmcgdGhlIGJpbmQgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYVxuICAgICAgICAgICAgICAgIC8vIGxpc3Qgb2YgYXJndW1lbnRzIEV4dHJhQXJncywgdGhlIGZvbGxvd2luZyBzdGVwcyBhcmUgdGFrZW46XG4gICAgICAgICAgICAgICAgLy8gMS4gTGV0IHRhcmdldCBiZSB0aGUgdmFsdWUgb2YgRidzIFtbVGFyZ2V0RnVuY3Rpb25dXVxuICAgICAgICAgICAgICAgIC8vICAgaW50ZXJuYWwgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gMi4gSWYgdGFyZ2V0IGhhcyBubyBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCwgYVxuICAgICAgICAgICAgICAgIC8vICAgVHlwZUVycm9yIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgICAgICAgICAgICAgLy8gMy4gTGV0IGJvdW5kQXJncyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRBcmdzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIC8vICAgdmFsdWVzIGFzIHRoZSBsaXN0IEV4dHJhQXJncyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsXG4gICAgICAgICAgICAgICAgLy8gICBtZXRob2Qgb2YgdGFyZ2V0IHByb3ZpZGluZyBhcmdzIGFzIHRoZSBhcmd1bWVudHMuXG5cbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChhcnJheV9zbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAxNS4zLjQuNS4xIFtbQ2FsbF1dXG4gICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgW1tDYWxsXV0gaW50ZXJuYWwgbWV0aG9kIG9mIGEgZnVuY3Rpb24gb2JqZWN0LCBGLFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIHdhcyBjcmVhdGVkIHVzaW5nIHRoZSBiaW5kIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFcbiAgICAgICAgICAgICAgICAvLyB0aGlzIHZhbHVlIGFuZCBhIGxpc3Qgb2YgYXJndW1lbnRzIEV4dHJhQXJncywgdGhlIGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgIC8vIHN0ZXBzIGFyZSB0YWtlbjpcbiAgICAgICAgICAgICAgICAvLyAxLiBMZXQgYm91bmRBcmdzIGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tCb3VuZEFyZ3NdXSBpbnRlcm5hbFxuICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gMi4gTGV0IGJvdW5kVGhpcyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRUaGlzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDMuIExldCB0YXJnZXQgYmUgdGhlIHZhbHVlIG9mIEYncyBbW1RhcmdldEZ1bmN0aW9uXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIC8vICAgdmFsdWVzIGFzIHRoZSBsaXN0IEV4dHJhQXJncyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2RcbiAgICAgICAgICAgICAgICAvLyAgIG9mIHRhcmdldCBwcm92aWRpbmcgYm91bmRUaGlzIGFzIHRoZSB0aGlzIHZhbHVlIGFuZFxuICAgICAgICAgICAgICAgIC8vICAgcHJvdmlkaW5nIGFyZ3MgYXMgdGhlIGFyZ3VtZW50cy5cblxuICAgICAgICAgICAgICAgIC8vIGVxdWl2OiB0YXJnZXQuY2FsbCh0aGlzLCAuLi5ib3VuZEFyZ3MsIC4uLmFyZ3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICAgICAgYXJncy5jb25jYXQoYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIDE1LiBJZiB0aGUgW1tDbGFzc11dIGludGVybmFsIHByb3BlcnR5IG9mIFRhcmdldCBpcyBcIkZ1bmN0aW9uXCIsIHRoZW5cbiAgICAgICAgLy8gICAgIGEuIExldCBMIGJlIHRoZSBsZW5ndGggcHJvcGVydHkgb2YgVGFyZ2V0IG1pbnVzIHRoZSBsZW5ndGggb2YgQS5cbiAgICAgICAgLy8gICAgIGIuIFNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIGVpdGhlciAwIG9yIEwsIHdoaWNoZXZlciBpc1xuICAgICAgICAvLyAgICAgICBsYXJnZXIuXG4gICAgICAgIC8vIDE2LiBFbHNlIHNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIDAuXG5cbiAgICAgICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcblxuICAgICAgICAvLyAxNy4gU2V0IHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBsZW5ndGggb3duIHByb3BlcnR5IG9mIEYgdG8gdGhlIHZhbHVlc1xuICAgICAgICAvLyAgIHNwZWNpZmllZCBpbiAxNS4zLjUuMS5cbiAgICAgICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWFhYIEJ1aWxkIGEgZHluYW1pYyBmdW5jdGlvbiB3aXRoIGRlc2lyZWQgYW1vdW50IG9mIGFyZ3VtZW50cyBpcyB0aGUgb25seVxuICAgICAgICAvLyB3YXkgdG8gc2V0IHRoZSBsZW5ndGggcHJvcGVydHkgb2YgYSBmdW5jdGlvbi5cbiAgICAgICAgLy8gSW4gZW52aXJvbm1lbnRzIHdoZXJlIENvbnRlbnQgU2VjdXJpdHkgUG9saWNpZXMgZW5hYmxlZCAoQ2hyb21lIGV4dGVuc2lvbnMsXG4gICAgICAgIC8vIGZvciBleC4pIGFsbCB1c2Ugb2YgZXZhbCBvciBGdW5jdGlvbiBjb3N0cnVjdG9yIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgIC8vIEhvd2V2ZXIgaW4gYWxsIG9mIHRoZXNlIGVudmlyb25tZW50cyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBleGlzdHNcbiAgICAgICAgLy8gYW5kIHNvIHRoaXMgY29kZSB3aWxsIG5ldmVyIGJlIGV4ZWN1dGVkLlxuICAgICAgICB2YXIgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgICAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgZGFuZ2xpbmcgcmVmZXJlbmNlcy5cbiAgICAgICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPXG4gICAgICAgIC8vIDE4LiBTZXQgdGhlIFtbRXh0ZW5zaWJsZV1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgdG8gdHJ1ZS5cblxuICAgICAgICAvLyBUT0RPXG4gICAgICAgIC8vIDE5LiBMZXQgdGhyb3dlciBiZSB0aGUgW1tUaHJvd1R5cGVFcnJvcl1dIGZ1bmN0aW9uIE9iamVjdCAoMTMuMi4zKS5cbiAgICAgICAgLy8gMjAuIENhbGwgdGhlIFtbRGVmaW5lT3duUHJvcGVydHldXSBpbnRlcm5hbCBtZXRob2Qgb2YgRiB3aXRoXG4gICAgICAgIC8vICAgYXJndW1lbnRzIFwiY2FsbGVyXCIsIFByb3BlcnR5RGVzY3JpcHRvciB7W1tHZXRdXTogdGhyb3dlciwgW1tTZXRdXTpcbiAgICAgICAgLy8gICB0aHJvd2VyLCBbW0VudW1lcmFibGVdXTogZmFsc2UsIFtbQ29uZmlndXJhYmxlXV06IGZhbHNlfSwgYW5kXG4gICAgICAgIC8vICAgZmFsc2UuXG4gICAgICAgIC8vIDIxLiBDYWxsIHRoZSBbW0RlZmluZU93blByb3BlcnR5XV0gaW50ZXJuYWwgbWV0aG9kIG9mIEYgd2l0aFxuICAgICAgICAvLyAgIGFyZ3VtZW50cyBcImFyZ3VtZW50c1wiLCBQcm9wZXJ0eURlc2NyaXB0b3Ige1tbR2V0XV06IHRocm93ZXIsXG4gICAgICAgIC8vICAgW1tTZXRdXTogdGhyb3dlciwgW1tFbnVtZXJhYmxlXV06IGZhbHNlLCBbW0NvbmZpZ3VyYWJsZV1dOiBmYWxzZX0sXG4gICAgICAgIC8vICAgYW5kIGZhbHNlLlxuXG4gICAgICAgIC8vIFRPRE9cbiAgICAgICAgLy8gTk9URSBGdW5jdGlvbiBvYmplY3RzIGNyZWF0ZWQgdXNpbmcgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgZG8gbm90XG4gICAgICAgIC8vIGhhdmUgYSBwcm90b3R5cGUgcHJvcGVydHkgb3IgdGhlIFtbQ29kZV1dLCBbW0Zvcm1hbFBhcmFtZXRlcnNdXSwgYW5kXG4gICAgICAgIC8vIFtbU2NvcGVdXSBpbnRlcm5hbCBwcm9wZXJ0aWVzLlxuICAgICAgICAvLyBYWFggY2FuJ3QgZGVsZXRlIHByb3RvdHlwZSBpbiBwdXJlLWpzLlxuXG4gICAgICAgIC8vIDIyLiBSZXR1cm4gRi5cbiAgICAgICAgcmV0dXJuIGJvdW5kO1xuICAgIH1cbn0pO1xuXG4vL1xuLy8gQXJyYXlcbi8vID09PT09XG4vL1xuXG4vLyBFUzUgMTUuNC4zLjJcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuMy4yXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pc0FycmF5XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5LCB7IGlzQXJyYXk6IGlzQXJyYXkgfSk7XG5cblxudmFyIGJveGVkU3RyaW5nID0gT2JqZWN0KCdhJyk7XG52YXIgc3BsaXRTdHJpbmcgPSBib3hlZFN0cmluZ1swXSAhPT0gJ2EnIHx8ICEoMCBpbiBib3hlZFN0cmluZyk7XG5cbnZhciBwcm9wZXJseUJveGVzQ29udGV4dCA9IGZ1bmN0aW9uIHByb3Blcmx5Qm94ZWQobWV0aG9kKSB7XG4gICAgLy8gQ2hlY2sgbm9kZSAwLjYuMjEgYnVnIHdoZXJlIHRoaXJkIHBhcmFtZXRlciBpcyBub3QgYm94ZWRcbiAgICB2YXIgcHJvcGVybHlCb3hlc05vblN0cmljdCA9IHRydWU7XG4gICAgdmFyIHByb3Blcmx5Qm94ZXNTdHJpY3QgPSB0cnVlO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgICAgbWV0aG9kLmNhbGwoJ2ZvbycsIGZ1bmN0aW9uIChfLCBfXywgY29udGV4dCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0JykgeyBwcm9wZXJseUJveGVzTm9uU3RyaWN0ID0gZmFsc2U7IH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWV0aG9kLmNhbGwoWzFdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgICAgICBwcm9wZXJseUJveGVzU3RyaWN0ID0gdHlwZW9mIHRoaXMgPT09ICdzdHJpbmcnO1xuICAgICAgICB9LCAneCcpO1xuICAgIH1cbiAgICByZXR1cm4gISFtZXRob2QgJiYgcHJvcGVybHlCb3hlc05vblN0cmljdCAmJiBwcm9wZXJseUJveGVzU3RyaWN0O1xufTtcblxuZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZnVuIC8qLCB0aGlzcCovKSB7XG4gICAgICAgIHZhciBvYmplY3QgPSB0b09iamVjdCh0aGlzKSxcbiAgICAgICAgICAgIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHRoaXMuc3BsaXQoJycpIDogb2JqZWN0LFxuICAgICAgICAgICAgdGhpc3AgPSBhcmd1bWVudHNbMV0sXG4gICAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzZWxmLmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpOyAvLyBUT0RPIG1lc3NhZ2VcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlICgrK2kgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChpIGluIHNlbGYpIHtcbiAgICAgICAgICAgICAgICAvLyBJbnZva2UgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpdGggY2FsbCwgcGFzc2luZyBhcmd1bWVudHM6XG4gICAgICAgICAgICAgICAgLy8gY29udGV4dCwgcHJvcGVydHkgdmFsdWUsIHByb3BlcnR5IGtleSwgdGhpc0FyZyBvYmplY3RcbiAgICAgICAgICAgICAgICAvLyBjb250ZXh0XG4gICAgICAgICAgICAgICAgZnVuLmNhbGwodGhpc3AsIHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUuZm9yRWFjaCkpO1xuXG4vLyBFUzUgMTUuNC40LjE0XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTRcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2ZcbnZhciBoYXNGaXJlZm94MkluZGV4T2ZCdWcgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiAmJiBbMCwgMV0uaW5kZXhPZigxLCAyKSAhPT0gLTE7XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzb3VnaHQgLyosIGZyb21JbmRleCAqLyApIHtcbiAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHRoaXMuc3BsaXQoJycpIDogdG9PYmplY3QodGhpcyksXG4gICAgICAgICAgICBsZW5ndGggPSBzZWxmLmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGkgPSB0b0ludGVnZXIoYXJndW1lbnRzWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhbmRsZSBuZWdhdGl2ZSBpbmRpY2VzXG4gICAgICAgIGkgPSBpID49IDAgPyBpIDogTWF0aC5tYXgoMCwgbGVuZ3RoICsgaSk7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIGluIHNlbGYgJiYgc2VsZltpXSA9PT0gc291Z2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbn0sIGhhc0ZpcmVmb3gySW5kZXhPZkJ1Zyk7XG5cbi8vXG4vLyBTdHJpbmdcbi8vID09PT09PVxuLy9cblxuLy8gRVM1IDE1LjUuNC4xNFxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNS40LjE0XG5cbi8vIFtidWdmaXgsIElFIGx0IDksIGZpcmVmb3ggNCwgS29ucXVlcm9yLCBPcGVyYSwgb2JzY3VyZSBicm93c2Vyc11cbi8vIE1hbnkgYnJvd3NlcnMgZG8gbm90IHNwbGl0IHByb3Blcmx5IHdpdGggcmVndWxhciBleHByZXNzaW9ucyBvciB0aGV5XG4vLyBkbyBub3QgcGVyZm9ybSB0aGUgc3BsaXQgY29ycmVjdGx5IHVuZGVyIG9ic2N1cmUgY29uZGl0aW9ucy5cbi8vIFNlZSBodHRwOi8vYmxvZy5zdGV2ZW5sZXZpdGhhbi5jb20vYXJjaGl2ZXMvY3Jvc3MtYnJvd3Nlci1zcGxpdFxuLy8gSSd2ZSB0ZXN0ZWQgaW4gbWFueSBicm93c2VycyBhbmQgdGhpcyBzZWVtcyB0byBjb3ZlciB0aGUgZGV2aWFudCBvbmVzOlxuLy8gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pIHNob3VsZCBiZSBbXCJcIiwgXCJcIl0sIG5vdCBbXCJcIl1cbi8vICAgICcuJy5zcGxpdCgvKC4/KSguPykvKSBzaG91bGQgYmUgW1wiXCIsIFwiLlwiLCBcIlwiLCBcIlwiXSwgbm90IFtcIlwiLCBcIlwiXVxuLy8gICAgJ3Rlc3N0Jy5zcGxpdCgvKHMpKi8pIHNob3VsZCBiZSBbXCJ0XCIsIHVuZGVmaW5lZCwgXCJlXCIsIFwic1wiLCBcInRcIl0sIG5vdFxuLy8gICAgICAgW3VuZGVmaW5lZCwgXCJ0XCIsIHVuZGVmaW5lZCwgXCJlXCIsIC4uLl1cbi8vICAgICcnLnNwbGl0KC8uPy8pIHNob3VsZCBiZSBbXSwgbm90IFtcIlwiXVxuLy8gICAgJy4nLnNwbGl0KC8oKSgpLykgc2hvdWxkIGJlIFtcIi5cIl0sIG5vdCBbXCJcIiwgXCJcIiwgXCIuXCJdXG5cbnZhciBzdHJpbmdfc3BsaXQgPSBTdHJpbmdQcm90b3R5cGUuc3BsaXQ7XG5pZiAoXG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT09IDQgfHxcbiAgICAndGVzc3QnLnNwbGl0KC8ocykqLylbMV0gPT09ICd0JyB8fFxuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT09IDQgfHxcbiAgICAnJy5zcGxpdCgvLj8vKS5sZW5ndGggfHxcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxXG4pIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29tcGxpYW50RXhlY05wY2cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHZvaWQgMDsgLy8gTlBDRzogbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcblxuICAgICAgICBTdHJpbmdQcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgICAgICAgdmFyIHN0cmluZyA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoc2VwYXJhdG9yID09PSB2b2lkIDAgJiYgbGltaXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICAgICAgICBpZiAoX3RvU3RyaW5nLmNhbGwoc2VwYXJhdG9yKSAhPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBbXSxcbiAgICAgICAgICAgICAgICBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSAgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5leHRlbmRlZCAgID8gJ3gnIDogJycpICsgLy8gUHJvcG9zZWQgZm9yIEVTNlxuICAgICAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgICAgID8gJ3knIDogJycpLCAvLyBGaXJlZm94IDMrXG4gICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IDAsXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICAgICAgICBzdHJpbmcgKz0gJyc7IC8vIFR5cGUtY29udmVydFxuICAgICAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZykge1xuICAgICAgICAgICAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgICAgICAgICAgIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvci5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIFZhbHVlcyBmb3IgYGxpbWl0YCwgcGVyIHRoZSBzcGVjOlxuICAgICAgICAgICAgICogSWYgdW5kZWZpbmVkOiA0Mjk0OTY3Mjk1IC8vIE1hdGgucG93KDIsIDMyKSAtIDFcbiAgICAgICAgICAgICAqIElmIDAsIEluZmluaXR5LCBvciBOYU46IDBcbiAgICAgICAgICAgICAqIElmIHBvc2l0aXZlIG51bWJlcjogbGltaXQgPSBNYXRoLmZsb29yKGxpbWl0KTsgaWYgKGxpbWl0ID4gNDI5NDk2NzI5NSkgbGltaXQgLT0gNDI5NDk2NzI5NjtcbiAgICAgICAgICAgICAqIElmIG5lZ2F0aXZlIG51bWJlcjogNDI5NDk2NzI5NiAtIE1hdGguZmxvb3IoTWF0aC5hYnMobGltaXQpKVxuICAgICAgICAgICAgICogSWYgb3RoZXI6IFR5cGUtY29udmVydCwgdGhlbiB1c2UgdGhlIGFib3ZlIHJ1bGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxpbWl0ID0gbGltaXQgPT09IHZvaWQgMCA/XG4gICAgICAgICAgICAgICAgLTEgPj4+IDAgOiAvLyBNYXRoLnBvdygyLCAzMikgLSAxXG4gICAgICAgICAgICAgICAgVG9VaW50MzIobGltaXQpO1xuICAgICAgICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIC8vIGBzZXBhcmF0b3IubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3JcbiAgICAgICAgICAgICAgICAgICAgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBzXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29tcGxpYW50RXhlY05wY2cgJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbaV0gPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5UHJvdG90eXBlLnB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZXBhcmF0b3IubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3IudGVzdCgnJykpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgbGltaXQpIDogb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH0oKSk7XG5cbi8vIFtidWdmaXgsIGNocm9tZV1cbi8vIElmIHNlcGFyYXRvciBpcyB1bmRlZmluZWQsIHRoZW4gdGhlIHJlc3VsdCBhcnJheSBjb250YWlucyBqdXN0IG9uZSBTdHJpbmcsXG4vLyB3aGljaCBpcyB0aGUgdGhpcyB2YWx1ZSAoY29udmVydGVkIHRvIGEgU3RyaW5nKS4gSWYgbGltaXQgaXMgbm90IHVuZGVmaW5lZCxcbi8vIHRoZW4gdGhlIG91dHB1dCBhcnJheSBpcyB0cnVuY2F0ZWQgc28gdGhhdCBpdCBjb250YWlucyBubyBtb3JlIHRoYW4gbGltaXRcbi8vIGVsZW1lbnRzLlxuLy8gXCIwXCIuc3BsaXQodW5kZWZpbmVkLCAwKSAtPiBbXVxufSBlbHNlIGlmICgnMCcuc3BsaXQodm9pZCAwLCAwKS5sZW5ndGgpIHtcbiAgICBTdHJpbmdQcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgIGlmIChzZXBhcmF0b3IgPT09IHZvaWQgMCAmJiBsaW1pdCA9PT0gMCkgeyByZXR1cm4gW107IH1cbiAgICAgICAgcmV0dXJuIHN0cmluZ19zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG59XG5cbi8vIEVDTUEtMjYyLCAzcmQgQi4yLjNcbi8vIE5vdCBhbiBFQ01BU2NyaXB0IHN0YW5kYXJkLCBhbHRob3VnaCBFQ01BU2NyaXB0IDNyZCBFZGl0aW9uIGhhcyBhXG4vLyBub24tbm9ybWF0aXZlIHNlY3Rpb24gc3VnZ2VzdGluZyB1bmlmb3JtIHNlbWFudGljcyBhbmQgaXQgc2hvdWxkIGJlXG4vLyBub3JtYWxpemVkIGFjcm9zcyBhbGwgYnJvd3NlcnNcbi8vIFtidWdmaXgsIElFIGx0IDldIElFIDwgOSBzdWJzdHIoKSB3aXRoIG5lZ2F0aXZlIHZhbHVlIG5vdCB3b3JraW5nIGluIElFXG52YXIgc3RyaW5nX3N1YnN0ciA9IFN0cmluZ1Byb3RvdHlwZS5zdWJzdHI7XG52YXIgaGFzTmVnYXRpdmVTdWJzdHJCdWcgPSAnJy5zdWJzdHIgJiYgJzBiJy5zdWJzdHIoLTEpICE9PSAnYic7XG5kZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgIHN1YnN0cjogZnVuY3Rpb24gc3Vic3RyKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ19zdWJzdHIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBzdGFydCA8IDAgPyAoKHN0YXJ0ID0gdGhpcy5sZW5ndGggKyBzdGFydCkgPCAwID8gMCA6IHN0YXJ0KSA6IHN0YXJ0LFxuICAgICAgICAgICAgbGVuZ3RoXG4gICAgICAgICk7XG4gICAgfVxufSwgaGFzTmVnYXRpdmVTdWJzdHJCdWcpO1xuXG59LHt9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gW1xuICAvLyBzdHJlYW1pbmcgdHJhbnNwb3J0c1xuICByZXF1aXJlKCcuL3RyYW5zcG9ydC93ZWJzb2NrZXQnKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC94aHItc3RyZWFtaW5nJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQveGRyLXN0cmVhbWluZycpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L2V2ZW50c291cmNlJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwJykocmVxdWlyZSgnLi90cmFuc3BvcnQvZXZlbnRzb3VyY2UnKSlcblxuICAvLyBwb2xsaW5nIHRyYW5zcG9ydHNcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvaHRtbGZpbGUnKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC9saWIvaWZyYW1lLXdyYXAnKShyZXF1aXJlKCcuL3RyYW5zcG9ydC9odG1sZmlsZScpKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC94aHItcG9sbGluZycpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L3hkci1wb2xsaW5nJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwJykocmVxdWlyZSgnLi90cmFuc3BvcnQveGhyLXBvbGxpbmcnKSlcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvanNvbnAtcG9sbGluZycpXG5dO1xuXG59LHtcIi4vdHJhbnNwb3J0L2V2ZW50c291cmNlXCI6MjAsXCIuL3RyYW5zcG9ydC9odG1sZmlsZVwiOjIxLFwiLi90cmFuc3BvcnQvanNvbnAtcG9sbGluZ1wiOjIzLFwiLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwXCI6MjYsXCIuL3RyYW5zcG9ydC93ZWJzb2NrZXRcIjozOCxcIi4vdHJhbnNwb3J0L3hkci1wb2xsaW5nXCI6MzksXCIuL3RyYW5zcG9ydC94ZHItc3RyZWFtaW5nXCI6NDAsXCIuL3RyYW5zcG9ydC94aHItcG9sbGluZ1wiOjQxLFwiLi90cmFuc3BvcnQveGhyLXN0cmVhbWluZ1wiOjQyfV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2V2ZW50JylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gICwgWEhSID0gZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0XG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpicm93c2VyOnhocicpO1xufVxuXG5mdW5jdGlvbiBBYnN0cmFjdFhIUk9iamVjdChtZXRob2QsIHVybCwgcGF5bG9hZCwgb3B0cykge1xuICBkZWJ1ZyhtZXRob2QsIHVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5fc3RhcnQobWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMpO1xuICB9LCAwKTtcbn1cblxuaW5oZXJpdHMoQWJzdHJhY3RYSFJPYmplY3QsIEV2ZW50RW1pdHRlcik7XG5cbkFic3RyYWN0WEhST2JqZWN0LnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbihtZXRob2QsIHVybCwgcGF5bG9hZCwgb3B0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdHJ5IHtcbiAgICB0aGlzLnhociA9IG5ldyBYSFIoKTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgfVxuXG4gIGlmICghdGhpcy54aHIpIHtcbiAgICBkZWJ1Zygnbm8geGhyJyk7XG4gICAgdGhpcy5lbWl0KCdmaW5pc2gnLCAwLCAnbm8geGhyIHN1cHBvcnQnKTtcbiAgICB0aGlzLl9jbGVhbnVwKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gc2V2ZXJhbCBicm93c2VycyBjYWNoZSBQT1NUc1xuICB1cmwgPSB1cmxVdGlscy5hZGRRdWVyeSh1cmwsICd0PScgKyAoK25ldyBEYXRlKCkpKTtcblxuICAvLyBFeHBsb3JlciB0ZW5kcyB0byBrZWVwIGNvbm5lY3Rpb24gb3BlbiwgZXZlbiBhZnRlciB0aGVcbiAgLy8gdGFiIGdldHMgY2xvc2VkOiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC81MjgwXG4gIHRoaXMudW5sb2FkUmVmID0gdXRpbHMudW5sb2FkQWRkKGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCd1bmxvYWQgY2xlYW51cCcpO1xuICAgIHNlbGYuX2NsZWFudXAodHJ1ZSk7XG4gIH0pO1xuICB0cnkge1xuICAgIHRoaXMueGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICAgIGlmICh0aGlzLnRpbWVvdXQgJiYgJ3RpbWVvdXQnIGluIHRoaXMueGhyKSB7XG4gICAgICB0aGlzLnhoci50aW1lb3V0ID0gdGhpcy50aW1lb3V0O1xuICAgICAgdGhpcy54aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGRlYnVnKCd4aHIgdGltZW91dCcpO1xuICAgICAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIDAsICcnKTtcbiAgICAgICAgc2VsZi5fY2xlYW51cChmYWxzZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGRlYnVnKCdleGNlcHRpb24nLCBlKTtcbiAgICAvLyBJRSByYWlzZXMgYW4gZXhjZXB0aW9uIG9uIHdyb25nIHBvcnQuXG4gICAgdGhpcy5lbWl0KCdmaW5pc2gnLCAwLCAnJyk7XG4gICAgdGhpcy5fY2xlYW51cChmYWxzZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCghb3B0cyB8fCAhb3B0cy5ub0NyZWRlbnRpYWxzKSAmJiBBYnN0cmFjdFhIUk9iamVjdC5zdXBwb3J0c0NPUlMpIHtcbiAgICBkZWJ1Zygnd2l0aENyZWRlbnRpYWxzJyk7XG4gICAgLy8gTW96aWxsYSBkb2NzIHNheXMgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vWE1MSHR0cFJlcXVlc3QgOlxuICAgIC8vIFwiVGhpcyBuZXZlciBhZmZlY3RzIHNhbWUtc2l0ZSByZXF1ZXN0cy5cIlxuXG4gICAgdGhpcy54aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgfVxuICBpZiAob3B0cyAmJiBvcHRzLmhlYWRlcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gb3B0cy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLnhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgb3B0cy5oZWFkZXJzW2tleV0pO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLnhocikge1xuICAgICAgdmFyIHggPSBzZWxmLnhocjtcbiAgICAgIHZhciB0ZXh0LCBzdGF0dXM7XG4gICAgICBkZWJ1ZygncmVhZHlTdGF0ZScsIHgucmVhZHlTdGF0ZSk7XG4gICAgICBzd2l0Y2ggKHgucmVhZHlTdGF0ZSkge1xuICAgICAgY2FzZSAzOlxuICAgICAgICAvLyBJRSBkb2Vzbid0IGxpa2UgcGVla2luZyBpbnRvIHJlc3BvbnNlVGV4dCBvciBzdGF0dXNcbiAgICAgICAgLy8gb24gTWljcm9zb2Z0LlhNTEhUVFAgYW5kIHJlYWR5c3RhdGU9M1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHN0YXR1cyA9IHguc3RhdHVzO1xuICAgICAgICAgIHRleHQgPSB4LnJlc3BvbnNlVGV4dDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICAgICAgfVxuICAgICAgICBkZWJ1Zygnc3RhdHVzJywgc3RhdHVzKTtcbiAgICAgICAgLy8gSUUgcmV0dXJucyAxMjIzIGZvciAyMDQ6IGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzE0NTBcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gMTIyMykge1xuICAgICAgICAgIHN0YXR1cyA9IDIwNDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElFIGRvZXMgcmV0dXJuIHJlYWR5c3RhdGUgPT0gMyBmb3IgNDA0IGFuc3dlcnMuXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDIwMCAmJiB0ZXh0ICYmIHRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGRlYnVnKCdjaHVuaycpO1xuICAgICAgICAgIHNlbGYuZW1pdCgnY2h1bmsnLCBzdGF0dXMsIHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBzdGF0dXMgPSB4LnN0YXR1cztcbiAgICAgICAgZGVidWcoJ3N0YXR1cycsIHN0YXR1cyk7XG4gICAgICAgIC8vIElFIHJldHVybnMgMTIyMyBmb3IgMjA0OiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDEyMjMpIHtcbiAgICAgICAgICBzdGF0dXMgPSAyMDQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSUUgcmV0dXJucyB0aGlzIGZvciBhIGJhZCBwb3J0XG4gICAgICAgIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS93aW5kb3dzL2Rlc2t0b3AvYWEzODM3NzAodj12cy44NSkuYXNweFxuICAgICAgICBpZiAoc3RhdHVzID09PSAxMjAwNSB8fCBzdGF0dXMgPT09IDEyMDI5KSB7XG4gICAgICAgICAgc3RhdHVzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlYnVnKCdmaW5pc2gnLCBzdGF0dXMsIHgucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgc2VsZi5lbWl0KCdmaW5pc2gnLCBzdGF0dXMsIHgucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgc2VsZi5fY2xlYW51cChmYWxzZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0cnkge1xuICAgIHNlbGYueGhyLnNlbmQocGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIDAsICcnKTtcbiAgICBzZWxmLl9jbGVhbnVwKGZhbHNlKTtcbiAgfVxufTtcblxuQWJzdHJhY3RYSFJPYmplY3QucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oYWJvcnQpIHtcbiAgZGVidWcoJ2NsZWFudXAnKTtcbiAgaWYgKCF0aGlzLnhocikge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB1dGlscy51bmxvYWREZWwodGhpcy51bmxvYWRSZWYpO1xuXG4gIC8vIElFIG5lZWRzIHRoaXMgZmllbGQgdG8gYmUgYSBmdW5jdGlvblxuICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHt9O1xuICBpZiAodGhpcy54aHIub250aW1lb3V0KSB7XG4gICAgdGhpcy54aHIub250aW1lb3V0ID0gbnVsbDtcbiAgfVxuXG4gIGlmIChhYm9ydCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnhoci5hYm9ydCgpO1xuICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICB9XG4gIH1cbiAgdGhpcy51bmxvYWRSZWYgPSB0aGlzLnhociA9IG51bGw7XG59O1xuXG5BYnN0cmFjdFhIUk9iamVjdC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMuX2NsZWFudXAodHJ1ZSk7XG59O1xuXG5BYnN0cmFjdFhIUk9iamVjdC5lbmFibGVkID0gISFYSFI7XG4vLyBvdmVycmlkZSBYTUxIdHRwUmVxdWVzdCBmb3IgSUU2Lzdcbi8vIG9iZnVzY2F0ZSB0byBhdm9pZCBmaXJld2FsbHNcbnZhciBheG8gPSBbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpO1xuaWYgKCFBYnN0cmFjdFhIUk9iamVjdC5lbmFibGVkICYmIChheG8gaW4gZ2xvYmFsKSkge1xuICBkZWJ1Zygnb3ZlcnJpZGluZyB4bWxodHRwcmVxdWVzdCcpO1xuICBYSFIgPSBmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBnbG9iYWxbYXhvXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG4gIEFic3RyYWN0WEhST2JqZWN0LmVuYWJsZWQgPSAhIW5ldyBYSFIoKTtcbn1cblxudmFyIGNvcnMgPSBmYWxzZTtcbnRyeSB7XG4gIGNvcnMgPSAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWEhSKCk7XG59IGNhdGNoIChpZ25vcmVkKSB7XG4gIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbn1cblxuQWJzdHJhY3RYSFJPYmplY3Quc3VwcG9ydHNDT1JTID0gY29ycztcblxubW9kdWxlLmV4cG9ydHMgPSBBYnN0cmFjdFhIUk9iamVjdDtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9LHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiLi4vLi4vdXRpbHMvZXZlbnRcIjo0NixcIi4uLy4uL3V0aWxzL3VybFwiOjUyLFwiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3fV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuRXZlbnRTb3VyY2U7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHt9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcml2ZXIgPSBnbG9iYWwuV2ViU29ja2V0IHx8IGdsb2JhbC5Nb3pXZWJTb2NrZXQ7XG5pZiAoRHJpdmVyKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gV2ViU29ja2V0QnJvd3NlckRyaXZlcih1cmwpIHtcblx0XHRyZXR1cm4gbmV3IERyaXZlcih1cmwpO1xuXHR9O1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMgPSB1bmRlZmluZWQ7XG59XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHt9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBBamF4QmFzZWRUcmFuc3BvcnQgPSByZXF1aXJlKCcuL2xpYi9hamF4LWJhc2VkJylcbiAgLCBFdmVudFNvdXJjZVJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci9ldmVudHNvdXJjZScpXG4gICwgWEhSQ29yc09iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1jb3JzJylcbiAgLCBFdmVudFNvdXJjZURyaXZlciA9IHJlcXVpcmUoJ2V2ZW50c291cmNlJylcbiAgO1xuXG5mdW5jdGlvbiBFdmVudFNvdXJjZVRyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIUV2ZW50U291cmNlVHJhbnNwb3J0LmVuYWJsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG5cbiAgQWpheEJhc2VkVHJhbnNwb3J0LmNhbGwodGhpcywgdHJhbnNVcmwsICcvZXZlbnRzb3VyY2UnLCBFdmVudFNvdXJjZVJlY2VpdmVyLCBYSFJDb3JzT2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoRXZlbnRTb3VyY2VUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cbkV2ZW50U291cmNlVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhRXZlbnRTb3VyY2VEcml2ZXI7XG59O1xuXG5FdmVudFNvdXJjZVRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ2V2ZW50c291cmNlJztcbkV2ZW50U291cmNlVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50U291cmNlVHJhbnNwb3J0O1xuXG59LHtcIi4vbGliL2FqYXgtYmFzZWRcIjoyNCxcIi4vcmVjZWl2ZXIvZXZlbnRzb3VyY2VcIjoyOSxcIi4vc2VuZGVyL3hoci1jb3JzXCI6MzUsXCJldmVudHNvdXJjZVwiOjE4LFwiaW5oZXJpdHNcIjo1N31dLDIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEh0bWxmaWxlUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL2h0bWxmaWxlJylcbiAgLCBYSFJMb2NhbE9iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1sb2NhbCcpXG4gICwgQWpheEJhc2VkVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi9saWIvYWpheC1iYXNlZCcpXG4gIDtcblxuZnVuY3Rpb24gSHRtbEZpbGVUcmFuc3BvcnQodHJhbnNVcmwpIHtcbiAgaWYgKCFIdG1sZmlsZVJlY2VpdmVyLmVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy9odG1sZmlsZScsIEh0bWxmaWxlUmVjZWl2ZXIsIFhIUkxvY2FsT2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoSHRtbEZpbGVUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cbkh0bWxGaWxlVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbihpbmZvKSB7XG4gIHJldHVybiBIdG1sZmlsZVJlY2VpdmVyLmVuYWJsZWQgJiYgaW5mby5zYW1lT3JpZ2luO1xufTtcblxuSHRtbEZpbGVUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICdodG1sZmlsZSc7XG5IdG1sRmlsZVRyYW5zcG9ydC5yb3VuZFRyaXBzID0gMjtcblxubW9kdWxlLmV4cG9ydHMgPSBIdG1sRmlsZVRyYW5zcG9ydDtcblxufSx7XCIuL2xpYi9hamF4LWJhc2VkXCI6MjQsXCIuL3JlY2VpdmVyL2h0bWxmaWxlXCI6MzAsXCIuL3NlbmRlci94aHItbG9jYWxcIjozNyxcImluaGVyaXRzXCI6NTd9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBGZXcgY29vbCB0cmFuc3BvcnRzIGRvIHdvcmsgb25seSBmb3Igc2FtZS1vcmlnaW4uIEluIG9yZGVyIHRvIG1ha2Vcbi8vIHRoZW0gd29yayBjcm9zcy1kb21haW4gd2Ugc2hhbGwgdXNlIGlmcmFtZSwgc2VydmVkIGZyb20gdGhlXG4vLyByZW1vdGUgZG9tYWluLiBOZXcgYnJvd3NlcnMgaGF2ZSBjYXBhYmlsaXRpZXMgdG8gY29tbXVuaWNhdGUgd2l0aFxuLy8gY3Jvc3MgZG9tYWluIGlmcmFtZSB1c2luZyBwb3N0TWVzc2FnZSgpLiBJbiBJRSBpdCB3YXMgaW1wbGVtZW50ZWRcbi8vIGZyb20gSUUgOCssIGJ1dCBvZiBjb3Vyc2UsIElFIGdvdCBzb21lIGRldGFpbHMgd3Jvbmc6XG4vLyAgICBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvY2MxOTcwMTUodj1WUy44NSkuYXNweFxuLy8gICAgaHR0cDovL3N0ZXZlc291ZGVycy5jb20vbWlzYy90ZXN0LXBvc3RtZXNzYWdlLnBocFxuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgSlNPTjMgPSByZXF1aXJlKCdqc29uMycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgdmVyc2lvbiA9IHJlcXVpcmUoJy4uL3ZlcnNpb24nKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXJsJylcbiAgLCBpZnJhbWVVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2lmcmFtZScpXG4gICwgZXZlbnRVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2V2ZW50JylcbiAgLCByYW5kb20gPSByZXF1aXJlKCcuLi91dGlscy9yYW5kb20nKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6dHJhbnNwb3J0OmlmcmFtZScpO1xufVxuXG5mdW5jdGlvbiBJZnJhbWVUcmFuc3BvcnQodHJhbnNwb3J0LCB0cmFuc1VybCwgYmFzZVVybCkge1xuICBpZiAoIUlmcmFtZVRyYW5zcG9ydC5lbmFibGVkKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMub3JpZ2luID0gdXJsVXRpbHMuZ2V0T3JpZ2luKGJhc2VVcmwpO1xuICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICB0aGlzLnRyYW5zVXJsID0gdHJhbnNVcmw7XG4gIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICB0aGlzLndpbmRvd0lkID0gcmFuZG9tLnN0cmluZyg4KTtcblxuICB2YXIgaWZyYW1lVXJsID0gdXJsVXRpbHMuYWRkUGF0aChiYXNlVXJsLCAnL2lmcmFtZS5odG1sJykgKyAnIycgKyB0aGlzLndpbmRvd0lkO1xuICBkZWJ1Zyh0cmFuc3BvcnQsIHRyYW5zVXJsLCBpZnJhbWVVcmwpO1xuXG4gIHRoaXMuaWZyYW1lT2JqID0gaWZyYW1lVXRpbHMuY3JlYXRlSWZyYW1lKGlmcmFtZVVybCwgZnVuY3Rpb24ocikge1xuICAgIGRlYnVnKCdlcnIgY2FsbGJhY2snKTtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgMTAwNiwgJ1VuYWJsZSB0byBsb2FkIGFuIGlmcmFtZSAoJyArIHIgKyAnKScpO1xuICAgIHNlbGYuY2xvc2UoKTtcbiAgfSk7XG5cbiAgdGhpcy5vbm1lc3NhZ2VDYWxsYmFjayA9IHRoaXMuX21lc3NhZ2UuYmluZCh0aGlzKTtcbiAgZXZlbnRVdGlscy5hdHRhY2hFdmVudCgnbWVzc2FnZScsIHRoaXMub25tZXNzYWdlQ2FsbGJhY2spO1xufVxuXG5pbmhlcml0cyhJZnJhbWVUcmFuc3BvcnQsIEV2ZW50RW1pdHRlcik7XG5cbklmcmFtZVRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIGlmICh0aGlzLmlmcmFtZU9iaikge1xuICAgIGV2ZW50VXRpbHMuZGV0YWNoRXZlbnQoJ21lc3NhZ2UnLCB0aGlzLm9ubWVzc2FnZUNhbGxiYWNrKTtcbiAgICB0cnkge1xuICAgICAgLy8gV2hlbiB0aGUgaWZyYW1lIGlzIG5vdCBsb2FkZWQsIElFIHJhaXNlcyBhbiBleGNlcHRpb25cbiAgICAgIC8vIG9uICdjb250ZW50V2luZG93Jy5cbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoJ2MnKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgfVxuICAgIHRoaXMuaWZyYW1lT2JqLmNsZWFudXAoKTtcbiAgICB0aGlzLmlmcmFtZU9iaiA9IG51bGw7XG4gICAgdGhpcy5vbm1lc3NhZ2VDYWxsYmFjayA9IHRoaXMuaWZyYW1lT2JqID0gbnVsbDtcbiAgfVxufTtcblxuSWZyYW1lVHJhbnNwb3J0LnByb3RvdHlwZS5fbWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgZGVidWcoJ21lc3NhZ2UnLCBlLmRhdGEpO1xuICBpZiAoIXVybFV0aWxzLmlzT3JpZ2luRXF1YWwoZS5vcmlnaW4sIHRoaXMub3JpZ2luKSkge1xuICAgIGRlYnVnKCdub3Qgc2FtZSBvcmlnaW4nLCBlLm9yaWdpbiwgdGhpcy5vcmlnaW4pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpZnJhbWVNZXNzYWdlO1xuICB0cnkge1xuICAgIGlmcmFtZU1lc3NhZ2UgPSBKU09OMy5wYXJzZShlLmRhdGEpO1xuICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgZGVidWcoJ2JhZCBqc29uJywgZS5kYXRhKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaWZyYW1lTWVzc2FnZS53aW5kb3dJZCAhPT0gdGhpcy53aW5kb3dJZCkge1xuICAgIGRlYnVnKCdtaXNtYXRjaGVkIHdpbmRvdyBpZCcsIGlmcmFtZU1lc3NhZ2Uud2luZG93SWQsIHRoaXMud2luZG93SWQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN3aXRjaCAoaWZyYW1lTWVzc2FnZS50eXBlKSB7XG4gIGNhc2UgJ3MnOlxuICAgIHRoaXMuaWZyYW1lT2JqLmxvYWRlZCgpO1xuICAgIC8vIHdpbmRvdyBnbG9iYWwgZGVwZW5kZW5jeVxuICAgIHRoaXMucG9zdE1lc3NhZ2UoJ3MnLCBKU09OMy5zdHJpbmdpZnkoW1xuICAgICAgdmVyc2lvblxuICAgICwgdGhpcy50cmFuc3BvcnRcbiAgICAsIHRoaXMudHJhbnNVcmxcbiAgICAsIHRoaXMuYmFzZVVybFxuICAgIF0pKTtcbiAgICBicmVhaztcbiAgY2FzZSAndCc6XG4gICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICBicmVhaztcbiAgY2FzZSAnYyc6XG4gICAgdmFyIGNkYXRhO1xuICAgIHRyeSB7XG4gICAgICBjZGF0YSA9IEpTT04zLnBhcnNlKGlmcmFtZU1lc3NhZ2UuZGF0YSk7XG4gICAgfSBjYXRjaCAoaWdub3JlZCkge1xuICAgICAgZGVidWcoJ2JhZCBqc29uJywgaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIGNkYXRhWzBdLCBjZGF0YVsxXSk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICAgIGJyZWFrO1xuICB9XG59O1xuXG5JZnJhbWVUcmFuc3BvcnQucHJvdG90eXBlLnBvc3RNZXNzYWdlID0gZnVuY3Rpb24odHlwZSwgZGF0YSkge1xuICBkZWJ1ZygncG9zdE1lc3NhZ2UnLCB0eXBlLCBkYXRhKTtcbiAgdGhpcy5pZnJhbWVPYmoucG9zdChKU09OMy5zdHJpbmdpZnkoe1xuICAgIHdpbmRvd0lkOiB0aGlzLndpbmRvd0lkXG4gICwgdHlwZTogdHlwZVxuICAsIGRhdGE6IGRhdGEgfHwgJydcbiAgfSksIHRoaXMub3JpZ2luKTtcbn07XG5cbklmcmFtZVRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgZGVidWcoJ3NlbmQnLCBtZXNzYWdlKTtcbiAgdGhpcy5wb3N0TWVzc2FnZSgnbScsIG1lc3NhZ2UpO1xufTtcblxuSWZyYW1lVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGlmcmFtZVV0aWxzLmlmcmFtZUVuYWJsZWQ7XG59O1xuXG5JZnJhbWVUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICdpZnJhbWUnO1xuSWZyYW1lVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IElmcmFtZVRyYW5zcG9ydDtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcIi4uL3V0aWxzL2V2ZW50XCI6NDYsXCIuLi91dGlscy9pZnJhbWVcIjo0NyxcIi4uL3V0aWxzL3JhbmRvbVwiOjUwLFwiLi4vdXRpbHMvdXJsXCI6NTIsXCIuLi92ZXJzaW9uXCI6NTMsXCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTcsXCJqc29uM1wiOjU4fV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGUgc2ltcGxlc3QgYW5kIG1vc3Qgcm9idXN0IHRyYW5zcG9ydCwgdXNpbmcgdGhlIHdlbGwta25vdyBjcm9zc1xuLy8gZG9tYWluIGhhY2sgLSBKU09OUC4gVGhpcyB0cmFuc3BvcnQgaXMgcXVpdGUgaW5lZmZpY2llbnQgLSBvbmVcbi8vIG1lc3NhZ2UgY291bGQgdXNlIHVwIHRvIG9uZSBodHRwIHJlcXVlc3QuIEJ1dCBhdCBsZWFzdCBpdCB3b3JrcyBhbG1vc3Rcbi8vIGV2ZXJ5d2hlcmUuXG4vLyBLbm93biBsaW1pdGF0aW9uczpcbi8vICAgbyB5b3Ugd2lsbCBnZXQgYSBzcGlubmluZyBjdXJzb3Jcbi8vICAgbyBmb3IgS29ucXVlcm9yIGEgZHVtYiB0aW1lciBpcyBuZWVkZWQgdG8gZGV0ZWN0IGVycm9yc1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgU2VuZGVyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2xpYi9zZW5kZXItcmVjZWl2ZXInKVxuICAsIEpzb25wUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL2pzb25wJylcbiAgLCBqc29ucFNlbmRlciA9IHJlcXVpcmUoJy4vc2VuZGVyL2pzb25wJylcbiAgO1xuXG5mdW5jdGlvbiBKc29uUFRyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIUpzb25QVHJhbnNwb3J0LmVuYWJsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIFNlbmRlclJlY2VpdmVyLmNhbGwodGhpcywgdHJhbnNVcmwsICcvanNvbnAnLCBqc29ucFNlbmRlciwgSnNvbnBSZWNlaXZlcik7XG59XG5cbmluaGVyaXRzKEpzb25QVHJhbnNwb3J0LCBTZW5kZXJSZWNlaXZlcik7XG5cbkpzb25QVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhZ2xvYmFsLmRvY3VtZW50O1xufTtcblxuSnNvblBUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICdqc29ucC1wb2xsaW5nJztcbkpzb25QVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAxO1xuSnNvblBUcmFuc3BvcnQubmVlZEJvZHkgPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpzb25QVHJhbnNwb3J0O1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuL2xpYi9zZW5kZXItcmVjZWl2ZXJcIjoyOCxcIi4vcmVjZWl2ZXIvanNvbnBcIjozMSxcIi4vc2VuZGVyL2pzb25wXCI6MzMsXCJpbmhlcml0c1wiOjU3fV0sMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgLCBTZW5kZXJSZWNlaXZlciA9IHJlcXVpcmUoJy4vc2VuZGVyLXJlY2VpdmVyJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OmFqYXgtYmFzZWQnKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQWpheFNlbmRlcihBamF4T2JqZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbih1cmwsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgZGVidWcoJ2NyZWF0ZSBhamF4IHNlbmRlcicsIHVybCwgcGF5bG9hZCk7XG4gICAgdmFyIG9wdCA9IHt9O1xuICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdC5oZWFkZXJzID0geydDb250ZW50LXR5cGUnOiAndGV4dC9wbGFpbid9O1xuICAgIH1cbiAgICB2YXIgYWpheFVybCA9IHVybFV0aWxzLmFkZFBhdGgodXJsLCAnL3hocl9zZW5kJyk7XG4gICAgdmFyIHhvID0gbmV3IEFqYXhPYmplY3QoJ1BPU1QnLCBhamF4VXJsLCBwYXlsb2FkLCBvcHQpO1xuICAgIHhvLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgZGVidWcoJ2ZpbmlzaCcsIHN0YXR1cyk7XG4gICAgICB4byA9IG51bGw7XG5cbiAgICAgIGlmIChzdGF0dXMgIT09IDIwMCAmJiBzdGF0dXMgIT09IDIwNCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdodHRwIHN0YXR1cyAnICsgc3RhdHVzKSk7XG4gICAgICB9XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdhYm9ydCcpO1xuICAgICAgeG8uY2xvc2UoKTtcbiAgICAgIHhvID0gbnVsbDtcblxuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignQWJvcnRlZCcpO1xuICAgICAgZXJyLmNvZGUgPSAxMDAwO1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBBamF4QmFzZWRUcmFuc3BvcnQodHJhbnNVcmwsIHVybFN1ZmZpeCwgUmVjZWl2ZXIsIEFqYXhPYmplY3QpIHtcbiAgU2VuZGVyUmVjZWl2ZXIuY2FsbCh0aGlzLCB0cmFuc1VybCwgdXJsU3VmZml4LCBjcmVhdGVBamF4U2VuZGVyKEFqYXhPYmplY3QpLCBSZWNlaXZlciwgQWpheE9iamVjdCk7XG59XG5cbmluaGVyaXRzKEFqYXhCYXNlZFRyYW5zcG9ydCwgU2VuZGVyUmVjZWl2ZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFqYXhCYXNlZFRyYW5zcG9ydDtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcIi4uLy4uL3V0aWxzL3VybFwiOjUyLFwiLi9zZW5kZXItcmVjZWl2ZXJcIjoyOCxcImRlYnVnXCI6NTUsXCJpbmhlcml0c1wiOjU3fV0sMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6YnVmZmVyZWQtc2VuZGVyJyk7XG59XG5cbmZ1bmN0aW9uIEJ1ZmZlcmVkU2VuZGVyKHVybCwgc2VuZGVyKSB7XG4gIGRlYnVnKHVybCk7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgdGhpcy5zZW5kZXIgPSBzZW5kZXI7XG4gIHRoaXMudXJsID0gdXJsO1xufVxuXG5pbmhlcml0cyhCdWZmZXJlZFNlbmRlciwgRXZlbnRFbWl0dGVyKTtcblxuQnVmZmVyZWRTZW5kZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gIGRlYnVnKCdzZW5kJywgbWVzc2FnZSk7XG4gIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKG1lc3NhZ2UpO1xuICBpZiAoIXRoaXMuc2VuZFN0b3ApIHtcbiAgICB0aGlzLnNlbmRTY2hlZHVsZSgpO1xuICB9XG59O1xuXG4vLyBGb3IgcG9sbGluZyB0cmFuc3BvcnRzIGluIGEgc2l0dWF0aW9uIHdoZW4gaW4gdGhlIG1lc3NhZ2UgY2FsbGJhY2ssXG4vLyBuZXcgbWVzc2FnZSBpcyBiZWluZyBzZW5kLiBJZiB0aGUgc2VuZGluZyBjb25uZWN0aW9uIHdhcyBzdGFydGVkXG4vLyBiZWZvcmUgcmVjZWl2aW5nIG9uZSwgaXQgaXMgcG9zc2libGUgdG8gc2F0dXJhdGUgdGhlIG5ldHdvcmsgYW5kXG4vLyB0aW1lb3V0IGR1ZSB0byB0aGUgbGFjayBvZiByZWNlaXZpbmcgc29ja2V0LiBUbyBhdm9pZCB0aGF0IHdlIGRlbGF5XG4vLyBzZW5kaW5nIG1lc3NhZ2VzIGJ5IHNvbWUgc21hbGwgdGltZSwgaW4gb3JkZXIgdG8gbGV0IHJlY2VpdmluZ1xuLy8gY29ubmVjdGlvbiBiZSBzdGFydGVkIGJlZm9yZWhhbmQuIFRoaXMgaXMgb25seSBhIGhhbGZtZWFzdXJlIGFuZFxuLy8gZG9lcyBub3QgZml4IHRoZSBiaWcgcHJvYmxlbSwgYnV0IGl0IGRvZXMgbWFrZSB0aGUgdGVzdHMgZ28gbW9yZVxuLy8gc3RhYmxlIG9uIHNsb3cgbmV0d29ya3MuXG5CdWZmZXJlZFNlbmRlci5wcm90b3R5cGUuc2VuZFNjaGVkdWxlV2FpdCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1Zygnc2VuZFNjaGVkdWxlV2FpdCcpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB0cmVmO1xuICB0aGlzLnNlbmRTdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ3NlbmRTdG9wJyk7XG4gICAgc2VsZi5zZW5kU3RvcCA9IG51bGw7XG4gICAgY2xlYXJUaW1lb3V0KHRyZWYpO1xuICB9O1xuICB0cmVmID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygndGltZW91dCcpO1xuICAgIHNlbGYuc2VuZFN0b3AgPSBudWxsO1xuICAgIHNlbGYuc2VuZFNjaGVkdWxlKCk7XG4gIH0sIDI1KTtcbn07XG5cbkJ1ZmZlcmVkU2VuZGVyLnByb3RvdHlwZS5zZW5kU2NoZWR1bGUgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ3NlbmRTY2hlZHVsZScsIHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGgpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmICh0aGlzLnNlbmRCdWZmZXIubGVuZ3RoID4gMCkge1xuICAgIHZhciBwYXlsb2FkID0gJ1snICsgdGhpcy5zZW5kQnVmZmVyLmpvaW4oJywnKSArICddJztcbiAgICB0aGlzLnNlbmRTdG9wID0gdGhpcy5zZW5kZXIodGhpcy51cmwsIHBheWxvYWQsIGZ1bmN0aW9uKGVycikge1xuICAgICAgc2VsZi5zZW5kU3RvcCA9IG51bGw7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGRlYnVnKCdlcnJvcicsIGVycik7XG4gICAgICAgIHNlbGYuZW1pdCgnY2xvc2UnLCBlcnIuY29kZSB8fCAxMDA2LCAnU2VuZGluZyBlcnJvcjogJyArIGVycik7XG4gICAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuc2VuZFNjaGVkdWxlV2FpdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICB9XG59O1xuXG5CdWZmZXJlZFNlbmRlci5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19jbGVhbnVwJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5CdWZmZXJlZFNlbmRlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMuX2NsZWFudXAoKTtcbiAgaWYgKHRoaXMuc2VuZFN0b3ApIHtcbiAgICB0aGlzLnNlbmRTdG9wKCk7XG4gICAgdGhpcy5zZW5kU3RvcCA9IG51bGw7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyZWRTZW5kZXI7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTd9XSwyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBJZnJhbWVUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi9pZnJhbWUnKVxuICAsIG9iamVjdFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvb2JqZWN0JylcbiAgO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRyYW5zcG9ydCkge1xuXG4gIGZ1bmN0aW9uIElmcmFtZVdyYXBUcmFuc3BvcnQodHJhbnNVcmwsIGJhc2VVcmwpIHtcbiAgICBJZnJhbWVUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc3BvcnQudHJhbnNwb3J0TmFtZSwgdHJhbnNVcmwsIGJhc2VVcmwpO1xuICB9XG5cbiAgaW5oZXJpdHMoSWZyYW1lV3JhcFRyYW5zcG9ydCwgSWZyYW1lVHJhbnNwb3J0KTtcblxuICBJZnJhbWVXcmFwVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbih1cmwsIGluZm8pIHtcbiAgICBpZiAoIWdsb2JhbC5kb2N1bWVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBpZnJhbWVJbmZvID0gb2JqZWN0VXRpbHMuZXh0ZW5kKHt9LCBpbmZvKTtcbiAgICBpZnJhbWVJbmZvLnNhbWVPcmlnaW4gPSB0cnVlO1xuICAgIHJldHVybiB0cmFuc3BvcnQuZW5hYmxlZChpZnJhbWVJbmZvKSAmJiBJZnJhbWVUcmFuc3BvcnQuZW5hYmxlZCgpO1xuICB9O1xuXG4gIElmcmFtZVdyYXBUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICdpZnJhbWUtJyArIHRyYW5zcG9ydC50cmFuc3BvcnROYW1lO1xuICBJZnJhbWVXcmFwVHJhbnNwb3J0Lm5lZWRCb2R5ID0gdHJ1ZTtcbiAgSWZyYW1lV3JhcFRyYW5zcG9ydC5yb3VuZFRyaXBzID0gSWZyYW1lVHJhbnNwb3J0LnJvdW5kVHJpcHMgKyB0cmFuc3BvcnQucm91bmRUcmlwcyAtIDE7IC8vIGh0bWwsIGphdmFzY3JpcHQgKDIpICsgdHJhbnNwb3J0IC0gbm8gQ09SUyAoMSlcblxuICBJZnJhbWVXcmFwVHJhbnNwb3J0LmZhY2FkZVRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICByZXR1cm4gSWZyYW1lV3JhcFRyYW5zcG9ydDtcbn07XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4uLy4uL3V0aWxzL29iamVjdFwiOjQ5LFwiLi4vaWZyYW1lXCI6MjIsXCJpbmhlcml0c1wiOjU3fV0sMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6cG9sbGluZycpO1xufVxuXG5mdW5jdGlvbiBQb2xsaW5nKFJlY2VpdmVyLCByZWNlaXZlVXJsLCBBamF4T2JqZWN0KSB7XG4gIGRlYnVnKHJlY2VpdmVVcmwpO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbiAgdGhpcy5SZWNlaXZlciA9IFJlY2VpdmVyO1xuICB0aGlzLnJlY2VpdmVVcmwgPSByZWNlaXZlVXJsO1xuICB0aGlzLkFqYXhPYmplY3QgPSBBamF4T2JqZWN0O1xuICB0aGlzLl9zY2hlZHVsZVJlY2VpdmVyKCk7XG59XG5cbmluaGVyaXRzKFBvbGxpbmcsIEV2ZW50RW1pdHRlcik7XG5cblBvbGxpbmcucHJvdG90eXBlLl9zY2hlZHVsZVJlY2VpdmVyID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfc2NoZWR1bGVSZWNlaXZlcicpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBwb2xsID0gdGhpcy5wb2xsID0gbmV3IHRoaXMuUmVjZWl2ZXIodGhpcy5yZWNlaXZlVXJsLCB0aGlzLkFqYXhPYmplY3QpO1xuXG4gIHBvbGwub24oJ21lc3NhZ2UnLCBmdW5jdGlvbihtc2cpIHtcbiAgICBkZWJ1ZygnbWVzc2FnZScsIG1zZyk7XG4gICAgc2VsZi5lbWl0KCdtZXNzYWdlJywgbXNnKTtcbiAgfSk7XG5cbiAgcG9sbC5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uKGNvZGUsIHJlYXNvbikge1xuICAgIGRlYnVnKCdjbG9zZScsIGNvZGUsIHJlYXNvbiwgc2VsZi5wb2xsSXNDbG9zaW5nKTtcbiAgICBzZWxmLnBvbGwgPSBwb2xsID0gbnVsbDtcblxuICAgIGlmICghc2VsZi5wb2xsSXNDbG9zaW5nKSB7XG4gICAgICBpZiAocmVhc29uID09PSAnbmV0d29yaycpIHtcbiAgICAgICAgc2VsZi5fc2NoZWR1bGVSZWNlaXZlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5lbWl0KCdjbG9zZScsIGNvZGUgfHwgMTAwNiwgcmVhc29uKTtcbiAgICAgICAgc2VsZi5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuUG9sbGluZy5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Fib3J0Jyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMucG9sbElzQ2xvc2luZyA9IHRydWU7XG4gIGlmICh0aGlzLnBvbGwpIHtcbiAgICB0aGlzLnBvbGwuYWJvcnQoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3fV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgLCBCdWZmZXJlZFNlbmRlciA9IHJlcXVpcmUoJy4vYnVmZmVyZWQtc2VuZGVyJylcbiAgLCBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnNlbmRlci1yZWNlaXZlcicpO1xufVxuXG5mdW5jdGlvbiBTZW5kZXJSZWNlaXZlcih0cmFuc1VybCwgdXJsU3VmZml4LCBzZW5kZXJGdW5jLCBSZWNlaXZlciwgQWpheE9iamVjdCkge1xuICB2YXIgcG9sbFVybCA9IHVybFV0aWxzLmFkZFBhdGgodHJhbnNVcmwsIHVybFN1ZmZpeCk7XG4gIGRlYnVnKHBvbGxVcmwpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEJ1ZmZlcmVkU2VuZGVyLmNhbGwodGhpcywgdHJhbnNVcmwsIHNlbmRlckZ1bmMpO1xuXG4gIHRoaXMucG9sbCA9IG5ldyBQb2xsaW5nKFJlY2VpdmVyLCBwb2xsVXJsLCBBamF4T2JqZWN0KTtcbiAgdGhpcy5wb2xsLm9uKCdtZXNzYWdlJywgZnVuY3Rpb24obXNnKSB7XG4gICAgZGVidWcoJ3BvbGwgbWVzc2FnZScsIG1zZyk7XG4gICAgc2VsZi5lbWl0KCdtZXNzYWdlJywgbXNnKTtcbiAgfSk7XG4gIHRoaXMucG9sbC5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uKGNvZGUsIHJlYXNvbikge1xuICAgIGRlYnVnKCdwb2xsIGNsb3NlJywgY29kZSwgcmVhc29uKTtcbiAgICBzZWxmLnBvbGwgPSBudWxsO1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCBjb2RlLCByZWFzb24pO1xuICAgIHNlbGYuY2xvc2UoKTtcbiAgfSk7XG59XG5cbmluaGVyaXRzKFNlbmRlclJlY2VpdmVyLCBCdWZmZXJlZFNlbmRlcik7XG5cblNlbmRlclJlY2VpdmVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBCdWZmZXJlZFNlbmRlci5wcm90b3R5cGUuY2xvc2UuY2FsbCh0aGlzKTtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIGlmICh0aGlzLnBvbGwpIHtcbiAgICB0aGlzLnBvbGwuYWJvcnQoKTtcbiAgICB0aGlzLnBvbGwgPSBudWxsO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbmRlclJlY2VpdmVyO1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiLi4vLi4vdXRpbHMvdXJsXCI6NTIsXCIuL2J1ZmZlcmVkLXNlbmRlclwiOjI1LFwiLi9wb2xsaW5nXCI6MjcsXCJkZWJ1Z1wiOjU1LFwiaW5oZXJpdHNcIjo1N31dLDI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBFdmVudFNvdXJjZURyaXZlciA9IHJlcXVpcmUoJ2V2ZW50c291cmNlJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnJlY2VpdmVyOmV2ZW50c291cmNlJyk7XG59XG5cbmZ1bmN0aW9uIEV2ZW50U291cmNlUmVjZWl2ZXIodXJsKSB7XG4gIGRlYnVnKHVybCk7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGVzID0gdGhpcy5lcyA9IG5ldyBFdmVudFNvdXJjZURyaXZlcih1cmwpO1xuICBlcy5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgZGVidWcoJ21lc3NhZ2UnLCBlLmRhdGEpO1xuICAgIHNlbGYuZW1pdCgnbWVzc2FnZScsIGRlY29kZVVSSShlLmRhdGEpKTtcbiAgfTtcbiAgZXMub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgICBkZWJ1ZygnZXJyb3InLCBlcy5yZWFkeVN0YXRlLCBlKTtcbiAgICAvLyBFUyBvbiByZWNvbm5lY3Rpb24gaGFzIHJlYWR5U3RhdGUgPSAwIG9yIDEuXG4gICAgLy8gb24gbmV0d29yayBlcnJvciBpdCdzIENMT1NFRCA9IDJcbiAgICB2YXIgcmVhc29uID0gKGVzLnJlYWR5U3RhdGUgIT09IDIgPyAnbmV0d29yaycgOiAncGVybWFuZW50Jyk7XG4gICAgc2VsZi5fY2xlYW51cCgpO1xuICAgIHNlbGYuX2Nsb3NlKHJlYXNvbik7XG4gIH07XG59XG5cbmluaGVyaXRzKEV2ZW50U291cmNlUmVjZWl2ZXIsIEV2ZW50RW1pdHRlcik7XG5cbkV2ZW50U291cmNlUmVjZWl2ZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdhYm9ydCcpO1xuICB0aGlzLl9jbGVhbnVwKCk7XG4gIHRoaXMuX2Nsb3NlKCd1c2VyJyk7XG59O1xuXG5FdmVudFNvdXJjZVJlY2VpdmVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuICB2YXIgZXMgPSB0aGlzLmVzO1xuICBpZiAoZXMpIHtcbiAgICBlcy5vbm1lc3NhZ2UgPSBlcy5vbmVycm9yID0gbnVsbDtcbiAgICBlcy5jbG9zZSgpO1xuICAgIHRoaXMuZXMgPSBudWxsO1xuICB9XG59O1xuXG5FdmVudFNvdXJjZVJlY2VpdmVyLnByb3RvdHlwZS5fY2xvc2UgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgZGVidWcoJ2Nsb3NlJywgcmVhc29uKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICAvLyBTYWZhcmkgYW5kIGNocm9tZSA8IDE1IGNyYXNoIGlmIHdlIGNsb3NlIHdpbmRvdyBiZWZvcmVcbiAgLy8gd2FpdGluZyBmb3IgRVMgY2xlYW51cC4gU2VlOlxuICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODkxNTVcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgbnVsbCwgcmVhc29uKTtcbiAgICBzZWxmLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9LCAyMDApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFNvdXJjZVJlY2VpdmVyO1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJldmVudHNvdXJjZVwiOjE4LFwiaW5oZXJpdHNcIjo1N31dLDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgaWZyYW1lVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9pZnJhbWUnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCByYW5kb20gPSByZXF1aXJlKCcuLi8uLi91dGlscy9yYW5kb20nKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6cmVjZWl2ZXI6aHRtbGZpbGUnKTtcbn1cblxuZnVuY3Rpb24gSHRtbGZpbGVSZWNlaXZlcih1cmwpIHtcbiAgZGVidWcodXJsKTtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWZyYW1lVXRpbHMucG9sbHV0ZUdsb2JhbE5hbWVzcGFjZSgpO1xuXG4gIHRoaXMuaWQgPSAnYScgKyByYW5kb20uc3RyaW5nKDYpO1xuICB1cmwgPSB1cmxVdGlscy5hZGRRdWVyeSh1cmwsICdjPScgKyBkZWNvZGVVUklDb21wb25lbnQoaWZyYW1lVXRpbHMuV1ByZWZpeCArICcuJyArIHRoaXMuaWQpKTtcblxuICBkZWJ1ZygndXNpbmcgaHRtbGZpbGUnLCBIdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCk7XG4gIHZhciBjb25zdHJ1Y3RGdW5jID0gSHRtbGZpbGVSZWNlaXZlci5odG1sZmlsZUVuYWJsZWQgP1xuICAgICAgaWZyYW1lVXRpbHMuY3JlYXRlSHRtbGZpbGUgOiBpZnJhbWVVdGlscy5jcmVhdGVJZnJhbWU7XG5cbiAgZ2xvYmFsW2lmcmFtZVV0aWxzLldQcmVmaXhdW3RoaXMuaWRdID0ge1xuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdzdGFydCcpO1xuICAgICAgc2VsZi5pZnJhbWVPYmoubG9hZGVkKCk7XG4gICAgfVxuICAsIG1lc3NhZ2U6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGRlYnVnKCdtZXNzYWdlJywgZGF0YSk7XG4gICAgICBzZWxmLmVtaXQoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgICB9XG4gICwgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICBkZWJ1Zygnc3RvcCcpO1xuICAgICAgc2VsZi5fY2xlYW51cCgpO1xuICAgICAgc2VsZi5fY2xvc2UoJ25ldHdvcmsnKTtcbiAgICB9XG4gIH07XG4gIHRoaXMuaWZyYW1lT2JqID0gY29uc3RydWN0RnVuYyh1cmwsIGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdjYWxsYmFjaycpO1xuICAgIHNlbGYuX2NsZWFudXAoKTtcbiAgICBzZWxmLl9jbG9zZSgncGVybWFuZW50Jyk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhIdG1sZmlsZVJlY2VpdmVyLCBFdmVudEVtaXR0ZXIpO1xuXG5IdG1sZmlsZVJlY2VpdmVyLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnYWJvcnQnKTtcbiAgdGhpcy5fY2xlYW51cCgpO1xuICB0aGlzLl9jbG9zZSgndXNlcicpO1xufTtcblxuSHRtbGZpbGVSZWNlaXZlci5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19jbGVhbnVwJyk7XG4gIGlmICh0aGlzLmlmcmFtZU9iaikge1xuICAgIHRoaXMuaWZyYW1lT2JqLmNsZWFudXAoKTtcbiAgICB0aGlzLmlmcmFtZU9iaiA9IG51bGw7XG4gIH1cbiAgZGVsZXRlIGdsb2JhbFtpZnJhbWVVdGlscy5XUHJlZml4XVt0aGlzLmlkXTtcbn07XG5cbkh0bWxmaWxlUmVjZWl2ZXIucHJvdG90eXBlLl9jbG9zZSA9IGZ1bmN0aW9uKHJlYXNvbikge1xuICBkZWJ1ZygnX2Nsb3NlJywgcmVhc29uKTtcbiAgdGhpcy5lbWl0KCdjbG9zZScsIG51bGwsIHJlYXNvbik7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5IdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCA9IGZhbHNlO1xuXG4vLyBvYmZ1c2NhdGUgdG8gYXZvaWQgZmlyZXdhbGxzXG52YXIgYXhvID0gWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKTtcbmlmIChheG8gaW4gZ2xvYmFsKSB7XG4gIHRyeSB7XG4gICAgSHRtbGZpbGVSZWNlaXZlci5odG1sZmlsZUVuYWJsZWQgPSAhIW5ldyBnbG9iYWxbYXhvXSgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgfVxufVxuXG5IdG1sZmlsZVJlY2VpdmVyLmVuYWJsZWQgPSBIdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCB8fCBpZnJhbWVVdGlscy5pZnJhbWVFbmFibGVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEh0bWxmaWxlUmVjZWl2ZXI7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4uLy4uL3V0aWxzL2lmcmFtZVwiOjQ3LFwiLi4vLi4vdXRpbHMvcmFuZG9tXCI6NTAsXCIuLi8uLi91dGlscy91cmxcIjo1MixcImRlYnVnXCI6NTUsXCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1N31dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9pZnJhbWUnKVxuICAsIHJhbmRvbSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3JhbmRvbScpXG4gICwgYnJvd3NlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2Jyb3dzZXInKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnJlY2VpdmVyOmpzb25wJyk7XG59XG5cbmZ1bmN0aW9uIEpzb25wUmVjZWl2ZXIodXJsKSB7XG4gIGRlYnVnKHVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdXRpbHMucG9sbHV0ZUdsb2JhbE5hbWVzcGFjZSgpO1xuXG4gIHRoaXMuaWQgPSAnYScgKyByYW5kb20uc3RyaW5nKDYpO1xuICB2YXIgdXJsV2l0aElkID0gdXJsVXRpbHMuYWRkUXVlcnkodXJsLCAnYz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHV0aWxzLldQcmVmaXggKyAnLicgKyB0aGlzLmlkKSk7XG5cbiAgZ2xvYmFsW3V0aWxzLldQcmVmaXhdW3RoaXMuaWRdID0gdGhpcy5fY2FsbGJhY2suYmluZCh0aGlzKTtcbiAgdGhpcy5fY3JlYXRlU2NyaXB0KHVybFdpdGhJZCk7XG5cbiAgLy8gRmFsbGJhY2sgbW9zdGx5IGZvciBLb25xdWVyb3IgLSBzdHVwaWQgdGltZXIsIDM1IHNlY29uZHMgc2hhbGwgYmUgcGxlbnR5LlxuICB0aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ3RpbWVvdXQnKTtcbiAgICBzZWxmLl9hYm9ydChuZXcgRXJyb3IoJ0pTT05QIHNjcmlwdCBsb2FkZWQgYWJub3JtYWxseSAodGltZW91dCknKSk7XG4gIH0sIEpzb25wUmVjZWl2ZXIudGltZW91dCk7XG59XG5cbmluaGVyaXRzKEpzb25wUmVjZWl2ZXIsIEV2ZW50RW1pdHRlcik7XG5cbkpzb25wUmVjZWl2ZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdhYm9ydCcpO1xuICBpZiAoZ2xvYmFsW3V0aWxzLldQcmVmaXhdW3RoaXMuaWRdKSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignSlNPTlAgdXNlciBhYm9ydGVkIHJlYWQnKTtcbiAgICBlcnIuY29kZSA9IDEwMDA7XG4gICAgdGhpcy5fYWJvcnQoZXJyKTtcbiAgfVxufTtcblxuSnNvbnBSZWNlaXZlci50aW1lb3V0ID0gMzUwMDA7XG5Kc29ucFJlY2VpdmVyLnNjcmlwdEVycm9yVGltZW91dCA9IDEwMDA7XG5cbkpzb25wUmVjZWl2ZXIucHJvdG90eXBlLl9jYWxsYmFjayA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgZGVidWcoJ19jYWxsYmFjaycsIGRhdGEpO1xuICB0aGlzLl9jbGVhbnVwKCk7XG5cbiAgaWYgKHRoaXMuYWJvcnRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZGF0YSkge1xuICAgIGRlYnVnKCdtZXNzYWdlJywgZGF0YSk7XG4gICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgZGF0YSk7XG4gIH1cbiAgdGhpcy5lbWl0KCdjbG9zZScsIG51bGwsICduZXR3b3JrJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5Kc29ucFJlY2VpdmVyLnByb3RvdHlwZS5fYWJvcnQgPSBmdW5jdGlvbihlcnIpIHtcbiAgZGVidWcoJ19hYm9ydCcsIGVycik7XG4gIHRoaXMuX2NsZWFudXAoKTtcbiAgdGhpcy5hYm9ydGluZyA9IHRydWU7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCBlcnIuY29kZSwgZXJyLm1lc3NhZ2UpO1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxuSnNvbnBSZWNlaXZlci5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19jbGVhbnVwJyk7XG4gIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XG4gIGlmICh0aGlzLnNjcmlwdDIpIHtcbiAgICB0aGlzLnNjcmlwdDIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdDIpO1xuICAgIHRoaXMuc2NyaXB0MiA9IG51bGw7XG4gIH1cbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdmFyIHNjcmlwdCA9IHRoaXMuc2NyaXB0O1xuICAgIC8vIFVuZm9ydHVuYXRlbHksIHlvdSBjYW4ndCByZWFsbHkgYWJvcnQgc2NyaXB0IGxvYWRpbmcgb2ZcbiAgICAvLyB0aGUgc2NyaXB0LlxuICAgIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHNjcmlwdC5vbmVycm9yID1cbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbmNsaWNrID0gbnVsbDtcbiAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gIH1cbiAgZGVsZXRlIGdsb2JhbFt1dGlscy5XUHJlZml4XVt0aGlzLmlkXTtcbn07XG5cbkpzb25wUmVjZWl2ZXIucHJvdG90eXBlLl9zY3JpcHRFcnJvciA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX3NjcmlwdEVycm9yJyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKHRoaXMuZXJyb3JUaW1lcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZXJyb3JUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFzZWxmLmxvYWRlZE9rYXkpIHtcbiAgICAgIHNlbGYuX2Fib3J0KG5ldyBFcnJvcignSlNPTlAgc2NyaXB0IGxvYWRlZCBhYm5vcm1hbGx5IChvbmVycm9yKScpKTtcbiAgICB9XG4gIH0sIEpzb25wUmVjZWl2ZXIuc2NyaXB0RXJyb3JUaW1lb3V0KTtcbn07XG5cbkpzb25wUmVjZWl2ZXIucHJvdG90eXBlLl9jcmVhdGVTY3JpcHQgPSBmdW5jdGlvbih1cmwpIHtcbiAgZGVidWcoJ19jcmVhdGVTY3JpcHQnLCB1cmwpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzY3JpcHQgPSB0aGlzLnNjcmlwdCA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgdmFyIHNjcmlwdDI7ICAvLyBPcGVyYSBzeW5jaHJvbm91cyBsb2FkIHRyaWNrLlxuXG4gIHNjcmlwdC5pZCA9ICdhJyArIHJhbmRvbS5zdHJpbmcoOCk7XG4gIHNjcmlwdC5zcmMgPSB1cmw7XG4gIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gIHNjcmlwdC5jaGFyc2V0ID0gJ1VURi04JztcbiAgc2NyaXB0Lm9uZXJyb3IgPSB0aGlzLl9zY3JpcHRFcnJvci5iaW5kKHRoaXMpO1xuICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ29ubG9hZCcpO1xuICAgIHNlbGYuX2Fib3J0KG5ldyBFcnJvcignSlNPTlAgc2NyaXB0IGxvYWRlZCBhYm5vcm1hbGx5IChvbmxvYWQpJykpO1xuICB9O1xuXG4gIC8vIElFOSBmaXJlcyAnZXJyb3InIGV2ZW50IGFmdGVyIG9ucmVhZHlzdGF0ZWNoYW5nZSBvciBiZWZvcmUsIGluIHJhbmRvbSBvcmRlci5cbiAgLy8gVXNlIGxvYWRlZE9rYXkgdG8gZGV0ZXJtaW5lIGlmIGFjdHVhbGx5IGVycm9yZWRcbiAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBzY3JpcHQucmVhZHlTdGF0ZSk7XG4gICAgaWYgKC9sb2FkZWR8Y2xvc2VkLy50ZXN0KHNjcmlwdC5yZWFkeVN0YXRlKSkge1xuICAgICAgaWYgKHNjcmlwdCAmJiBzY3JpcHQuaHRtbEZvciAmJiBzY3JpcHQub25jbGljaykge1xuICAgICAgICBzZWxmLmxvYWRlZE9rYXkgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEluIElFLCBhY3R1YWxseSBleGVjdXRlIHRoZSBzY3JpcHQuXG4gICAgICAgICAgc2NyaXB0Lm9uY2xpY2soKTtcbiAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNjcmlwdCkge1xuICAgICAgICBzZWxmLl9hYm9ydChuZXcgRXJyb3IoJ0pTT05QIHNjcmlwdCBsb2FkZWQgYWJub3JtYWxseSAob25yZWFkeXN0YXRlY2hhbmdlKScpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIC8vIElFOiBldmVudC9odG1sRm9yL29uY2xpY2sgdHJpY2suXG4gIC8vIE9uZSBjYW4ndCByZWx5IG9uIHByb3BlciBvcmRlciBmb3Igb25yZWFkeXN0YXRlY2hhbmdlLiBJbiBvcmRlciB0b1xuICAvLyBtYWtlIHN1cmUsIHNldCBhICdodG1sRm9yJyBhbmQgJ2V2ZW50JyBwcm9wZXJ0aWVzLCBzbyB0aGF0XG4gIC8vIHNjcmlwdCBjb2RlIHdpbGwgYmUgaW5zdGFsbGVkIGFzICdvbmNsaWNrJyBoYW5kbGVyIGZvciB0aGVcbiAgLy8gc2NyaXB0IG9iamVjdC4gTGF0ZXIsIG9ucmVhZHlzdGF0ZWNoYW5nZSwgbWFudWFsbHkgZXhlY3V0ZSB0aGlzXG4gIC8vIGNvZGUuIEZGIGFuZCBDaHJvbWUgZG9lc24ndCB3b3JrIHdpdGggJ2V2ZW50JyBhbmQgJ2h0bWxGb3InXG4gIC8vIHNldC4gRm9yIHJlZmVyZW5jZSBzZWU6XG4gIC8vICAgaHR0cDovL2phdWJvdXJnLm5ldC8yMDEwLzA3L2xvYWRpbmctc2NyaXB0LWFzLW9uY2xpY2staGFuZGxlci1vZi5odG1sXG4gIC8vIEFsc28sIHJlYWQgb24gdGhhdCBhYm91dCBzY3JpcHQgb3JkZXJpbmc6XG4gIC8vICAgaHR0cDovL3dpa2kud2hhdHdnLm9yZy93aWtpL0R5bmFtaWNfU2NyaXB0X0V4ZWN1dGlvbl9PcmRlclxuICBpZiAodHlwZW9mIHNjcmlwdC5hc3luYyA9PT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsLmRvY3VtZW50LmF0dGFjaEV2ZW50KSB7XG4gICAgLy8gQWNjb3JkaW5nIHRvIG1vemlsbGEgZG9jcywgaW4gcmVjZW50IGJyb3dzZXJzIHNjcmlwdC5hc3luYyBkZWZhdWx0c1xuICAgIC8vIHRvICd0cnVlJywgc28gd2UgbWF5IHVzZSBpdCB0byBkZXRlY3QgYSBnb29kIGJyb3dzZXI6XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSFRNTC9FbGVtZW50L3NjcmlwdFxuICAgIGlmICghYnJvd3Nlci5pc09wZXJhKCkpIHtcbiAgICAgIC8vIE5haXZlbHkgYXNzdW1lIHdlJ3JlIGluIElFXG4gICAgICB0cnkge1xuICAgICAgICBzY3JpcHQuaHRtbEZvciA9IHNjcmlwdC5pZDtcbiAgICAgICAgc2NyaXB0LmV2ZW50ID0gJ29uY2xpY2snO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgICB9XG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPcGVyYSwgc2Vjb25kIHN5bmMgc2NyaXB0IGhhY2tcbiAgICAgIHNjcmlwdDIgPSB0aGlzLnNjcmlwdDIgPSBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHQyLnRleHQgPSBcInRyeXt2YXIgYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdcIiArIHNjcmlwdC5pZCArIFwiJyk7IGlmKGEpYS5vbmVycm9yKCk7fWNhdGNoKHgpe307XCI7XG4gICAgICBzY3JpcHQuYXN5bmMgPSBzY3JpcHQyLmFzeW5jID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2Ygc2NyaXB0LmFzeW5jICE9PSAndW5kZWZpbmVkJykge1xuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIH1cblxuICB2YXIgaGVhZCA9IGdsb2JhbC5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICBoZWFkLmluc2VydEJlZm9yZShzY3JpcHQsIGhlYWQuZmlyc3RDaGlsZCk7XG4gIGlmIChzY3JpcHQyKSB7XG4gICAgaGVhZC5pbnNlcnRCZWZvcmUoc2NyaXB0MiwgaGVhZC5maXJzdENoaWxkKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBKc29ucFJlY2VpdmVyO1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0sdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuLi8uLi91dGlscy9icm93c2VyXCI6NDQsXCIuLi8uLi91dGlscy9pZnJhbWVcIjo0NyxcIi4uLy4uL3V0aWxzL3JhbmRvbVwiOjUwLFwiLi4vLi4vdXRpbHMvdXJsXCI6NTIsXCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTd9XSwzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpyZWNlaXZlcjp4aHInKTtcbn1cblxuZnVuY3Rpb24gWGhyUmVjZWl2ZXIodXJsLCBBamF4T2JqZWN0KSB7XG4gIGRlYnVnKHVybCk7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5idWZmZXJQb3NpdGlvbiA9IDA7XG5cbiAgdGhpcy54byA9IG5ldyBBamF4T2JqZWN0KCdQT1NUJywgdXJsLCBudWxsKTtcbiAgdGhpcy54by5vbignY2h1bmsnLCB0aGlzLl9jaHVua0hhbmRsZXIuYmluZCh0aGlzKSk7XG4gIHRoaXMueG8ub25jZSgnZmluaXNoJywgZnVuY3Rpb24oc3RhdHVzLCB0ZXh0KSB7XG4gICAgZGVidWcoJ2ZpbmlzaCcsIHN0YXR1cywgdGV4dCk7XG4gICAgc2VsZi5fY2h1bmtIYW5kbGVyKHN0YXR1cywgdGV4dCk7XG4gICAgc2VsZi54byA9IG51bGw7XG4gICAgdmFyIHJlYXNvbiA9IHN0YXR1cyA9PT0gMjAwID8gJ25ldHdvcmsnIDogJ3Blcm1hbmVudCc7XG4gICAgZGVidWcoJ2Nsb3NlJywgcmVhc29uKTtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgbnVsbCwgcmVhc29uKTtcbiAgICBzZWxmLl9jbGVhbnVwKCk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhYaHJSZWNlaXZlciwgRXZlbnRFbWl0dGVyKTtcblxuWGhyUmVjZWl2ZXIucHJvdG90eXBlLl9jaHVua0hhbmRsZXIgPSBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcbiAgZGVidWcoJ19jaHVua0hhbmRsZXInLCBzdGF0dXMpO1xuICBpZiAoc3RhdHVzICE9PSAyMDAgfHwgIXRleHQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKHZhciBpZHggPSAtMTsgOyB0aGlzLmJ1ZmZlclBvc2l0aW9uICs9IGlkeCArIDEpIHtcbiAgICB2YXIgYnVmID0gdGV4dC5zbGljZSh0aGlzLmJ1ZmZlclBvc2l0aW9uKTtcbiAgICBpZHggPSBidWYuaW5kZXhPZignXFxuJyk7XG4gICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgbXNnID0gYnVmLnNsaWNlKDAsIGlkeCk7XG4gICAgaWYgKG1zZykge1xuICAgICAgZGVidWcoJ21lc3NhZ2UnLCBtc2cpO1xuICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgbXNnKTtcbiAgICB9XG4gIH1cbn07XG5cblhoclJlY2VpdmVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cblhoclJlY2VpdmVyLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnYWJvcnQnKTtcbiAgaWYgKHRoaXMueG8pIHtcbiAgICB0aGlzLnhvLmNsb3NlKCk7XG4gICAgZGVidWcoJ2Nsb3NlJyk7XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIG51bGwsICd1c2VyJyk7XG4gICAgdGhpcy54byA9IG51bGw7XG4gIH1cbiAgdGhpcy5fY2xlYW51cCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBYaHJSZWNlaXZlcjtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcImRlYnVnXCI6NTUsXCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1N31dLDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmFuZG9tID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvcmFuZG9tJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpzZW5kZXI6anNvbnAnKTtcbn1cblxudmFyIGZvcm0sIGFyZWE7XG5cbmZ1bmN0aW9uIGNyZWF0ZUlmcmFtZShpZCkge1xuICBkZWJ1ZygnY3JlYXRlSWZyYW1lJywgaWQpO1xuICB0cnkge1xuICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgIHJldHVybiBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnPGlmcmFtZSBuYW1lPVwiJyArIGlkICsgJ1wiPicpO1xuICB9IGNhdGNoICh4KSB7XG4gICAgdmFyIGlmcmFtZSA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICBpZnJhbWUubmFtZSA9IGlkO1xuICAgIHJldHVybiBpZnJhbWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRm9ybSgpIHtcbiAgZGVidWcoJ2NyZWF0ZUZvcm0nKTtcbiAgZm9ybSA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gIGZvcm0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xuICBmb3JtLmVuY3R5cGUgPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcbiAgZm9ybS5hY2NlcHRDaGFyc2V0ID0gJ1VURi04JztcblxuICBhcmVhID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gIGFyZWEubmFtZSA9ICdkJztcbiAgZm9ybS5hcHBlbmRDaGlsZChhcmVhKTtcblxuICBnbG9iYWwuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1cmwsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gIGRlYnVnKHVybCwgcGF5bG9hZCk7XG4gIGlmICghZm9ybSkge1xuICAgIGNyZWF0ZUZvcm0oKTtcbiAgfVxuICB2YXIgaWQgPSAnYScgKyByYW5kb20uc3RyaW5nKDgpO1xuICBmb3JtLnRhcmdldCA9IGlkO1xuICBmb3JtLmFjdGlvbiA9IHVybFV0aWxzLmFkZFF1ZXJ5KHVybFV0aWxzLmFkZFBhdGgodXJsLCAnL2pzb25wX3NlbmQnKSwgJ2k9JyArIGlkKTtcblxuICB2YXIgaWZyYW1lID0gY3JlYXRlSWZyYW1lKGlkKTtcbiAgaWZyYW1lLmlkID0gaWQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBmb3JtLmFwcGVuZENoaWxkKGlmcmFtZSk7XG5cbiAgdHJ5IHtcbiAgICBhcmVhLnZhbHVlID0gcGF5bG9hZDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHNlcmlvdXNseSBicm9rZW4gYnJvd3NlcnMgZ2V0IGhlcmVcbiAgfVxuICBmb3JtLnN1Ym1pdCgpO1xuXG4gIHZhciBjb21wbGV0ZWQgPSBmdW5jdGlvbihlcnIpIHtcbiAgICBkZWJ1ZygnY29tcGxldGVkJywgaWQsIGVycik7XG4gICAgaWYgKCFpZnJhbWUub25lcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gaWZyYW1lLm9uZXJyb3IgPSBpZnJhbWUub25sb2FkID0gbnVsbDtcbiAgICAvLyBPcGVyYSBtaW5pIGRvZXNuJ3QgbGlrZSBpZiB3ZSBHQyBpZnJhbWVcbiAgICAvLyBpbW1lZGlhdGVseSwgdGh1cyB0aGlzIHRpbWVvdXQuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdjbGVhbmluZyB1cCcsIGlkKTtcbiAgICAgIGlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICBpZnJhbWUgPSBudWxsO1xuICAgIH0sIDUwMCk7XG4gICAgYXJlYS52YWx1ZSA9ICcnO1xuICAgIC8vIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBkZXRlY3QgaWYgdGhlIGlmcmFtZSBzdWNjZWVkZWQgb3JcbiAgICAvLyBmYWlsZWQgdG8gc3VibWl0IG91ciBmb3JtLlxuICAgIGNhbGxiYWNrKGVycik7XG4gIH07XG4gIGlmcmFtZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBpZCk7XG4gICAgY29tcGxldGVkKCk7XG4gIH07XG4gIGlmcmFtZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb25sb2FkJywgaWQpO1xuICAgIGNvbXBsZXRlZCgpO1xuICB9O1xuICBpZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgIGRlYnVnKCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBpZCwgaWZyYW1lLnJlYWR5U3RhdGUsIGUpO1xuICAgIGlmIChpZnJhbWUucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgY29tcGxldGVkKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ2Fib3J0ZWQnLCBpZCk7XG4gICAgY29tcGxldGVkKG5ldyBFcnJvcignQWJvcnRlZCcpKTtcbiAgfTtcbn07XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4uLy4uL3V0aWxzL3JhbmRvbVwiOjUwLFwiLi4vLi4vdXRpbHMvdXJsXCI6NTIsXCJkZWJ1Z1wiOjU1fV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBldmVudFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZXZlbnQnKVxuICAsIGJyb3dzZXIgPSByZXF1aXJlKCcuLi8uLi91dGlscy9icm93c2VyJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpzZW5kZXI6eGRyJyk7XG59XG5cbi8vIFJlZmVyZW5jZXM6XG4vLyAgIGh0dHA6Ly9hamF4aWFuLmNvbS9hcmNoaXZlcy8xMDAtbGluZS1hamF4LXdyYXBwZXJcbi8vICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjMjg4MDYwKHY9VlMuODUpLmFzcHhcblxuZnVuY3Rpb24gWERST2JqZWN0KG1ldGhvZCwgdXJsLCBwYXlsb2FkKSB7XG4gIGRlYnVnKG1ldGhvZCwgdXJsKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX3N0YXJ0KG1ldGhvZCwgdXJsLCBwYXlsb2FkKTtcbiAgfSwgMCk7XG59XG5cbmluaGVyaXRzKFhEUk9iamVjdCwgRXZlbnRFbWl0dGVyKTtcblxuWERST2JqZWN0LnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbihtZXRob2QsIHVybCwgcGF5bG9hZCkge1xuICBkZWJ1ZygnX3N0YXJ0Jyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHhkciA9IG5ldyBnbG9iYWwuWERvbWFpblJlcXVlc3QoKTtcbiAgLy8gSUUgY2FjaGVzIGV2ZW4gUE9TVHNcbiAgdXJsID0gdXJsVXRpbHMuYWRkUXVlcnkodXJsLCAndD0nICsgKCtuZXcgRGF0ZSgpKSk7XG5cbiAgeGRyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicpO1xuICAgIHNlbGYuX2Vycm9yKCk7XG4gIH07XG4gIHhkci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb250aW1lb3V0Jyk7XG4gICAgc2VsZi5fZXJyb3IoKTtcbiAgfTtcbiAgeGRyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygncHJvZ3Jlc3MnLCB4ZHIucmVzcG9uc2VUZXh0KTtcbiAgICBzZWxmLmVtaXQoJ2NodW5rJywgMjAwLCB4ZHIucmVzcG9uc2VUZXh0KTtcbiAgfTtcbiAgeGRyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdsb2FkJyk7XG4gICAgc2VsZi5lbWl0KCdmaW5pc2gnLCAyMDAsIHhkci5yZXNwb25zZVRleHQpO1xuICAgIHNlbGYuX2NsZWFudXAoZmFsc2UpO1xuICB9O1xuICB0aGlzLnhkciA9IHhkcjtcbiAgdGhpcy51bmxvYWRSZWYgPSBldmVudFV0aWxzLnVubG9hZEFkZChmdW5jdGlvbigpIHtcbiAgICBzZWxmLl9jbGVhbnVwKHRydWUpO1xuICB9KTtcbiAgdHJ5IHtcbiAgICAvLyBGYWlscyB3aXRoIEFjY2Vzc0RlbmllZCBpZiBwb3J0IG51bWJlciBpcyBib2d1c1xuICAgIHRoaXMueGRyLm9wZW4obWV0aG9kLCB1cmwpO1xuICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgIHRoaXMueGRyLnRpbWVvdXQgPSB0aGlzLnRpbWVvdXQ7XG4gICAgfVxuICAgIHRoaXMueGRyLnNlbmQocGF5bG9hZCk7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICB0aGlzLl9lcnJvcigpO1xuICB9XG59O1xuXG5YRFJPYmplY3QucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVtaXQoJ2ZpbmlzaCcsIDAsICcnKTtcbiAgdGhpcy5fY2xlYW51cChmYWxzZSk7XG59O1xuXG5YRFJPYmplY3QucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oYWJvcnQpIHtcbiAgZGVidWcoJ2NsZWFudXAnLCBhYm9ydCk7XG4gIGlmICghdGhpcy54ZHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgZXZlbnRVdGlscy51bmxvYWREZWwodGhpcy51bmxvYWRSZWYpO1xuXG4gIHRoaXMueGRyLm9udGltZW91dCA9IHRoaXMueGRyLm9uZXJyb3IgPSB0aGlzLnhkci5vbnByb2dyZXNzID0gdGhpcy54ZHIub25sb2FkID0gbnVsbDtcbiAgaWYgKGFib3J0KSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGRyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgIH1cbiAgfVxuICB0aGlzLnVubG9hZFJlZiA9IHRoaXMueGRyID0gbnVsbDtcbn07XG5cblhEUk9iamVjdC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMuX2NsZWFudXAodHJ1ZSk7XG59O1xuXG4vLyBJRSA4LzkgaWYgdGhlIHJlcXVlc3QgdGFyZ2V0IHVzZXMgdGhlIHNhbWUgc2NoZW1lIC0gIzc5XG5YRFJPYmplY3QuZW5hYmxlZCA9ICEhKGdsb2JhbC5YRG9tYWluUmVxdWVzdCAmJiBicm93c2VyLmhhc0RvbWFpbigpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBYRFJPYmplY3Q7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4uLy4uL3V0aWxzL2Jyb3dzZXJcIjo0NCxcIi4uLy4uL3V0aWxzL2V2ZW50XCI6NDYsXCIuLi8uLi91dGlscy91cmxcIjo1MixcImRlYnVnXCI6NTUsXCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1N31dLDM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIFhockRyaXZlciA9IHJlcXVpcmUoJy4uL2RyaXZlci94aHInKVxuICA7XG5cbmZ1bmN0aW9uIFhIUkNvcnNPYmplY3QobWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMpIHtcbiAgWGhyRHJpdmVyLmNhbGwodGhpcywgbWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMpO1xufVxuXG5pbmhlcml0cyhYSFJDb3JzT2JqZWN0LCBYaHJEcml2ZXIpO1xuXG5YSFJDb3JzT2JqZWN0LmVuYWJsZWQgPSBYaHJEcml2ZXIuZW5hYmxlZCAmJiBYaHJEcml2ZXIuc3VwcG9ydHNDT1JTO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUkNvcnNPYmplY3Q7XG5cbn0se1wiLi4vZHJpdmVyL3hoclwiOjE3LFwiaW5oZXJpdHNcIjo1N31dLDM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICA7XG5cbmZ1bmN0aW9uIFhIUkZha2UoLyogbWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMgKi8pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB0aGlzLnRvID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIDIwMCwgJ3t9Jyk7XG4gIH0sIFhIUkZha2UudGltZW91dCk7XG59XG5cbmluaGVyaXRzKFhIUkZha2UsIEV2ZW50RW1pdHRlcik7XG5cblhIUkZha2UucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIGNsZWFyVGltZW91dCh0aGlzLnRvKTtcbn07XG5cblhIUkZha2UudGltZW91dCA9IDIwMDA7XG5cbm1vZHVsZS5leHBvcnRzID0gWEhSRmFrZTtcblxufSx7XCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1N31dLDM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIFhockRyaXZlciA9IHJlcXVpcmUoJy4uL2RyaXZlci94aHInKVxuICA7XG5cbmZ1bmN0aW9uIFhIUkxvY2FsT2JqZWN0KG1ldGhvZCwgdXJsLCBwYXlsb2FkIC8qLCBvcHRzICovKSB7XG4gIFhockRyaXZlci5jYWxsKHRoaXMsIG1ldGhvZCwgdXJsLCBwYXlsb2FkLCB7XG4gICAgbm9DcmVkZW50aWFsczogdHJ1ZVxuICB9KTtcbn1cblxuaW5oZXJpdHMoWEhSTG9jYWxPYmplY3QsIFhockRyaXZlcik7XG5cblhIUkxvY2FsT2JqZWN0LmVuYWJsZWQgPSBYaHJEcml2ZXIuZW5hYmxlZDtcblxubW9kdWxlLmV4cG9ydHMgPSBYSFJMb2NhbE9iamVjdDtcblxufSx7XCIuLi9kcml2ZXIveGhyXCI6MTcsXCJpbmhlcml0c1wiOjU3fV0sMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvZXZlbnQnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXJsJylcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBXZWJzb2NrZXREcml2ZXIgPSByZXF1aXJlKCcuL2RyaXZlci93ZWJzb2NrZXQnKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6d2Vic29ja2V0Jyk7XG59XG5cbmZ1bmN0aW9uIFdlYlNvY2tldFRyYW5zcG9ydCh0cmFuc1VybCwgaWdub3JlLCBvcHRpb25zKSB7XG4gIGlmICghV2ViU29ja2V0VHJhbnNwb3J0LmVuYWJsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG5cbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG4gIGRlYnVnKCdjb25zdHJ1Y3RvcicsIHRyYW5zVXJsKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB1cmwgPSB1cmxVdGlscy5hZGRQYXRoKHRyYW5zVXJsLCAnL3dlYnNvY2tldCcpO1xuICBpZiAodXJsLnNsaWNlKDAsIDUpID09PSAnaHR0cHMnKSB7XG4gICAgdXJsID0gJ3dzcycgKyB1cmwuc2xpY2UoNSk7XG4gIH0gZWxzZSB7XG4gICAgdXJsID0gJ3dzJyArIHVybC5zbGljZSg0KTtcbiAgfVxuICB0aGlzLnVybCA9IHVybDtcblxuICB0aGlzLndzID0gbmV3IFdlYnNvY2tldERyaXZlcih0aGlzLnVybCwgW10sIG9wdGlvbnMpO1xuICB0aGlzLndzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICBkZWJ1ZygnbWVzc2FnZSBldmVudCcsIGUuZGF0YSk7XG4gICAgc2VsZi5lbWl0KCdtZXNzYWdlJywgZS5kYXRhKTtcbiAgfTtcbiAgLy8gRmlyZWZveCBoYXMgYW4gaW50ZXJlc3RpbmcgYnVnLiBJZiBhIHdlYnNvY2tldCBjb25uZWN0aW9uIGlzXG4gIC8vIGNyZWF0ZWQgYWZ0ZXIgb251bmxvYWQsIGl0IHN0YXlzIGFsaXZlIGV2ZW4gd2hlbiB1c2VyXG4gIC8vIG5hdmlnYXRlcyBhd2F5IGZyb20gdGhlIHBhZ2UuIEluIHN1Y2ggc2l0dWF0aW9uIGxldCdzIGxpZSAtXG4gIC8vIGxldCdzIG5vdCBvcGVuIHRoZSB3cyBjb25uZWN0aW9uIGF0IGFsbC4gU2VlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vc29ja2pzL3NvY2tqcy1jbGllbnQvaXNzdWVzLzI4XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NjA4NVxuICB0aGlzLnVubG9hZFJlZiA9IHV0aWxzLnVubG9hZEFkZChmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygndW5sb2FkJyk7XG4gICAgc2VsZi53cy5jbG9zZSgpO1xuICB9KTtcbiAgdGhpcy53cy5vbmNsb3NlID0gZnVuY3Rpb24oZSkge1xuICAgIGRlYnVnKCdjbG9zZSBldmVudCcsIGUuY29kZSwgZS5yZWFzb24pO1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCBlLmNvZGUsIGUucmVhc29uKTtcbiAgICBzZWxmLl9jbGVhbnVwKCk7XG4gIH07XG4gIHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgICBkZWJ1ZygnZXJyb3IgZXZlbnQnLCBlKTtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgMTAwNiwgJ1dlYlNvY2tldCBjb25uZWN0aW9uIGJyb2tlbicpO1xuICAgIHNlbGYuX2NsZWFudXAoKTtcbiAgfTtcbn1cblxuaW5oZXJpdHMoV2ViU29ja2V0VHJhbnNwb3J0LCBFdmVudEVtaXR0ZXIpO1xuXG5XZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHZhciBtc2cgPSAnWycgKyBkYXRhICsgJ10nO1xuICBkZWJ1Zygnc2VuZCcsIG1zZyk7XG4gIHRoaXMud3Muc2VuZChtc2cpO1xufTtcblxuV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdmFyIHdzID0gdGhpcy53cztcbiAgdGhpcy5fY2xlYW51cCgpO1xuICBpZiAod3MpIHtcbiAgICB3cy5jbG9zZSgpO1xuICB9XG59O1xuXG5XZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfY2xlYW51cCcpO1xuICB2YXIgd3MgPSB0aGlzLndzO1xuICBpZiAod3MpIHtcbiAgICB3cy5vbm1lc3NhZ2UgPSB3cy5vbmNsb3NlID0gd3Mub25lcnJvciA9IG51bGw7XG4gIH1cbiAgdXRpbHMudW5sb2FkRGVsKHRoaXMudW5sb2FkUmVmKTtcbiAgdGhpcy51bmxvYWRSZWYgPSB0aGlzLndzID0gbnVsbDtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cbldlYlNvY2tldFRyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdlbmFibGVkJyk7XG4gIHJldHVybiAhIVdlYnNvY2tldERyaXZlcjtcbn07XG5XZWJTb2NrZXRUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICd3ZWJzb2NrZXQnO1xuXG4vLyBJbiB0aGVvcnksIHdzIHNob3VsZCByZXF1aXJlIDEgcm91bmQgdHJpcC4gQnV0IGluIGNocm9tZSwgdGhpcyBpc1xuLy8gbm90IHZlcnkgc3RhYmxlIG92ZXIgU1NMLiBNb3N0IGxpa2VseSBhIHdzIGNvbm5lY3Rpb24gcmVxdWlyZXMgYVxuLy8gc2VwYXJhdGUgU1NMIGNvbm5lY3Rpb24sIGluIHdoaWNoIGNhc2UgMiByb3VuZCB0cmlwcyBhcmUgYW5cbi8vIGFic29sdXRlIG1pbnVtdW0uXG5XZWJTb2NrZXRUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0VHJhbnNwb3J0O1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiLi4vdXRpbHMvZXZlbnRcIjo0NixcIi4uL3V0aWxzL3VybFwiOjUyLFwiLi9kcml2ZXIvd2Vic29ja2V0XCI6MTksXCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTd9XSwzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBBamF4QmFzZWRUcmFuc3BvcnQgPSByZXF1aXJlKCcuL2xpYi9hamF4LWJhc2VkJylcbiAgLCBYZHJTdHJlYW1pbmdUcmFuc3BvcnQgPSByZXF1aXJlKCcuL3hkci1zdHJlYW1pbmcnKVxuICAsIFhoclJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci94aHInKVxuICAsIFhEUk9iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hkcicpXG4gIDtcblxuZnVuY3Rpb24gWGRyUG9sbGluZ1RyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIVhEUk9iamVjdC5lbmFibGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cbiAgQWpheEJhc2VkVHJhbnNwb3J0LmNhbGwodGhpcywgdHJhbnNVcmwsICcveGhyJywgWGhyUmVjZWl2ZXIsIFhEUk9iamVjdCk7XG59XG5cbmluaGVyaXRzKFhkclBvbGxpbmdUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cblhkclBvbGxpbmdUcmFuc3BvcnQuZW5hYmxlZCA9IFhkclN0cmVhbWluZ1RyYW5zcG9ydC5lbmFibGVkO1xuWGRyUG9sbGluZ1RyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ3hkci1wb2xsaW5nJztcblhkclBvbGxpbmdUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7IC8vIHByZWZsaWdodCwgYWpheFxuXG5tb2R1bGUuZXhwb3J0cyA9IFhkclBvbGxpbmdUcmFuc3BvcnQ7XG5cbn0se1wiLi9saWIvYWpheC1iYXNlZFwiOjI0LFwiLi9yZWNlaXZlci94aHJcIjozMixcIi4vc2VuZGVyL3hkclwiOjM0LFwiLi94ZHItc3RyZWFtaW5nXCI6NDAsXCJpbmhlcml0c1wiOjU3fV0sNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgQWpheEJhc2VkVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi9saWIvYWpheC1iYXNlZCcpXG4gICwgWGhyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL3hocicpXG4gICwgWERST2JqZWN0ID0gcmVxdWlyZSgnLi9zZW5kZXIveGRyJylcbiAgO1xuXG4vLyBBY2NvcmRpbmcgdG86XG4vLyAgIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY0MTUwNy9kZXRlY3QtYnJvd3Nlci1zdXBwb3J0LWZvci1jcm9zcy1kb21haW4teG1saHR0cHJlcXVlc3RzXG4vLyAgIGh0dHA6Ly9oYWNrcy5tb3ppbGxhLm9yZy8yMDA5LzA3L2Nyb3NzLXNpdGUteG1saHR0cHJlcXVlc3Qtd2l0aC1jb3JzL1xuXG5mdW5jdGlvbiBYZHJTdHJlYW1pbmdUcmFuc3BvcnQodHJhbnNVcmwpIHtcbiAgaWYgKCFYRFJPYmplY3QuZW5hYmxlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIEFqYXhCYXNlZFRyYW5zcG9ydC5jYWxsKHRoaXMsIHRyYW5zVXJsLCAnL3hocl9zdHJlYW1pbmcnLCBYaHJSZWNlaXZlciwgWERST2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoWGRyU3RyZWFtaW5nVHJhbnNwb3J0LCBBamF4QmFzZWRUcmFuc3BvcnQpO1xuXG5YZHJTdHJlYW1pbmdUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKGluZm8pIHtcbiAgaWYgKGluZm8uY29va2llX25lZWRlZCB8fCBpbmZvLm51bGxPcmlnaW4pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIFhEUk9iamVjdC5lbmFibGVkICYmIGluZm8uc2FtZVNjaGVtZTtcbn07XG5cblhkclN0cmVhbWluZ1RyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ3hkci1zdHJlYW1pbmcnO1xuWGRyU3RyZWFtaW5nVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyOyAvLyBwcmVmbGlnaHQsIGFqYXhcblxubW9kdWxlLmV4cG9ydHMgPSBYZHJTdHJlYW1pbmdUcmFuc3BvcnQ7XG5cbn0se1wiLi9saWIvYWpheC1iYXNlZFwiOjI0LFwiLi9yZWNlaXZlci94aHJcIjozMixcIi4vc2VuZGVyL3hkclwiOjM0LFwiaW5oZXJpdHNcIjo1N31dLDQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICAsIFhoclJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci94aHInKVxuICAsIFhIUkNvcnNPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItY29ycycpXG4gICwgWEhSTG9jYWxPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItbG9jYWwnKVxuICA7XG5cbmZ1bmN0aW9uIFhoclBvbGxpbmdUcmFuc3BvcnQodHJhbnNVcmwpIHtcbiAgaWYgKCFYSFJMb2NhbE9iamVjdC5lbmFibGVkICYmICFYSFJDb3JzT2JqZWN0LmVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy94aHInLCBYaHJSZWNlaXZlciwgWEhSQ29yc09iamVjdCk7XG59XG5cbmluaGVyaXRzKFhoclBvbGxpbmdUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cblhoclBvbGxpbmdUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKGluZm8pIHtcbiAgaWYgKGluZm8ubnVsbE9yaWdpbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChYSFJMb2NhbE9iamVjdC5lbmFibGVkICYmIGluZm8uc2FtZU9yaWdpbikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBYSFJDb3JzT2JqZWN0LmVuYWJsZWQ7XG59O1xuXG5YaHJQb2xsaW5nVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAneGhyLXBvbGxpbmcnO1xuWGhyUG9sbGluZ1RyYW5zcG9ydC5yb3VuZFRyaXBzID0gMjsgLy8gcHJlZmxpZ2h0LCBhamF4XG5cbm1vZHVsZS5leHBvcnRzID0gWGhyUG9sbGluZ1RyYW5zcG9ydDtcblxufSx7XCIuL2xpYi9hamF4LWJhc2VkXCI6MjQsXCIuL3JlY2VpdmVyL3hoclwiOjMyLFwiLi9zZW5kZXIveGhyLWNvcnNcIjozNSxcIi4vc2VuZGVyL3hoci1sb2NhbFwiOjM3LFwiaW5oZXJpdHNcIjo1N31dLDQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICAsIFhoclJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci94aHInKVxuICAsIFhIUkNvcnNPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItY29ycycpXG4gICwgWEhSTG9jYWxPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItbG9jYWwnKVxuICAsIGJyb3dzZXIgPSByZXF1aXJlKCcuLi91dGlscy9icm93c2VyJylcbiAgO1xuXG5mdW5jdGlvbiBYaHJTdHJlYW1pbmdUcmFuc3BvcnQodHJhbnNVcmwpIHtcbiAgaWYgKCFYSFJMb2NhbE9iamVjdC5lbmFibGVkICYmICFYSFJDb3JzT2JqZWN0LmVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy94aHJfc3RyZWFtaW5nJywgWGhyUmVjZWl2ZXIsIFhIUkNvcnNPYmplY3QpO1xufVxuXG5pbmhlcml0cyhYaHJTdHJlYW1pbmdUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cblhoclN0cmVhbWluZ1RyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24oaW5mbykge1xuICBpZiAoaW5mby5udWxsT3JpZ2luKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIE9wZXJhIGRvZXNuJ3Qgc3VwcG9ydCB4aHItc3RyZWFtaW5nICM2MFxuICAvLyBCdXQgaXQgbWlnaHQgYmUgYWJsZSB0byAjOTJcbiAgaWYgKGJyb3dzZXIuaXNPcGVyYSgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIFhIUkNvcnNPYmplY3QuZW5hYmxlZDtcbn07XG5cblhoclN0cmVhbWluZ1RyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ3hoci1zdHJlYW1pbmcnO1xuWGhyU3RyZWFtaW5nVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyOyAvLyBwcmVmbGlnaHQsIGFqYXhcblxuLy8gU2FmYXJpIGdldHMgY29uZnVzZWQgd2hlbiBhIHN0cmVhbWluZyBhamF4IHJlcXVlc3QgaXMgc3RhcnRlZFxuLy8gYmVmb3JlIG9ubG9hZC4gVGhpcyBjYXVzZXMgdGhlIGxvYWQgaW5kaWNhdG9yIHRvIHNwaW4gaW5kZWZpbmV0ZWx5LlxuLy8gT25seSByZXF1aXJlIGJvZHkgd2hlbiB1c2VkIGluIGEgYnJvd3NlclxuWGhyU3RyZWFtaW5nVHJhbnNwb3J0Lm5lZWRCb2R5ID0gISFnbG9iYWwuZG9jdW1lbnQ7XG5cbm1vZHVsZS5leHBvcnRzID0gWGhyU3RyZWFtaW5nVHJhbnNwb3J0O1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuLi91dGlscy9icm93c2VyXCI6NDQsXCIuL2xpYi9hamF4LWJhc2VkXCI6MjQsXCIuL3JlY2VpdmVyL3hoclwiOjMyLFwiLi9zZW5kZXIveGhyLWNvcnNcIjozNSxcIi4vc2VuZGVyL3hoci1sb2NhbFwiOjM3LFwiaW5oZXJpdHNcIjo1N31dLDQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxuaWYgKGdsb2JhbC5jcnlwdG8gJiYgZ2xvYmFsLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgbW9kdWxlLmV4cG9ydHMucmFuZG9tQnl0ZXMgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGdsb2JhbC5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGJ5dGVzKTtcbiAgICByZXR1cm4gYnl0ZXM7XG4gIH07XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cy5yYW5kb21CeXRlcyA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIHZhciBieXRlcyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ5dGVzW2ldID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9O1xufVxuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7fV0sNDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNPcGVyYTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5uYXZpZ2F0b3IgJiZcbiAgICAgIC9vcGVyYS9pLnRlc3QoZ2xvYmFsLm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9XG5cbiwgaXNLb25xdWVyb3I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnbG9iYWwubmF2aWdhdG9yICYmXG4gICAgICAva29ucXVlcm9yL2kudGVzdChnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIH1cblxuICAvLyAjMTg3IHdyYXAgZG9jdW1lbnQuZG9tYWluIGluIHRyeS9jYXRjaCBiZWNhdXNlIG9mIFdQOCBmcm9tIGZpbGU6Ly8vXG4sIGhhc0RvbWFpbjogZnVuY3Rpb24gKCkge1xuICAgIC8vIG5vbi1icm93c2VyIGNsaWVudCBhbHdheXMgaGFzIGEgZG9tYWluXG4gICAgaWYgKCFnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gISFnbG9iYWwuZG9jdW1lbnQuZG9tYWluO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHt9XSw0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBKU09OMyA9IHJlcXVpcmUoJ2pzb24zJyk7XG5cbi8vIFNvbWUgZXh0cmEgY2hhcmFjdGVycyB0aGF0IENocm9tZSBnZXRzIHdyb25nLCBhbmQgc3Vic3RpdHV0ZXMgd2l0aFxuLy8gc29tZXRoaW5nIGVsc2Ugb24gdGhlIHdpcmUuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleCwgbm8tbWlzbGVhZGluZy1jaGFyYWN0ZXItY2xhc3NcbnZhciBleHRyYUVzY2FwYWJsZSA9IC9bXFx4MDAtXFx4MWZcXHVkODAwLVxcdWRmZmZcXHVmZmZlXFx1ZmZmZlxcdTAzMDAtXFx1MDMzM1xcdTAzM2QtXFx1MDM0NlxcdTAzNGEtXFx1MDM0Y1xcdTAzNTAtXFx1MDM1MlxcdTAzNTctXFx1MDM1OFxcdTAzNWMtXFx1MDM2MlxcdTAzNzRcXHUwMzdlXFx1MDM4N1xcdTA1OTEtXFx1MDVhZlxcdTA1YzRcXHUwNjEwLVxcdTA2MTdcXHUwNjUzLVxcdTA2NTRcXHUwNjU3LVxcdTA2NWJcXHUwNjVkLVxcdTA2NWVcXHUwNmRmLVxcdTA2ZTJcXHUwNmViLVxcdTA2ZWNcXHUwNzMwXFx1MDczMi1cXHUwNzMzXFx1MDczNS1cXHUwNzM2XFx1MDczYVxcdTA3M2RcXHUwNzNmLVxcdTA3NDFcXHUwNzQzXFx1MDc0NVxcdTA3NDdcXHUwN2ViLVxcdTA3ZjFcXHUwOTUxXFx1MDk1OC1cXHUwOTVmXFx1MDlkYy1cXHUwOWRkXFx1MDlkZlxcdTBhMzNcXHUwYTM2XFx1MGE1OS1cXHUwYTViXFx1MGE1ZVxcdTBiNWMtXFx1MGI1ZFxcdTBlMzgtXFx1MGUzOVxcdTBmNDNcXHUwZjRkXFx1MGY1MlxcdTBmNTdcXHUwZjVjXFx1MGY2OVxcdTBmNzItXFx1MGY3NlxcdTBmNzhcXHUwZjgwLVxcdTBmODNcXHUwZjkzXFx1MGY5ZFxcdTBmYTJcXHUwZmE3XFx1MGZhY1xcdTBmYjlcXHUxOTM5LVxcdTE5M2FcXHUxYTE3XFx1MWI2YlxcdTFjZGEtXFx1MWNkYlxcdTFkYzAtXFx1MWRjZlxcdTFkZmNcXHUxZGZlXFx1MWY3MVxcdTFmNzNcXHUxZjc1XFx1MWY3N1xcdTFmNzlcXHUxZjdiXFx1MWY3ZFxcdTFmYmJcXHUxZmJlXFx1MWZjOVxcdTFmY2JcXHUxZmQzXFx1MWZkYlxcdTFmZTNcXHUxZmViXFx1MWZlZS1cXHUxZmVmXFx1MWZmOVxcdTFmZmJcXHUxZmZkXFx1MjAwMC1cXHUyMDAxXFx1MjBkMC1cXHUyMGQxXFx1MjBkNC1cXHUyMGQ3XFx1MjBlNy1cXHUyMGU5XFx1MjEyNlxcdTIxMmEtXFx1MjEyYlxcdTIzMjktXFx1MjMyYVxcdTJhZGNcXHUzMDJiLVxcdTMwMmNcXHVhYWIyLVxcdWFhYjNcXHVmOTAwLVxcdWZhMGRcXHVmYTEwXFx1ZmExMlxcdWZhMTUtXFx1ZmExZVxcdWZhMjBcXHVmYTIyXFx1ZmEyNS1cXHVmYTI2XFx1ZmEyYS1cXHVmYTJkXFx1ZmEzMC1cXHVmYTZkXFx1ZmE3MC1cXHVmYWQ5XFx1ZmIxZFxcdWZiMWZcXHVmYjJhLVxcdWZiMzZcXHVmYjM4LVxcdWZiM2NcXHVmYjNlXFx1ZmI0MC1cXHVmYjQxXFx1ZmI0My1cXHVmYjQ0XFx1ZmI0Ni1cXHVmYjRlXFx1ZmZmMC1cXHVmZmZmXS9nXG4gICwgZXh0cmFMb29rdXA7XG5cbi8vIFRoaXMgbWF5IGJlIHF1aXRlIHNsb3csIHNvIGxldCdzIGRlbGF5IHVudGlsIHVzZXIgYWN0dWFsbHkgdXNlcyBiYWRcbi8vIGNoYXJhY3RlcnMuXG52YXIgdW5yb2xsTG9va3VwID0gZnVuY3Rpb24oZXNjYXBhYmxlKSB7XG4gIHZhciBpO1xuICB2YXIgdW5yb2xsZWQgPSB7fTtcbiAgdmFyIGMgPSBbXTtcbiAgZm9yIChpID0gMDsgaSA8IDY1NTM2OyBpKyspIHtcbiAgICBjLnB1c2goIFN0cmluZy5mcm9tQ2hhckNvZGUoaSkgKTtcbiAgfVxuICBlc2NhcGFibGUubGFzdEluZGV4ID0gMDtcbiAgYy5qb2luKCcnKS5yZXBsYWNlKGVzY2FwYWJsZSwgZnVuY3Rpb24oYSkge1xuICAgIHVucm9sbGVkWyBhIF0gPSAnXFxcXHUnICsgKCcwMDAwJyArIGEuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KTtcbiAgICByZXR1cm4gJyc7XG4gIH0pO1xuICBlc2NhcGFibGUubGFzdEluZGV4ID0gMDtcbiAgcmV0dXJuIHVucm9sbGVkO1xufTtcblxuLy8gUXVvdGUgc3RyaW5nLCBhbHNvIHRha2luZyBjYXJlIG9mIHVuaWNvZGUgY2hhcmFjdGVycyB0aGF0IGJyb3dzZXJzXG4vLyBvZnRlbiBicmVhay4gRXNwZWNpYWxseSwgdGFrZSBjYXJlIG9mIHVuaWNvZGUgc3Vycm9nYXRlczpcbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFwcGluZ19vZl9Vbmljb2RlX2NoYXJhY3RlcnMjU3Vycm9nYXRlc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHF1b3RlOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgcXVvdGVkID0gSlNPTjMuc3RyaW5naWZ5KHN0cmluZyk7XG5cbiAgICAvLyBJbiBtb3N0IGNhc2VzIHRoaXMgc2hvdWxkIGJlIHZlcnkgZmFzdCBhbmQgZ29vZCBlbm91Z2guXG4gICAgZXh0cmFFc2NhcGFibGUubGFzdEluZGV4ID0gMDtcbiAgICBpZiAoIWV4dHJhRXNjYXBhYmxlLnRlc3QocXVvdGVkKSkge1xuICAgICAgcmV0dXJuIHF1b3RlZDtcbiAgICB9XG5cbiAgICBpZiAoIWV4dHJhTG9va3VwKSB7XG4gICAgICBleHRyYUxvb2t1cCA9IHVucm9sbExvb2t1cChleHRyYUVzY2FwYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1b3RlZC5yZXBsYWNlKGV4dHJhRXNjYXBhYmxlLCBmdW5jdGlvbihhKSB7XG4gICAgICByZXR1cm4gZXh0cmFMb29rdXBbYV07XG4gICAgfSk7XG4gIH1cbn07XG5cbn0se1wianNvbjNcIjo1OH1dLDQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHJhbmRvbSA9IHJlcXVpcmUoJy4vcmFuZG9tJyk7XG5cbnZhciBvblVubG9hZCA9IHt9XG4gICwgYWZ0ZXJVbmxvYWQgPSBmYWxzZVxuICAgIC8vIGRldGVjdCBnb29nbGUgY2hyb21lIHBhY2thZ2VkIGFwcHMgYmVjYXVzZSB0aGV5IGRvbid0IGFsbG93IHRoZSAndW5sb2FkJyBldmVudFxuICAsIGlzQ2hyb21lUGFja2FnZWRBcHAgPSBnbG9iYWwuY2hyb21lICYmIGdsb2JhbC5jaHJvbWUuYXBwICYmIGdsb2JhbC5jaHJvbWUuYXBwLnJ1bnRpbWVcbiAgO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXR0YWNoRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5kb2N1bWVudCAmJiBnbG9iYWwuYXR0YWNoRXZlbnQpIHtcbiAgICAgIC8vIElFIHF1aXJrcy5cbiAgICAgIC8vIEFjY29yZGluZyB0bzogaHR0cDovL3N0ZXZlc291ZGVycy5jb20vbWlzYy90ZXN0LXBvc3RtZXNzYWdlLnBocFxuICAgICAgLy8gdGhlIG1lc3NhZ2UgZ2V0cyBkZWxpdmVyZWQgb25seSB0byAnZG9jdW1lbnQnLCBub3QgJ3dpbmRvdycuXG4gICAgICBnbG9iYWwuZG9jdW1lbnQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAvLyBJIGdldCAnd2luZG93JyBmb3IgaWU4LlxuICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4sIGRldGFjaEV2ZW50OiBmdW5jdGlvbihldmVudCwgbGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgfSBlbHNlIGlmIChnbG9iYWwuZG9jdW1lbnQgJiYgZ2xvYmFsLmRldGFjaEV2ZW50KSB7XG4gICAgICBnbG9iYWwuZG9jdW1lbnQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICBnbG9iYWwuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiwgdW5sb2FkQWRkOiBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgIGlmIChpc0Nocm9tZVBhY2thZ2VkQXBwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcmVmID0gcmFuZG9tLnN0cmluZyg4KTtcbiAgICBvblVubG9hZFtyZWZdID0gbGlzdGVuZXI7XG4gICAgaWYgKGFmdGVyVW5sb2FkKSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMudHJpZ2dlclVubG9hZENhbGxiYWNrcywgMCk7XG4gICAgfVxuICAgIHJldHVybiByZWY7XG4gIH1cblxuLCB1bmxvYWREZWw6IGZ1bmN0aW9uKHJlZikge1xuICAgIGlmIChyZWYgaW4gb25VbmxvYWQpIHtcbiAgICAgIGRlbGV0ZSBvblVubG9hZFtyZWZdO1xuICAgIH1cbiAgfVxuXG4sIHRyaWdnZXJVbmxvYWRDYWxsYmFja3M6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHJlZiBpbiBvblVubG9hZCkge1xuICAgICAgb25VbmxvYWRbcmVmXSgpO1xuICAgICAgZGVsZXRlIG9uVW5sb2FkW3JlZl07XG4gICAgfVxuICB9XG59O1xuXG52YXIgdW5sb2FkVHJpZ2dlcmVkID0gZnVuY3Rpb24oKSB7XG4gIGlmIChhZnRlclVubG9hZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhZnRlclVubG9hZCA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzLnRyaWdnZXJVbmxvYWRDYWxsYmFja3MoKTtcbn07XG5cbi8vICd1bmxvYWQnIGFsb25lIGlzIG5vdCByZWxpYWJsZSBpbiBvcGVyYSB3aXRoaW4gYW4gaWZyYW1lLCBidXQgd2Vcbi8vIGNhbid0IHVzZSBgYmVmb3JldW5sb2FkYCBhcyBJRSBmaXJlcyBpdCBvbiBqYXZhc2NyaXB0OiBsaW5rcy5cbmlmICghaXNDaHJvbWVQYWNrYWdlZEFwcCkge1xuICBtb2R1bGUuZXhwb3J0cy5hdHRhY2hFdmVudCgndW5sb2FkJywgdW5sb2FkVHJpZ2dlcmVkKTtcbn1cblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiLi9yYW5kb21cIjo1MH1dLDQ3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZXZlbnRVdGlscyA9IHJlcXVpcmUoJy4vZXZlbnQnKVxuICAsIEpTT04zID0gcmVxdWlyZSgnanNvbjMnKVxuICAsIGJyb3dzZXIgPSByZXF1aXJlKCcuL2Jyb3dzZXInKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6dXRpbHM6aWZyYW1lJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBXUHJlZml4OiAnX2pwJ1xuLCBjdXJyZW50V2luZG93SWQ6IG51bGxcblxuLCBwb2xsdXRlR2xvYmFsTmFtZXNwYWNlOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIShtb2R1bGUuZXhwb3J0cy5XUHJlZml4IGluIGdsb2JhbCkpIHtcbiAgICAgIGdsb2JhbFttb2R1bGUuZXhwb3J0cy5XUHJlZml4XSA9IHt9O1xuICAgIH1cbiAgfVxuXG4sIHBvc3RNZXNzYWdlOiBmdW5jdGlvbih0eXBlLCBkYXRhKSB7XG4gICAgaWYgKGdsb2JhbC5wYXJlbnQgIT09IGdsb2JhbCkge1xuICAgICAgZ2xvYmFsLnBhcmVudC5wb3N0TWVzc2FnZShKU09OMy5zdHJpbmdpZnkoe1xuICAgICAgICB3aW5kb3dJZDogbW9kdWxlLmV4cG9ydHMuY3VycmVudFdpbmRvd0lkXG4gICAgICAsIHR5cGU6IHR5cGVcbiAgICAgICwgZGF0YTogZGF0YSB8fCAnJ1xuICAgICAgfSksICcqJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKCdDYW5ub3QgcG9zdE1lc3NhZ2UsIG5vIHBhcmVudCB3aW5kb3cuJywgdHlwZSwgZGF0YSk7XG4gICAgfVxuICB9XG5cbiwgY3JlYXRlSWZyYW1lOiBmdW5jdGlvbihpZnJhbWVVcmwsIGVycm9yQ2FsbGJhY2spIHtcbiAgICB2YXIgaWZyYW1lID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIHZhciB0cmVmLCB1bmxvYWRSZWY7XG4gICAgdmFyIHVuYXR0YWNoID0gZnVuY3Rpb24oKSB7XG4gICAgICBkZWJ1ZygndW5hdHRhY2gnKTtcbiAgICAgIGNsZWFyVGltZW91dCh0cmVmKTtcbiAgICAgIC8vIEV4cGxvcmVyIGhhZCBwcm9ibGVtcyB3aXRoIHRoYXQuXG4gICAgICB0cnkge1xuICAgICAgICBpZnJhbWUub25sb2FkID0gbnVsbDtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgICAgfVxuICAgICAgaWZyYW1lLm9uZXJyb3IgPSBudWxsO1xuICAgIH07XG4gICAgdmFyIGNsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgIHVuYXR0YWNoKCk7XG4gICAgICAgIC8vIFRoaXMgdGltZW91dCBtYWtlcyBjaHJvbWUgZmlyZSBvbmJlZm9yZXVubG9hZCBldmVudFxuICAgICAgICAvLyB3aXRoaW4gaWZyYW1lLiBXaXRob3V0IHRoZSB0aW1lb3V0IGl0IGdvZXMgc3RyYWlnaHQgdG9cbiAgICAgICAgLy8gb251bmxvYWQuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGlmcmFtZSkge1xuICAgICAgICAgICAgaWZyYW1lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWZyYW1lID0gbnVsbDtcbiAgICAgICAgfSwgMCk7XG4gICAgICAgIGV2ZW50VXRpbHMudW5sb2FkRGVsKHVubG9hZFJlZik7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgb25lcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgZGVidWcoJ29uZXJyb3InLCBlcnIpO1xuICAgICAgaWYgKGlmcmFtZSkge1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgIGVycm9yQ2FsbGJhY2soZXJyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBwb3N0ID0gZnVuY3Rpb24obXNnLCBvcmlnaW4pIHtcbiAgICAgIGRlYnVnKCdwb3N0JywgbXNnLCBvcmlnaW4pO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBXaGVuIHRoZSBpZnJhbWUgaXMgbm90IGxvYWRlZCwgSUUgcmFpc2VzIGFuIGV4Y2VwdGlvblxuICAgICAgICAgIC8vIG9uICdjb250ZW50V2luZG93Jy5cbiAgICAgICAgICBpZiAoaWZyYW1lICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShtc2csIG9yaWdpbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgICAgICB9XG4gICAgICB9LCAwKTtcbiAgICB9O1xuXG4gICAgaWZyYW1lLnNyYyA9IGlmcmFtZVVybDtcbiAgICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBpZnJhbWUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGlmcmFtZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICBvbmVycm9yKCdvbmVycm9yJyk7XG4gICAgfTtcbiAgICBpZnJhbWUub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICBkZWJ1Zygnb25sb2FkJyk7XG4gICAgICAvLyBgb25sb2FkYCBpcyB0cmlnZ2VyZWQgYmVmb3JlIHNjcmlwdHMgb24gdGhlIGlmcmFtZSBhcmVcbiAgICAgIC8vIGV4ZWN1dGVkLiBHaXZlIGl0IGZldyBzZWNvbmRzIHRvIGFjdHVhbGx5IGxvYWQgc3R1ZmYuXG4gICAgICBjbGVhclRpbWVvdXQodHJlZik7XG4gICAgICB0cmVmID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgb25lcnJvcignb25sb2FkIHRpbWVvdXQnKTtcbiAgICAgIH0sIDIwMDApO1xuICAgIH07XG4gICAgZ2xvYmFsLmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICB0cmVmID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIG9uZXJyb3IoJ3RpbWVvdXQnKTtcbiAgICB9LCAxNTAwMCk7XG4gICAgdW5sb2FkUmVmID0gZXZlbnRVdGlscy51bmxvYWRBZGQoY2xlYW51cCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvc3Q6IHBvc3RcbiAgICAsIGNsZWFudXA6IGNsZWFudXBcbiAgICAsIGxvYWRlZDogdW5hdHRhY2hcbiAgICB9O1xuICB9XG5cbi8qIGVzbGludCBuby11bmRlZjogXCJvZmZcIiwgbmV3LWNhcDogXCJvZmZcIiAqL1xuLCBjcmVhdGVIdG1sZmlsZTogZnVuY3Rpb24oaWZyYW1lVXJsLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgdmFyIGF4byA9IFsnQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJyk7XG4gICAgdmFyIGRvYyA9IG5ldyBnbG9iYWxbYXhvXSgnaHRtbGZpbGUnKTtcbiAgICB2YXIgdHJlZiwgdW5sb2FkUmVmO1xuICAgIHZhciBpZnJhbWU7XG4gICAgdmFyIHVuYXR0YWNoID0gZnVuY3Rpb24oKSB7XG4gICAgICBjbGVhclRpbWVvdXQodHJlZik7XG4gICAgICBpZnJhbWUub25lcnJvciA9IG51bGw7XG4gICAgfTtcbiAgICB2YXIgY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGRvYykge1xuICAgICAgICB1bmF0dGFjaCgpO1xuICAgICAgICBldmVudFV0aWxzLnVubG9hZERlbCh1bmxvYWRSZWYpO1xuICAgICAgICBpZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgICBpZnJhbWUgPSBkb2MgPSBudWxsO1xuICAgICAgICBDb2xsZWN0R2FyYmFnZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIG9uZXJyb3IgPSBmdW5jdGlvbihyKSB7XG4gICAgICBkZWJ1Zygnb25lcnJvcicsIHIpO1xuICAgICAgaWYgKGRvYykge1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgIGVycm9yQ2FsbGJhY2socik7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcG9zdCA9IGZ1bmN0aW9uKG1zZywgb3JpZ2luKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBXaGVuIHRoZSBpZnJhbWUgaXMgbm90IGxvYWRlZCwgSUUgcmFpc2VzIGFuIGV4Y2VwdGlvblxuICAgICAgICAvLyBvbiAnY29udGVudFdpbmRvdycuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGlmcmFtZSAmJiBpZnJhbWUuY29udGVudFdpbmRvdykge1xuICAgICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShtc2csIG9yaWdpbik7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAwKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgICAgfVxuICAgIH07XG5cbiAgICBkb2Mub3BlbigpO1xuICAgIGRvYy53cml0ZSgnPGh0bWw+PHMnICsgJ2NyaXB0PicgK1xuICAgICAgICAgICAgICAnZG9jdW1lbnQuZG9tYWluPVwiJyArIGdsb2JhbC5kb2N1bWVudC5kb21haW4gKyAnXCI7JyArXG4gICAgICAgICAgICAgICc8L3MnICsgJ2NyaXB0PjwvaHRtbD4nKTtcbiAgICBkb2MuY2xvc2UoKTtcbiAgICBkb2MucGFyZW50V2luZG93W21vZHVsZS5leHBvcnRzLldQcmVmaXhdID0gZ2xvYmFsW21vZHVsZS5leHBvcnRzLldQcmVmaXhdO1xuICAgIHZhciBjID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKGMpO1xuICAgIGlmcmFtZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICBjLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgaWZyYW1lLnNyYyA9IGlmcmFtZVVybDtcbiAgICBpZnJhbWUub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgb25lcnJvcignb25lcnJvcicpO1xuICAgIH07XG4gICAgdHJlZiA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBvbmVycm9yKCd0aW1lb3V0Jyk7XG4gICAgfSwgMTUwMDApO1xuICAgIHVubG9hZFJlZiA9IGV2ZW50VXRpbHMudW5sb2FkQWRkKGNsZWFudXApO1xuICAgIHJldHVybiB7XG4gICAgICBwb3N0OiBwb3N0XG4gICAgLCBjbGVhbnVwOiBjbGVhbnVwXG4gICAgLCBsb2FkZWQ6IHVuYXR0YWNoXG4gICAgfTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuaWZyYW1lRW5hYmxlZCA9IGZhbHNlO1xuaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICAvLyBwb3N0TWVzc2FnZSBtaXNiZWhhdmVzIGluIGtvbnF1ZXJvciA0LjYuNSAtIHRoZSBtZXNzYWdlcyBhcmUgZGVsaXZlcmVkIHdpdGhcbiAgLy8gaHVnZSBkZWxheSwgb3Igbm90IGF0IGFsbC5cbiAgbW9kdWxlLmV4cG9ydHMuaWZyYW1lRW5hYmxlZCA9ICh0eXBlb2YgZ2xvYmFsLnBvc3RNZXNzYWdlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgdHlwZW9mIGdsb2JhbC5wb3N0TWVzc2FnZSA9PT0gJ29iamVjdCcpICYmICghYnJvd3Nlci5pc0tvbnF1ZXJvcigpKTtcbn1cblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9LHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiLi9icm93c2VyXCI6NDQsXCIuL2V2ZW50XCI6NDYsXCJkZWJ1Z1wiOjU1LFwianNvbjNcIjo1OH1dLDQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGxvZ09iamVjdCA9IHt9O1xuWydsb2cnLCAnZGVidWcnLCAnd2FybiddLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gIHZhciBsZXZlbEV4aXN0cztcblxuICB0cnkge1xuICAgIGxldmVsRXhpc3RzID0gZ2xvYmFsLmNvbnNvbGUgJiYgZ2xvYmFsLmNvbnNvbGVbbGV2ZWxdICYmIGdsb2JhbC5jb25zb2xlW2xldmVsXS5hcHBseTtcbiAgfSBjYXRjaChlKSB7XG4gICAgLy8gZG8gbm90aGluZ1xuICB9XG5cbiAgbG9nT2JqZWN0W2xldmVsXSA9IGxldmVsRXhpc3RzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnbG9iYWwuY29uc29sZVtsZXZlbF0uYXBwbHkoZ2xvYmFsLmNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gIH0gOiAobGV2ZWwgPT09ICdsb2cnID8gZnVuY3Rpb24gKCkge30gOiBsb2dPYmplY3QubG9nKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZ09iamVjdDtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se31dLDQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzT2JqZWN0OiBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7XG4gIH1cblxuLCBleHRlbmQ6IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghdGhpcy5pc09iamVjdChvYmopKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICB2YXIgc291cmNlLCBwcm9wO1xuICAgIGZvciAodmFyIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAocHJvcCBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIHByb3ApKSB7XG4gICAgICAgICAgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cbn07XG5cbn0se31dLDUwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG4vLyBUaGlzIHN0cmluZyBoYXMgbGVuZ3RoIDMyLCBhIHBvd2VyIG9mIDIsIHNvIHRoZSBtb2R1bHVzIGRvZXNuJ3QgaW50cm9kdWNlIGFcbi8vIGJpYXMuXG52YXIgX3JhbmRvbVN0cmluZ0NoYXJzID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Jztcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdHJpbmc6IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIHZhciBtYXggPSBfcmFuZG9tU3RyaW5nQ2hhcnMubGVuZ3RoO1xuICAgIHZhciBieXRlcyA9IGNyeXB0by5yYW5kb21CeXRlcyhsZW5ndGgpO1xuICAgIHZhciByZXQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXQucHVzaChfcmFuZG9tU3RyaW5nQ2hhcnMuc3Vic3RyKGJ5dGVzW2ldICUgbWF4LCAxKSk7XG4gICAgfVxuICAgIHJldHVybiByZXQuam9pbignJyk7XG4gIH1cblxuLCBudW1iZXI6IGZ1bmN0aW9uKG1heCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpO1xuICB9XG5cbiwgbnVtYmVyU3RyaW5nOiBmdW5jdGlvbihtYXgpIHtcbiAgICB2YXIgdCA9ICgnJyArIChtYXggLSAxKSkubGVuZ3RoO1xuICAgIHZhciBwID0gbmV3IEFycmF5KHQgKyAxKS5qb2luKCcwJyk7XG4gICAgcmV0dXJuIChwICsgdGhpcy5udW1iZXIobWF4KSkuc2xpY2UoLXQpO1xuICB9XG59O1xuXG59LHtcImNyeXB0b1wiOjQzfV0sNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDp1dGlsczp0cmFuc3BvcnQnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhdmFpbGFibGVUcmFuc3BvcnRzKSB7XG4gIHJldHVybiB7XG4gICAgZmlsdGVyVG9FbmFibGVkOiBmdW5jdGlvbih0cmFuc3BvcnRzV2hpdGVsaXN0LCBpbmZvKSB7XG4gICAgICB2YXIgdHJhbnNwb3J0cyA9IHtcbiAgICAgICAgbWFpbjogW11cbiAgICAgICwgZmFjYWRlOiBbXVxuICAgICAgfTtcbiAgICAgIGlmICghdHJhbnNwb3J0c1doaXRlbGlzdCkge1xuICAgICAgICB0cmFuc3BvcnRzV2hpdGVsaXN0ID0gW107XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0cmFuc3BvcnRzV2hpdGVsaXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0cmFuc3BvcnRzV2hpdGVsaXN0ID0gW3RyYW5zcG9ydHNXaGl0ZWxpc3RdO1xuICAgICAgfVxuXG4gICAgICBhdmFpbGFibGVUcmFuc3BvcnRzLmZvckVhY2goZnVuY3Rpb24odHJhbnMpIHtcbiAgICAgICAgaWYgKCF0cmFucykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFucy50cmFuc3BvcnROYW1lID09PSAnd2Vic29ja2V0JyAmJiBpbmZvLndlYnNvY2tldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBkZWJ1ZygnZGlzYWJsZWQgZnJvbSBzZXJ2ZXInLCAnd2Vic29ja2V0Jyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zcG9ydHNXaGl0ZWxpc3QubGVuZ3RoICYmXG4gICAgICAgICAgICB0cmFuc3BvcnRzV2hpdGVsaXN0LmluZGV4T2YodHJhbnMudHJhbnNwb3J0TmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgZGVidWcoJ25vdCBpbiB3aGl0ZWxpc3QnLCB0cmFucy50cmFuc3BvcnROYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnMuZW5hYmxlZChpbmZvKSkge1xuICAgICAgICAgIGRlYnVnKCdlbmFibGVkJywgdHJhbnMudHJhbnNwb3J0TmFtZSk7XG4gICAgICAgICAgdHJhbnNwb3J0cy5tYWluLnB1c2godHJhbnMpO1xuICAgICAgICAgIGlmICh0cmFucy5mYWNhZGVUcmFuc3BvcnQpIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydHMuZmFjYWRlLnB1c2godHJhbnMuZmFjYWRlVHJhbnNwb3J0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVidWcoJ2Rpc2FibGVkJywgdHJhbnMudHJhbnNwb3J0TmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRyYW5zcG9ydHM7XG4gICAgfVxuICB9O1xufTtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcImRlYnVnXCI6NTV9XSw1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVVJMID0gcmVxdWlyZSgndXJsLXBhcnNlJyk7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6dXRpbHM6dXJsJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRPcmlnaW46IGZ1bmN0aW9uKHVybCkge1xuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcCA9IG5ldyBVUkwodXJsKTtcbiAgICBpZiAocC5wcm90b2NvbCA9PT0gJ2ZpbGU6Jykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHBvcnQgPSBwLnBvcnQ7XG4gICAgaWYgKCFwb3J0KSB7XG4gICAgICBwb3J0ID0gKHAucHJvdG9jb2wgPT09ICdodHRwczonKSA/ICc0NDMnIDogJzgwJztcbiAgICB9XG5cbiAgICByZXR1cm4gcC5wcm90b2NvbCArICcvLycgKyBwLmhvc3RuYW1lICsgJzonICsgcG9ydDtcbiAgfVxuXG4sIGlzT3JpZ2luRXF1YWw6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgcmVzID0gdGhpcy5nZXRPcmlnaW4oYSkgPT09IHRoaXMuZ2V0T3JpZ2luKGIpO1xuICAgIGRlYnVnKCdzYW1lJywgYSwgYiwgcmVzKTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiwgaXNTY2hlbWVFcXVhbDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiAoYS5zcGxpdCgnOicpWzBdID09PSBiLnNwbGl0KCc6JylbMF0pO1xuICB9XG5cbiwgYWRkUGF0aDogZnVuY3Rpb24gKHVybCwgcGF0aCkge1xuICAgIHZhciBxcyA9IHVybC5zcGxpdCgnPycpO1xuICAgIHJldHVybiBxc1swXSArIHBhdGggKyAocXNbMV0gPyAnPycgKyBxc1sxXSA6ICcnKTtcbiAgfVxuXG4sIGFkZFF1ZXJ5OiBmdW5jdGlvbiAodXJsLCBxKSB7XG4gICAgcmV0dXJuIHVybCArICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICgnPycgKyBxKSA6ICgnJicgKyBxKSk7XG4gIH1cblxuLCBpc0xvb3BiYWNrQWRkcjogZnVuY3Rpb24gKGFkZHIpIHtcbiAgICByZXR1cm4gL14xMjdcXC4oWzAtOV17MSwzfSlcXC4oWzAtOV17MSwzfSlcXC4oWzAtOV17MSwzfSkkL2kudGVzdChhZGRyKSB8fCAvXlxcWzo6MVxcXSQvLnRlc3QoYWRkcik7XG4gIH1cbn07XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCJkZWJ1Z1wiOjU1LFwidXJsLXBhcnNlXCI6NjF9XSw1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9ICcxLjUuMCc7XG5cbn0se31dLDU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuXG59LHt9XSw1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbJyMwMDAwQ0MnLCAnIzAwMDBGRicsICcjMDAzM0NDJywgJyMwMDMzRkYnLCAnIzAwNjZDQycsICcjMDA2NkZGJywgJyMwMDk5Q0MnLCAnIzAwOTlGRicsICcjMDBDQzAwJywgJyMwMENDMzMnLCAnIzAwQ0M2NicsICcjMDBDQzk5JywgJyMwMENDQ0MnLCAnIzAwQ0NGRicsICcjMzMwMENDJywgJyMzMzAwRkYnLCAnIzMzMzNDQycsICcjMzMzM0ZGJywgJyMzMzY2Q0MnLCAnIzMzNjZGRicsICcjMzM5OUNDJywgJyMzMzk5RkYnLCAnIzMzQ0MwMCcsICcjMzNDQzMzJywgJyMzM0NDNjYnLCAnIzMzQ0M5OScsICcjMzNDQ0NDJywgJyMzM0NDRkYnLCAnIzY2MDBDQycsICcjNjYwMEZGJywgJyM2NjMzQ0MnLCAnIzY2MzNGRicsICcjNjZDQzAwJywgJyM2NkNDMzMnLCAnIzk5MDBDQycsICcjOTkwMEZGJywgJyM5OTMzQ0MnLCAnIzk5MzNGRicsICcjOTlDQzAwJywgJyM5OUNDMzMnLCAnI0NDMDAwMCcsICcjQ0MwMDMzJywgJyNDQzAwNjYnLCAnI0NDMDA5OScsICcjQ0MwMENDJywgJyNDQzAwRkYnLCAnI0NDMzMwMCcsICcjQ0MzMzMzJywgJyNDQzMzNjYnLCAnI0NDMzM5OScsICcjQ0MzM0NDJywgJyNDQzMzRkYnLCAnI0NDNjYwMCcsICcjQ0M2NjMzJywgJyNDQzk5MDAnLCAnI0NDOTkzMycsICcjQ0NDQzAwJywgJyNDQ0NDMzMnLCAnI0ZGMDAwMCcsICcjRkYwMDMzJywgJyNGRjAwNjYnLCAnI0ZGMDA5OScsICcjRkYwMENDJywgJyNGRjAwRkYnLCAnI0ZGMzMwMCcsICcjRkYzMzMzJywgJyNGRjMzNjYnLCAnI0ZGMzM5OScsICcjRkYzM0NDJywgJyNGRjMzRkYnLCAnI0ZGNjYwMCcsICcjRkY2NjMzJywgJyNGRjk5MDAnLCAnI0ZGOTkzMycsICcjRkZDQzAwJywgJyNGRkNDMzMnXTtcbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXG5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cblxuICByZXR1cm4gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlIHx8IC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgd2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSB8fCAvLyBJcyBmaXJlZm94ID49IHYzMT9cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEgfHwgLy8gRG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKTtcbn1cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgYXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgKyB0aGlzLm5hbWVzcGFjZSArICh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArIGFyZ3NbMF0gKyAodGhpcy51c2VDb2xvcnMgPyAnJWMgJyA6ICcgJykgKyAnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdGhpcy51c2VDb2xvcnMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpOyAvLyBUaGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICBpZiAobWF0Y2ggPT09ICclJScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuXG4gICAgaWYgKG1hdGNoID09PSAnJWMnKSB7XG4gICAgICAvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBsb2coKSB7XG4gIHZhciBfY29uc29sZTtcblxuICAvLyBUaGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gKHR5cGVvZiBjb25zb2xlID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoY29uc29sZSkpID09PSAnb2JqZWN0JyAmJiBjb25zb2xlLmxvZyAmJiAoX2NvbnNvbGUgPSBjb25zb2xlKS5sb2cuYXBwbHkoX2NvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikgey8vIFN3YWxsb3dcbiAgICAvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cbiAgfVxufVxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuXG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5nZXRJdGVtKCdkZWJ1ZycpO1xuICB9IGNhdGNoIChlcnJvcikge30gLy8gU3dhbGxvd1xuICAvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXG5cbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIC8vIFRWTUxLaXQgKEFwcGxlIFRWIEpTIFJ1bnRpbWUpIGRvZXMgbm90IGhhdmUgYSB3aW5kb3cgb2JqZWN0LCBqdXN0IGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHRcbiAgICAvLyBUaGUgQnJvd3NlciBhbHNvIGhhcyBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0LlxuICAgIHJldHVybiBsb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7Ly8gU3dhbGxvd1xuICAgIC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb21tb24nKShleHBvcnRzKTtcbnZhciBmb3JtYXR0ZXJzID0gbW9kdWxlLmV4cG9ydHMuZm9ybWF0dGVycztcbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uICh2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnJvci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCIuL2NvbW1vblwiOjU2fV0sNTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG4gIGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG4gIGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1ZztcbiAgY3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuICBjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcbiAgY3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuICBjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcbiAgY3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuICBPYmplY3Qua2V5cyhlbnYpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcbiAgfSk7XG4gIC8qKlxuICAqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cbiAgKi9cblxuICBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMgPSBbXTtcbiAgLyoqXG4gICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gICovXG5cbiAgY3JlYXRlRGVidWcubmFtZXMgPSBbXTtcbiAgY3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcbiAgLyoqXG4gICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICAqXG4gICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICAqL1xuXG4gIGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcbiAgLyoqXG4gICogU2VsZWN0cyBhIGNvbG9yIGZvciBhIGRlYnVnIG5hbWVzcGFjZVxuICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSBzdHJpbmcgZm9yIHRoZSBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcbiAgKiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2VcbiAgKiBAYXBpIHByaXZhdGVcbiAgKi9cblxuICBmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgICB2YXIgaGFzaCA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuICAgICAgaGFzaCA9IChoYXNoIDw8IDUpIC0gaGFzaCArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG4gIH1cblxuICBjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuICAvKipcbiAgKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAgKlxuICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgKiBAYXBpIHB1YmxpY1xuICAqL1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuICAgIHZhciBwcmV2VGltZTtcblxuICAgIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgICAgLy8gRGlzYWJsZWQ/XG4gICAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlbGYgPSBkZWJ1ZzsgLy8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblxuICAgICAgdmFyIGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG4gICAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgICAgc2VsZi5kaWZmID0gbXM7XG4gICAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgICBwcmV2VGltZSA9IGN1cnI7XG4gICAgICBhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICAgIH0gLy8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblxuXG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uIChtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAgIC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgdmFyIGZvcm1hdHRlciA9IGNyZWF0ZURlYnVnLmZvcm1hdHRlcnNbZm9ybWF0XTtcblxuICAgICAgICBpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7IC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblxuICAgICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICBpbmRleC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7IC8vIEFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG5cbiAgICAgIGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcbiAgICAgIHZhciBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcbiAgICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cblxuICAgIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgICBkZWJ1Zy5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuICAgIGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuICAgIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgICBkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcbiAgICBkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7IC8vIERlYnVnLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuICAgIC8vIGRlYnVnLnJhd0xvZyA9IHJhd0xvZztcbiAgICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXG4gICAgaWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG4gICAgcmV0dXJuIGRlYnVnO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgaW5kZXggPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGNyZWF0ZURlYnVnLmluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG4gICAgcmV0dXJuIGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG4gIH1cbiAgLyoqXG4gICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gICpcbiAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICAqIEBhcGkgcHVibGljXG4gICovXG5cblxuICBmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICAgIGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG4gICAgY3JlYXRlRGVidWcubmFtZXMgPSBbXTtcbiAgICBjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuICAgIHZhciBpO1xuICAgIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gICAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKCFzcGxpdFtpXSkge1xuICAgICAgICAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG5cbiAgICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgICAgY3JlYXRlRGVidWcuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZURlYnVnLmluc3RhbmNlc1tpXTtcbiAgICAgIGluc3RhbmNlLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICAqXG4gICogQGFwaSBwdWJsaWNcbiAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgY3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcbiAgfVxuICAvKipcbiAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICpcbiAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICogQGFwaSBwdWJsaWNcbiAgKi9cblxuXG4gIGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICAgIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChjcmVhdGVEZWJ1Zy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgKiBDb2VyY2UgYHZhbGAuXG4gICpcbiAgKiBAcGFyYW0ge01peGVkfSB2YWxcbiAgKiBAcmV0dXJuIHtNaXhlZH1cbiAgKiBAYXBpIHByaXZhdGVcbiAgKi9cblxuXG4gIGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuICByZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dXA7XG5cblxufSx7XCJtc1wiOjU0fV0sNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuXG59LHt9XSw1ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4vKiEgSlNPTiB2My4zLjIgfCBodHRwczovL2Jlc3RpZWpzLmdpdGh1Yi5pby9qc29uMyB8IENvcHlyaWdodCAyMDEyLTIwMTUsIEtpdCBDYW1icmlkZ2UsIEJlbmphbWluIFRhbiB8IGh0dHA6Ly9raXQubWl0LWxpY2Vuc2Uub3JnICovXG47KGZ1bmN0aW9uICgpIHtcbiAgLy8gRGV0ZWN0IHRoZSBgZGVmaW5lYCBmdW5jdGlvbiBleHBvc2VkIGJ5IGFzeW5jaHJvbm91cyBtb2R1bGUgbG9hZGVycy4gVGhlXG4gIC8vIHN0cmljdCBgZGVmaW5lYCBjaGVjayBpcyBuZWNlc3NhcnkgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBgci5qc2AuXG4gIHZhciBpc0xvYWRlciA9IHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kO1xuXG4gIC8vIEEgc2V0IG9mIHR5cGVzIHVzZWQgdG8gZGlzdGluZ3Vpc2ggb2JqZWN0cyBmcm9tIHByaW1pdGl2ZXMuXG4gIHZhciBvYmplY3RUeXBlcyA9IHtcbiAgICBcImZ1bmN0aW9uXCI6IHRydWUsXG4gICAgXCJvYmplY3RcIjogdHJ1ZVxuICB9O1xuXG4gIC8vIERldGVjdCB0aGUgYGV4cG9ydHNgIG9iamVjdCBleHBvc2VkIGJ5IENvbW1vbkpTIGltcGxlbWVudGF0aW9ucy5cbiAgdmFyIGZyZWVFeHBvcnRzID0gb2JqZWN0VHlwZXNbdHlwZW9mIGV4cG9ydHNdICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuICAvLyBVc2UgdGhlIGBnbG9iYWxgIG9iamVjdCBleHBvc2VkIGJ5IE5vZGUgKGluY2x1ZGluZyBCcm93c2VyaWZ5IHZpYVxuICAvLyBgaW5zZXJ0LW1vZHVsZS1nbG9iYWxzYCksIE5hcndoYWwsIGFuZCBSaW5nbyBhcyB0aGUgZGVmYXVsdCBjb250ZXh0LFxuICAvLyBhbmQgdGhlIGB3aW5kb3dgIG9iamVjdCBpbiBicm93c2Vycy4gUmhpbm8gZXhwb3J0cyBhIGBnbG9iYWxgIGZ1bmN0aW9uXG4gIC8vIGluc3RlYWQuXG4gIHZhciByb290ID0gb2JqZWN0VHlwZXNbdHlwZW9mIHdpbmRvd10gJiYgd2luZG93IHx8IHRoaXMsXG4gICAgICBmcmVlR2xvYmFsID0gZnJlZUV4cG9ydHMgJiYgb2JqZWN0VHlwZXNbdHlwZW9mIG1vZHVsZV0gJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgdHlwZW9mIGdsb2JhbCA9PSBcIm9iamVjdFwiICYmIGdsb2JhbDtcblxuICBpZiAoZnJlZUdsb2JhbCAmJiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC5zZWxmID09PSBmcmVlR2xvYmFsKSkge1xuICAgIHJvb3QgPSBmcmVlR2xvYmFsO1xuICB9XG5cbiAgLy8gUHVibGljOiBJbml0aWFsaXplcyBKU09OIDMgdXNpbmcgdGhlIGdpdmVuIGBjb250ZXh0YCBvYmplY3QsIGF0dGFjaGluZyB0aGVcbiAgLy8gYHN0cmluZ2lmeWAgYW5kIGBwYXJzZWAgZnVuY3Rpb25zIHRvIHRoZSBzcGVjaWZpZWQgYGV4cG9ydHNgIG9iamVjdC5cbiAgZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQsIGV4cG9ydHMpIHtcbiAgICBjb250ZXh0IHx8IChjb250ZXh0ID0gcm9vdC5PYmplY3QoKSk7XG4gICAgZXhwb3J0cyB8fCAoZXhwb3J0cyA9IHJvb3QuT2JqZWN0KCkpO1xuXG4gICAgLy8gTmF0aXZlIGNvbnN0cnVjdG9yIGFsaWFzZXMuXG4gICAgdmFyIE51bWJlciA9IGNvbnRleHQuTnVtYmVyIHx8IHJvb3QuTnVtYmVyLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyB8fCByb290LlN0cmluZyxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QgfHwgcm9vdC5PYmplY3QsXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUgfHwgcm9vdC5EYXRlLFxuICAgICAgICBTeW50YXhFcnJvciA9IGNvbnRleHQuU3ludGF4RXJyb3IgfHwgcm9vdC5TeW50YXhFcnJvcixcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3IgfHwgcm9vdC5UeXBlRXJyb3IsXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGggfHwgcm9vdC5NYXRoLFxuICAgICAgICBuYXRpdmVKU09OID0gY29udGV4dC5KU09OIHx8IHJvb3QuSlNPTjtcblxuICAgIC8vIERlbGVnYXRlIHRvIHRoZSBuYXRpdmUgYHN0cmluZ2lmeWAgYW5kIGBwYXJzZWAgaW1wbGVtZW50YXRpb25zLlxuICAgIGlmICh0eXBlb2YgbmF0aXZlSlNPTiA9PSBcIm9iamVjdFwiICYmIG5hdGl2ZUpTT04pIHtcbiAgICAgIGV4cG9ydHMuc3RyaW5naWZ5ID0gbmF0aXZlSlNPTi5zdHJpbmdpZnk7XG4gICAgICBleHBvcnRzLnBhcnNlID0gbmF0aXZlSlNPTi5wYXJzZTtcbiAgICB9XG5cbiAgICAvLyBDb252ZW5pZW5jZSBhbGlhc2VzLlxuICAgIHZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgICAgIGdldENsYXNzID0gb2JqZWN0UHJvdG8udG9TdHJpbmcsXG4gICAgICAgIGlzUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eSxcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgLy8gSW50ZXJuYWw6IENvbnRhaW5zIGB0cnkuLi5jYXRjaGAgbG9naWMgdXNlZCBieSBvdGhlciBmdW5jdGlvbnMuXG4gICAgLy8gVGhpcyBwcmV2ZW50cyBvdGhlciBmdW5jdGlvbnMgZnJvbSBiZWluZyBkZW9wdGltaXplZC5cbiAgICBmdW5jdGlvbiBhdHRlbXB0KGZ1bmMsIGVycm9yRnVuYykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZnVuYygpO1xuICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgIGlmIChlcnJvckZ1bmMpIHtcbiAgICAgICAgICBlcnJvckZ1bmMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRlc3QgdGhlIGBEYXRlI2dldFVUQypgIG1ldGhvZHMuIEJhc2VkIG9uIHdvcmsgYnkgQFlhZmZsZS5cbiAgICB2YXIgaXNFeHRlbmRlZCA9IG5ldyBEYXRlKC0zNTA5ODI3MzM0NTczMjkyKTtcbiAgICBhdHRlbXB0KGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFRoZSBgZ2V0VVRDRnVsbFllYXJgLCBgTW9udGhgLCBhbmQgYERhdGVgIG1ldGhvZHMgcmV0dXJuIG5vbnNlbnNpY2FsXG4gICAgICAvLyByZXN1bHRzIGZvciBjZXJ0YWluIGRhdGVzIGluIE9wZXJhID49IDEwLjUzLlxuICAgICAgaXNFeHRlbmRlZCA9IGlzRXh0ZW5kZWQuZ2V0VVRDRnVsbFllYXIoKSA9PSAtMTA5MjUyICYmIGlzRXh0ZW5kZWQuZ2V0VVRDTW9udGgoKSA9PT0gMCAmJiBpc0V4dGVuZGVkLmdldFVUQ0RhdGUoKSA9PT0gMSAmJlxuICAgICAgICBpc0V4dGVuZGVkLmdldFVUQ0hvdXJzKCkgPT0gMTAgJiYgaXNFeHRlbmRlZC5nZXRVVENNaW51dGVzKCkgPT0gMzcgJiYgaXNFeHRlbmRlZC5nZXRVVENTZWNvbmRzKCkgPT0gNiAmJiBpc0V4dGVuZGVkLmdldFVUQ01pbGxpc2Vjb25kcygpID09IDcwODtcbiAgICB9KTtcblxuICAgIC8vIEludGVybmFsOiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG5hdGl2ZSBgSlNPTi5zdHJpbmdpZnlgIGFuZCBgcGFyc2VgXG4gICAgLy8gaW1wbGVtZW50YXRpb25zIGFyZSBzcGVjLWNvbXBsaWFudC4gQmFzZWQgb24gd29yayBieSBLZW4gU255ZGVyLlxuICAgIGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgICBpZiAoaGFzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgLy8gUmV0dXJuIGNhY2hlZCBmZWF0dXJlIHRlc3QgcmVzdWx0LlxuICAgICAgICByZXR1cm4gaGFzW25hbWVdO1xuICAgICAgfVxuICAgICAgdmFyIGlzU3VwcG9ydGVkO1xuICAgICAgaWYgKG5hbWUgPT0gXCJidWctc3RyaW5nLWNoYXItaW5kZXhcIikge1xuICAgICAgICAvLyBJRSA8PSA3IGRvZXNuJ3Qgc3VwcG9ydCBhY2Nlc3Npbmcgc3RyaW5nIGNoYXJhY3RlcnMgdXNpbmcgc3F1YXJlXG4gICAgICAgIC8vIGJyYWNrZXQgbm90YXRpb24uIElFIDggb25seSBzdXBwb3J0cyB0aGlzIGZvciBwcmltaXRpdmVzLlxuICAgICAgICBpc1N1cHBvcnRlZCA9IFwiYVwiWzBdICE9IFwiYVwiO1xuICAgICAgfSBlbHNlIGlmIChuYW1lID09IFwianNvblwiKSB7XG4gICAgICAgIC8vIEluZGljYXRlcyB3aGV0aGVyIGJvdGggYEpTT04uc3RyaW5naWZ5YCBhbmQgYEpTT04ucGFyc2VgIGFyZVxuICAgICAgICAvLyBzdXBwb3J0ZWQuXG4gICAgICAgIGlzU3VwcG9ydGVkID0gaGFzKFwianNvbi1zdHJpbmdpZnlcIikgJiYgaGFzKFwiZGF0ZS1zZXJpYWxpemF0aW9uXCIpICYmIGhhcyhcImpzb24tcGFyc2VcIik7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUgPT0gXCJkYXRlLXNlcmlhbGl6YXRpb25cIikge1xuICAgICAgICAvLyBJbmRpY2F0ZXMgd2hldGhlciBgRGF0ZWBzIGNhbiBiZSBzZXJpYWxpemVkIGFjY3VyYXRlbHkgYnkgYEpTT04uc3RyaW5naWZ5YC5cbiAgICAgICAgaXNTdXBwb3J0ZWQgPSBoYXMoXCJqc29uLXN0cmluZ2lmeVwiKSAmJiBpc0V4dGVuZGVkO1xuICAgICAgICBpZiAoaXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgICB2YXIgc3RyaW5naWZ5ID0gZXhwb3J0cy5zdHJpbmdpZnk7XG4gICAgICAgICAgYXR0ZW1wdChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc1N1cHBvcnRlZCA9XG4gICAgICAgICAgICAgIC8vIEpTT04gMiwgUHJvdG90eXBlIDw9IDEuNywgYW5kIG9sZGVyIFdlYktpdCBidWlsZHMgaW5jb3JyZWN0bHlcbiAgICAgICAgICAgICAgLy8gc2VyaWFsaXplIGV4dGVuZGVkIHllYXJzLlxuICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IERhdGUoLTguNjRlMTUpKSA9PSAnXCItMjcxODIxLTA0LTIwVDAwOjAwOjAwLjAwMFpcIicgJiZcbiAgICAgICAgICAgICAgLy8gVGhlIG1pbGxpc2Vjb25kcyBhcmUgb3B0aW9uYWwgaW4gRVMgNSwgYnV0IHJlcXVpcmVkIGluIDUuMS5cbiAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKDguNjRlMTUpKSA9PSAnXCIrMjc1NzYwLTA5LTEzVDAwOjAwOjAwLjAwMFpcIicgJiZcbiAgICAgICAgICAgICAgLy8gRmlyZWZveCA8PSAxMS4wIGluY29ycmVjdGx5IHNlcmlhbGl6ZXMgeWVhcnMgcHJpb3IgdG8gMCBhcyBuZWdhdGl2ZVxuICAgICAgICAgICAgICAvLyBmb3VyLWRpZ2l0IHllYXJzIGluc3RlYWQgb2Ygc2l4LWRpZ2l0IHllYXJzLiBDcmVkaXRzOiBAWWFmZmxlLlxuICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IERhdGUoLTYyMTk4NzU1MmU1KSkgPT0gJ1wiLTAwMDAwMS0wMS0wMVQwMDowMDowMC4wMDBaXCInICYmXG4gICAgICAgICAgICAgIC8vIFNhZmFyaSA8PSA1LjEuNSBhbmQgT3BlcmEgPj0gMTAuNTMgaW5jb3JyZWN0bHkgc2VyaWFsaXplIG1pbGxpc2Vjb25kXG4gICAgICAgICAgICAgIC8vIHZhbHVlcyBsZXNzIHRoYW4gMTAwMC4gQ3JlZGl0czogQFlhZmZsZS5cbiAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKC0xKSkgPT0gJ1wiMTk2OS0xMi0zMVQyMzo1OTo1OS45OTlaXCInO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWUsIHNlcmlhbGl6ZWQgPSAne1wiYVwiOlsxLHRydWUsZmFsc2UsbnVsbCxcIlxcXFx1MDAwMFxcXFxiXFxcXG5cXFxcZlxcXFxyXFxcXHRcIl19JztcbiAgICAgICAgLy8gVGVzdCBgSlNPTi5zdHJpbmdpZnlgLlxuICAgICAgICBpZiAobmFtZSA9PSBcImpzb24tc3RyaW5naWZ5XCIpIHtcbiAgICAgICAgICB2YXIgc3RyaW5naWZ5ID0gZXhwb3J0cy5zdHJpbmdpZnksIHN0cmluZ2lmeVN1cHBvcnRlZCA9IHR5cGVvZiBzdHJpbmdpZnkgPT0gXCJmdW5jdGlvblwiO1xuICAgICAgICAgIGlmIChzdHJpbmdpZnlTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIC8vIEEgdGVzdCBmdW5jdGlvbiBvYmplY3Qgd2l0aCBhIGN1c3RvbSBgdG9KU09OYCBtZXRob2QuXG4gICAgICAgICAgICAodmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfSkudG9KU09OID0gdmFsdWU7XG4gICAgICAgICAgICBhdHRlbXB0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc3RyaW5naWZ5U3VwcG9ydGVkID1cbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94IDMuMWIxIGFuZCBiMiBzZXJpYWxpemUgc3RyaW5nLCBudW1iZXIsIGFuZCBib29sZWFuXG4gICAgICAgICAgICAgICAgLy8gcHJpbWl0aXZlcyBhcyBvYmplY3QgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KDApID09PSBcIjBcIiAmJlxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCBiMiwgYW5kIEpTT04gMiBzZXJpYWxpemUgd3JhcHBlZCBwcmltaXRpdmVzIGFzIG9iamVjdFxuICAgICAgICAgICAgICAgIC8vIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgTnVtYmVyKCkpID09PSBcIjBcIiAmJlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgU3RyaW5nKCkpID09ICdcIlwiJyAmJlxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCAyIHRocm93IGFuIGVycm9yIGlmIHRoZSB2YWx1ZSBpcyBgbnVsbGAsIGB1bmRlZmluZWRgLCBvclxuICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90IGRlZmluZSBhIGNhbm9uaWNhbCBKU09OIHJlcHJlc2VudGF0aW9uICh0aGlzIGFwcGxpZXMgdG9cbiAgICAgICAgICAgICAgICAvLyBvYmplY3RzIHdpdGggYHRvSlNPTmAgcHJvcGVydGllcyBhcyB3ZWxsLCAqdW5sZXNzKiB0aGV5IGFyZSBuZXN0ZWRcbiAgICAgICAgICAgICAgICAvLyB3aXRoaW4gYW4gb2JqZWN0IG9yIGFycmF5KS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoZ2V0Q2xhc3MpID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAvLyBJRSA4IHNlcmlhbGl6ZXMgYHVuZGVmaW5lZGAgYXMgYFwidW5kZWZpbmVkXCJgLiBTYWZhcmkgPD0gNS4xLjcgYW5kXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjMgcGFzcyB0aGlzIHRlc3QuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KHVuZGVmaW5lZCkgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8PSA1LjEuNyBhbmQgRkYgMy4xYjMgdGhyb3cgYEVycm9yYHMgYW5kIGBUeXBlRXJyb3JgcyxcbiAgICAgICAgICAgICAgICAvLyByZXNwZWN0aXZlbHksIGlmIHRoZSB2YWx1ZSBpcyBvbWl0dGVkIGVudGlyZWx5LlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSgpID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgMiB0aHJvdyBhbiBlcnJvciBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgbm90IGEgbnVtYmVyLFxuICAgICAgICAgICAgICAgIC8vIHN0cmluZywgYXJyYXksIG9iamVjdCwgQm9vbGVhbiwgb3IgYG51bGxgIGxpdGVyYWwuIFRoaXMgYXBwbGllcyB0b1xuICAgICAgICAgICAgICAgIC8vIG9iamVjdHMgd2l0aCBjdXN0b20gYHRvSlNPTmAgbWV0aG9kcyBhcyB3ZWxsLCB1bmxlc3MgdGhleSBhcmUgbmVzdGVkXG4gICAgICAgICAgICAgICAgLy8gaW5zaWRlIG9iamVjdCBvciBhcnJheSBsaXRlcmFscy4gWVVJIDMuMC4wYjEgaWdub3JlcyBjdXN0b20gYHRvSlNPTmBcbiAgICAgICAgICAgICAgICAvLyBtZXRob2RzIGVudGlyZWx5LlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSh2YWx1ZSkgPT09IFwiMVwiICYmXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KFt2YWx1ZV0pID09IFwiWzFdXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBQcm90b3R5cGUgPD0gMS42LjEgc2VyaWFsaXplcyBgW3VuZGVmaW5lZF1gIGFzIGBcIltdXCJgIGluc3RlYWQgb2ZcbiAgICAgICAgICAgICAgICAvLyBgXCJbbnVsbF1cImAuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KFt1bmRlZmluZWRdKSA9PSBcIltudWxsXVwiICYmXG4gICAgICAgICAgICAgICAgLy8gWVVJIDMuMC4wYjEgZmFpbHMgdG8gc2VyaWFsaXplIGBudWxsYCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobnVsbCkgPT0gXCJudWxsXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgMiBoYWx0cyBzZXJpYWxpemF0aW9uIGlmIGFuIGFycmF5IGNvbnRhaW5zIGEgZnVuY3Rpb246XG4gICAgICAgICAgICAgICAgLy8gYFsxLCB0cnVlLCBnZXRDbGFzcywgMV1gIHNlcmlhbGl6ZXMgYXMgXCJbMSx0cnVlLF0sXCIuIEZGIDMuMWIzXG4gICAgICAgICAgICAgICAgLy8gZWxpZGVzIG5vbi1KU09OIHZhbHVlcyBmcm9tIG9iamVjdHMgYW5kIGFycmF5cywgdW5sZXNzIHRoZXlcbiAgICAgICAgICAgICAgICAvLyBkZWZpbmUgY3VzdG9tIGB0b0pTT05gIG1ldGhvZHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KFt1bmRlZmluZWQsIGdldENsYXNzLCBudWxsXSkgPT0gXCJbbnVsbCxudWxsLG51bGxdXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBTaW1wbGUgc2VyaWFsaXphdGlvbiB0ZXN0LiBGRiAzLjFiMSB1c2VzIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlc1xuICAgICAgICAgICAgICAgIC8vIHdoZXJlIGNoYXJhY3RlciBlc2NhcGUgY29kZXMgYXJlIGV4cGVjdGVkIChlLmcuLCBgXFxiYCA9PiBgXFx1MDAwOGApLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSh7IFwiYVwiOiBbdmFsdWUsIHRydWUsIGZhbHNlLCBudWxsLCBcIlxceDAwXFxiXFxuXFxmXFxyXFx0XCJdIH0pID09IHNlcmlhbGl6ZWQgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSBhbmQgYjIgaWdub3JlIHRoZSBgZmlsdGVyYCBhbmQgYHdpZHRoYCBhcmd1bWVudHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG51bGwsIHZhbHVlKSA9PT0gXCIxXCIgJiZcbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoWzEsIDJdLCBudWxsLCAxKSA9PSBcIltcXG4gMSxcXG4gMlxcbl1cIjtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc3RyaW5naWZ5U3VwcG9ydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXNTdXBwb3J0ZWQgPSBzdHJpbmdpZnlTdXBwb3J0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGVzdCBgSlNPTi5wYXJzZWAuXG4gICAgICAgIGlmIChuYW1lID09IFwianNvbi1wYXJzZVwiKSB7XG4gICAgICAgICAgdmFyIHBhcnNlID0gZXhwb3J0cy5wYXJzZSwgcGFyc2VTdXBwb3J0ZWQ7XG4gICAgICAgICAgaWYgKHR5cGVvZiBwYXJzZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGF0dGVtcHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgYjIgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYSBiYXJlIGxpdGVyYWwgaXMgcHJvdmlkZWQuXG4gICAgICAgICAgICAgIC8vIENvbmZvcm1pbmcgaW1wbGVtZW50YXRpb25zIHNob3VsZCBhbHNvIGNvZXJjZSB0aGUgaW5pdGlhbCBhcmd1bWVudCB0b1xuICAgICAgICAgICAgICAvLyBhIHN0cmluZyBwcmlvciB0byBwYXJzaW5nLlxuICAgICAgICAgICAgICBpZiAocGFyc2UoXCIwXCIpID09PSAwICYmICFwYXJzZShmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBTaW1wbGUgcGFyc2luZyB0ZXN0LlxuICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2Uoc2VyaWFsaXplZCk7XG4gICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSB2YWx1ZVtcImFcIl0ubGVuZ3RoID09IDUgJiYgdmFsdWVbXCJhXCJdWzBdID09PSAxO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgYXR0ZW1wdChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8PSA1LjEuMiBhbmQgRkYgMy4xYjEgYWxsb3cgdW5lc2NhcGVkIHRhYnMgaW4gc3RyaW5ncy5cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSAhcGFyc2UoJ1wiXFx0XCInKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dGVtcHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIEZGIDQuMCBhbmQgNC4wLjEgYWxsb3cgbGVhZGluZyBgK2Agc2lnbnMgYW5kIGxlYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAvLyBkZWNpbWFsIHBvaW50cy4gRkYgNC4wLCA0LjAuMSwgYW5kIElFIDktMTAgYWxzbyBhbGxvd1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGNlcnRhaW4gb2N0YWwgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSBwYXJzZShcIjAxXCIpICE9PSAxO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChwYXJzZVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICBhdHRlbXB0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBGRiA0LjAsIDQuMC4xLCBhbmQgUmhpbm8gMS43UjMtUjQgYWxsb3cgdHJhaWxpbmcgZGVjaW1hbFxuICAgICAgICAgICAgICAgICAgICAgIC8vIHBvaW50cy4gVGhlc2UgZW52aXJvbm1lbnRzLCBhbG9uZyB3aXRoIEZGIDMuMWIxIGFuZCAyLFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGFsc28gYWxsb3cgdHJhaWxpbmcgY29tbWFzIGluIEpTT04gb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgICAgICAgICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gcGFyc2UoXCIxLlwiKSAhPT0gMTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXNTdXBwb3J0ZWQgPSBwYXJzZVN1cHBvcnRlZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc1tuYW1lXSA9ICEhaXNTdXBwb3J0ZWQ7XG4gICAgfVxuICAgIGhhc1tcImJ1Zy1zdHJpbmctY2hhci1pbmRleFwiXSA9IGhhc1tcImRhdGUtc2VyaWFsaXphdGlvblwiXSA9IGhhc1tcImpzb25cIl0gPSBoYXNbXCJqc29uLXN0cmluZ2lmeVwiXSA9IGhhc1tcImpzb24tcGFyc2VcIl0gPSBudWxsO1xuXG4gICAgaWYgKCFoYXMoXCJqc29uXCIpKSB7XG4gICAgICAvLyBDb21tb24gYFtbQ2xhc3NdXWAgbmFtZSBhbGlhc2VzLlxuICAgICAgdmFyIGZ1bmN0aW9uQ2xhc3MgPSBcIltvYmplY3QgRnVuY3Rpb25dXCIsXG4gICAgICAgICAgZGF0ZUNsYXNzID0gXCJbb2JqZWN0IERhdGVdXCIsXG4gICAgICAgICAgbnVtYmVyQ2xhc3MgPSBcIltvYmplY3QgTnVtYmVyXVwiLFxuICAgICAgICAgIHN0cmluZ0NsYXNzID0gXCJbb2JqZWN0IFN0cmluZ11cIixcbiAgICAgICAgICBhcnJheUNsYXNzID0gXCJbb2JqZWN0IEFycmF5XVwiLFxuICAgICAgICAgIGJvb2xlYW5DbGFzcyA9IFwiW29iamVjdCBCb29sZWFuXVwiO1xuXG4gICAgICAvLyBEZXRlY3QgaW5jb21wbGV0ZSBzdXBwb3J0IGZvciBhY2Nlc3Npbmcgc3RyaW5nIGNoYXJhY3RlcnMgYnkgaW5kZXguXG4gICAgICB2YXIgY2hhckluZGV4QnVnZ3kgPSBoYXMoXCJidWctc3RyaW5nLWNoYXItaW5kZXhcIik7XG5cbiAgICAgIC8vIEludGVybmFsOiBOb3JtYWxpemVzIHRoZSBgZm9yLi4uaW5gIGl0ZXJhdGlvbiBhbGdvcml0aG0gYWNyb3NzXG4gICAgICAvLyBlbnZpcm9ubWVudHMuIEVhY2ggZW51bWVyYXRlZCBrZXkgaXMgeWllbGRlZCB0byBhIGBjYWxsYmFja2AgZnVuY3Rpb24uXG4gICAgICB2YXIgZm9yT3duID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNpemUgPSAwLCBQcm9wZXJ0aWVzLCBkb250RW51bXMsIHByb3BlcnR5O1xuXG4gICAgICAgIC8vIFRlc3RzIGZvciBidWdzIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50J3MgYGZvci4uLmluYCBhbGdvcml0aG0uIFRoZVxuICAgICAgICAvLyBgdmFsdWVPZmAgcHJvcGVydHkgaW5oZXJpdHMgdGhlIG5vbi1lbnVtZXJhYmxlIGZsYWcgZnJvbVxuICAgICAgICAvLyBgT2JqZWN0LnByb3RvdHlwZWAgaW4gb2xkZXIgdmVyc2lvbnMgb2YgSUUsIE5ldHNjYXBlLCBhbmQgTW96aWxsYS5cbiAgICAgICAgKFByb3BlcnRpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy52YWx1ZU9mID0gMDtcbiAgICAgICAgfSkucHJvdG90eXBlLnZhbHVlT2YgPSAwO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgYFByb3BlcnRpZXNgIGNsYXNzLlxuICAgICAgICBkb250RW51bXMgPSBuZXcgUHJvcGVydGllcygpO1xuICAgICAgICBmb3IgKHByb3BlcnR5IGluIGRvbnRFbnVtcykge1xuICAgICAgICAgIC8vIElnbm9yZSBhbGwgcHJvcGVydGllcyBpbmhlcml0ZWQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuXG4gICAgICAgICAgaWYgKGlzUHJvcGVydHkuY2FsbChkb250RW51bXMsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBQcm9wZXJ0aWVzID0gZG9udEVudW1zID0gbnVsbDtcblxuICAgICAgICAvLyBOb3JtYWxpemUgdGhlIGl0ZXJhdGlvbiBhbGdvcml0aG0uXG4gICAgICAgIGlmICghc2l6ZSkge1xuICAgICAgICAgIC8vIEEgbGlzdCBvZiBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGluaGVyaXRlZCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC5cbiAgICAgICAgICBkb250RW51bXMgPSBbXCJ2YWx1ZU9mXCIsIFwidG9TdHJpbmdcIiwgXCJ0b0xvY2FsZVN0cmluZ1wiLCBcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsIFwiaXNQcm90b3R5cGVPZlwiLCBcImhhc093blByb3BlcnR5XCIsIFwiY29uc3RydWN0b3JcIl07XG4gICAgICAgICAgLy8gSUUgPD0gOCwgTW96aWxsYSAxLjAsIGFuZCBOZXRzY2FwZSA2LjIgaWdub3JlIHNoYWRvd2VkIG5vbi1lbnVtZXJhYmxlXG4gICAgICAgICAgLy8gcHJvcGVydGllcy5cbiAgICAgICAgICBmb3JPd24gPSBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSBnZXRDbGFzcy5jYWxsKG9iamVjdCkgPT0gZnVuY3Rpb25DbGFzcywgcHJvcGVydHksIGxlbmd0aDtcbiAgICAgICAgICAgIHZhciBoYXNQcm9wZXJ0eSA9ICFpc0Z1bmN0aW9uICYmIHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgIT0gXCJmdW5jdGlvblwiICYmIG9iamVjdFR5cGVzW3R5cGVvZiBvYmplY3QuaGFzT3duUHJvcGVydHldICYmIG9iamVjdC5oYXNPd25Qcm9wZXJ0eSB8fCBpc1Byb3BlcnR5O1xuICAgICAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgLy8gR2Vja28gPD0gMS4wIGVudW1lcmF0ZXMgdGhlIGBwcm90b3R5cGVgIHByb3BlcnR5IG9mIGZ1bmN0aW9ucyB1bmRlclxuICAgICAgICAgICAgICAvLyBjZXJ0YWluIGNvbmRpdGlvbnM7IElFIGRvZXMgbm90LlxuICAgICAgICAgICAgICBpZiAoIShpc0Z1bmN0aW9uICYmIHByb3BlcnR5ID09IFwicHJvdG90eXBlXCIpICYmIGhhc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1hbnVhbGx5IGludm9rZSB0aGUgY2FsbGJhY2sgZm9yIGVhY2ggbm9uLWVudW1lcmFibGUgcHJvcGVydHkuXG4gICAgICAgICAgICBmb3IgKGxlbmd0aCA9IGRvbnRFbnVtcy5sZW5ndGg7IHByb3BlcnR5ID0gZG9udEVudW1zWy0tbGVuZ3RoXTspIHtcbiAgICAgICAgICAgICAgaWYgKGhhc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE5vIGJ1Z3MgZGV0ZWN0ZWQ7IHVzZSB0aGUgc3RhbmRhcmQgYGZvci4uLmluYCBhbGdvcml0aG0uXG4gICAgICAgICAgZm9yT3duID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBpc0Z1bmN0aW9uID0gZ2V0Q2xhc3MuY2FsbChvYmplY3QpID09IGZ1bmN0aW9uQ2xhc3MsIHByb3BlcnR5LCBpc0NvbnN0cnVjdG9yO1xuICAgICAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgaWYgKCEoaXNGdW5jdGlvbiAmJiBwcm9wZXJ0eSA9PSBcInByb3RvdHlwZVwiKSAmJiBpc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkgJiYgIShpc0NvbnN0cnVjdG9yID0gcHJvcGVydHkgPT09IFwiY29uc3RydWN0b3JcIikpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1hbnVhbGx5IGludm9rZSB0aGUgY2FsbGJhY2sgZm9yIHRoZSBgY29uc3RydWN0b3JgIHByb3BlcnR5IGR1ZSB0b1xuICAgICAgICAgICAgLy8gY3Jvc3MtZW52aXJvbm1lbnQgaW5jb25zaXN0ZW5jaWVzLlxuICAgICAgICAgICAgaWYgKGlzQ29uc3RydWN0b3IgfHwgaXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgKHByb3BlcnR5ID0gXCJjb25zdHJ1Y3RvclwiKSkpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvck93bihvYmplY3QsIGNhbGxiYWNrKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIFB1YmxpYzogU2VyaWFsaXplcyBhIEphdmFTY3JpcHQgYHZhbHVlYCBhcyBhIEpTT04gc3RyaW5nLiBUaGUgb3B0aW9uYWxcbiAgICAgIC8vIGBmaWx0ZXJgIGFyZ3VtZW50IG1heSBzcGVjaWZ5IGVpdGhlciBhIGZ1bmN0aW9uIHRoYXQgYWx0ZXJzIGhvdyBvYmplY3QgYW5kXG4gICAgICAvLyBhcnJheSBtZW1iZXJzIGFyZSBzZXJpYWxpemVkLCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIGFuZCBudW1iZXJzIHRoYXRcbiAgICAgIC8vIGluZGljYXRlcyB3aGljaCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBzZXJpYWxpemVkLiBUaGUgb3B0aW9uYWwgYHdpZHRoYFxuICAgICAgLy8gYXJndW1lbnQgbWF5IGJlIGVpdGhlciBhIHN0cmluZyBvciBudW1iZXIgdGhhdCBzcGVjaWZpZXMgdGhlIGluZGVudGF0aW9uXG4gICAgICAvLyBsZXZlbCBvZiB0aGUgb3V0cHV0LlxuICAgICAgaWYgKCFoYXMoXCJqc29uLXN0cmluZ2lmeVwiKSAmJiAhaGFzKFwiZGF0ZS1zZXJpYWxpemF0aW9uXCIpKSB7XG4gICAgICAgIC8vIEludGVybmFsOiBBIG1hcCBvZiBjb250cm9sIGNoYXJhY3RlcnMgYW5kIHRoZWlyIGVzY2FwZWQgZXF1aXZhbGVudHMuXG4gICAgICAgIHZhciBFc2NhcGVzID0ge1xuICAgICAgICAgIDkyOiBcIlxcXFxcXFxcXCIsXG4gICAgICAgICAgMzQ6ICdcXFxcXCInLFxuICAgICAgICAgIDg6IFwiXFxcXGJcIixcbiAgICAgICAgICAxMjogXCJcXFxcZlwiLFxuICAgICAgICAgIDEwOiBcIlxcXFxuXCIsXG4gICAgICAgICAgMTM6IFwiXFxcXHJcIixcbiAgICAgICAgICA5OiBcIlxcXFx0XCJcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogQ29udmVydHMgYHZhbHVlYCBpbnRvIGEgemVyby1wYWRkZWQgc3RyaW5nIHN1Y2ggdGhhdCBpdHNcbiAgICAgICAgLy8gbGVuZ3RoIGlzIGF0IGxlYXN0IGVxdWFsIHRvIGB3aWR0aGAuIFRoZSBgd2lkdGhgIG11c3QgYmUgPD0gNi5cbiAgICAgICAgdmFyIGxlYWRpbmdaZXJvZXMgPSBcIjAwMDAwMFwiO1xuICAgICAgICB2YXIgdG9QYWRkZWRTdHJpbmcgPSBmdW5jdGlvbiAod2lkdGgsIHZhbHVlKSB7XG4gICAgICAgICAgLy8gVGhlIGB8fCAwYCBleHByZXNzaW9uIGlzIG5lY2Vzc2FyeSB0byB3b3JrIGFyb3VuZCBhIGJ1ZyBpblxuICAgICAgICAgIC8vIE9wZXJhIDw9IDcuNTR1MiB3aGVyZSBgMCA9PSAtMGAsIGJ1dCBgU3RyaW5nKC0wKSAhPT0gXCIwXCJgLlxuICAgICAgICAgIHJldHVybiAobGVhZGluZ1plcm9lcyArICh2YWx1ZSB8fCAwKSkuc2xpY2UoLXdpZHRoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogU2VyaWFsaXplcyBhIGRhdGUgb2JqZWN0LlxuICAgICAgICB2YXIgc2VyaWFsaXplRGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHZhciBnZXREYXRhLCB5ZWFyLCBtb250aCwgZGF0ZSwgdGltZSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAvLyBEZWZpbmUgYWRkaXRpb25hbCB1dGlsaXR5IG1ldGhvZHMgaWYgdGhlIGBEYXRlYCBtZXRob2RzIGFyZSBidWdneS5cbiAgICAgICAgICBpZiAoIWlzRXh0ZW5kZWQpIHtcbiAgICAgICAgICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgICAgICAgICAvLyBBIG1hcHBpbmcgYmV0d2VlbiB0aGUgbW9udGhzIG9mIHRoZSB5ZWFyIGFuZCB0aGUgbnVtYmVyIG9mIGRheXMgYmV0d2VlblxuICAgICAgICAgICAgLy8gSmFudWFyeSAxc3QgYW5kIHRoZSBmaXJzdCBvZiB0aGUgcmVzcGVjdGl2ZSBtb250aC5cbiAgICAgICAgICAgIHZhciBNb250aHMgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdO1xuICAgICAgICAgICAgLy8gSW50ZXJuYWw6IENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBkYXlzIGJldHdlZW4gdGhlIFVuaXggZXBvY2ggYW5kIHRoZVxuICAgICAgICAgICAgLy8gZmlyc3QgZGF5IG9mIHRoZSBnaXZlbiBtb250aC5cbiAgICAgICAgICAgIHZhciBnZXREYXkgPSBmdW5jdGlvbiAoeWVhciwgbW9udGgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIE1vbnRoc1ttb250aF0gKyAzNjUgKiAoeWVhciAtIDE5NzApICsgZmxvb3IoKHllYXIgLSAxOTY5ICsgKG1vbnRoID0gKyhtb250aCA+IDEpKSkgLyA0KSAtIGZsb29yKCh5ZWFyIC0gMTkwMSArIG1vbnRoKSAvIDEwMCkgKyBmbG9vcigoeWVhciAtIDE2MDEgKyBtb250aCkgLyA0MDApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdldERhdGEgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgLy8gTWFudWFsbHkgY29tcHV0ZSB0aGUgeWVhciwgbW9udGgsIGRhdGUsIGhvdXJzLCBtaW51dGVzLFxuICAgICAgICAgICAgICAvLyBzZWNvbmRzLCBhbmQgbWlsbGlzZWNvbmRzIGlmIHRoZSBgZ2V0VVRDKmAgbWV0aG9kcyBhcmVcbiAgICAgICAgICAgICAgLy8gYnVnZ3kuIEFkYXB0ZWQgZnJvbSBAWWFmZmxlJ3MgYGRhdGUtc2hpbWAgcHJvamVjdC5cbiAgICAgICAgICAgICAgZGF0ZSA9IGZsb29yKHZhbHVlIC8gODY0ZTUpO1xuICAgICAgICAgICAgICBmb3IgKHllYXIgPSBmbG9vcihkYXRlIC8gMzY1LjI0MjUpICsgMTk3MCAtIDE7IGdldERheSh5ZWFyICsgMSwgMCkgPD0gZGF0ZTsgeWVhcisrKTtcbiAgICAgICAgICAgICAgZm9yIChtb250aCA9IGZsb29yKChkYXRlIC0gZ2V0RGF5KHllYXIsIDApKSAvIDMwLjQyKTsgZ2V0RGF5KHllYXIsIG1vbnRoICsgMSkgPD0gZGF0ZTsgbW9udGgrKyk7XG4gICAgICAgICAgICAgIGRhdGUgPSAxICsgZGF0ZSAtIGdldERheSh5ZWFyLCBtb250aCk7XG4gICAgICAgICAgICAgIC8vIFRoZSBgdGltZWAgdmFsdWUgc3BlY2lmaWVzIHRoZSB0aW1lIHdpdGhpbiB0aGUgZGF5IChzZWUgRVNcbiAgICAgICAgICAgICAgLy8gNS4xIHNlY3Rpb24gMTUuOS4xLjIpLiBUaGUgZm9ybXVsYSBgKEEgJSBCICsgQikgJSBCYCBpcyB1c2VkXG4gICAgICAgICAgICAgIC8vIHRvIGNvbXB1dGUgYEEgbW9kdWxvIEJgLCBhcyB0aGUgYCVgIG9wZXJhdG9yIGRvZXMgbm90XG4gICAgICAgICAgICAgIC8vIGNvcnJlc3BvbmQgdG8gdGhlIGBtb2R1bG9gIG9wZXJhdGlvbiBmb3IgbmVnYXRpdmUgbnVtYmVycy5cbiAgICAgICAgICAgICAgdGltZSA9ICh2YWx1ZSAlIDg2NGU1ICsgODY0ZTUpICUgODY0ZTU7XG4gICAgICAgICAgICAgIC8vIFRoZSBob3VycywgbWludXRlcywgc2Vjb25kcywgYW5kIG1pbGxpc2Vjb25kcyBhcmUgb2J0YWluZWQgYnlcbiAgICAgICAgICAgICAgLy8gZGVjb21wb3NpbmcgdGhlIHRpbWUgd2l0aGluIHRoZSBkYXkuIFNlZSBzZWN0aW9uIDE1LjkuMS4xMC5cbiAgICAgICAgICAgICAgaG91cnMgPSBmbG9vcih0aW1lIC8gMzZlNSkgJSAyNDtcbiAgICAgICAgICAgICAgbWludXRlcyA9IGZsb29yKHRpbWUgLyA2ZTQpICUgNjA7XG4gICAgICAgICAgICAgIHNlY29uZHMgPSBmbG9vcih0aW1lIC8gMWUzKSAlIDYwO1xuICAgICAgICAgICAgICBtaWxsaXNlY29uZHMgPSB0aW1lICUgMWUzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0RGF0YSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICB5ZWFyID0gdmFsdWUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgbW9udGggPSB2YWx1ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgICBkYXRlID0gdmFsdWUuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICAgICAgICBob3VycyA9IHZhbHVlLmdldFVUQ0hvdXJzKCk7XG4gICAgICAgICAgICAgIG1pbnV0ZXMgPSB2YWx1ZS5nZXRVVENNaW51dGVzKCk7XG4gICAgICAgICAgICAgIHNlY29uZHMgPSB2YWx1ZS5nZXRVVENTZWNvbmRzKCk7XG4gICAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IHZhbHVlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VyaWFsaXplRGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID4gLTEgLyAwICYmIHZhbHVlIDwgMSAvIDApIHtcbiAgICAgICAgICAgICAgLy8gRGF0ZXMgYXJlIHNlcmlhbGl6ZWQgYWNjb3JkaW5nIHRvIHRoZSBgRGF0ZSN0b0pTT05gIG1ldGhvZFxuICAgICAgICAgICAgICAvLyBzcGVjaWZpZWQgaW4gRVMgNS4xIHNlY3Rpb24gMTUuOS41LjQ0LiBTZWUgc2VjdGlvbiAxNS45LjEuMTVcbiAgICAgICAgICAgICAgLy8gZm9yIHRoZSBJU08gODYwMSBkYXRlIHRpbWUgc3RyaW5nIGZvcm1hdC5cbiAgICAgICAgICAgICAgZ2V0RGF0YSh2YWx1ZSk7XG4gICAgICAgICAgICAgIC8vIFNlcmlhbGl6ZSBleHRlbmRlZCB5ZWFycyBjb3JyZWN0bHkuXG4gICAgICAgICAgICAgIHZhbHVlID0gKHllYXIgPD0gMCB8fCB5ZWFyID49IDFlNCA/ICh5ZWFyIDwgMCA/IFwiLVwiIDogXCIrXCIpICsgdG9QYWRkZWRTdHJpbmcoNiwgeWVhciA8IDAgPyAteWVhciA6IHllYXIpIDogdG9QYWRkZWRTdHJpbmcoNCwgeWVhcikpICtcbiAgICAgICAgICAgICAgXCItXCIgKyB0b1BhZGRlZFN0cmluZygyLCBtb250aCArIDEpICsgXCItXCIgKyB0b1BhZGRlZFN0cmluZygyLCBkYXRlKSArXG4gICAgICAgICAgICAgIC8vIE1vbnRocywgZGF0ZXMsIGhvdXJzLCBtaW51dGVzLCBhbmQgc2Vjb25kcyBzaG91bGQgaGF2ZSB0d29cbiAgICAgICAgICAgICAgLy8gZGlnaXRzOyBtaWxsaXNlY29uZHMgc2hvdWxkIGhhdmUgdGhyZWUuXG4gICAgICAgICAgICAgIFwiVFwiICsgdG9QYWRkZWRTdHJpbmcoMiwgaG91cnMpICsgXCI6XCIgKyB0b1BhZGRlZFN0cmluZygyLCBtaW51dGVzKSArIFwiOlwiICsgdG9QYWRkZWRTdHJpbmcoMiwgc2Vjb25kcykgK1xuICAgICAgICAgICAgICAvLyBNaWxsaXNlY29uZHMgYXJlIG9wdGlvbmFsIGluIEVTIDUuMCwgYnV0IHJlcXVpcmVkIGluIDUuMS5cbiAgICAgICAgICAgICAgXCIuXCIgKyB0b1BhZGRlZFN0cmluZygzLCBtaWxsaXNlY29uZHMpICsgXCJaXCI7XG4gICAgICAgICAgICAgIHllYXIgPSBtb250aCA9IGRhdGUgPSBob3VycyA9IG1pbnV0ZXMgPSBzZWNvbmRzID0gbWlsbGlzZWNvbmRzID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVEYXRlKHZhbHVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBGb3IgZW52aXJvbm1lbnRzIHdpdGggYEpTT04uc3RyaW5naWZ5YCBidXQgYnVnZ3kgZGF0ZSBzZXJpYWxpemF0aW9uLFxuICAgICAgICAvLyB3ZSBvdmVycmlkZSB0aGUgbmF0aXZlIGBEYXRlI3RvSlNPTmAgaW1wbGVtZW50YXRpb24gd2l0aCBhXG4gICAgICAgIC8vIHNwZWMtY29tcGxpYW50IG9uZS5cbiAgICAgICAgaWYgKGhhcyhcImpzb24tc3RyaW5naWZ5XCIpICYmICFoYXMoXCJkYXRlLXNlcmlhbGl6YXRpb25cIikpIHtcbiAgICAgICAgICAvLyBJbnRlcm5hbDogdGhlIGBEYXRlI3RvSlNPTmAgaW1wbGVtZW50YXRpb24gdXNlZCB0byBvdmVycmlkZSB0aGUgbmF0aXZlIG9uZS5cbiAgICAgICAgICBmdW5jdGlvbiBkYXRlVG9KU09OIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVEYXRlKHRoaXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFB1YmxpYzogYEpTT04uc3RyaW5naWZ5YC4gU2VlIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMuXG4gICAgICAgICAgdmFyIG5hdGl2ZVN0cmluZ2lmeSA9IGV4cG9ydHMuc3RyaW5naWZ5O1xuICAgICAgICAgIGV4cG9ydHMuc3RyaW5naWZ5ID0gZnVuY3Rpb24gKHNvdXJjZSwgZmlsdGVyLCB3aWR0aCkge1xuICAgICAgICAgICAgdmFyIG5hdGl2ZVRvSlNPTiA9IERhdGUucHJvdG90eXBlLnRvSlNPTjtcbiAgICAgICAgICAgIERhdGUucHJvdG90eXBlLnRvSlNPTiA9IGRhdGVUb0pTT047XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlU3RyaW5naWZ5KHNvdXJjZSwgZmlsdGVyLCB3aWR0aCk7XG4gICAgICAgICAgICBEYXRlLnByb3RvdHlwZS50b0pTT04gPSBuYXRpdmVUb0pTT047XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJbnRlcm5hbDogRG91YmxlLXF1b3RlcyBhIHN0cmluZyBgdmFsdWVgLCByZXBsYWNpbmcgYWxsIEFTQ0lJIGNvbnRyb2xcbiAgICAgICAgICAvLyBjaGFyYWN0ZXJzIChjaGFyYWN0ZXJzIHdpdGggY29kZSB1bml0IHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDMxKSB3aXRoXG4gICAgICAgICAgLy8gdGhlaXIgZXNjYXBlZCBlcXVpdmFsZW50cy4gVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGVcbiAgICAgICAgICAvLyBgUXVvdGUodmFsdWUpYCBvcGVyYXRpb24gZGVmaW5lZCBpbiBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLlxuICAgICAgICAgIHZhciB1bmljb2RlUHJlZml4ID0gXCJcXFxcdTAwXCI7XG4gICAgICAgICAgdmFyIGVzY2FwZUNoYXIgPSBmdW5jdGlvbiAoY2hhcmFjdGVyKSB7XG4gICAgICAgICAgICB2YXIgY2hhckNvZGUgPSBjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKSwgZXNjYXBlZCA9IEVzY2FwZXNbY2hhckNvZGVdO1xuICAgICAgICAgICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVzY2FwZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5pY29kZVByZWZpeCArIHRvUGFkZGVkU3RyaW5nKDIsIGNoYXJDb2RlLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgcmVFc2NhcGUgPSAvW1xceDAwLVxceDFmXFx4MjJcXHg1Y10vZztcbiAgICAgICAgICB2YXIgcXVvdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJlRXNjYXBlLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICByZXR1cm4gJ1wiJyArXG4gICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICByZUVzY2FwZS50ZXN0KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgPyB2YWx1ZS5yZXBsYWNlKHJlRXNjYXBlLCBlc2NhcGVDaGFyKVxuICAgICAgICAgICAgICAgICAgOiB2YWx1ZVxuICAgICAgICAgICAgICApICtcbiAgICAgICAgICAgICAgJ1wiJztcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gSW50ZXJuYWw6IFJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZXMgYW4gb2JqZWN0LiBJbXBsZW1lbnRzIHRoZVxuICAgICAgICAgIC8vIGBTdHIoa2V5LCBob2xkZXIpYCwgYEpPKHZhbHVlKWAsIGFuZCBgSkEodmFsdWUpYCBvcGVyYXRpb25zLlxuICAgICAgICAgIHZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiAocHJvcGVydHksIG9iamVjdCwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjaykge1xuICAgICAgICAgICAgdmFyIHZhbHVlLCB0eXBlLCBjbGFzc05hbWUsIHJlc3VsdHMsIGVsZW1lbnQsIGluZGV4LCBsZW5ndGgsIHByZWZpeCwgcmVzdWx0O1xuICAgICAgICAgICAgYXR0ZW1wdChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIC8vIE5lY2Vzc2FyeSBmb3IgaG9zdCBvYmplY3Qgc3VwcG9ydC5cbiAgICAgICAgICAgICAgdmFsdWUgPSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLmdldFVUQ0Z1bGxZZWFyICYmIGdldENsYXNzLmNhbGwodmFsdWUpID09IGRhdGVDbGFzcyAmJiB2YWx1ZS50b0pTT04gPT09IERhdGUucHJvdG90eXBlLnRvSlNPTikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gc2VyaWFsaXplRGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlLnRvSlNPTiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAvLyBJZiBhIHJlcGxhY2VtZW50IGZ1bmN0aW9uIHdhcyBwcm92aWRlZCwgY2FsbCBpdCB0byBvYnRhaW4gdGhlIHZhbHVlXG4gICAgICAgICAgICAgIC8vIGZvciBzZXJpYWxpemF0aW9uLlxuICAgICAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrLmNhbGwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRXhpdCBlYXJseSBpZiB2YWx1ZSBpcyBgdW5kZWZpbmVkYCBvciBgbnVsbGAuXG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdmFsdWUgOiBcIm51bGxcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICAgICAgICAvLyBPbmx5IGNhbGwgYGdldENsYXNzYCBpZiB0aGUgdmFsdWUgaXMgYW4gb2JqZWN0LlxuICAgICAgICAgICAgaWYgKHR5cGUgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICBjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoY2xhc3NOYW1lIHx8IHR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgICAgY2FzZSBib29sZWFuQ2xhc3M6XG4gICAgICAgICAgICAgICAgLy8gQm9vbGVhbnMgYXJlIHJlcHJlc2VudGVkIGxpdGVyYWxseS5cbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIiArIHZhbHVlO1xuICAgICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICAgIGNhc2UgbnVtYmVyQ2xhc3M6XG4gICAgICAgICAgICAgICAgLy8gSlNPTiBudW1iZXJzIG11c3QgYmUgZmluaXRlLiBgSW5maW5pdHlgIGFuZCBgTmFOYCBhcmUgc2VyaWFsaXplZCBhc1xuICAgICAgICAgICAgICAgIC8vIGBcIm51bGxcImAuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID4gLTEgLyAwICYmIHZhbHVlIDwgMSAvIDAgPyBcIlwiICsgdmFsdWUgOiBcIm51bGxcIjtcbiAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICBjYXNlIHN0cmluZ0NsYXNzOlxuICAgICAgICAgICAgICAgIC8vIFN0cmluZ3MgYXJlIGRvdWJsZS1xdW90ZWQgYW5kIGVzY2FwZWQuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1b3RlKFwiXCIgKyB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBzZXJpYWxpemUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgIC8vIENoZWNrIGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhpcyBpcyBhIGxpbmVhciBzZWFyY2g7IHBlcmZvcm1hbmNlXG4gICAgICAgICAgICAgIC8vIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZiB1bmlxdWUgbmVzdGVkIG9iamVjdHMuXG4gICAgICAgICAgICAgIGZvciAobGVuZ3RoID0gc3RhY2subGVuZ3RoOyBsZW5ndGgtLTspIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhY2tbbGVuZ3RoXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIC8vIEN5Y2xpYyBzdHJ1Y3R1cmVzIGNhbm5vdCBiZSBzZXJpYWxpemVkIGJ5IGBKU09OLnN0cmluZ2lmeWAuXG4gICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gQWRkIHRoZSBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAgICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBjdXJyZW50IGluZGVudGF0aW9uIGxldmVsIGFuZCBpbmRlbnQgb25lIGFkZGl0aW9uYWwgbGV2ZWwuXG4gICAgICAgICAgICAgIHByZWZpeCA9IGluZGVudGF0aW9uO1xuICAgICAgICAgICAgICBpbmRlbnRhdGlvbiArPSB3aGl0ZXNwYWNlO1xuICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09IGFycmF5Q2xhc3MpIHtcbiAgICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBzZXJpYWxpemUgYXJyYXkgZWxlbWVudHMuXG4gICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBzZXJpYWxpemUoaW5kZXgsIHZhbHVlLCBjYWxsYmFjaywgcHJvcGVydGllcywgd2hpdGVzcGFjZSwgaW5kZW50YXRpb24sIHN0YWNrKTtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChlbGVtZW50ID09PSB1bmRlZmluZWQgPyBcIm51bGxcIiA6IGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRzLmxlbmd0aCA/ICh3aGl0ZXNwYWNlID8gXCJbXFxuXCIgKyBpbmRlbnRhdGlvbiArIHJlc3VsdHMuam9pbihcIixcXG5cIiArIGluZGVudGF0aW9uKSArIFwiXFxuXCIgKyBwcmVmaXggKyBcIl1cIiA6IChcIltcIiArIHJlc3VsdHMuam9pbihcIixcIikgKyBcIl1cIikpIDogXCJbXVwiO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZSBvYmplY3QgbWVtYmVycy4gTWVtYmVycyBhcmUgc2VsZWN0ZWQgZnJvbVxuICAgICAgICAgICAgICAgIC8vIGVpdGhlciBhIHVzZXItc3BlY2lmaWVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMsIG9yIHRoZSBvYmplY3RcbiAgICAgICAgICAgICAgICAvLyBpdHNlbGYuXG4gICAgICAgICAgICAgICAgZm9yT3duKHByb3BlcnRpZXMgfHwgdmFsdWUsIGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBzZXJpYWxpemUocHJvcGVydHksIHZhbHVlLCBjYWxsYmFjaywgcHJvcGVydGllcywgd2hpdGVzcGFjZSwgaW5kZW50YXRpb24sIHN0YWNrKTtcbiAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWNjb3JkaW5nIHRvIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjM6IFwiSWYgYGdhcGAge3doaXRlc3BhY2V9XG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIG5vdCB0aGUgZW1wdHkgc3RyaW5nLCBsZXQgYG1lbWJlcmAge3F1b3RlKHByb3BlcnR5KSArIFwiOlwifVxuICAgICAgICAgICAgICAgICAgICAvLyBiZSB0aGUgY29uY2F0ZW5hdGlvbiBvZiBgbWVtYmVyYCBhbmQgdGhlIGBzcGFjZWAgY2hhcmFjdGVyLlwiXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBcImBzcGFjZWAgY2hhcmFjdGVyXCIgcmVmZXJzIHRvIHRoZSBsaXRlcmFsIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoYXJhY3Rlciwgbm90IHRoZSBgc3BhY2VgIHt3aWR0aH0gYXJndW1lbnQgcHJvdmlkZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gYEpTT04uc3RyaW5naWZ5YC5cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHF1b3RlKHByb3BlcnR5KSArIFwiOlwiICsgKHdoaXRlc3BhY2UgPyBcIiBcIiA6IFwiXCIpICsgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0cy5sZW5ndGggPyAod2hpdGVzcGFjZSA/IFwie1xcblwiICsgaW5kZW50YXRpb24gKyByZXN1bHRzLmpvaW4oXCIsXFxuXCIgKyBpbmRlbnRhdGlvbikgKyBcIlxcblwiICsgcHJlZml4ICsgXCJ9XCIgOiAoXCJ7XCIgKyByZXN1bHRzLmpvaW4oXCIsXCIpICsgXCJ9XCIpKSA6IFwie31cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIG9iamVjdCBmcm9tIHRoZSB0cmF2ZXJzZWQgb2JqZWN0IHN0YWNrLlxuICAgICAgICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gUHVibGljOiBgSlNPTi5zdHJpbmdpZnlgLiBTZWUgRVMgNS4xIHNlY3Rpb24gMTUuMTIuMy5cbiAgICAgICAgICBleHBvcnRzLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChzb3VyY2UsIGZpbHRlciwgd2lkdGgpIHtcbiAgICAgICAgICAgIHZhciB3aGl0ZXNwYWNlLCBjYWxsYmFjaywgcHJvcGVydGllcywgY2xhc3NOYW1lO1xuICAgICAgICAgICAgaWYgKG9iamVjdFR5cGVzW3R5cGVvZiBmaWx0ZXJdICYmIGZpbHRlcikge1xuICAgICAgICAgICAgICBjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKGZpbHRlcik7XG4gICAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT0gZnVuY3Rpb25DbGFzcykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZmlsdGVyO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSA9PSBhcnJheUNsYXNzKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgcHJvcGVydHkgbmFtZXMgYXJyYXkgaW50byBhIG1ha2VzaGlmdCBzZXQuXG4gICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoID0gZmlsdGVyLmxlbmd0aCwgdmFsdWU7IGluZGV4IDwgbGVuZ3RoOykge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBmaWx0ZXJbaW5kZXgrK107XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT0gXCJbb2JqZWN0IFN0cmluZ11cIiB8fCBjbGFzc05hbWUgPT0gXCJbb2JqZWN0IE51bWJlcl1cIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzW3ZhbHVlXSA9IDE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2lkdGgpIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh3aWR0aCk7XG4gICAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT0gbnVtYmVyQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBgd2lkdGhgIHRvIGFuIGludGVnZXIgYW5kIGNyZWF0ZSBhIHN0cmluZyBjb250YWluaW5nXG4gICAgICAgICAgICAgICAgLy8gYHdpZHRoYCBudW1iZXIgb2Ygc3BhY2UgY2hhcmFjdGVycy5cbiAgICAgICAgICAgICAgICBpZiAoKHdpZHRoIC09IHdpZHRoICUgMSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICBpZiAod2lkdGggPiAxMCkge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IDEwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZm9yICh3aGl0ZXNwYWNlID0gXCJcIjsgd2hpdGVzcGFjZS5sZW5ndGggPCB3aWR0aDspIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVzcGFjZSArPSBcIiBcIjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IHN0cmluZ0NsYXNzKSB7XG4gICAgICAgICAgICAgICAgd2hpdGVzcGFjZSA9IHdpZHRoLmxlbmd0aCA8PSAxMCA/IHdpZHRoIDogd2lkdGguc2xpY2UoMCwgMTApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBPcGVyYSA8PSA3LjU0dTIgZGlzY2FyZHMgdGhlIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggZW1wdHkgc3RyaW5nIGtleXNcbiAgICAgICAgICAgIC8vIChgXCJcImApIG9ubHkgaWYgdGhleSBhcmUgdXNlZCBkaXJlY3RseSB3aXRoaW4gYW4gb2JqZWN0IG1lbWJlciBsaXN0XG4gICAgICAgICAgICAvLyAoZS5nLiwgYCEoXCJcIiBpbiB7IFwiXCI6IDF9KWApLlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShcIlwiLCAodmFsdWUgPSB7fSwgdmFsdWVbXCJcIl0gPSBzb3VyY2UsIHZhbHVlKSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIFwiXCIsIFtdKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFB1YmxpYzogUGFyc2VzIGEgSlNPTiBzb3VyY2Ugc3RyaW5nLlxuICAgICAgaWYgKCFoYXMoXCJqc29uLXBhcnNlXCIpKSB7XG4gICAgICAgIHZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4gICAgICAgIC8vIEludGVybmFsOiBBIG1hcCBvZiBlc2NhcGVkIGNvbnRyb2wgY2hhcmFjdGVycyBhbmQgdGhlaXIgdW5lc2NhcGVkXG4gICAgICAgIC8vIGVxdWl2YWxlbnRzLlxuICAgICAgICB2YXIgVW5lc2NhcGVzID0ge1xuICAgICAgICAgIDkyOiBcIlxcXFxcIixcbiAgICAgICAgICAzNDogJ1wiJyxcbiAgICAgICAgICA0NzogXCIvXCIsXG4gICAgICAgICAgOTg6IFwiXFxiXCIsXG4gICAgICAgICAgMTE2OiBcIlxcdFwiLFxuICAgICAgICAgIDExMDogXCJcXG5cIixcbiAgICAgICAgICAxMDI6IFwiXFxmXCIsXG4gICAgICAgICAgMTE0OiBcIlxcclwiXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFN0b3JlcyB0aGUgcGFyc2VyIHN0YXRlLlxuICAgICAgICB2YXIgSW5kZXgsIFNvdXJjZTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUmVzZXRzIHRoZSBwYXJzZXIgc3RhdGUgYW5kIHRocm93cyBhIGBTeW50YXhFcnJvcmAuXG4gICAgICAgIHZhciBhYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBJbmRleCA9IFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgdGhyb3cgU3ludGF4RXJyb3IoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUmV0dXJucyB0aGUgbmV4dCB0b2tlbiwgb3IgYFwiJFwiYCBpZiB0aGUgcGFyc2VyIGhhcyByZWFjaGVkXG4gICAgICAgIC8vIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBzdHJpbmcuIEEgdG9rZW4gbWF5IGJlIGEgc3RyaW5nLCBudW1iZXIsIGBudWxsYFxuICAgICAgICAvLyBsaXRlcmFsLCBvciBCb29sZWFuIGxpdGVyYWwuXG4gICAgICAgIHZhciBsZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IFNvdXJjZSwgbGVuZ3RoID0gc291cmNlLmxlbmd0aCwgdmFsdWUsIGJlZ2luLCBwb3NpdGlvbiwgaXNTaWduZWQsIGNoYXJDb2RlO1xuICAgICAgICAgIHdoaWxlIChJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgIGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAvLyBTa2lwIHdoaXRlc3BhY2UgdG9rZW5zLCBpbmNsdWRpbmcgdGFicywgY2FycmlhZ2UgcmV0dXJucywgbGluZVxuICAgICAgICAgICAgICAgIC8vIGZlZWRzLCBhbmQgc3BhY2UgY2hhcmFjdGVycy5cbiAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDEyMzogY2FzZSAxMjU6IGNhc2UgOTE6IGNhc2UgOTM6IGNhc2UgNTg6IGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgYSBwdW5jdHVhdG9yIHRva2VuIChge2AsIGB9YCwgYFtgLCBgXWAsIGA6YCwgb3IgYCxgKSBhdFxuICAgICAgICAgICAgICAgIC8vIHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAgICAgICAgICAgIHZhbHVlID0gY2hhckluZGV4QnVnZ3kgPyBzb3VyY2UuY2hhckF0KEluZGV4KSA6IHNvdXJjZVtJbmRleF07XG4gICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgLy8gYFwiYCBkZWxpbWl0cyBhIEpTT04gc3RyaW5nOyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNoYXJhY3RlciBhbmRcbiAgICAgICAgICAgICAgICAvLyBiZWdpbiBwYXJzaW5nIHRoZSBzdHJpbmcuIFN0cmluZyB0b2tlbnMgYXJlIHByZWZpeGVkIHdpdGggdGhlXG4gICAgICAgICAgICAgICAgLy8gc2VudGluZWwgYEBgIGNoYXJhY3RlciB0byBkaXN0aW5ndWlzaCB0aGVtIGZyb20gcHVuY3R1YXRvcnMgYW5kXG4gICAgICAgICAgICAgICAgLy8gZW5kLW9mLXN0cmluZyB0b2tlbnMuXG4gICAgICAgICAgICAgICAgZm9yICh2YWx1ZSA9IFwiQFwiLCBJbmRleCsrOyBJbmRleCA8IGxlbmd0aDspIHtcbiAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlIDwgMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVW5lc2NhcGVkIEFTQ0lJIGNvbnRyb2wgY2hhcmFjdGVycyAodGhvc2Ugd2l0aCBhIGNvZGUgdW5pdFxuICAgICAgICAgICAgICAgICAgICAvLyBsZXNzIHRoYW4gdGhlIHNwYWNlIGNoYXJhY3RlcikgYXJlIG5vdCBwZXJtaXR0ZWQuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlID09IDkyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgcmV2ZXJzZSBzb2xpZHVzIChgXFxgKSBtYXJrcyB0aGUgYmVnaW5uaW5nIG9mIGFuIGVzY2FwZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gY29udHJvbCBjaGFyYWN0ZXIgKGluY2x1ZGluZyBgXCJgLCBgXFxgLCBhbmQgYC9gKSBvciBVbmljb2RlXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTI6IGNhc2UgMzQ6IGNhc2UgNDc6IGNhc2UgOTg6IGNhc2UgMTE2OiBjYXNlIDExMDogY2FzZSAxMDI6IGNhc2UgMTE0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV2aXZlIGVzY2FwZWQgY29udHJvbCBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gVW5lc2NhcGVzW2NoYXJDb2RlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGBcXHVgIG1hcmtzIHRoZSBiZWdpbm5pbmcgb2YgYSBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgdG8gdGhlIGZpcnN0IGNoYXJhY3RlciBhbmQgdmFsaWRhdGUgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3VyLWRpZ2l0IGNvZGUgcG9pbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbiA9ICsrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHBvc2l0aW9uID0gSW5kZXggKyA0OyBJbmRleCA8IHBvc2l0aW9uOyBJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBIHZhbGlkIHNlcXVlbmNlIGNvbXByaXNlcyBmb3VyIGhleGRpZ2l0cyAoY2FzZS1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5zZW5zaXRpdmUpIHRoYXQgZm9ybSBhIHNpbmdsZSBoZXhhZGVjaW1hbCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcgfHwgY2hhckNvZGUgPj0gOTcgJiYgY2hhckNvZGUgPD0gMTAyIHx8IGNoYXJDb2RlID49IDY1ICYmIGNoYXJDb2RlIDw9IDcwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEludmFsaWQgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV2aXZlIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IGZyb21DaGFyQ29kZShcIjB4XCIgKyBzb3VyY2Uuc2xpY2UoYmVnaW4sIEluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBBbiB1bmVzY2FwZWQgZG91YmxlLXF1b3RlIGNoYXJhY3RlciBtYXJrcyB0aGUgZW5kIG9mIHRoZVxuICAgICAgICAgICAgICAgICAgICAgIC8vIHN0cmluZy5cbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSBJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW1pemUgZm9yIHRoZSBjb21tb24gY2FzZSB3aGVyZSBhIHN0cmluZyBpcyB2YWxpZC5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNoYXJDb2RlID49IDMyICYmIGNoYXJDb2RlICE9IDkyICYmIGNoYXJDb2RlICE9IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdGhlIHN0cmluZyBhcy1pcy5cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gc291cmNlLnNsaWNlKGJlZ2luLCBJbmRleCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuY2hhckNvZGVBdChJbmRleCkgPT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgdG8gdGhlIG5leHQgY2hhcmFjdGVyIGFuZCByZXR1cm4gdGhlIHJldml2ZWQgc3RyaW5nLlxuICAgICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVW50ZXJtaW5hdGVkIHN0cmluZy5cbiAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIFBhcnNlIG51bWJlcnMgYW5kIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIGJlZ2luID0gSW5kZXg7XG4gICAgICAgICAgICAgICAgLy8gQWR2YW5jZSBwYXN0IHRoZSBuZWdhdGl2ZSBzaWduLCBpZiBvbmUgaXMgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSA0NSkge1xuICAgICAgICAgICAgICAgICAgaXNTaWduZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgYW4gaW50ZWdlciBvciBmbG9hdGluZy1wb2ludCB2YWx1ZS5cbiAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcpIHtcbiAgICAgICAgICAgICAgICAgIC8vIExlYWRpbmcgemVyb2VzIGFyZSBpbnRlcnByZXRlZCBhcyBvY3RhbCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSA0OCAmJiAoKGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXggKyAxKSksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbGxlZ2FsIG9jdGFsIGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpc1NpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGludGVnZXIgY29tcG9uZW50LlxuICAgICAgICAgICAgICAgICAgZm9yICg7IEluZGV4IDwgbGVuZ3RoICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCkpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nyk7IEluZGV4KyspO1xuICAgICAgICAgICAgICAgICAgLy8gRmxvYXRzIGNhbm5vdCBjb250YWluIGEgbGVhZGluZyBkZWNpbWFsIHBvaW50OyBob3dldmVyLCB0aGlzXG4gICAgICAgICAgICAgICAgICAvLyBjYXNlIGlzIGFscmVhZHkgYWNjb3VudGVkIGZvciBieSB0aGUgcGFyc2VyLlxuICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KSA9PSA0Nikge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9ICsrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBkZWNpbWFsIGNvbXBvbmVudC5cbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IHBvc2l0aW9uIDwgbGVuZ3RoOyBwb3NpdGlvbisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlIDwgNDggfHwgY2hhckNvZGUgPiA1Nykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PSBJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIElsbGVnYWwgdHJhaWxpbmcgZGVjaW1hbC5cbiAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEluZGV4ID0gcG9zaXRpb247XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvLyBQYXJzZSBleHBvbmVudHMuIFRoZSBgZWAgZGVub3RpbmcgdGhlIGV4cG9uZW50IGlzXG4gICAgICAgICAgICAgICAgICAvLyBjYXNlLWluc2Vuc2l0aXZlLlxuICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gMTAxIHx8IGNoYXJDb2RlID09IDY5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoKytJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNraXAgcGFzdCB0aGUgc2lnbiBmb2xsb3dpbmcgdGhlIGV4cG9uZW50LCBpZiBvbmUgaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lmaWVkLlxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gNDMgfHwgY2hhckNvZGUgPT0gNDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBleHBvbmVudGlhbCBjb21wb25lbnQuXG4gICAgICAgICAgICAgICAgICAgIGZvciAocG9zaXRpb24gPSBJbmRleDsgcG9zaXRpb24gPCBsZW5ndGg7IHBvc2l0aW9uKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPCA0OCB8fCBjaGFyQ29kZSA+IDU3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09IEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gSWxsZWdhbCBlbXB0eSBleHBvbmVudC5cbiAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEluZGV4ID0gcG9zaXRpb247XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvLyBDb2VyY2UgdGhlIHBhcnNlZCB2YWx1ZSB0byBhIEphdmFTY3JpcHQgbnVtYmVyLlxuICAgICAgICAgICAgICAgICAgcmV0dXJuICtzb3VyY2Uuc2xpY2UoYmVnaW4sIEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQSBuZWdhdGl2ZSBzaWduIG1heSBvbmx5IHByZWNlZGUgbnVtYmVycy5cbiAgICAgICAgICAgICAgICBpZiAoaXNTaWduZWQpIHtcbiAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGB0cnVlYCwgYGZhbHNlYCwgYW5kIGBudWxsYCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IHNvdXJjZS5zbGljZShJbmRleCwgSW5kZXggKyA0KTtcbiAgICAgICAgICAgICAgICBpZiAodGVtcCA9PSBcInRydWVcIikge1xuICAgICAgICAgICAgICAgICAgSW5kZXggKz0gNDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVtcCA9PSBcImZhbHNcIiAmJiBzb3VyY2UuY2hhckNvZGVBdChJbmRleCArIDQgKSA9PSAxMDEpIHtcbiAgICAgICAgICAgICAgICAgIEluZGV4ICs9IDU7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZW1wID09IFwibnVsbFwiKSB7XG4gICAgICAgICAgICAgICAgICBJbmRleCArPSA0O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFVucmVjb2duaXplZCB0b2tlbi5cbiAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZXR1cm4gdGhlIHNlbnRpbmVsIGAkYCBjaGFyYWN0ZXIgaWYgdGhlIHBhcnNlciBoYXMgcmVhY2hlZCB0aGUgZW5kXG4gICAgICAgICAgLy8gb2YgdGhlIHNvdXJjZSBzdHJpbmcuXG4gICAgICAgICAgcmV0dXJuIFwiJFwiO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBQYXJzZXMgYSBKU09OIGB2YWx1ZWAgdG9rZW4uXG4gICAgICAgIHZhciBnZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0cywgaGFzTWVtYmVycztcbiAgICAgICAgICBpZiAodmFsdWUgPT0gXCIkXCIpIHtcbiAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgZW5kIG9mIGlucHV0LlxuICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAoKGNoYXJJbmRleEJ1Z2d5ID8gdmFsdWUuY2hhckF0KDApIDogdmFsdWVbMF0pID09IFwiQFwiKSB7XG4gICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgc2VudGluZWwgYEBgIGNoYXJhY3Rlci5cbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUGFyc2Ugb2JqZWN0IGFuZCBhcnJheSBsaXRlcmFscy5cbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIltcIikge1xuICAgICAgICAgICAgICAvLyBQYXJzZXMgYSBKU09OIGFycmF5LCByZXR1cm5pbmcgYSBuZXcgSmF2YVNjcmlwdCBhcnJheS5cbiAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBsZXgoKTtcbiAgICAgICAgICAgICAgICAvLyBBIGNsb3Npbmcgc3F1YXJlIGJyYWNrZXQgbWFya3MgdGhlIGVuZCBvZiB0aGUgYXJyYXkgbGl0ZXJhbC5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJdXCIpIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYXJyYXkgbGl0ZXJhbCBjb250YWlucyBlbGVtZW50cywgdGhlIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgYmUgYSBjb21tYSBzZXBhcmF0aW5nIHRoZSBwcmV2aW91cyBlbGVtZW50IGZyb20gdGhlXG4gICAgICAgICAgICAgICAgLy8gbmV4dC5cbiAgICAgICAgICAgICAgICBpZiAoaGFzTWVtYmVycykge1xuICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIl1cIikge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgdHJhaWxpbmcgYCxgIGluIGFycmF5IGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBgLGAgbXVzdCBzZXBhcmF0ZSBlYWNoIGFycmF5IGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGhhc01lbWJlcnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBFbGlzaW9ucyBhbmQgbGVhZGluZyBjb21tYXMgYXJlIG5vdCBwZXJtaXR0ZWQuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goZ2V0KHZhbHVlKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09IFwie1wiKSB7XG4gICAgICAgICAgICAgIC8vIFBhcnNlcyBhIEpTT04gb2JqZWN0LCByZXR1cm5pbmcgYSBuZXcgSmF2YVNjcmlwdCBvYmplY3QuXG4gICAgICAgICAgICAgIHJlc3VsdHMgPSB7fTtcbiAgICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgLy8gQSBjbG9zaW5nIGN1cmx5IGJyYWNlIG1hcmtzIHRoZSBlbmQgb2YgdGhlIG9iamVjdCBsaXRlcmFsLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIn1cIikge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvYmplY3QgbGl0ZXJhbCBjb250YWlucyBtZW1iZXJzLCB0aGUgY3VycmVudCB0b2tlblxuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBiZSBhIGNvbW1hIHNlcGFyYXRvci5cbiAgICAgICAgICAgICAgICBpZiAoaGFzTWVtYmVycykge1xuICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIn1cIikge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgdHJhaWxpbmcgYCxgIGluIG9iamVjdCBsaXRlcmFsLlxuICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgYCxgIG11c3Qgc2VwYXJhdGUgZWFjaCBvYmplY3QgbWVtYmVyLlxuICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBoYXNNZW1iZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gTGVhZGluZyBjb21tYXMgYXJlIG5vdCBwZXJtaXR0ZWQsIG9iamVjdCBwcm9wZXJ0eSBuYW1lcyBtdXN0IGJlXG4gICAgICAgICAgICAgICAgLy8gZG91YmxlLXF1b3RlZCBzdHJpbmdzLCBhbmQgYSBgOmAgbXVzdCBzZXBhcmF0ZSBlYWNoIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgLy8gbmFtZSBhbmQgdmFsdWUuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiLFwiIHx8IHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiIHx8IChjaGFySW5kZXhCdWdneSA/IHZhbHVlLmNoYXJBdCgwKSA6IHZhbHVlWzBdKSAhPSBcIkBcIiB8fCBsZXgoKSAhPSBcIjpcIikge1xuICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0c1t2YWx1ZS5zbGljZSgxKV0gPSBnZXQobGV4KCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVW5leHBlY3RlZCB0b2tlbiBlbmNvdW50ZXJlZC5cbiAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogVXBkYXRlcyBhIHRyYXZlcnNlZCBvYmplY3QgbWVtYmVyLlxuICAgICAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gKHNvdXJjZSwgcHJvcGVydHksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIGVsZW1lbnQgPSB3YWxrKHNvdXJjZSwgcHJvcGVydHksIGNhbGxiYWNrKTtcbiAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWxldGUgc291cmNlW3Byb3BlcnR5XTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc291cmNlW3Byb3BlcnR5XSA9IGVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBSZWN1cnNpdmVseSB0cmF2ZXJzZXMgYSBwYXJzZWQgSlNPTiBvYmplY3QsIGludm9raW5nIHRoZVxuICAgICAgICAvLyBgY2FsbGJhY2tgIGZ1bmN0aW9uIGZvciBlYWNoIHZhbHVlLiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZVxuICAgICAgICAvLyBgV2Fsayhob2xkZXIsIG5hbWUpYCBvcGVyYXRpb24gZGVmaW5lZCBpbiBFUyA1LjEgc2VjdGlvbiAxNS4xMi4yLlxuICAgICAgICB2YXIgd2FsayA9IGZ1bmN0aW9uIChzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjaykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtwcm9wZXJ0eV0sIGxlbmd0aDtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIC8vIGBmb3JPd25gIGNhbid0IGJlIHVzZWQgdG8gdHJhdmVyc2UgYW4gYXJyYXkgaW4gT3BlcmEgPD0gOC41NFxuICAgICAgICAgICAgLy8gYmVjYXVzZSBpdHMgYE9iamVjdCNoYXNPd25Qcm9wZXJ0eWAgaW1wbGVtZW50YXRpb24gcmV0dXJucyBgZmFsc2VgXG4gICAgICAgICAgICAvLyBmb3IgYXJyYXkgaW5kaWNlcyAoZS5nLiwgYCFbMSwgMiwgM10uaGFzT3duUHJvcGVydHkoXCIwXCIpYCkuXG4gICAgICAgICAgICBpZiAoZ2V0Q2xhc3MuY2FsbCh2YWx1ZSkgPT0gYXJyYXlDbGFzcykge1xuICAgICAgICAgICAgICBmb3IgKGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgbGVuZ3RoLS07KSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlKGdldENsYXNzLCBmb3JPd24sIHZhbHVlLCBsZW5ndGgsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZm9yT3duKHZhbHVlLCBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGUodmFsdWUsIHByb3BlcnR5LCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChzb3VyY2UsIHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHVibGljOiBgSlNPTi5wYXJzZWAuIFNlZSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4yLlxuICAgICAgICBleHBvcnRzLnBhcnNlID0gZnVuY3Rpb24gKHNvdXJjZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICB2YXIgcmVzdWx0LCB2YWx1ZTtcbiAgICAgICAgICBJbmRleCA9IDA7XG4gICAgICAgICAgU291cmNlID0gXCJcIiArIHNvdXJjZTtcbiAgICAgICAgICByZXN1bHQgPSBnZXQobGV4KCkpO1xuICAgICAgICAgIC8vIElmIGEgSlNPTiBzdHJpbmcgY29udGFpbnMgbXVsdGlwbGUgdG9rZW5zLCBpdCBpcyBpbnZhbGlkLlxuICAgICAgICAgIGlmIChsZXgoKSAhPSBcIiRcIikge1xuICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVzZXQgdGhlIHBhcnNlciBzdGF0ZS5cbiAgICAgICAgICBJbmRleCA9IFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrICYmIGdldENsYXNzLmNhbGwoY2FsbGJhY2spID09IGZ1bmN0aW9uQ2xhc3MgPyB3YWxrKCh2YWx1ZSA9IHt9LCB2YWx1ZVtcIlwiXSA9IHJlc3VsdCwgdmFsdWUpLCBcIlwiLCBjYWxsYmFjaykgOiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0cy5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7XG4gICAgcmV0dXJuIGV4cG9ydHM7XG4gIH1cblxuICBpZiAoZnJlZUV4cG9ydHMgJiYgIWlzTG9hZGVyKSB7XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBlbnZpcm9ubWVudHMuXG4gICAgcnVuSW5Db250ZXh0KHJvb3QsIGZyZWVFeHBvcnRzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBFeHBvcnQgZm9yIHdlYiBicm93c2VycyBhbmQgSmF2YVNjcmlwdCBlbmdpbmVzLlxuICAgIHZhciBuYXRpdmVKU09OID0gcm9vdC5KU09OLFxuICAgICAgICBwcmV2aW91c0pTT04gPSByb290LkpTT04zLFxuICAgICAgICBpc1Jlc3RvcmVkID0gZmFsc2U7XG5cbiAgICB2YXIgSlNPTjMgPSBydW5JbkNvbnRleHQocm9vdCwgKHJvb3QuSlNPTjMgPSB7XG4gICAgICAvLyBQdWJsaWM6IFJlc3RvcmVzIHRoZSBvcmlnaW5hbCB2YWx1ZSBvZiB0aGUgZ2xvYmFsIGBKU09OYCBvYmplY3QgYW5kXG4gICAgICAvLyByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBgSlNPTjNgIG9iamVjdC5cbiAgICAgIFwibm9Db25mbGljdFwiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSZXN0b3JlZCkge1xuICAgICAgICAgIGlzUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgICAgIHJvb3QuSlNPTiA9IG5hdGl2ZUpTT047XG4gICAgICAgICAgcm9vdC5KU09OMyA9IHByZXZpb3VzSlNPTjtcbiAgICAgICAgICBuYXRpdmVKU09OID0gcHJldmlvdXNKU09OID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSlNPTjM7XG4gICAgICB9XG4gICAgfSkpO1xuXG4gICAgcm9vdC5KU09OID0ge1xuICAgICAgXCJwYXJzZVwiOiBKU09OMy5wYXJzZSxcbiAgICAgIFwic3RyaW5naWZ5XCI6IEpTT04zLnN0cmluZ2lmeVxuICAgIH07XG4gIH1cblxuICAvLyBFeHBvcnQgZm9yIGFzeW5jaHJvbm91cyBtb2R1bGUgbG9hZGVycy5cbiAgaWYgKGlzTG9hZGVyKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBKU09OMztcbiAgICB9KTtcbiAgfVxufSkuY2FsbCh0aGlzKTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se31dLDU5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCB1bmRlZjtcblxuLyoqXG4gKiBEZWNvZGUgYSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKiBAcmV0dXJucyB7U3RyaW5nfE51bGx9IFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0LnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZW5jb2RlIGEgZ2l2ZW4gaW5wdXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBlbmNvZGVkLlxuICogQHJldHVybnMge1N0cmluZ3xOdWxsfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFNpbXBsZSBxdWVyeSBzdHJpbmcgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBUaGUgcXVlcnkgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5KSB7XG4gIHZhciBwYXJzZXIgPSAvKFtePT8mXSspPT8oW14mXSopL2dcbiAgICAsIHJlc3VsdCA9IHt9XG4gICAgLCBwYXJ0O1xuXG4gIHdoaWxlIChwYXJ0ID0gcGFyc2VyLmV4ZWMocXVlcnkpKSB7XG4gICAgdmFyIGtleSA9IGRlY29kZShwYXJ0WzFdKVxuICAgICAgLCB2YWx1ZSA9IGRlY29kZShwYXJ0WzJdKTtcblxuICAgIC8vXG4gICAgLy8gUHJldmVudCBvdmVycmlkaW5nIG9mIGV4aXN0aW5nIHByb3BlcnRpZXMuIFRoaXMgZW5zdXJlcyB0aGF0IGJ1aWxkLWluXG4gICAgLy8gbWV0aG9kcyBsaWtlIGB0b1N0cmluZ2Agb3IgX19wcm90b19fIGFyZSBub3Qgb3ZlcnJpZGVuIGJ5IG1hbGljaW91c1xuICAgIC8vIHF1ZXJ5c3RyaW5ncy5cbiAgICAvL1xuICAgIC8vIEluIHRoZSBjYXNlIGlmIGZhaWxlZCBkZWNvZGluZywgd2Ugd2FudCB0byBvbWl0IHRoZSBrZXkvdmFsdWUgcGFpcnNcbiAgICAvLyBmcm9tIHRoZSByZXN1bHQuXG4gICAgLy9cbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IHZhbHVlID09PSBudWxsIHx8IGtleSBpbiByZXN1bHQpIGNvbnRpbnVlO1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhIHF1ZXJ5IHN0cmluZyB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBPYmplY3QgdGhhdCBzaG91bGQgYmUgdHJhbnNmb3JtZWQuXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4IE9wdGlvbmFsIHByZWZpeC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBxdWVyeXN0cmluZ2lmeShvYmosIHByZWZpeCkge1xuICBwcmVmaXggPSBwcmVmaXggfHwgJyc7XG5cbiAgdmFyIHBhaXJzID0gW11cbiAgICAsIHZhbHVlXG4gICAgLCBrZXk7XG5cbiAgLy9cbiAgLy8gT3B0aW9uYWxseSBwcmVmaXggd2l0aCBhICc/JyBpZiBuZWVkZWRcbiAgLy9cbiAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgcHJlZml4KSBwcmVmaXggPSAnPyc7XG5cbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFsdWUgPSBvYmpba2V5XTtcblxuICAgICAgLy9cbiAgICAgIC8vIEVkZ2UgY2FzZXMgd2hlcmUgd2UgYWN0dWFsbHkgd2FudCB0byBlbmNvZGUgdGhlIHZhbHVlIHRvIGFuIGVtcHR5XG4gICAgICAvLyBzdHJpbmcgaW5zdGVhZCBvZiB0aGUgc3RyaW5naWZpZWQgdmFsdWUuXG4gICAgICAvL1xuICAgICAgaWYgKCF2YWx1ZSAmJiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmIHx8IGlzTmFOKHZhbHVlKSkpIHtcbiAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAga2V5ID0gZW5jb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICB2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG5cbiAgICAgIC8vXG4gICAgICAvLyBJZiB3ZSBmYWlsZWQgdG8gZW5jb2RlIHRoZSBzdHJpbmdzLCB3ZSBzaG91bGQgYmFpbCBvdXQgYXMgd2UgZG9uJ3RcbiAgICAgIC8vIHdhbnQgdG8gYWRkIGludmFsaWQgc3RyaW5ncyB0byB0aGUgcXVlcnkuXG4gICAgICAvL1xuICAgICAgaWYgKGtleSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gbnVsbCkgY29udGludWU7XG4gICAgICBwYWlycy5wdXNoKGtleSArJz0nKyB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhaXJzLmxlbmd0aCA/IHByZWZpeCArIHBhaXJzLmpvaW4oJyYnKSA6ICcnO1xufVxuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBxdWVyeXN0cmluZ2lmeTtcbmV4cG9ydHMucGFyc2UgPSBxdWVyeXN0cmluZztcblxufSx7fV0sNjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENoZWNrIGlmIHdlJ3JlIHJlcXVpcmVkIHRvIGFkZCBhIHBvcnQgbnVtYmVyLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkZWZhdWx0LXBvcnRcbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gcG9ydCBQb3J0IG51bWJlciB3ZSBuZWVkIHRvIGNoZWNrXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvdG9jb2wgUHJvdG9jb2wgd2UgbmVlZCB0byBjaGVjayBhZ2FpbnN0LlxuICogQHJldHVybnMge0Jvb2xlYW59IElzIGl0IGEgZGVmYXVsdCBwb3J0IGZvciB0aGUgZ2l2ZW4gcHJvdG9jb2xcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcXVpcmVkKHBvcnQsIHByb3RvY29sKSB7XG4gIHByb3RvY29sID0gcHJvdG9jb2wuc3BsaXQoJzonKVswXTtcbiAgcG9ydCA9ICtwb3J0O1xuXG4gIGlmICghcG9ydCkgcmV0dXJuIGZhbHNlO1xuXG4gIHN3aXRjaCAocHJvdG9jb2wpIHtcbiAgICBjYXNlICdodHRwJzpcbiAgICBjYXNlICd3cyc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDgwO1xuXG4gICAgY2FzZSAnaHR0cHMnOlxuICAgIGNhc2UgJ3dzcyc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDQ0MztcblxuICAgIGNhc2UgJ2Z0cCc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDIxO1xuXG4gICAgY2FzZSAnZ29waGVyJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gNzA7XG5cbiAgICBjYXNlICdmaWxlJzpcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcG9ydCAhPT0gMDtcbn07XG5cbn0se31dLDYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVpcmVkID0gcmVxdWlyZSgncmVxdWlyZXMtcG9ydCcpXG4gICwgcXMgPSByZXF1aXJlKCdxdWVyeXN0cmluZ2lmeScpXG4gICwgc2xhc2hlcyA9IC9eW0EtWmEtel1bQS1aYS16MC05Ky0uXSo6XFwvXFwvL1xuICAsIHByb3RvY29scmUgPSAvXihbYS16XVthLXowLTkuKy1dKjopPyhcXC9cXC8pPyhbXFxTXFxzXSopL2lcbiAgLCB3aGl0ZXNwYWNlID0gJ1tcXFxceDA5XFxcXHgwQVxcXFx4MEJcXFxceDBDXFxcXHgwRFxcXFx4MjBcXFxceEEwXFxcXHUxNjgwXFxcXHUxODBFXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBBXFxcXHUyMDJGXFxcXHUyMDVGXFxcXHUzMDAwXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHVGRUZGXSdcbiAgLCBsZWZ0ID0gbmV3IFJlZ0V4cCgnXicrIHdoaXRlc3BhY2UgKycrJyk7XG5cbi8qKlxuICogVHJpbSBhIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFN0cmluZyB0byB0cmltLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB0cmltTGVmdChzdHIpIHtcbiAgcmV0dXJuIChzdHIgPyBzdHIgOiAnJykudG9TdHJpbmcoKS5yZXBsYWNlKGxlZnQsICcnKTtcbn1cblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIHBhcnNlIHJ1bGVzIGZvciB0aGUgVVJMIHBhcnNlciwgaXQgaW5mb3JtcyB0aGUgcGFyc2VyXG4gKiBhYm91dDpcbiAqXG4gKiAwLiBUaGUgY2hhciBpdCBOZWVkcyB0byBwYXJzZSwgaWYgaXQncyBhIHN0cmluZyBpdCBzaG91bGQgYmUgZG9uZSB1c2luZ1xuICogICAgaW5kZXhPZiwgUmVnRXhwIHVzaW5nIGV4ZWMgYW5kIE5hTiBtZWFucyBzZXQgYXMgY3VycmVudCB2YWx1ZS5cbiAqIDEuIFRoZSBwcm9wZXJ0eSB3ZSBzaG91bGQgc2V0IHdoZW4gcGFyc2luZyB0aGlzIHZhbHVlLlxuICogMi4gSW5kaWNhdGlvbiBpZiBpdCdzIGJhY2t3YXJkcyBvciBmb3J3YXJkIHBhcnNpbmcsIHdoZW4gc2V0IGFzIG51bWJlciBpdCdzXG4gKiAgICB0aGUgdmFsdWUgb2YgZXh0cmEgY2hhcnMgdGhhdCBzaG91bGQgYmUgc3BsaXQgb2ZmLlxuICogMy4gSW5oZXJpdCBmcm9tIGxvY2F0aW9uIGlmIG5vbiBleGlzdGluZyBpbiB0aGUgcGFyc2VyLlxuICogNC4gYHRvTG93ZXJDYXNlYCB0aGUgcmVzdWx0aW5nIHZhbHVlLlxuICovXG52YXIgcnVsZXMgPSBbXG4gIFsnIycsICdoYXNoJ10sICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBbJz8nLCAncXVlcnknXSwgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgYmFjay5cbiAgZnVuY3Rpb24gc2FuaXRpemUoYWRkcmVzcykgeyAgICAgICAgICAvLyBTYW5pdGl6ZSB3aGF0IGlzIGxlZnQgb2YgdGhlIGFkZHJlc3NcbiAgICByZXR1cm4gYWRkcmVzcy5yZXBsYWNlKCdcXFxcJywgJy8nKTtcbiAgfSxcbiAgWycvJywgJ3BhdGhuYW1lJ10sICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGJhY2suXG4gIFsnQCcsICdhdXRoJywgMV0sICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBmcm9udC5cbiAgW05hTiwgJ2hvc3QnLCB1bmRlZmluZWQsIDEsIDFdLCAgICAgICAvLyBTZXQgbGVmdCBvdmVyIHZhbHVlLlxuICBbLzooXFxkKykkLywgJ3BvcnQnLCB1bmRlZmluZWQsIDFdLCAgICAvLyBSZWdFeHAgdGhlIGJhY2suXG4gIFtOYU4sICdob3N0bmFtZScsIHVuZGVmaW5lZCwgMSwgMV0gICAgLy8gU2V0IGxlZnQgb3Zlci5cbl07XG5cbi8qKlxuICogVGhlc2UgcHJvcGVydGllcyBzaG91bGQgbm90IGJlIGNvcGllZCBvciBpbmhlcml0ZWQgZnJvbS4gVGhpcyBpcyBvbmx5IG5lZWRlZFxuICogZm9yIGFsbCBub24gYmxvYiBVUkwncyBhcyBhIGJsb2IgVVJMIGRvZXMgbm90IGluY2x1ZGUgYSBoYXNoLCBvbmx5IHRoZVxuICogb3JpZ2luLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgaWdub3JlID0geyBoYXNoOiAxLCBxdWVyeTogMSB9O1xuXG4vKipcbiAqIFRoZSBsb2NhdGlvbiBvYmplY3QgZGlmZmVycyB3aGVuIHlvdXIgY29kZSBpcyBsb2FkZWQgdGhyb3VnaCBhIG5vcm1hbCBwYWdlLFxuICogV29ya2VyIG9yIHRocm91Z2ggYSB3b3JrZXIgdXNpbmcgYSBibG9iLiBBbmQgd2l0aCB0aGUgYmxvYmJsZSBiZWdpbnMgdGhlXG4gKiB0cm91YmxlIGFzIHRoZSBsb2NhdGlvbiBvYmplY3Qgd2lsbCBjb250YWluIHRoZSBVUkwgb2YgdGhlIGJsb2IsIG5vdCB0aGVcbiAqIGxvY2F0aW9uIG9mIHRoZSBwYWdlIHdoZXJlIG91ciBjb2RlIGlzIGxvYWRlZCBpbi4gVGhlIGFjdHVhbCBvcmlnaW4gaXNcbiAqIGVuY29kZWQgaW4gdGhlIGBwYXRobmFtZWAgc28gd2UgY2FuIHRoYW5rZnVsbHkgZ2VuZXJhdGUgYSBnb29kIFwiZGVmYXVsdFwiXG4gKiBsb2NhdGlvbiBmcm9tIGl0IHNvIHdlIGNhbiBnZW5lcmF0ZSBwcm9wZXIgcmVsYXRpdmUgVVJMJ3MgYWdhaW4uXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBsb2MgT3B0aW9uYWwgZGVmYXVsdCBsb2NhdGlvbiBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBsb2xjYXRpb24gb2JqZWN0LlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBsb2xjYXRpb24obG9jKSB7XG4gIHZhciBnbG9iYWxWYXI7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSBnbG9iYWxWYXIgPSB3aW5kb3c7XG4gIGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSBnbG9iYWxWYXIgPSBnbG9iYWw7XG4gIGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgZ2xvYmFsVmFyID0gc2VsZjtcbiAgZWxzZSBnbG9iYWxWYXIgPSB7fTtcblxuICB2YXIgbG9jYXRpb24gPSBnbG9iYWxWYXIubG9jYXRpb24gfHwge307XG4gIGxvYyA9IGxvYyB8fCBsb2NhdGlvbjtcblxuICB2YXIgZmluYWxkZXN0aW5hdGlvbiA9IHt9XG4gICAgLCB0eXBlID0gdHlwZW9mIGxvY1xuICAgICwga2V5O1xuXG4gIGlmICgnYmxvYjonID09PSBsb2MucHJvdG9jb2wpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVybCh1bmVzY2FwZShsb2MucGF0aG5hbWUpLCB7fSk7XG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGUpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVybChsb2MsIHt9KTtcbiAgICBmb3IgKGtleSBpbiBpZ25vcmUpIGRlbGV0ZSBmaW5hbGRlc3RpbmF0aW9uW2tleV07XG4gIH0gZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGUpIHtcbiAgICBmb3IgKGtleSBpbiBsb2MpIHtcbiAgICAgIGlmIChrZXkgaW4gaWdub3JlKSBjb250aW51ZTtcbiAgICAgIGZpbmFsZGVzdGluYXRpb25ba2V5XSA9IGxvY1trZXldO1xuICAgIH1cblxuICAgIGlmIChmaW5hbGRlc3RpbmF0aW9uLnNsYXNoZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZmluYWxkZXN0aW5hdGlvbi5zbGFzaGVzID0gc2xhc2hlcy50ZXN0KGxvYy5ocmVmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmluYWxkZXN0aW5hdGlvbjtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiBQcm90b2NvbEV4dHJhY3RcbiAqIEB0eXBlIE9iamVjdFxuICogQHByb3BlcnR5IHtTdHJpbmd9IHByb3RvY29sIFByb3RvY29sIG1hdGNoZWQgaW4gdGhlIFVSTCwgaW4gbG93ZXJjYXNlLlxuICogQHByb3BlcnR5IHtCb29sZWFufSBzbGFzaGVzIGB0cnVlYCBpZiBwcm90b2NvbCBpcyBmb2xsb3dlZCBieSBcIi8vXCIsIGVsc2UgYGZhbHNlYC5cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSByZXN0IFJlc3Qgb2YgdGhlIFVSTCB0aGF0IGlzIG5vdCBwYXJ0IG9mIHRoZSBwcm90b2NvbC5cbiAqL1xuXG4vKipcbiAqIEV4dHJhY3QgcHJvdG9jb2wgaW5mb3JtYXRpb24gZnJvbSBhIFVSTCB3aXRoL3dpdGhvdXQgZG91YmxlIHNsYXNoIChcIi8vXCIpLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzIFVSTCB3ZSB3YW50IHRvIGV4dHJhY3QgZnJvbS5cbiAqIEByZXR1cm4ge1Byb3RvY29sRXh0cmFjdH0gRXh0cmFjdGVkIGluZm9ybWF0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFByb3RvY29sKGFkZHJlc3MpIHtcbiAgYWRkcmVzcyA9IHRyaW1MZWZ0KGFkZHJlc3MpO1xuICB2YXIgbWF0Y2ggPSBwcm90b2NvbHJlLmV4ZWMoYWRkcmVzcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbDogbWF0Y2hbMV0gPyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIDogJycsXG4gICAgc2xhc2hlczogISFtYXRjaFsyXSxcbiAgICByZXN0OiBtYXRjaFszXVxuICB9O1xufVxuXG4vKipcbiAqIFJlc29sdmUgYSByZWxhdGl2ZSBVUkwgcGF0aG5hbWUgYWdhaW5zdCBhIGJhc2UgVVJMIHBhdGhuYW1lLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWxhdGl2ZSBQYXRobmFtZSBvZiB0aGUgcmVsYXRpdmUgVVJMLlxuICogQHBhcmFtIHtTdHJpbmd9IGJhc2UgUGF0aG5hbWUgb2YgdGhlIGJhc2UgVVJMLlxuICogQHJldHVybiB7U3RyaW5nfSBSZXNvbHZlZCBwYXRobmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmUocmVsYXRpdmUsIGJhc2UpIHtcbiAgaWYgKHJlbGF0aXZlID09PSAnJykgcmV0dXJuIGJhc2U7XG5cbiAgdmFyIHBhdGggPSAoYmFzZSB8fCAnLycpLnNwbGl0KCcvJykuc2xpY2UoMCwgLTEpLmNvbmNhdChyZWxhdGl2ZS5zcGxpdCgnLycpKVxuICAgICwgaSA9IHBhdGgubGVuZ3RoXG4gICAgLCBsYXN0ID0gcGF0aFtpIC0gMV1cbiAgICAsIHVuc2hpZnQgPSBmYWxzZVxuICAgICwgdXAgPSAwO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAocGF0aFtpXSA9PT0gJy4nKSB7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKHBhdGhbaV0gPT09ICcuLicpIHtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBpZiAoaSA9PT0gMCkgdW5zaGlmdCA9IHRydWU7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKHVuc2hpZnQpIHBhdGgudW5zaGlmdCgnJyk7XG4gIGlmIChsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJykgcGF0aC5wdXNoKCcnKTtcblxuICByZXR1cm4gcGF0aC5qb2luKCcvJyk7XG59XG5cbi8qKlxuICogVGhlIGFjdHVhbCBVUkwgaW5zdGFuY2UuIEluc3RlYWQgb2YgcmV0dXJuaW5nIGFuIG9iamVjdCB3ZSd2ZSBvcHRlZC1pbiB0b1xuICogY3JlYXRlIGFuIGFjdHVhbCBjb25zdHJ1Y3RvciBhcyBpdCdzIG11Y2ggbW9yZSBtZW1vcnkgZWZmaWNpZW50IGFuZFxuICogZmFzdGVyIGFuZCBpdCBwbGVhc2VzIG15IE9DRC5cbiAqXG4gKiBJdCBpcyB3b3J0aCBub3RpbmcgdGhhdCB3ZSBzaG91bGQgbm90IHVzZSBgVVJMYCBhcyBjbGFzcyBuYW1lIHRvIHByZXZlbnRcbiAqIGNsYXNoZXMgd2l0aCB0aGUgZ2xvYmFsIFVSTCBpbnN0YW5jZSB0aGF0IGdvdCBpbnRyb2R1Y2VkIGluIGJyb3dzZXJzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgVVJMIHdlIHdhbnQgdG8gcGFyc2UuXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IFtsb2NhdGlvbl0gTG9jYXRpb24gZGVmYXVsdHMgZm9yIHJlbGF0aXZlIHBhdGhzLlxuICogQHBhcmFtIHtCb29sZWFufEZ1bmN0aW9ufSBbcGFyc2VyXSBQYXJzZXIgZm9yIHRoZSBxdWVyeSBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBVcmwoYWRkcmVzcywgbG9jYXRpb24sIHBhcnNlcikge1xuICBhZGRyZXNzID0gdHJpbUxlZnQoYWRkcmVzcyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVybCkpIHtcbiAgICByZXR1cm4gbmV3IFVybChhZGRyZXNzLCBsb2NhdGlvbiwgcGFyc2VyKTtcbiAgfVxuXG4gIHZhciByZWxhdGl2ZSwgZXh0cmFjdGVkLCBwYXJzZSwgaW5zdHJ1Y3Rpb24sIGluZGV4LCBrZXlcbiAgICAsIGluc3RydWN0aW9ucyA9IHJ1bGVzLnNsaWNlKClcbiAgICAsIHR5cGUgPSB0eXBlb2YgbG9jYXRpb25cbiAgICAsIHVybCA9IHRoaXNcbiAgICAsIGkgPSAwO1xuXG4gIC8vXG4gIC8vIFRoZSBmb2xsb3dpbmcgaWYgc3RhdGVtZW50cyBhbGxvd3MgdGhpcyBtb2R1bGUgdHdvIGhhdmUgY29tcGF0aWJpbGl0eSB3aXRoXG4gIC8vIDIgZGlmZmVyZW50IEFQSTpcbiAgLy9cbiAgLy8gMS4gTm9kZS5qcydzIGB1cmwucGFyc2VgIGFwaSB3aGljaCBhY2NlcHRzIGEgVVJMLCBib29sZWFuIGFzIGFyZ3VtZW50c1xuICAvLyAgICB3aGVyZSB0aGUgYm9vbGVhbiBpbmRpY2F0ZXMgdGhhdCB0aGUgcXVlcnkgc3RyaW5nIHNob3VsZCBhbHNvIGJlIHBhcnNlZC5cbiAgLy9cbiAgLy8gMi4gVGhlIGBVUkxgIGludGVyZmFjZSBvZiB0aGUgYnJvd3NlciB3aGljaCBhY2NlcHRzIGEgVVJMLCBvYmplY3QgYXNcbiAgLy8gICAgYXJndW1lbnRzLiBUaGUgc3VwcGxpZWQgb2JqZWN0IHdpbGwgYmUgdXNlZCBhcyBkZWZhdWx0IHZhbHVlcyAvIGZhbGwtYmFja1xuICAvLyAgICBmb3IgcmVsYXRpdmUgcGF0aHMuXG4gIC8vXG4gIGlmICgnb2JqZWN0JyAhPT0gdHlwZSAmJiAnc3RyaW5nJyAhPT0gdHlwZSkge1xuICAgIHBhcnNlciA9IGxvY2F0aW9uO1xuICAgIGxvY2F0aW9uID0gbnVsbDtcbiAgfVxuXG4gIGlmIChwYXJzZXIgJiYgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIHBhcnNlcikgcGFyc2VyID0gcXMucGFyc2U7XG5cbiAgbG9jYXRpb24gPSBsb2xjYXRpb24obG9jYXRpb24pO1xuXG4gIC8vXG4gIC8vIEV4dHJhY3QgcHJvdG9jb2wgaW5mb3JtYXRpb24gYmVmb3JlIHJ1bm5pbmcgdGhlIGluc3RydWN0aW9ucy5cbiAgLy9cbiAgZXh0cmFjdGVkID0gZXh0cmFjdFByb3RvY29sKGFkZHJlc3MgfHwgJycpO1xuICByZWxhdGl2ZSA9ICFleHRyYWN0ZWQucHJvdG9jb2wgJiYgIWV4dHJhY3RlZC5zbGFzaGVzO1xuICB1cmwuc2xhc2hlcyA9IGV4dHJhY3RlZC5zbGFzaGVzIHx8IHJlbGF0aXZlICYmIGxvY2F0aW9uLnNsYXNoZXM7XG4gIHVybC5wcm90b2NvbCA9IGV4dHJhY3RlZC5wcm90b2NvbCB8fCBsb2NhdGlvbi5wcm90b2NvbCB8fCAnJztcbiAgYWRkcmVzcyA9IGV4dHJhY3RlZC5yZXN0O1xuXG4gIC8vXG4gIC8vIFdoZW4gdGhlIGF1dGhvcml0eSBjb21wb25lbnQgaXMgYWJzZW50IHRoZSBVUkwgc3RhcnRzIHdpdGggYSBwYXRoXG4gIC8vIGNvbXBvbmVudC5cbiAgLy9cbiAgaWYgKCFleHRyYWN0ZWQuc2xhc2hlcykgaW5zdHJ1Y3Rpb25zWzNdID0gWy8oLiopLywgJ3BhdGhuYW1lJ107XG5cbiAgZm9yICg7IGkgPCBpbnN0cnVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uc1tpXTtcblxuICAgIGlmICh0eXBlb2YgaW5zdHJ1Y3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFkZHJlc3MgPSBpbnN0cnVjdGlvbihhZGRyZXNzKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHBhcnNlID0gaW5zdHJ1Y3Rpb25bMF07XG4gICAga2V5ID0gaW5zdHJ1Y3Rpb25bMV07XG5cbiAgICBpZiAocGFyc2UgIT09IHBhcnNlKSB7XG4gICAgICB1cmxba2V5XSA9IGFkZHJlc3M7XG4gICAgfSBlbHNlIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHBhcnNlKSB7XG4gICAgICBpZiAofihpbmRleCA9IGFkZHJlc3MuaW5kZXhPZihwYXJzZSkpKSB7XG4gICAgICAgIGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIGluc3RydWN0aW9uWzJdKSB7XG4gICAgICAgICAgdXJsW2tleV0gPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZShpbmRleCArIGluc3RydWN0aW9uWzJdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cmxba2V5XSA9IGFkZHJlc3Muc2xpY2UoaW5kZXgpO1xuICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKGluZGV4ID0gcGFyc2UuZXhlYyhhZGRyZXNzKSkpIHtcbiAgICAgIHVybFtrZXldID0gaW5kZXhbMV07XG4gICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleC5pbmRleCk7XG4gICAgfVxuXG4gICAgdXJsW2tleV0gPSB1cmxba2V5XSB8fCAoXG4gICAgICByZWxhdGl2ZSAmJiBpbnN0cnVjdGlvblszXSA/IGxvY2F0aW9uW2tleV0gfHwgJycgOiAnJ1xuICAgICk7XG5cbiAgICAvL1xuICAgIC8vIEhvc3RuYW1lLCBob3N0IGFuZCBwcm90b2NvbCBzaG91bGQgYmUgbG93ZXJjYXNlZCBzbyB0aGV5IGNhbiBiZSB1c2VkIHRvXG4gICAgLy8gY3JlYXRlIGEgcHJvcGVyIGBvcmlnaW5gLlxuICAgIC8vXG4gICAgaWYgKGluc3RydWN0aW9uWzRdKSB1cmxba2V5XSA9IHVybFtrZXldLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICAvL1xuICAvLyBBbHNvIHBhcnNlIHRoZSBzdXBwbGllZCBxdWVyeSBzdHJpbmcgaW4gdG8gYW4gb2JqZWN0LiBJZiB3ZSdyZSBzdXBwbGllZFxuICAvLyB3aXRoIGEgY3VzdG9tIHBhcnNlciBhcyBmdW5jdGlvbiB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGJ1aWxkLWluXG4gIC8vIHBhcnNlci5cbiAgLy9cbiAgaWYgKHBhcnNlcikgdXJsLnF1ZXJ5ID0gcGFyc2VyKHVybC5xdWVyeSk7XG5cbiAgLy9cbiAgLy8gSWYgdGhlIFVSTCBpcyByZWxhdGl2ZSwgcmVzb2x2ZSB0aGUgcGF0aG5hbWUgYWdhaW5zdCB0aGUgYmFzZSBVUkwuXG4gIC8vXG4gIGlmIChcbiAgICAgIHJlbGF0aXZlXG4gICAgJiYgbG9jYXRpb24uc2xhc2hlc1xuICAgICYmIHVybC5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJ1xuICAgICYmICh1cmwucGF0aG5hbWUgIT09ICcnIHx8IGxvY2F0aW9uLnBhdGhuYW1lICE9PSAnJylcbiAgKSB7XG4gICAgdXJsLnBhdGhuYW1lID0gcmVzb2x2ZSh1cmwucGF0aG5hbWUsIGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfVxuXG4gIC8vXG4gIC8vIFdlIHNob3VsZCBub3QgYWRkIHBvcnQgbnVtYmVycyBpZiB0aGV5IGFyZSBhbHJlYWR5IHRoZSBkZWZhdWx0IHBvcnQgbnVtYmVyXG4gIC8vIGZvciBhIGdpdmVuIHByb3RvY29sLiBBcyB0aGUgaG9zdCBhbHNvIGNvbnRhaW5zIHRoZSBwb3J0IG51bWJlciB3ZSdyZSBnb2luZ1xuICAvLyBvdmVycmlkZSBpdCB3aXRoIHRoZSBob3N0bmFtZSB3aGljaCBjb250YWlucyBubyBwb3J0IG51bWJlci5cbiAgLy9cbiAgaWYgKCFyZXF1aXJlZCh1cmwucG9ydCwgdXJsLnByb3RvY29sKSkge1xuICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgIHVybC5wb3J0ID0gJyc7XG4gIH1cblxuICAvL1xuICAvLyBQYXJzZSBkb3duIHRoZSBgYXV0aGAgZm9yIHRoZSB1c2VybmFtZSBhbmQgcGFzc3dvcmQuXG4gIC8vXG4gIHVybC51c2VybmFtZSA9IHVybC5wYXNzd29yZCA9ICcnO1xuICBpZiAodXJsLmF1dGgpIHtcbiAgICBpbnN0cnVjdGlvbiA9IHVybC5hdXRoLnNwbGl0KCc6Jyk7XG4gICAgdXJsLnVzZXJuYW1lID0gaW5zdHJ1Y3Rpb25bMF0gfHwgJyc7XG4gICAgdXJsLnBhc3N3b3JkID0gaW5zdHJ1Y3Rpb25bMV0gfHwgJyc7XG4gIH1cblxuICB1cmwub3JpZ2luID0gdXJsLnByb3RvY29sICYmIHVybC5ob3N0ICYmIHVybC5wcm90b2NvbCAhPT0gJ2ZpbGU6J1xuICAgID8gdXJsLnByb3RvY29sICsnLy8nKyB1cmwuaG9zdFxuICAgIDogJ251bGwnO1xuXG4gIC8vXG4gIC8vIFRoZSBocmVmIGlzIGp1c3QgdGhlIGNvbXBpbGVkIHJlc3VsdC5cbiAgLy9cbiAgdXJsLmhyZWYgPSB1cmwudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgY2hhbmdpbmcgcHJvcGVydGllcyBpbiB0aGUgVVJMIGluc3RhbmNlIHRvXG4gKiBpbnN1cmUgdGhhdCB0aGV5IGFsbCBwcm9wYWdhdGUgY29ycmVjdGx5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXJ0ICAgICAgICAgIFByb3BlcnR5IHdlIG5lZWQgdG8gYWRqdXN0LlxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgICAgICAgICAgVGhlIG5ld2x5IGFzc2lnbmVkIHZhbHVlLlxuICogQHBhcmFtIHtCb29sZWFufEZ1bmN0aW9ufSBmbiAgV2hlbiBzZXR0aW5nIHRoZSBxdWVyeSwgaXQgd2lsbCBiZSB0aGUgZnVuY3Rpb25cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgdG8gcGFyc2UgdGhlIHF1ZXJ5LlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hlbiBzZXR0aW5nIHRoZSBwcm90b2NvbCwgZG91YmxlIHNsYXNoIHdpbGwgYmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQgZnJvbSB0aGUgZmluYWwgdXJsIGlmIGl0IGlzIHRydWUuXG4gKiBAcmV0dXJucyB7VVJMfSBVUkwgaW5zdGFuY2UgZm9yIGNoYWluaW5nLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBzZXQocGFydCwgdmFsdWUsIGZuKSB7XG4gIHZhciB1cmwgPSB0aGlzO1xuXG4gIHN3aXRjaCAocGFydCkge1xuICAgIGNhc2UgJ3F1ZXJ5JzpcbiAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHZhbHVlICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IChmbiB8fCBxcy5wYXJzZSkodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncG9ydCc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKCFyZXF1aXJlZCh2YWx1ZSwgdXJsLnByb3RvY29sKSkge1xuICAgICAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZTtcbiAgICAgICAgdXJsW3BhcnRdID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lICsnOicrIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hvc3RuYW1lJzpcbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuXG4gICAgICBpZiAodXJsLnBvcnQpIHZhbHVlICs9ICc6JysgdXJsLnBvcnQ7XG4gICAgICB1cmwuaG9zdCA9IHZhbHVlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdob3N0JzpcbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuXG4gICAgICBpZiAoLzpcXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgnOicpO1xuICAgICAgICB1cmwucG9ydCA9IHZhbHVlLnBvcCgpO1xuICAgICAgICB1cmwuaG9zdG5hbWUgPSB2YWx1ZS5qb2luKCc6Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwuaG9zdG5hbWUgPSB2YWx1ZTtcbiAgICAgICAgdXJsLnBvcnQgPSAnJztcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwcm90b2NvbCc6XG4gICAgICB1cmwucHJvdG9jb2wgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdXJsLnNsYXNoZXMgPSAhZm47XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BhdGhuYW1lJzpcbiAgICBjYXNlICdoYXNoJzpcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgY2hhciA9IHBhcnQgPT09ICdwYXRobmFtZScgPyAnLycgOiAnIyc7XG4gICAgICAgIHVybFtwYXJ0XSA9IHZhbHVlLmNoYXJBdCgwKSAhPT0gY2hhciA/IGNoYXIgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5zID0gcnVsZXNbaV07XG5cbiAgICBpZiAoaW5zWzRdKSB1cmxbaW5zWzFdXSA9IHVybFtpbnNbMV1dLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICB1cmwub3JpZ2luID0gdXJsLnByb3RvY29sICYmIHVybC5ob3N0ICYmIHVybC5wcm90b2NvbCAhPT0gJ2ZpbGU6J1xuICAgID8gdXJsLnByb3RvY29sICsnLy8nKyB1cmwuaG9zdFxuICAgIDogJ251bGwnO1xuXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG5cbiAgcmV0dXJuIHVybDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIHByb3BlcnRpZXMgYmFjayBpbiB0byBhIHZhbGlkIGFuZCBmdWxsIFVSTCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5naWZ5IE9wdGlvbmFsIHF1ZXJ5IHN0cmluZ2lmeSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IENvbXBpbGVkIHZlcnNpb24gb2YgdGhlIFVSTC5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcoc3RyaW5naWZ5KSB7XG4gIGlmICghc3RyaW5naWZ5IHx8ICdmdW5jdGlvbicgIT09IHR5cGVvZiBzdHJpbmdpZnkpIHN0cmluZ2lmeSA9IHFzLnN0cmluZ2lmeTtcblxuICB2YXIgcXVlcnlcbiAgICAsIHVybCA9IHRoaXNcbiAgICAsIHByb3RvY29sID0gdXJsLnByb3RvY29sO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5jaGFyQXQocHJvdG9jb2wubGVuZ3RoIC0gMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonO1xuXG4gIHZhciByZXN1bHQgPSBwcm90b2NvbCArICh1cmwuc2xhc2hlcyA/ICcvLycgOiAnJyk7XG5cbiAgaWYgKHVybC51c2VybmFtZSkge1xuICAgIHJlc3VsdCArPSB1cmwudXNlcm5hbWU7XG4gICAgaWYgKHVybC5wYXNzd29yZCkgcmVzdWx0ICs9ICc6JysgdXJsLnBhc3N3b3JkO1xuICAgIHJlc3VsdCArPSAnQCc7XG4gIH1cblxuICByZXN1bHQgKz0gdXJsLmhvc3QgKyB1cmwucGF0aG5hbWU7XG5cbiAgcXVlcnkgPSAnb2JqZWN0JyA9PT0gdHlwZW9mIHVybC5xdWVyeSA/IHN0cmluZ2lmeSh1cmwucXVlcnkpIDogdXJsLnF1ZXJ5O1xuICBpZiAocXVlcnkpIHJlc3VsdCArPSAnPycgIT09IHF1ZXJ5LmNoYXJBdCgwKSA/ICc/JysgcXVlcnkgOiBxdWVyeTtcblxuICBpZiAodXJsLmhhc2gpIHJlc3VsdCArPSB1cmwuaGFzaDtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5VcmwucHJvdG90eXBlID0geyBzZXQ6IHNldCwgdG9TdHJpbmc6IHRvU3RyaW5nIH07XG5cbi8vXG4vLyBFeHBvc2UgdGhlIFVSTCBwYXJzZXIgYW5kIHNvbWUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgYmUgdXNlZnVsIGZvclxuLy8gb3RoZXJzIG9yIHRlc3RpbmcuXG4vL1xuVXJsLmV4dHJhY3RQcm90b2NvbCA9IGV4dHJhY3RQcm90b2NvbDtcblVybC5sb2NhdGlvbiA9IGxvbGNhdGlvbjtcblVybC50cmltTGVmdCA9IHRyaW1MZWZ0O1xuVXJsLnFzID0gcXM7XG5cbm1vZHVsZS5leHBvcnRzID0gVXJsO1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCJxdWVyeXN0cmluZ2lmeVwiOjU5LFwicmVxdWlyZXMtcG9ydFwiOjYwfV19LHt9LFsxXSkoMSlcbn0pO1xuXG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvY2tqcy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5leHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7XG5leHBvcnRzLnJlc29sdmUgPSB1cmxSZXNvbHZlO1xuZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDtcbmV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0O1xuXG5leHBvcnRzLlVybCA9IFVybDtcblxuZnVuY3Rpb24gVXJsKCkge1xuICB0aGlzLnByb3RvY29sID0gbnVsbDtcbiAgdGhpcy5zbGFzaGVzID0gbnVsbDtcbiAgdGhpcy5hdXRoID0gbnVsbDtcbiAgdGhpcy5ob3N0ID0gbnVsbDtcbiAgdGhpcy5wb3J0ID0gbnVsbDtcbiAgdGhpcy5ob3N0bmFtZSA9IG51bGw7XG4gIHRoaXMuaGFzaCA9IG51bGw7XG4gIHRoaXMuc2VhcmNoID0gbnVsbDtcbiAgdGhpcy5xdWVyeSA9IG51bGw7XG4gIHRoaXMucGF0aG5hbWUgPSBudWxsO1xuICB0aGlzLnBhdGggPSBudWxsO1xuICB0aGlzLmhyZWYgPSBudWxsO1xufVxuXG4vLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTZcblxuLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmVcbi8vIGNvbXBpbGVkIG9uY2Ugb24gdGhlIGZpcnN0IG1vZHVsZSBsb2FkLlxudmFyIHByb3RvY29sUGF0dGVybiA9IC9eKFthLXowLTkuKy1dKzopL2ksXG4gICAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuICAgIHNpbXBsZVBhdGhQYXR0ZXJuID0gL14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gICAgLy8gV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS5cbiAgICBkZWxpbXMgPSBbJzwnLCAnPicsICdcIicsICdgJywgJyAnLCAnXFxyJywgJ1xcbicsICdcXHQnXSxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuXG4gICAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCddLmNvbmNhdChkZWxpbXMpLFxuXG4gICAgLy8gQWxsb3dlZCBieSBSRkNzLCBidXQgY2F1c2Ugb2YgWFNTIGF0dGFja3MuICBBbHdheXMgZXNjYXBlIHRoZXNlLlxuICAgIGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpLFxuICAgIC8vIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuXG4gICAgLy8gTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZVxuICAgIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAgIC8vIHRoZW0uXG4gICAgbm9uSG9zdENoYXJzID0gWyclJywgJy8nLCAnPycsICc7JywgJyMnXS5jb25jYXQoYXV0b0VzY2FwZSksXG4gICAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLFxuICAgIGhvc3RuYW1lTWF4TGVuID0gMjU1LFxuICAgIGhvc3RuYW1lUGFydFBhdHRlcm4gPSAvXlsrYS16MC05QS1aXy1dezAsNjN9JC8sXG4gICAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93IFwidW5zYWZlXCIgYW5kIFwidW53aXNlXCIgY2hhcnMuXG4gICAgdW5zYWZlUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gICAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuICAgIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAgICdodHRwJzogdHJ1ZSxcbiAgICAgICdodHRwcyc6IHRydWUsXG4gICAgICAnZnRwJzogdHJ1ZSxcbiAgICAgICdnb3BoZXInOiB0cnVlLFxuICAgICAgJ2ZpbGUnOiB0cnVlLFxuICAgICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAgICdodHRwczonOiB0cnVlLFxuICAgICAgJ2Z0cDonOiB0cnVlLFxuICAgICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICAgJ2ZpbGU6JzogdHJ1ZVxuICAgIH0sXG4gICAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgdXRpbC5pc09iamVjdCh1cmwpICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybDtcblxuICB2YXIgdSA9IG5ldyBVcmw7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIXV0aWwuaXNTdHJpbmcodXJsKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiICsgdHlwZW9mIHVybCk7XG4gIH1cblxuICAvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgLy8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXG4gIC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XG4gIHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKSxcbiAgICAgIHNwbGl0dGVyID1cbiAgICAgICAgICAocXVlcnlJbmRleCAhPT0gLTEgJiYgcXVlcnlJbmRleCA8IHVybC5pbmRleE9mKCcjJykpID8gJz8nIDogJyMnLFxuICAgICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICAgIHNsYXNoUmVnZXggPSAvXFxcXC9nO1xuICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpO1xuICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcmVzdDtcbiAgICAgIHRoaXMuaHJlZiA9IHJlc3Q7XG4gICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTtcbiAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTtcbiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAgIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvLyB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgLy8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAvL1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAvLyB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgLy8gVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgIC8vXG4gICAgLy8gZXg6XG4gICAgLy8gaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAvLyBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG5cbiAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgLy8gSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgLy8gaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvLyBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gIC8vIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgIC8vIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgIC8vIG5lZWQgdG8gYmUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIGlmIChyZXN0LmluZGV4T2YoYWUpID09PSAtMSlcbiAgICAgICAgY29udGludWU7XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgdGhpcy5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSB0aGlzLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgICAgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gdGhpcy5zZWFyY2ggfHwgJyc7XG4gICAgdGhpcy5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gIC8vIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgLy8gdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgaWYgKHV0aWwuaXNTdHJpbmcob2JqKSkgb2JqID0gdXJsUGFyc2Uob2JqKTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTtcbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgICAgaG9zdCA9IGZhbHNlLFxuICAgICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgOlxuICAgICAgICAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJlxuICAgICAgdXRpbC5pc09iamVjdCh0aGlzLnF1ZXJ5KSAmJlxuICAgICAgT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodGhpcy5xdWVyeSk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICAvLyBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy5cbiAgLy8gdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC5cbiAgaWYgKHRoaXMuc2xhc2hlcyB8fFxuICAgICAgKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xbcHJvdG9jb2xdKSAmJiBob3N0ICE9PSBmYWxzZSkge1xuICAgIGhvc3QgPSAnLy8nICsgKGhvc3QgfHwgJycpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTtcbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSAnJztcbiAgfVxuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIGhhc2ggPSAnIycgKyBoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoO1xuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoJyMnLCAnJTIzJyk7XG5cbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkge1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgaWYgKCFzb3VyY2UpIHJldHVybiByZWxhdGl2ZTtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICBpZiAodXRpbC5pc1N0cmluZyhyZWxhdGl2ZSkpIHtcbiAgICB2YXIgcmVsID0gbmV3IFVybCgpO1xuICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpO1xuICAgIHJlbGF0aXZlID0gcmVsO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTtcbiAgdmFyIHRrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gIGZvciAodmFyIHRrID0gMDsgdGsgPCB0a2V5cy5sZW5ndGg7IHRrKyspIHtcbiAgICB2YXIgdGtleSA9IHRrZXlzW3RrXTtcbiAgICByZXN1bHRbdGtleV0gPSB0aGlzW3RrZXldO1xuICB9XG5cbiAgLy8gaGFzaCBpcyBhbHdheXMgb3ZlcnJpZGRlbiwgbm8gbWF0dGVyIHdoYXQuXG4gIC8vIGV2ZW4gaHJlZj1cIlwiIHdpbGwgcmVtb3ZlIGl0LlxuICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7XG5cbiAgLy8gaWYgdGhlIHJlbGF0aXZlIHVybCBpcyBlbXB0eSwgdGhlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkbyBoZXJlLlxuICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHtcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuXG4gIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmVcbiAgICB2YXIgcmtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykge1xuICAgICAgdmFyIHJrZXkgPSBya2V5c1tya107XG4gICAgICBpZiAocmtleSAhPT0gJ3Byb3RvY29sJylcbiAgICAgICAgcmVzdWx0W3JrZXldID0gcmVsYXRpdmVbcmtleV07XG4gICAgfVxuXG4gICAgLy91cmxQYXJzZSBhcHBlbmRzIHRyYWlsaW5nIC8gdG8gdXJscyBsaWtlIGh0dHA6Ly93d3cuZXhhbXBsZS5jb21cbiAgICBpZiAoc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF0gJiZcbiAgICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAocmVsYXRpdmUucHJvdG9jb2wgJiYgcmVsYXRpdmUucHJvdG9jb2wgIT09IHJlc3VsdC5wcm90b2NvbCkge1xuICAgIC8vIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmdcbiAgICAvLyB0aGUgcHJvdG9jb2wgZG9lcyB3ZWlyZCB0aGluZ3NcbiAgICAvLyBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCxcbiAgICAvLyBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aFxuICAgIC8vIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC5cbiAgICAvLyBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLFxuICAgIC8vIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLlxuICAgIC8vIGFueXRoaW5nIGVsc2UgaXMgYXNzdW1lZCB0byBiZSBhYnNvbHV0ZS5cbiAgICBpZiAoIXNsYXNoZWRQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgIHZhciBrID0ga2V5c1t2XTtcbiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107XG4gICAgICB9XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgICBpc1JlbEFicyA9IChcbiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICAgICksXG4gICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gKHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKHJlbGF0aXZlLnNlYXJjaCkpIHtcbiAgICAvLyBqdXN0IHB1bGwgb3V0IHRoZSBzZWFyY2guXG4gICAgLy8gbGlrZSBocmVmPSc/Zm9vJy5cbiAgICAvLyBQdXQgdGhpcyBhZnRlciB0aGUgb3RoZXIgdHdvIGNhc2VzIGJlY2F1c2UgaXQgc2ltcGxpZmllcyB0aGUgYm9vbGVhbnNcbiAgICBpZiAocHN5Y2hvdGljKSB7XG4gICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTtcbiAgICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmXG4gICAgICAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8IGxhc3QgPT09ICcnKTtcblxuICAvLyBzdHJpcCBzaW5nbGUgZG90cywgcmVzb2x2ZSBkb3VibGUgZG90cyB0byBwYXJlbnQgZGlyXG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBzcmNQYXRoLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICBsYXN0ID0gc3JjUGF0aFtpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJlxuICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICB9XG4gIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aCB8fCByZXN1bHQuYXV0aDtcbiAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblVybC5wcm90b3R5cGUucGFyc2VIb3N0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgdGhpcy5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgdGhpcy5ob3N0bmFtZSA9IGhvc3Q7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNTdHJpbmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGlzT2JqZWN0OiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSBudWxsO1xuICB9LFxuICBpc051bGxPclVuZGVmaW5lZDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PSBudWxsO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGVcbiAgbm8tdW51c2VkLXZhcnNcbiovXG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxubW9kdWxlLmV4cG9ydHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlQ2xpZW50KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlQ2xpZW50KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCYXNlQ2xpZW50LCBudWxsLCBbe1xuICAgIGtleTogXCJnZXRDbGllbnRQYXRoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENsaWVudFBhdGgob3B0aW9ucykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQgbmVlZHMgaW1wbGVtZW50YXRpb24nKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmFzZUNsaWVudDtcbn0oKTsiLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZVxuICBuby11bnVzZWQtdmFyc1xuKi9cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG52YXIgU29ja0pTID0gcmVxdWlyZSgnc29ja2pzLWNsaWVudC9kaXN0L3NvY2tqcycpO1xuXG52YXIgQmFzZUNsaWVudCA9IHJlcXVpcmUoJy4vQmFzZUNsaWVudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VDbGllbnQpIHtcbiAgX2luaGVyaXRzKFNvY2tKU0NsaWVudCwgX0Jhc2VDbGllbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU29ja0pTQ2xpZW50KTtcblxuICBmdW5jdGlvbiBTb2NrSlNDbGllbnQodXJsKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNvY2tKU0NsaWVudCk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgIF90aGlzLnNvY2sgPSBuZXcgU29ja0pTKHVybCk7XG5cbiAgICBfdGhpcy5zb2NrLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7Ly8gVE9ETzogdXNlIGxvZ2dlciB0byBsb2cgdGhlIGVycm9yIGV2ZW50IG9uY2UgY2xpZW50IGFuZCBjbGllbnQtc3JjXG4gICAgICAvLyBhcmUgcmVvcmdhbml6ZWQgdG8gaGF2ZSB0aGUgc2FtZSBkaXJlY3Rvcnkgc3RydWN0dXJlXG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTb2NrSlNDbGllbnQsIFt7XG4gICAga2V5OiBcIm9uT3BlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9wZW4oZikge1xuICAgICAgdGhpcy5zb2NrLm9ub3BlbiA9IGY7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uQ2xvc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DbG9zZShmKSB7XG4gICAgICB0aGlzLnNvY2sub25jbG9zZSA9IGY7XG4gICAgfSAvLyBjYWxsIGYgd2l0aCB0aGUgbWVzc2FnZSBzdHJpbmcgYXMgdGhlIGZpcnN0IGFyZ3VtZW50XG5cbiAgfSwge1xuICAgIGtleTogXCJvbk1lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25NZXNzYWdlKGYpIHtcbiAgICAgIHRoaXMuc29jay5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBmKGUuZGF0YSk7XG4gICAgICB9O1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldENsaWVudFBhdGhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2xpZW50UGF0aChvcHRpb25zKSB7XG4gICAgICByZXR1cm4gcmVxdWlyZS5yZXNvbHZlKCcuL1NvY2tKU0NsaWVudCcpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTb2NrSlNDbGllbnQ7XG59KEJhc2VDbGllbnQpOyIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnkgV29ya2VyR2xvYmFsU2NvcGUgc2VsZiAqL1xuXG4vKiBlc2xpbnQgcHJlZmVyLWRlc3RydWN0dXJpbmc6IG9mZiAqL1xuXG52YXIgc3RyaXBBbnNpID0gcmVxdWlyZSgnc3RyaXAtYW5zaScpO1xuXG52YXIgc29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxudmFyIG92ZXJsYXkgPSByZXF1aXJlKCcuL292ZXJsYXknKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi91dGlscy9sb2cnKSxcbiAgICBsb2cgPSBfcmVxdWlyZS5sb2csXG4gICAgc2V0TG9nTGV2ZWwgPSBfcmVxdWlyZS5zZXRMb2dMZXZlbDtcblxudmFyIHNlbmRNZXNzYWdlID0gcmVxdWlyZSgnLi91dGlscy9zZW5kTWVzc2FnZScpO1xuXG52YXIgcmVsb2FkQXBwID0gcmVxdWlyZSgnLi91dGlscy9yZWxvYWRBcHAnKTtcblxudmFyIGNyZWF0ZVNvY2tldFVybCA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlU29ja2V0VXJsJyk7XG5cbnZhciBzdGF0dXMgPSB7XG4gIGlzVW5sb2FkaW5nOiBmYWxzZSxcbiAgY3VycmVudEhhc2g6ICcnXG59O1xudmFyIG9wdGlvbnMgPSB7XG4gIGhvdDogZmFsc2UsXG4gIGhvdFJlbG9hZDogdHJ1ZSxcbiAgbGl2ZVJlbG9hZDogZmFsc2UsXG4gIGluaXRpYWw6IHRydWUsXG4gIHVzZVdhcm5pbmdPdmVybGF5OiBmYWxzZSxcbiAgdXNlRXJyb3JPdmVybGF5OiBmYWxzZSxcbiAgdXNlUHJvZ3Jlc3M6IGZhbHNlXG59O1xudmFyIHNvY2tldFVybCA9IGNyZWF0ZVNvY2tldFVybChfX3Jlc291cmNlUXVlcnkpO1xuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG4gIHN0YXR1cy5pc1VubG9hZGluZyA9IHRydWU7XG59KTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHZhciBxcyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gudG9Mb3dlckNhc2UoKTtcbiAgb3B0aW9ucy5ob3RSZWxvYWQgPSBxcy5pbmRleE9mKCdob3RyZWxvYWQ9ZmFsc2UnKSA9PT0gLTE7XG59XG5cbnZhciBvblNvY2tldE1lc3NhZ2UgPSB7XG4gIGhvdDogZnVuY3Rpb24gaG90KCkge1xuICAgIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgICBsb2cuaW5mbygnW1dEU10gSG90IE1vZHVsZSBSZXBsYWNlbWVudCBlbmFibGVkLicpO1xuICB9LFxuICBsaXZlUmVsb2FkOiBmdW5jdGlvbiBsaXZlUmVsb2FkKCkge1xuICAgIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gICAgbG9nLmluZm8oJ1tXRFNdIExpdmUgUmVsb2FkaW5nIGVuYWJsZWQuJyk7XG4gIH0sXG4gIGludmFsaWQ6IGZ1bmN0aW9uIGludmFsaWQoKSB7XG4gICAgbG9nLmluZm8oJ1tXRFNdIEFwcCB1cGRhdGVkLiBSZWNvbXBpbGluZy4uLicpOyAvLyBmaXhlcyAjMTA0Mi4gb3ZlcmxheSBkb2Vzbid0IGNsZWFyIGlmIGVycm9ycyBhcmUgZml4ZWQgYnV0IHdhcm5pbmdzIHJlbWFpbi5cblxuICAgIGlmIChvcHRpb25zLnVzZVdhcm5pbmdPdmVybGF5IHx8IG9wdGlvbnMudXNlRXJyb3JPdmVybGF5KSB7XG4gICAgICBvdmVybGF5LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoJ0ludmFsaWQnKTtcbiAgfSxcbiAgaGFzaDogZnVuY3Rpb24gaGFzaChfaGFzaCkge1xuICAgIHN0YXR1cy5jdXJyZW50SGFzaCA9IF9oYXNoO1xuICB9LFxuICAnc3RpbGwtb2snOiBmdW5jdGlvbiBzdGlsbE9rKCkge1xuICAgIGxvZy5pbmZvKCdbV0RTXSBOb3RoaW5nIGNoYW5nZWQuJyk7XG5cbiAgICBpZiAob3B0aW9ucy51c2VXYXJuaW5nT3ZlcmxheSB8fCBvcHRpb25zLnVzZUVycm9yT3ZlcmxheSkge1xuICAgICAgb3ZlcmxheS5jbGVhcigpO1xuICAgIH1cblxuICAgIHNlbmRNZXNzYWdlKCdTdGlsbE9rJyk7XG4gIH0sXG4gICdsb2ctbGV2ZWwnOiBmdW5jdGlvbiBsb2dMZXZlbChsZXZlbCkge1xuICAgIHZhciBob3RDdHggPSByZXF1aXJlLmNvbnRleHQoJ3dlYnBhY2svaG90JywgZmFsc2UsIC9eXFwuXFwvbG9nJC8pO1xuXG4gICAgaWYgKGhvdEN0eC5rZXlzKCkuaW5kZXhPZignLi9sb2cnKSAhPT0gLTEpIHtcbiAgICAgIGhvdEN0eCgnLi9sb2cnKS5zZXRMb2dMZXZlbChsZXZlbCk7XG4gICAgfVxuXG4gICAgc2V0TG9nTGV2ZWwobGV2ZWwpO1xuICB9LFxuICBvdmVybGF5OiBmdW5jdGlvbiBvdmVybGF5KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICBvcHRpb25zLnVzZVdhcm5pbmdPdmVybGF5ID0gZmFsc2U7XG4gICAgICAgIG9wdGlvbnMudXNlRXJyb3JPdmVybGF5ID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgIG9wdGlvbnMudXNlV2FybmluZ092ZXJsYXkgPSB2YWx1ZS53YXJuaW5ncztcbiAgICAgICAgb3B0aW9ucy51c2VFcnJvck92ZXJsYXkgPSB2YWx1ZS5lcnJvcnM7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwcm9ncmVzczogZnVuY3Rpb24gcHJvZ3Jlc3MoX3Byb2dyZXNzKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG9wdGlvbnMudXNlUHJvZ3Jlc3MgPSBfcHJvZ3Jlc3M7XG4gICAgfVxuICB9LFxuICAncHJvZ3Jlc3MtdXBkYXRlJzogZnVuY3Rpb24gcHJvZ3Jlc3NVcGRhdGUoZGF0YSkge1xuICAgIGlmIChvcHRpb25zLnVzZVByb2dyZXNzKSB7XG4gICAgICBsb2cuaW5mbyhcIltXRFNdIFwiLmNvbmNhdChkYXRhLnBlcmNlbnQsIFwiJSAtIFwiKS5jb25jYXQoZGF0YS5tc2csIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoJ1Byb2dyZXNzJywgZGF0YSk7XG4gIH0sXG4gIG9rOiBmdW5jdGlvbiBvaygpIHtcbiAgICBzZW5kTWVzc2FnZSgnT2snKTtcblxuICAgIGlmIChvcHRpb25zLnVzZVdhcm5pbmdPdmVybGF5IHx8IG9wdGlvbnMudXNlRXJyb3JPdmVybGF5KSB7XG4gICAgICBvdmVybGF5LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5pdGlhbCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW5pdGlhbCA9IGZhbHNlO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXR1cm4tYXNzaWduXG5cblxuICAgIHJlbG9hZEFwcChvcHRpb25zLCBzdGF0dXMpO1xuICB9LFxuICAnY29udGVudC1jaGFuZ2VkJzogZnVuY3Rpb24gY29udGVudENoYW5nZWQoKSB7XG4gICAgbG9nLmluZm8oJ1tXRFNdIENvbnRlbnQgYmFzZSBjaGFuZ2VkLiBSZWxvYWRpbmcuLi4nKTtcbiAgICBzZWxmLmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9LFxuICB3YXJuaW5nczogZnVuY3Rpb24gd2FybmluZ3MoX3dhcm5pbmdzKSB7XG4gICAgbG9nLndhcm4oJ1tXRFNdIFdhcm5pbmdzIHdoaWxlIGNvbXBpbGluZy4nKTtcblxuICAgIHZhciBzdHJpcHBlZFdhcm5pbmdzID0gX3dhcm5pbmdzLm1hcChmdW5jdGlvbiAod2FybmluZykge1xuICAgICAgcmV0dXJuIHN0cmlwQW5zaSh3YXJuaW5nKTtcbiAgICB9KTtcblxuICAgIHNlbmRNZXNzYWdlKCdXYXJuaW5ncycsIHN0cmlwcGVkV2FybmluZ3MpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpcHBlZFdhcm5pbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cud2FybihzdHJpcHBlZFdhcm5pbmdzW2ldKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51c2VXYXJuaW5nT3ZlcmxheSkge1xuICAgICAgb3ZlcmxheS5zaG93TWVzc2FnZShfd2FybmluZ3MpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluaXRpYWwpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmluaXRpYWwgPSBmYWxzZTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmV0dXJuLWFzc2lnblxuXG5cbiAgICByZWxvYWRBcHAob3B0aW9ucywgc3RhdHVzKTtcbiAgfSxcbiAgZXJyb3JzOiBmdW5jdGlvbiBlcnJvcnMoX2Vycm9ycykge1xuICAgIGxvZy5lcnJvcignW1dEU10gRXJyb3JzIHdoaWxlIGNvbXBpbGluZy4gUmVsb2FkIHByZXZlbnRlZC4nKTtcblxuICAgIHZhciBzdHJpcHBlZEVycm9ycyA9IF9lcnJvcnMubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuIHN0cmlwQW5zaShlcnJvcik7XG4gICAgfSk7XG5cbiAgICBzZW5kTWVzc2FnZSgnRXJyb3JzJywgc3RyaXBwZWRFcnJvcnMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpcHBlZEVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgbG9nLmVycm9yKHN0cmlwcGVkRXJyb3JzW2ldKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51c2VFcnJvck92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2hvd01lc3NhZ2UoX2Vycm9ycyk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5pbml0aWFsID0gZmFsc2U7XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHtcbiAgICBsb2cuZXJyb3IoX2Vycm9yKTtcbiAgfSxcbiAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGxvZy5lcnJvcignW1dEU10gRGlzY29ubmVjdGVkIScpO1xuICAgIHNlbmRNZXNzYWdlKCdDbG9zZScpO1xuICB9XG59O1xuc29ja2V0KHNvY2tldFVybCwgb25Tb2NrZXRNZXNzYWdlKTsiLCIndXNlIHN0cmljdCc7IC8vIFRoZSBlcnJvciBvdmVybGF5IGlzIGluc3BpcmVkIChhbmQgbW9zdGx5IGNvcGllZCkgZnJvbSBDcmVhdGUgUmVhY3QgQXBwIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcClcbi8vIFRoZXksIGluIHR1cm4sIGdvdCBpbnNwaXJlZCBieSB3ZWJwYWNrLWhvdC1taWRkbGV3YXJlIChodHRwczovL2dpdGh1Yi5jb20vZ2xlbmphbWluL3dlYnBhY2staG90LW1pZGRsZXdhcmUpLlxuXG52YXIgYW5zaUhUTUwgPSByZXF1aXJlKCdhbnNpLWh0bWwnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnaHRtbC1lbnRpdGllcycpLFxuICAgIEFsbEh0bWxFbnRpdGllcyA9IF9yZXF1aXJlLkFsbEh0bWxFbnRpdGllcztcblxudmFyIGVudGl0aWVzID0gbmV3IEFsbEh0bWxFbnRpdGllcygpO1xudmFyIGNvbG9ycyA9IHtcbiAgcmVzZXQ6IFsndHJhbnNwYXJlbnQnLCAndHJhbnNwYXJlbnQnXSxcbiAgYmxhY2s6ICcxODE4MTgnLFxuICByZWQ6ICdFMzYwNDknLFxuICBncmVlbjogJ0IzQ0I3NCcsXG4gIHllbGxvdzogJ0ZGRDA4MCcsXG4gIGJsdWU6ICc3Q0FGQzInLFxuICBtYWdlbnRhOiAnN0ZBQ0NBJyxcbiAgY3lhbjogJ0MzQzJFRicsXG4gIGxpZ2h0Z3JleTogJ0VCRTdFMycsXG4gIGRhcmtncmV5OiAnNkQ3ODkxJ1xufTtcbnZhciBvdmVybGF5SWZyYW1lID0gbnVsbDtcbnZhciBvdmVybGF5RGl2ID0gbnVsbDtcbnZhciBsYXN0T25PdmVybGF5RGl2UmVhZHkgPSBudWxsO1xuYW5zaUhUTUwuc2V0Q29sb3JzKGNvbG9ycyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXlJZnJhbWUob25JZnJhbWVMb2FkKSB7XG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgaWZyYW1lLmlkID0gJ3dlYnBhY2stZGV2LXNlcnZlci1jbGllbnQtb3ZlcmxheSc7XG4gIGlmcmFtZS5zcmMgPSAnYWJvdXQ6YmxhbmsnO1xuICBpZnJhbWUuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICBpZnJhbWUuc3R5bGUubGVmdCA9IDA7XG4gIGlmcmFtZS5zdHlsZS50b3AgPSAwO1xuICBpZnJhbWUuc3R5bGUucmlnaHQgPSAwO1xuICBpZnJhbWUuc3R5bGUuYm90dG9tID0gMDtcbiAgaWZyYW1lLnN0eWxlLndpZHRoID0gJzEwMHZ3JztcbiAgaWZyYW1lLnN0eWxlLmhlaWdodCA9ICcxMDB2aCc7XG4gIGlmcmFtZS5zdHlsZS5ib3JkZXIgPSAnbm9uZSc7XG4gIGlmcmFtZS5zdHlsZS56SW5kZXggPSA5OTk5OTk5OTk5O1xuICBpZnJhbWUub25sb2FkID0gb25JZnJhbWVMb2FkO1xuICByZXR1cm4gaWZyYW1lO1xufVxuXG5mdW5jdGlvbiBhZGRPdmVybGF5RGl2VG8oaWZyYW1lKSB7XG4gIHZhciBkaXYgPSBpZnJhbWUuY29udGVudERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaWQgPSAnd2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5LWRpdic7XG4gIGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIGRpdi5zdHlsZS5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCc7XG4gIGRpdi5zdHlsZS5sZWZ0ID0gMDtcbiAgZGl2LnN0eWxlLnRvcCA9IDA7XG4gIGRpdi5zdHlsZS5yaWdodCA9IDA7XG4gIGRpdi5zdHlsZS5ib3R0b20gPSAwO1xuICBkaXYuc3R5bGUud2lkdGggPSAnMTAwdncnO1xuICBkaXYuc3R5bGUuaGVpZ2h0ID0gJzEwMHZoJztcbiAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsIDAsIDAsIDAuODUpJztcbiAgZGl2LnN0eWxlLmNvbG9yID0gJyNFOEU4RTgnO1xuICBkaXYuc3R5bGUuZm9udEZhbWlseSA9ICdNZW5sbywgQ29uc29sYXMsIG1vbm9zcGFjZSc7XG4gIGRpdi5zdHlsZS5mb250U2l6ZSA9ICdsYXJnZSc7XG4gIGRpdi5zdHlsZS5wYWRkaW5nID0gJzJyZW0nO1xuICBkaXYuc3R5bGUubGluZUhlaWdodCA9ICcxLjInO1xuICBkaXYuc3R5bGUud2hpdGVTcGFjZSA9ICdwcmUtd3JhcCc7XG4gIGRpdi5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcbiAgaWZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gIHJldHVybiBkaXY7XG59XG5cbmZ1bmN0aW9uIGVuc3VyZU92ZXJsYXlEaXZFeGlzdHMob25PdmVybGF5RGl2UmVhZHkpIHtcbiAgaWYgKG92ZXJsYXlEaXYpIHtcbiAgICAvLyBFdmVyeXRoaW5nIGlzIHJlYWR5LCBjYWxsIHRoZSBjYWxsYmFjayByaWdodCBhd2F5LlxuICAgIG9uT3ZlcmxheURpdlJlYWR5KG92ZXJsYXlEaXYpO1xuICAgIHJldHVybjtcbiAgfSAvLyBDcmVhdGluZyBhbiBpZnJhbWUgbWF5IGJlIGFzeW5jaHJvbm91cyBzbyB3ZSdsbCBzY2hlZHVsZSB0aGUgY2FsbGJhY2suXG4gIC8vIEluIGNhc2Ugb2YgbXVsdGlwbGUgY2FsbHMsIGxhc3QgY2FsbGJhY2sgd2lucy5cblxuXG4gIGxhc3RPbk92ZXJsYXlEaXZSZWFkeSA9IG9uT3ZlcmxheURpdlJlYWR5O1xuXG4gIGlmIChvdmVybGF5SWZyYW1lKSB7XG4gICAgLy8gV2UndmUgYWxyZWFkeSBjcmVhdGVkIGl0LlxuICAgIHJldHVybjtcbiAgfSAvLyBDcmVhdGUgaWZyYW1lIGFuZCwgd2hlbiBpdCBpcyByZWFkeSwgYSBkaXYgaW5zaWRlIGl0LlxuXG5cbiAgb3ZlcmxheUlmcmFtZSA9IGNyZWF0ZU92ZXJsYXlJZnJhbWUoZnVuY3Rpb24gKCkge1xuICAgIG92ZXJsYXlEaXYgPSBhZGRPdmVybGF5RGl2VG8ob3ZlcmxheUlmcmFtZSk7IC8vIE5vdyB3ZSBjYW4gdGFsayFcblxuICAgIGxhc3RPbk92ZXJsYXlEaXZSZWFkeShvdmVybGF5RGl2KTtcbiAgfSk7IC8vIFphbGdvIGFsZXJ0OiBvbklmcmFtZUxvYWQoKSB3aWxsIGJlIGNhbGxlZCBlaXRoZXIgc3luY2hyb25vdXNseVxuICAvLyBvciBhc3luY2hyb25vdXNseSBkZXBlbmRpbmcgb24gdGhlIGJyb3dzZXIuXG4gIC8vIFdlIGRlbGF5IGFkZGluZyBpdCBzbyBgb3ZlcmxheUlmcmFtZWAgaXMgc2V0IHdoZW4gYG9uSWZyYW1lTG9hZGAgZmlyZXMuXG5cbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvdmVybGF5SWZyYW1lKTtcbn0gLy8gU3VjY2Vzc2Z1bCBjb21waWxhdGlvbi5cblxuXG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgaWYgKCFvdmVybGF5RGl2KSB7XG4gICAgLy8gSXQgaXMgbm90IHRoZXJlIGluIHRoZSBmaXJzdCBwbGFjZS5cbiAgICByZXR1cm47XG4gIH0gLy8gQ2xlYW4gdXAgYW5kIHJlc2V0IGludGVybmFsIHN0YXRlLlxuXG5cbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdmVybGF5SWZyYW1lKTtcbiAgb3ZlcmxheURpdiA9IG51bGw7XG4gIG92ZXJsYXlJZnJhbWUgPSBudWxsO1xuICBsYXN0T25PdmVybGF5RGl2UmVhZHkgPSBudWxsO1xufSAvLyBDb21waWxhdGlvbiB3aXRoIGVycm9ycyAoZS5nLiBzeW50YXggZXJyb3Igb3IgbWlzc2luZyBtb2R1bGVzKS5cblxuXG5mdW5jdGlvbiBzaG93TWVzc2FnZShtZXNzYWdlcykge1xuICBlbnN1cmVPdmVybGF5RGl2RXhpc3RzKGZ1bmN0aW9uIChkaXYpIHtcbiAgICAvLyBNYWtlIGl0IGxvb2sgc2ltaWxhciB0byBvdXIgdGVybWluYWwuXG4gICAgZGl2LmlubmVySFRNTCA9IFwiPHNwYW4gc3R5bGU9XFxcImNvbG9yOiAjXCIuY29uY2F0KGNvbG9ycy5yZWQsIFwiXFxcIj5GYWlsZWQgdG8gY29tcGlsZS48L3NwYW4+PGJyPjxicj5cIikuY29uY2F0KGFuc2lIVE1MKGVudGl0aWVzLmVuY29kZShtZXNzYWdlc1swXSkpKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjbGVhcjogY2xlYXIsXG4gIHNob3dNZXNzYWdlOiBzaG93TWVzc2FnZVxufTsiLCIndXNlIHN0cmljdCc7XG4vKiBnbG9iYWwgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gKi9cblxuLyogZXNsaW50LWRpc2FibGVcbiAgY2FtZWxjYXNlXG4qL1xuLy8gdGhpcyBTb2NrSlNDbGllbnQgaXMgaGVyZSBhcyBhIGRlZmF1bHQgZmFsbGJhY2ssIGluIGNhc2UgaW5saW5lIG1vZGVcbi8vIGlzIG9mZiBvciB0aGUgY2xpZW50IGlzIG5vdCBpbmplY3RlZC4gVGhpcyB3aWxsIGJlIHN3aXRjaGVkIHRvXG4vLyBXZWJzb2NrZXRDbGllbnQgd2hlbiBpdCBiZWNvbWVzIHRoZSBkZWZhdWx0XG4vLyBpbXBvcnRhbnQ6IHRoZSBwYXRoIHRvIFNvY2tKU0NsaWVudCBoZXJlIGlzIG1hZGUgdG8gd29yayBpbiB0aGUgJ2NsaWVudCdcbi8vIGRpcmVjdG9yeSwgYnV0IGlzIHVwZGF0ZWQgdmlhIHRoZSB3ZWJwYWNrIGNvbXBpbGF0aW9uIHdoZW4gY29tcGlsZWQgZnJvbVxuLy8gdGhlICdjbGllbnQtc3JjJyBkaXJlY3RvcnlcblxudmFyIENsaWVudCA9IHR5cGVvZiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyA6IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW5yZXNvbHZlZFxucmVxdWlyZSgnLi9jbGllbnRzL1NvY2tKU0NsaWVudCcpO1xudmFyIHJldHJpZXMgPSAwO1xudmFyIGNsaWVudCA9IG51bGw7XG5cbnZhciBzb2NrZXQgPSBmdW5jdGlvbiBpbml0U29ja2V0KHVybCwgaGFuZGxlcnMpIHtcbiAgY2xpZW50ID0gbmV3IENsaWVudCh1cmwpO1xuICBjbGllbnQub25PcGVuKGZ1bmN0aW9uICgpIHtcbiAgICByZXRyaWVzID0gMDtcbiAgfSk7XG4gIGNsaWVudC5vbkNsb3NlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmV0cmllcyA9PT0gMCkge1xuICAgICAgaGFuZGxlcnMuY2xvc2UoKTtcbiAgICB9IC8vIFRyeSB0byByZWNvbm5lY3QuXG5cblxuICAgIGNsaWVudCA9IG51bGw7IC8vIEFmdGVyIDEwIHJldHJpZXMgc3RvcCB0cnlpbmcsIHRvIHByZXZlbnQgbG9nc3BhbS5cblxuICAgIGlmIChyZXRyaWVzIDw9IDEwKSB7XG4gICAgICAvLyBFeHBvbmVudGlhbGx5IGluY3JlYXNlIHRpbWVvdXQgdG8gcmVjb25uZWN0LlxuICAgICAgLy8gUmVzcGVjdGZ1bGx5IGNvcGllZCBmcm9tIHRoZSBwYWNrYWdlIGBnb3RgLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW1peGVkLW9wZXJhdG9ycywgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG4gICAgICB2YXIgcmV0cnlJbk1zID0gMTAwMCAqIE1hdGgucG93KDIsIHJldHJpZXMpICsgTWF0aC5yYW5kb20oKSAqIDEwMDtcbiAgICAgIHJldHJpZXMgKz0gMTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzb2NrZXQodXJsLCBoYW5kbGVycyk7XG4gICAgICB9LCByZXRyeUluTXMpO1xuICAgIH1cbiAgfSk7XG4gIGNsaWVudC5vbk1lc3NhZ2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgbXNnID0gSlNPTi5wYXJzZShkYXRhKTtcblxuICAgIGlmIChoYW5kbGVyc1ttc2cudHlwZV0pIHtcbiAgICAgIGhhbmRsZXJzW21zZy50eXBlXShtc2cuZGF0YSk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc29ja2V0OyIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbCBzZWxmICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKTtcblxudmFyIGdldEN1cnJlbnRTY3JpcHRTb3VyY2UgPSByZXF1aXJlKCcuL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UnKTtcblxuZnVuY3Rpb24gY3JlYXRlU29ja2V0VXJsKHJlc291cmNlUXVlcnksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgdXJsUGFydHM7XG5cbiAgaWYgKHR5cGVvZiByZXNvdXJjZVF1ZXJ5ID09PSAnc3RyaW5nJyAmJiByZXNvdXJjZVF1ZXJ5ICE9PSAnJykge1xuICAgIC8vIElmIHRoaXMgYnVuZGxlIGlzIGlubGluZWQsIHVzZSB0aGUgcmVzb3VyY2UgcXVlcnkgdG8gZ2V0IHRoZSBjb3JyZWN0IHVybC5cbiAgICAvLyBmb3JtYXQgaXMgbGlrZSBgP2h0dHA6Ly8wLjAuMC4wOjgwOTYmc29ja1BvcnQ9ODA5NyZzb2NrSG9zdD1sb2NhbGhvc3RgXG4gICAgdXJsUGFydHMgPSB1cmwucGFyc2UocmVzb3VyY2VRdWVyeSAvLyBzdHJpcCBsZWFkaW5nIGA/YCBmcm9tIHF1ZXJ5IHN0cmluZyB0byBnZXQgYSB2YWxpZCBVUkxcbiAgICAuc3Vic3RyKDEpIC8vIHJlcGxhY2UgZmlyc3QgYCZgIHdpdGggYD9gIHRvIGhhdmUgYSB2YWxpZCBxdWVyeSBzdHJpbmdcbiAgICAucmVwbGFjZSgnJicsICc/JyksIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIC8vIEVsc2UsIGdldCB0aGUgdXJsIGZyb20gdGhlIDxzY3JpcHQ+IHRoaXMgZmlsZSB3YXMgY2FsbGVkIHdpdGguXG4gICAgdmFyIHNjcmlwdEhvc3QgPSBnZXRDdXJyZW50U2NyaXB0U291cmNlKCk7XG4gICAgdXJsUGFydHMgPSB1cmwucGFyc2Uoc2NyaXB0SG9zdCB8fCAnLycsIHRydWUsIHRydWUpO1xuICB9IC8vIFVzZSBwYXJhbWV0ZXIgdG8gYWxsb3cgcGFzc2luZyBsb2NhdGlvbiBpbiB1bml0IHRlc3RzXG5cblxuICBpZiAodHlwZW9mIGN1cnJlbnRMb2NhdGlvbiA9PT0gJ3N0cmluZycgJiYgY3VycmVudExvY2F0aW9uICE9PSAnJykge1xuICAgIGN1cnJlbnRMb2NhdGlvbiA9IHVybC5wYXJzZShjdXJyZW50TG9jYXRpb24pO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRMb2NhdGlvbiA9IHNlbGYubG9jYXRpb247XG4gIH1cblxuICByZXR1cm4gZ2V0U29ja2V0VXJsKHVybFBhcnRzLCBjdXJyZW50TG9jYXRpb24pO1xufVxuLypcbiAqIEdldHMgc29ja2V0IFVSTCBiYXNlZCBvbiBTY3JpcHQgU291cmNlL0xvY2F0aW9uXG4gKiAoc2NyaXB0U3JjOiBVUkwsIGxvY2F0aW9uOiBVUkwpIC0+IFVSTFxuICovXG5cblxuZnVuY3Rpb24gZ2V0U29ja2V0VXJsKHVybFBhcnRzLCBsb2MpIHtcbiAgdmFyIGF1dGggPSB1cmxQYXJ0cy5hdXRoLFxuICAgICAgcXVlcnkgPSB1cmxQYXJ0cy5xdWVyeTtcbiAgdmFyIGhvc3RuYW1lID0gdXJsUGFydHMuaG9zdG5hbWUsXG4gICAgICBwcm90b2NvbCA9IHVybFBhcnRzLnByb3RvY29sLFxuICAgICAgcG9ydCA9IHVybFBhcnRzLnBvcnQ7XG5cbiAgaWYgKCFwb3J0IHx8IHBvcnQgPT09ICcwJykge1xuICAgIHBvcnQgPSBsb2MucG9ydDtcbiAgfSAvLyBjaGVjayBpcHY0IGFuZCBpcHY2IGBhbGwgaG9zdG5hbWVgXG4gIC8vIHdoeSBkbyB3ZSBuZWVkIHRoaXMgY2hlY2s/XG4gIC8vIGhvc3RuYW1lIG4vYSBmb3IgZmlsZSBwcm90b2NvbCAoZXhhbXBsZSwgd2hlbiB1c2luZyBlbGVjdHJvbiwgaW9uaWMpXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay1kZXYtc2VydmVyL3B1bGwvMzg0XG5cblxuICBpZiAoKGhvc3RuYW1lID09PSAnMC4wLjAuMCcgfHwgaG9zdG5hbWUgPT09ICc6OicpICYmIGxvYy5ob3N0bmFtZSAmJiBsb2MucHJvdG9jb2wuaW5kZXhPZignaHR0cCcpID09PSAwKSB7XG4gICAgaG9zdG5hbWUgPSBsb2MuaG9zdG5hbWU7XG4gIH0gLy8gYGhvc3RuYW1lYCBjYW4gYmUgZW1wdHkgd2hlbiB0aGUgc2NyaXB0IHBhdGggaXMgcmVsYXRpdmUuIEluIHRoYXQgY2FzZSwgc3BlY2lmeWluZ1xuICAvLyBhIHByb3RvY29sIHdvdWxkIHJlc3VsdCBpbiBhbiBpbnZhbGlkIFVSTC5cbiAgLy8gV2hlbiBodHRwcyBpcyB1c2VkIGluIHRoZSBhcHAsIHNlY3VyZSB3ZWJzb2NrZXRzIGFyZSBhbHdheXMgbmVjZXNzYXJ5XG4gIC8vIGJlY2F1c2UgdGhlIGJyb3dzZXIgZG9lc24ndCBhY2NlcHQgbm9uLXNlY3VyZSB3ZWJzb2NrZXRzLlxuXG5cbiAgaWYgKGhvc3RuYW1lICYmIGhvc3RuYW1lICE9PSAnMTI3LjAuMC4xJyAmJiAobG9jLnByb3RvY29sID09PSAnaHR0cHM6JyB8fCB1cmxQYXJ0cy5ob3N0bmFtZSA9PT0gJzAuMC4wLjAnKSkge1xuICAgIHByb3RvY29sID0gbG9jLnByb3RvY29sO1xuICB9IC8vIGFsbCBvZiB0aGVzZSBzb2NrIHVybCBwYXJhbXMgYXJlIG9wdGlvbmFsbHkgcGFzc2VkIGluIHRocm91Z2hcbiAgLy8gcmVzb3VyY2VRdWVyeSwgc28gd2UgbmVlZCB0byBmYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQgaWZcbiAgLy8gdGhleSBhcmUgbm90IHByb3ZpZGVkXG5cblxuICB2YXIgc29ja0hvc3QgPSBxdWVyeS5zb2NrSG9zdCB8fCBob3N0bmFtZTtcbiAgdmFyIHNvY2tQYXRoID0gcXVlcnkuc29ja1BhdGggfHwgJy9zb2NranMtbm9kZSc7XG4gIHZhciBzb2NrUG9ydCA9IHF1ZXJ5LnNvY2tQb3J0IHx8IHBvcnQ7XG5cbiAgaWYgKHNvY2tQb3J0ID09PSAnbG9jYXRpb24nKSB7XG4gICAgc29ja1BvcnQgPSBsb2MucG9ydDtcbiAgfVxuXG4gIHJldHVybiB1cmwuZm9ybWF0KHtcbiAgICBwcm90b2NvbDogcHJvdG9jb2wsXG4gICAgYXV0aDogYXV0aCxcbiAgICBob3N0bmFtZTogc29ja0hvc3QsXG4gICAgcG9ydDogc29ja1BvcnQsXG4gICAgLy8gSWYgc29ja1BhdGggaXMgcHJvdmlkZWQgaXQnbGwgYmUgcGFzc2VkIGluIHZpYSB0aGUgcmVzb3VyY2VRdWVyeSBhcyBhXG4gICAgLy8gcXVlcnkgcGFyYW0gc28gaXQgaGFzIHRvIGJlIHBhcnNlZCBvdXQgb2YgdGhlIHF1ZXJ5c3RyaW5nIGluIG9yZGVyIGZvciB0aGVcbiAgICAvLyBjbGllbnQgdG8gb3BlbiB0aGUgc29ja2V0IHRvIHRoZSBjb3JyZWN0IGxvY2F0aW9uLlxuICAgIHBhdGhuYW1lOiBzb2NrUGF0aFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTb2NrZXRVcmw7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0U291cmNlKCkge1xuICAvLyBgZG9jdW1lbnQuY3VycmVudFNjcmlwdGAgaXMgdGhlIG1vc3QgYWNjdXJhdGUgd2F5IHRvIGZpbmQgdGhlIGN1cnJlbnQgc2NyaXB0LFxuICAvLyBidXQgaXMgbm90IHN1cHBvcnRlZCBpbiBhbGwgYnJvd3NlcnMuXG4gIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgfSAvLyBGYWxsIGJhY2sgdG8gZ2V0dGluZyBhbGwgc2NyaXB0cyBpbiB0aGUgZG9jdW1lbnQuXG5cblxuICB2YXIgc2NyaXB0RWxlbWVudHMgPSBkb2N1bWVudC5zY3JpcHRzIHx8IFtdO1xuICB2YXIgY3VycmVudFNjcmlwdCA9IHNjcmlwdEVsZW1lbnRzW3NjcmlwdEVsZW1lbnRzLmxlbmd0aCAtIDFdO1xuXG4gIGlmIChjdXJyZW50U2NyaXB0KSB7XG4gICAgcmV0dXJuIGN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgfSAvLyBGYWlsIGFzIHRoZXJlIHdhcyBubyBzY3JpcHQgdG8gdXNlLlxuXG5cbiAgdGhyb3cgbmV3IEVycm9yKCdbV0RTXSBGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgc2NyaXB0IHNvdXJjZS4nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRDdXJyZW50U2NyaXB0U291cmNlOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGxvZyA9IHJlcXVpcmUoJ2xvZ2xldmVsJykuZ2V0TG9nZ2VyKCd3ZWJwYWNrLWRldi1zZXJ2ZXInKTtcblxudmFyIElORk8gPSAnaW5mbyc7XG52YXIgV0FSTiA9ICd3YXJuJztcbnZhciBFUlJPUiA9ICdlcnJvcic7XG52YXIgREVCVUcgPSAnZGVidWcnO1xudmFyIFRSQUNFID0gJ3RyYWNlJztcbnZhciBTSUxFTlQgPSAnc2lsZW50JzsgLy8gZGVwcmVjYXRlZFxuLy8gVE9ETzogcmVtb3ZlIHRoZXNlIGF0IG1ham9yIHJlbGVhc2VkXG4vLyBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrLWRldi1zZXJ2ZXIvcHVsbC8xODI1XG5cbnZhciBXQVJOSU5HID0gJ3dhcm5pbmcnO1xudmFyIE5PTkUgPSAnbm9uZSc7IC8vIFNldCB0aGUgZGVmYXVsdCBsb2cgbGV2ZWxcblxubG9nLnNldERlZmF1bHRMZXZlbChJTkZPKTtcblxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHtcbiAgc3dpdGNoIChsZXZlbCkge1xuICAgIGNhc2UgSU5GTzpcbiAgICBjYXNlIFdBUk46XG4gICAgY2FzZSBFUlJPUjpcbiAgICBjYXNlIERFQlVHOlxuICAgIGNhc2UgVFJBQ0U6XG4gICAgICBsb2cuc2V0TGV2ZWwobGV2ZWwpO1xuICAgICAgYnJlYWs7XG4gICAgLy8gZGVwcmVjYXRlZFxuXG4gICAgY2FzZSBXQVJOSU5HOlxuICAgICAgLy8gbG9nbGV2ZWwncyB3YXJuaW5nIG5hbWUgaXMgZGlmZmVyZW50IGZyb20gd2VicGFjaydzXG4gICAgICBsb2cuc2V0TGV2ZWwoJ3dhcm4nKTtcbiAgICAgIGJyZWFrO1xuICAgIC8vIGRlcHJlY2F0ZWRcblxuICAgIGNhc2UgTk9ORTpcbiAgICBjYXNlIFNJTEVOVDpcbiAgICAgIGxvZy5kaXNhYmxlQWxsKCk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBsb2cuZXJyb3IoXCJbV0RTXSBVbmtub3duIGNsaWVudExvZ0xldmVsICdcIi5jb25jYXQobGV2ZWwsIFwiJ1wiKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvZzogbG9nLFxuICBzZXRMb2dMZXZlbDogc2V0TG9nTGV2ZWxcbn07IiwiJ3VzZSBzdHJpY3QnO1xuLyogZ2xvYmFsIFdvcmtlckdsb2JhbFNjb3BlIHNlbGYgKi9cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9sb2cnKSxcbiAgICBsb2cgPSBfcmVxdWlyZS5sb2c7XG5cbmZ1bmN0aW9uIHJlbG9hZEFwcChfcmVmLCBfcmVmMikge1xuICB2YXIgaG90UmVsb2FkID0gX3JlZi5ob3RSZWxvYWQsXG4gICAgICBob3QgPSBfcmVmLmhvdCxcbiAgICAgIGxpdmVSZWxvYWQgPSBfcmVmLmxpdmVSZWxvYWQ7XG4gIHZhciBpc1VubG9hZGluZyA9IF9yZWYyLmlzVW5sb2FkaW5nLFxuICAgICAgY3VycmVudEhhc2ggPSBfcmVmMi5jdXJyZW50SGFzaDtcblxuICBpZiAoaXNVbmxvYWRpbmcgfHwgIWhvdFJlbG9hZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChob3QpIHtcbiAgICBsb2cuaW5mbygnW1dEU10gQXBwIGhvdCB1cGRhdGUuLi4nKTtcblxuICAgIHZhciBob3RFbWl0dGVyID0gcmVxdWlyZSgnd2VicGFjay9ob3QvZW1pdHRlcicpO1xuXG4gICAgaG90RW1pdHRlci5lbWl0KCd3ZWJwYWNrSG90VXBkYXRlJywgY3VycmVudEhhc2gpO1xuXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLndpbmRvdykge1xuICAgICAgLy8gYnJvYWRjYXN0IHVwZGF0ZSB0byB3aW5kb3dcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2UoXCJ3ZWJwYWNrSG90VXBkYXRlXCIuY29uY2F0KGN1cnJlbnRIYXNoKSwgJyonKTtcbiAgICB9XG4gIH0gLy8gYWxsb3cgcmVmcmVzaGluZyB0aGUgcGFnZSBvbmx5IGlmIGxpdmVSZWxvYWQgaXNuJ3QgZGlzYWJsZWRcbiAgZWxzZSBpZiAobGl2ZVJlbG9hZCkge1xuICAgICAgdmFyIHJvb3RXaW5kb3cgPSBzZWxmOyAvLyB1c2UgcGFyZW50IHdpbmRvdyBmb3IgcmVsb2FkIChpbiBjYXNlIHdlJ3JlIGluIGFuIGlmcmFtZSB3aXRoIG5vIHZhbGlkIHNyYylcblxuICAgICAgdmFyIGludGVydmFsSWQgPSBzZWxmLnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHJvb3RXaW5kb3cubG9jYXRpb24ucHJvdG9jb2wgIT09ICdhYm91dDonKSB7XG4gICAgICAgICAgLy8gcmVsb2FkIGltbWVkaWF0ZWx5IGlmIHByb3RvY29sIGlzIHZhbGlkXG4gICAgICAgICAgYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm9vdFdpbmRvdyA9IHJvb3RXaW5kb3cucGFyZW50O1xuXG4gICAgICAgICAgaWYgKHJvb3RXaW5kb3cucGFyZW50ID09PSByb290V2luZG93KSB7XG4gICAgICAgICAgICAvLyBpZiBwYXJlbnQgZXF1YWxzIGN1cnJlbnQgd2luZG93IHdlJ3ZlIHJlYWNoZWQgdGhlIHJvb3Qgd2hpY2ggd291bGQgY29udGludWUgZm9yZXZlciwgc28gdHJpZ2dlciBhIHJlbG9hZCBhbnl3YXlzXG4gICAgICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICBmdW5jdGlvbiBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKSB7XG4gICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICBsb2cuaW5mbygnW1dEU10gQXBwIHVwZGF0ZWQuIFJlbG9hZGluZy4uLicpO1xuICAgIHJvb3RXaW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWxvYWRBcHA7IiwiJ3VzZSBzdHJpY3QnO1xuLyogZ2xvYmFsIF9fcmVzb3VyY2VRdWVyeSBXb3JrZXJHbG9iYWxTY29wZSBzZWxmICovXG4vLyBTZW5kIG1lc3NhZ2VzIHRvIHRoZSBvdXRzaWRlLCBzbyBwbHVnaW5zIGNhbiBjb25zdW1lIGl0LlxuXG5mdW5jdGlvbiBzZW5kTXNnKHR5cGUsIGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSAndW5kZWZpbmVkJyB8fCAhKHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSkpKSB7XG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICB0eXBlOiBcIndlYnBhY2tcIi5jb25jYXQodHlwZSksXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSwgJyonKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNlbmRNc2c7IiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiAvW1xcdTAwMWJcXHUwMDliXVtbKCkjOz9dKig/OlswLTldezEsNH0oPzo7WzAtOV17MCw0fSkqKT9bMC05QS1QUlpjZi1ucXJ5PT48XS9nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbnNpUmVnZXggPSByZXF1aXJlKCdhbnNpLXJlZ2V4JykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHN0ci5yZXBsYWNlKGFuc2lSZWdleCwgJycpIDogc3RyO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9sb2dcIjogXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2cuanNcIlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3Qgc3luYyBeXFxcXC5cXFxcL2xvZyRcIjsiLCJ2YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbm1vZHVsZS5leHBvcnRzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuIiwidmFyIGxvZ0xldmVsID0gXCJpbmZvXCI7XG5cbmZ1bmN0aW9uIGR1bW15KCkge31cblxuZnVuY3Rpb24gc2hvdWxkTG9nKGxldmVsKSB7XG5cdHZhciBzaG91bGRMb2cgPVxuXHRcdChsb2dMZXZlbCA9PT0gXCJpbmZvXCIgJiYgbGV2ZWwgPT09IFwiaW5mb1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcIndhcm5pbmdcIikgfHxcblx0XHQoW1wiaW5mb1wiLCBcIndhcm5pbmdcIiwgXCJlcnJvclwiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcImVycm9yXCIpO1xuXHRyZXR1cm4gc2hvdWxkTG9nO1xufVxuXG5mdW5jdGlvbiBsb2dHcm91cChsb2dGbikge1xuXHRyZXR1cm4gZnVuY3Rpb24obGV2ZWwsIG1zZykge1xuXHRcdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0XHRsb2dGbihtc2cpO1xuXHRcdH1cblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsZXZlbCwgbXNnKSB7XG5cdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0aWYgKGxldmVsID09PSBcImluZm9cIikge1xuXHRcdFx0Y29uc29sZS5sb2cobXNnKTtcblx0XHR9IGVsc2UgaWYgKGxldmVsID09PSBcIndhcm5pbmdcIikge1xuXHRcdFx0Y29uc29sZS53YXJuKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJlcnJvclwiKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKG1zZyk7XG5cdFx0fVxuXHR9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMgKi9cbnZhciBncm91cCA9IGNvbnNvbGUuZ3JvdXAgfHwgZHVtbXk7XG52YXIgZ3JvdXBDb2xsYXBzZWQgPSBjb25zb2xlLmdyb3VwQ29sbGFwc2VkIHx8IGR1bW15O1xudmFyIGdyb3VwRW5kID0gY29uc29sZS5ncm91cEVuZCB8fCBkdW1teTtcbi8qIGVzbGludC1lbmFibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovXG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwID0gbG9nR3JvdXAoZ3JvdXApO1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cENvbGxhcHNlZCA9IGxvZ0dyb3VwKGdyb3VwQ29sbGFwc2VkKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBFbmQgPSBsb2dHcm91cChncm91cEVuZCk7XG5cbm1vZHVsZS5leHBvcnRzLnNldExvZ0xldmVsID0gZnVuY3Rpb24obGV2ZWwpIHtcblx0bG9nTGV2ZWwgPSBsZXZlbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmZvcm1hdEVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG5cdHZhciBtZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG5cdHZhciBzdGFjayA9IGVyci5zdGFjaztcblx0aWYgKCFzdGFjaykge1xuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9IGVsc2UgaWYgKHN0YWNrLmluZGV4T2YobWVzc2FnZSkgPCAwKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2UgKyBcIlxcblwiICsgc3RhY2s7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHN0YWNrO1xuXHR9XG59O1xuIiwiLypcbiBDT01QRVRJVElPTiBMQUJTIExURCB2MS4wLjVcbiAoYykgMjAxNS0yMDIwIEFsZWtzYW5kciBCZXJub3Rhc1xuIExpY2Vuc2U6IHd3dy5jb21wZXRpdGlvbmxhYnMuY29tL3Rlcm1zLW9mLXNlcnZpY2VcbiovXG5cbmltcG9ydCAnLi9wb2x5ZmlsbHMnO1xuaW1wb3J0ICcuL21vZHVsZXMvc2V0VGltZW91dEdsb2JhbCc7XG5pbXBvcnQgeyBMYldpZGdldCB9IGZyb20gJy4vbW9kdWxlcy9MYldpZGdldCc7XG5cbmlmIChwcm9jZXNzLmVudi5JTkxJTkVfQ1NTKSB7XG4gIHJlcXVpcmUoJy4uL3Njc3MvJyArIHByb2Nlc3MuZW52LlRIRU1FICsgJy9zdHlsZS5zY3NzJyk7XG59XG5cbihmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93Ll9DTExCVjNPcHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93Ll9DTExCVjNPcHQgPSB7XG4gICAgICBhdXRvU3RhcnQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygd2luZG93Ll9jbExlYWRlckJvYXJkVjMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93Ll9jbExlYWRlckJvYXJkVjMgPSBuZXcgTGJXaWRnZXQod2luZG93Ll9DTExCVjNPcHQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUud2Fybignd2luZG93Ll9jbExlYWRlckJvYXJkVjMgaXMgYWxyZWFkeSBkZWZpbmVkLCB3aWRnZXQgaXMgY29uZmlndXJlZCB0byBydW4gYXMgYSBzaW5nbGUgaW5zdGFuY2UnKTtcbiAgfVxufSkoKTtcbiIsImltcG9ydCBjTGFicyBmcm9tICcuL2NMYWJzJztcbmltcG9ydCBzaXplb2YgZnJvbSAnLi4vdXRpbHMvc2l6ZW9mJztcblxuLyoqXG4gKiBBamF4IG1ldGhvZFxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jTGFicy5BamF4ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufTtcblxuY0xhYnMuQWpheC5wcm90b3R5cGUuY3JlYXRlQ09SU1JlcXVlc3QgPSBmdW5jdGlvbiAobWV0aG9kLCB1cmwpIHtcbiAgdmFyIG9iaiA9IHRoaXM7XG5cbiAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIG9iai54aHIpIHtcbiAgICAvLyBNb3N0IGJyb3dzZXJzLlxuICAgIG9iai54aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIElFOCAmIElFOVxuICAgIC8qIGVzbGludCBuby11bmRlZjogXCJvZmZcIiAqL1xuICAgIG9iai54aHIgPSBuZXcgWERvbWFpblJlcXVlc3QoKTtcblxuICAgIHVybCA9ICh1cmwuaW5kZXhPZignaHR0cHMnKSA+IC0xICYmIGxvY2F0aW9uLnByb3RvY29sICE9PSAnaHR0cHM6JykgPyB1cmwucmVwbGFjZSgnaHR0cHMnLCAnaHR0cCcpIDogdXJsO1xuXG4gICAgb2JqLnhoci5vcGVuKG1ldGhvZCwgdXJsKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDT1JTIG5vdCBzdXBwb3J0ZWQuXG4gICAgb2JqLnhociA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIG9iai54aHI7XG59O1xuXG4vKipcbiAqIEFib3J0IHRoZSByZXF1ZXN0IGlmIGl0IGhhcyBhbHJlYWR5IGJlZW4gc2VudFxuICpcbiAqIEBtZW1iZXJPZiBjTGFicy5BamF4XG4gKiBAbWV0aG9kIGFib3J0XG4gKiBAcmV0dXJuIHsgT2JqZWN0IH0gY0xhYnMuQWpheFxuICovXG5jTGFicy5BamF4LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAoX3RoaXMueGhyICYmIHR5cGVvZiBfdGhpcy54aHIucmVhZHlTdGF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgX3RoaXMueGhyLnJlYWR5U3RhdGUgIT09IDQgJiYgX3RoaXMueGhyLnJlYWR5U3RhdGUgPiAwKSB7XG4gICAgLy8gY29uc29sZS5lcnJvcihcImFib3J0aW5nIEFqYXhcIiwgX3RoaXMueGhyLnJlYWR5U3RhdGUsIF90aGlzLnhocik7XG4gICAgX3RoaXMueGhyLmFib3J0KCk7XG4gIH1cblxuICByZXR1cm4gX3RoaXM7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlcyBkYXRhIGZyb20gYSBVUkwgd2l0aG91dCBwYWdlIHJlZnJlc2hcbiAqXG4gKiBAbWVtYmVyT2YgY0xhYnMuQWpheFxuICogQG1ldGhvZCBnZXREYXRhXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlndXJhdGlvbiBvYmplY3RcbiAqICAtIG9iamVjdCBjb250YWluczogSFRUUCBtZXRob2QgXCJ0eXBlOiBQT1NULCBHRVRcIiwgdXJsOiB0byBzZW5kIHRoZSByZXF1ZXN0IHRvLCBkYXRhOiB7b2JqZWN0fVxuICogQHJldHVybiB7U3RyaW5nfSBpbiBzdWNjZXNzIG9iamVjdFxuICovXG5jTGFicy5BamF4LnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIG9iaiA9IHRoaXM7XG5cbiAgdHJ5IHtcbiAgICBkYXRhLnR5cGUgPSAoZGF0YS50eXBlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGRhdGEudHlwZSA9PT0gJ3N0cmluZycgJiYgZGF0YS50eXBlLmxlbmd0aCA+IDApID8gZGF0YS50eXBlIDogJ1BPU1QnO1xuICAgIGRhdGEuZGF0YSA9IChkYXRhLmRhdGEgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZGF0YS5kYXRhID09PSAnb2JqZWN0JykgPyBkYXRhLmRhdGEgOiB7fTtcbiAgICBkYXRhLnVybCA9IChkYXRhLnVybCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBkYXRhLnVybCA9PT0gJ3N0cmluZycgJiYgZGF0YS51cmwubGVuZ3RoID4gMCkgPyBkYXRhLnVybCA6ICcnO1xuICAgIGRhdGEuc3VjY2VzcyA9IChkYXRhLnN1Y2Nlc3MgIT09IHVuZGVmaW5lZCkgPyBkYXRhLnN1Y2Nlc3MgOiBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICBkYXRhLmVycm9yID0gKGRhdGEuZXJyb3IgIT09IHVuZGVmaW5lZCkgPyBkYXRhLmVycm9yIDogZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgZGF0YS5oZWFkZXJzID0gKGRhdGEuaGVhZGVycyAhPT0gdW5kZWZpbmVkKSA/IGRhdGEuaGVhZGVycyA6IHt9O1xuICAgIGRhdGEuZXh0cmFDYWxsYmFjayA9IChkYXRhLmV4dHJhQ2FsbGJhY2sgIT09IHVuZGVmaW5lZCkgPyBkYXRhLmV4dHJhQ2FsbGJhY2sgOiBmdW5jdGlvbiAoKSB7XG4gICAgfTtcblxuICAgIC8vIGNyb3NzIGJyb3dzZXIgQ09SUyBzdXBwb3J0XG4gICAgb2JqLnhociA9IHRoaXMuY3JlYXRlQ09SU1JlcXVlc3QoZGF0YS50eXBlLCBkYXRhLnVybCk7XG5cbiAgICBvYmoueGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRhdGEuZXh0cmFDYWxsYmFjayhkYXRhLCBvYmoueGhyKTtcbiAgICAgIGRhdGEuc3VjY2VzcyhvYmoueGhyLnJlc3BvbnNlVGV4dCwgZGF0YSwgb2JqLnhocik7XG4gICAgfTtcblxuICAgIG9iai54aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRhdGEuZXJyb3Iob2JqLnhoci5zdGF0dXMpO1xuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHNpemVvZihkYXRhLmhlYWRlcnMpID4gMCkge1xuICAgICAgICB2YXIgaXRlbTtcbiAgICAgICAgZm9yIChpdGVtIGluIGRhdGEuaGVhZGVycykge1xuICAgICAgICAgIG9iai54aHIuc2V0UmVxdWVzdEhlYWRlcihpdGVtLCBkYXRhLmhlYWRlcnNbaXRlbV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKChkYXRhLnR5cGUgPT09ICdQT1NUJyB8fCBkYXRhLnR5cGUgPT09ICdQVVQnKSAmJiBzaXplb2YoZGF0YS5oZWFkZXJzKSA9PT0gMCkge1xuICAgICAgICBvYmoueGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmoueGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L3BsYWluJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgb2JqLnhoci5zZW5kKEpTT04uc3RyaW5naWZ5KGRhdGEuZGF0YSkpO1xuXG4gICAgcmV0dXJuIG9iai54aHI7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gIH1cbn07XG4iLCJpbXBvcnQgbWVyZ2VPYmplY3RzIGZyb20gJy4uL3V0aWxzL21lcmdlT2JqZWN0cyc7XG5pbXBvcnQgcXVlcnkgZnJvbSAnLi4vdXRpbHMvcXVlcnknO1xuXG4vLyB0YWtlbiByZWZlcmVuY2UgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80ODIzNDY5Ni9ob3ctdG8tcHV0LWEtZ2lmLXdpdGgtY2FudmFzLzQ4MzQ4NTY3I2Fuc3dlci00ODM0ODU2N1xuY29uc3QgR0lGID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGltZXJJRDsgLy8gdGltZXIgaGFuZGxlIGZvciBzZXQgdGltZSBvdXQgdXNhZ2VcbiAgdmFyIHN0OyAvLyBob2xkcyB0aGUgc3RyZWFtIG9iamVjdCB3aGVuIGxvYWRpbmcuXG4gIHZhciBpbnRlcmxhY2VPZmZzZXRzID0gWzAsIDQsIDIsIDFdOyAvLyB1c2VkIGluIGRlLWludGVybGFjaW5nLlxuICB2YXIgaW50ZXJsYWNlU3RlcHMgPSBbOCwgOCwgNCwgMl07XG4gIHZhciBpbnRlcmxhY2VkQnVmU2l6ZTsgLy8gdGhpcyBob2xkcyBhIGJ1ZmZlciB0byBkZSBpbnRlcmxhY2UuIENyZWF0ZWQgb24gdGhlIGZpcnN0IGZyYW1lIGFuZCB3aGVuIHNpemUgY2hhbmdlZFxuICB2YXIgZGVpbnRlcmxhY2VCdWY7XG4gIHZhciBwaXhlbEJ1ZlNpemU7IC8vIHRoaXMgaG9sZHMgYSBidWZmZXIgZm9yIHBpeGVscy4gQ3JlYXRlZCBvbiB0aGUgZmlyc3QgZnJhbWUgYW5kIHdoZW4gc2l6ZSBjaGFuZ2VkXG4gIHZhciBwaXhlbEJ1ZjtcbiAgY29uc3QgR0lGX0ZJTEUgPSB7IC8vIGdpZiBmaWxlIGRhdGEgaGVhZGVyc1xuICAgIEdDRXh0OiAweEY5LFxuICAgIENPTU1FTlQ6IDB4RkUsXG4gICAgQVBQRXh0OiAweEZGLFxuICAgIFVOS05PV046IDB4MDEsIC8vIG5vdCBzdXJlIHdoYXQgdGhpcyBpcyBidXQgbmVlZCB0byBza2lwIGl0IGluIHBhcnNlclxuICAgIElNQUdFOiAweDJDLFxuICAgIEVPRjogNTksIC8vIFRoaXMgaXMgZW50ZXJlZCBhcyBkZWNpbWFsXG4gICAgRVhUOiAweDIxXG4gIH07XG5cbiAgLy8gc2ltcGxlIGJ1ZmZlcmVkIHN0cmVhbSB1c2VkIHRvIHJlYWQgZnJvbSB0aGUgZmlsZVxuICB2YXIgU3RyZWFtID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoZGF0YSk7XG4gICAgdGhpcy5wb3MgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIHRoaXMuZ2V0U3RyaW5nID0gZnVuY3Rpb24gKGNvdW50KSB7IC8vIHJldHVybnMgYSBzdHJpbmcgZnJvbSBjdXJyZW50IHBvcyBvZiBsZW4gY291bnRcbiAgICAgIHZhciBzID0gJyc7XG4gICAgICB3aGlsZSAoY291bnQtLSkge1xuICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5kYXRhW3RoaXMucG9zKytdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzO1xuICAgIH07XG5cbiAgICB0aGlzLnJlYWRTdWJCbG9ja3MgPSBmdW5jdGlvbiAoKSB7IC8vIHJlYWRzIGEgc2V0IG9mIGJsb2NrcyBhcyBhIHN0cmluZ1xuICAgICAgdmFyIHNpemU7XG4gICAgICB2YXIgY291bnQ7XG4gICAgICB2YXIgZGF0YSA9ICcnO1xuICAgICAgZG8ge1xuICAgICAgICBjb3VudCA9IHNpemUgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK107XG4gICAgICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICAgICAgZGF0YSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMuZGF0YVt0aGlzLnBvcysrXSk7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKHNpemUgIT09IDAgJiYgdGhpcy5wb3MgPCBsZW4pO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfTtcblxuICAgIHRoaXMucmVhZFN1YkJsb2Nrc0IgPSBmdW5jdGlvbiAoKSB7IC8vIHJlYWRzIGEgc2V0IG9mIGJsb2NrcyBhcyBiaW5hcnlcbiAgICAgIHZhciBzaXplO1xuICAgICAgdmFyIGNvdW50O1xuICAgICAgdmFyIGRhdGEgPSBbXTtcbiAgICAgIGRvIHtcbiAgICAgICAgY291bnQgPSBzaXplID0gdGhpcy5kYXRhW3RoaXMucG9zKytdO1xuICAgICAgICB3aGlsZSAoY291bnQtLSkge1xuICAgICAgICAgIGRhdGEucHVzaCh0aGlzLmRhdGFbdGhpcy5wb3MrK10pO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChzaXplICE9PSAwICYmIHRoaXMucG9zIDwgbGVuKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH07XG4gIH07XG5cbiAgLy8gTFpXIGRlY29kZXIgdW5jb21wcmVzc2VkIGVhY2ggZnJhbWVzIHBpeGVsc1xuICAvLyB0aGlzIG5lZWRzIHRvIGJlIG9wdGltaXNlZC5cbiAgLy8gbWluU2l6ZSBpcyB0aGUgbWluIGRpY3Rpb25hcnkgYXMgcG93ZXJzIG9mIHR3b1xuICAvLyBzaXplIGFuZCBkYXRhIGlzIHRoZSBjb21wcmVzc2VkIHBpeGVsc1xuICBmdW5jdGlvbiBsendEZWNvZGUgKG1pblNpemUsIGRhdGEpIHtcbiAgICB2YXIgaSwgcGl4ZWxQb3MsIHBvcywgY2xlYXIsIGVvZCwgc2l6ZSwgZG9uZSwgZGljLCBjb2RlLCBsYXN0LCBkLCBsZW47XG4gICAgcG9zID0gcGl4ZWxQb3MgPSAwO1xuICAgIGRpYyA9IFtdO1xuICAgIGNsZWFyID0gMSA8PCBtaW5TaXplO1xuICAgIGVvZCA9IGNsZWFyICsgMTtcbiAgICBzaXplID0gbWluU2l6ZSArIDE7XG4gICAgZG9uZSA9IGZhbHNlO1xuICAgIHdoaWxlICghZG9uZSkgeyAvLyBKYXZhU2NyaXB0IG9wdGltaXNlcnMgbGlrZSBhIGNsZWFyIGV4aXQgdGhvdWdoIEkgbmV2ZXIgdXNlICdkb25lJyBhcGFydCBmcm9tIGZvb2xpbmcgdGhlIG9wdGltaXNlclxuICAgICAgbGFzdCA9IGNvZGU7XG4gICAgICBjb2RlID0gMDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgaWYgKGRhdGFbcG9zID4+IDNdICYgKDEgPDwgKHBvcyAmIDcpKSkge1xuICAgICAgICAgIGNvZGUgfD0gMSA8PCBpO1xuICAgICAgICB9XG4gICAgICAgIHBvcysrO1xuICAgICAgfVxuICAgICAgaWYgKGNvZGUgPT09IGNsZWFyKSB7IC8vIGNsZWFyIGFuZCByZXNldCB0aGUgZGljdGlvbmFyeVxuICAgICAgICBkaWMgPSBbXTtcbiAgICAgICAgc2l6ZSA9IG1pblNpemUgKyAxO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2xlYXI7IGkrKykge1xuICAgICAgICAgIGRpY1tpXSA9IFtpXTtcbiAgICAgICAgfVxuICAgICAgICBkaWNbY2xlYXJdID0gW107XG4gICAgICAgIGRpY1tlb2RdID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb2RlID09PSBlb2QpIHtcbiAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGUgPj0gZGljLmxlbmd0aCkge1xuICAgICAgICAgIGRpYy5wdXNoKGRpY1tsYXN0XS5jb25jYXQoZGljW2xhc3RdWzBdKSk7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdCAhPT0gY2xlYXIpIHtcbiAgICAgICAgICBkaWMucHVzaChkaWNbbGFzdF0uY29uY2F0KGRpY1tjb2RlXVswXSkpO1xuICAgICAgICB9XG4gICAgICAgIGQgPSBkaWNbY29kZV07XG4gICAgICAgIGxlbiA9IGQubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBwaXhlbEJ1ZltwaXhlbFBvcysrXSA9IGRbaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpYy5sZW5ndGggPT09ICgxIDw8IHNpemUpICYmIHNpemUgPCAxMikge1xuICAgICAgICAgIHNpemUrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQ29sb3VyVGFibGUgKGNvdW50KSB7IC8vIGdldCBhIGNvbG91ciB0YWJsZSBvZiBsZW5ndGggY291bnQgIEVhY2ggZW50cnkgaXMgMyBieXRlcywgZm9yIFJHQi5cbiAgICB2YXIgY29sb3VycyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgY29sb3Vycy5wdXNoKFtzdC5kYXRhW3N0LnBvcysrXSwgc3QuZGF0YVtzdC5wb3MrK10sIHN0LmRhdGFbc3QucG9zKytdXSk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvdXJzO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2UgKCkgeyAvLyByZWFkIHRoZSBoZWFkZXIuIFRoaXMgaXMgdGhlIHN0YXJ0aW5nIHBvaW50IG9mIHRoZSBkZWNvZGUgYW5kIGFzeW5jIGNhbGxzIHBhcnNlQmxvY2tcbiAgICB2YXIgYml0RmllbGQ7XG4gICAgc3QucG9zICs9IDY7XG4gICAgZ2lmLndpZHRoID0gKHN0LmRhdGFbc3QucG9zKytdKSArICgoc3QuZGF0YVtzdC5wb3MrK10pIDw8IDgpO1xuICAgIGdpZi5oZWlnaHQgPSAoc3QuZGF0YVtzdC5wb3MrK10pICsgKChzdC5kYXRhW3N0LnBvcysrXSkgPDwgOCk7XG4gICAgYml0RmllbGQgPSBzdC5kYXRhW3N0LnBvcysrXTtcbiAgICBnaWYuY29sb3JSZXMgPSAoYml0RmllbGQgJiAwYjExMTAwMDApID4+IDQ7XG4gICAgZ2lmLmdsb2JhbENvbG91ckNvdW50ID0gMSA8PCAoKGJpdEZpZWxkICYgMGIxMTEpICsgMSk7XG4gICAgZ2lmLmJnQ29sb3VySW5kZXggPSBzdC5kYXRhW3N0LnBvcysrXTtcbiAgICBzdC5wb3MrKzsgLy8gaWdub3JpbmcgcGl4ZWwgYXNwZWN0IHJhdGlvLiBpZiBub3QgMCwgYXNwZWN0UmF0aW8gPSAocGl4ZWxBc3BlY3RSYXRpbyArIDE1KSAvIDY0XG4gICAgaWYgKGJpdEZpZWxkICYgMGIxMDAwMDAwMCkge1xuICAgICAgZ2lmLmdsb2JhbENvbG91clRhYmxlID0gcGFyc2VDb2xvdXJUYWJsZShnaWYuZ2xvYmFsQ29sb3VyQ291bnQpO1xuICAgIH0gLy8gZ2xvYmFsIGNvbG91ciBmbGFnXG4gICAgc2V0VGltZW91dChwYXJzZUJsb2NrLCAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQXBwRXh0ICgpIHsgLy8gZ2V0IGFwcGxpY2F0aW9uIHNwZWNpZmljIGRhdGEuIE5ldHNjYXBlIGFkZGVkIGl0ZXJhdGlvbnMgYW5kIHRlcm1pbmF0b3IuIElnbm9yaW5nIHRoYXRcbiAgICBzdC5wb3MgKz0gMTtcbiAgICBpZiAoc3QuZ2V0U3RyaW5nKDgpID09PSAnTkVUU0NBUEUnKSB7XG4gICAgICBzdC5wb3MgKz0gODtcbiAgICB9IGVsc2UgeyAvLyBpZ25vcmluZyB0aGlzIGRhdGEuIGl0ZXJhdGlvbnMgKHdvcmQpIGFuZCB0ZXJtaW5hdG9yIChieXRlKVxuICAgICAgc3QucG9zICs9IDM7IC8vIDMgYnl0ZXMgb2Ygc3RyaW5nIHVzdWFsbHkgXCIyLjBcIiB3aGVuIGlkZW50aWZpZXIgaXMgTkVUU0NBUEVcbiAgICAgIHN0LnJlYWRTdWJCbG9ja3MoKTsgLy8gdW5rbm93biBhcHAgZXh0ZW5zaW9uXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VHQ0V4dCAoKSB7IC8vIGdldCBHQyBkYXRhXG4gICAgdmFyIGJpdEZpZWxkO1xuICAgIHN0LnBvcysrO1xuICAgIGJpdEZpZWxkID0gc3QuZGF0YVtzdC5wb3MrK107XG4gICAgZ2lmLmRpc3Bvc2FsTWV0aG9kID0gKGJpdEZpZWxkICYgMGIxMTEwMCkgPj4gMjtcbiAgICBnaWYudHJhbnNwYXJlbmN5R2l2ZW4gPSAhIShiaXRGaWVsZCAmIDBiMSk7IC8vIGlnbm9yaW5nIGJpdCB0d28gdGhhdCBpcyBtYXJrZWQgYXMgIHVzZXJJbnB1dD8/P1xuICAgIGdpZi5kZWxheVRpbWUgPSAoc3QuZGF0YVtzdC5wb3MrK10pICsgKChzdC5kYXRhW3N0LnBvcysrXSkgPDwgOCk7XG4gICAgZ2lmLnRyYW5zcGFyZW5jeUluZGV4ID0gc3QuZGF0YVtzdC5wb3MrK107XG4gICAgc3QucG9zKys7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUltZyAoKSB7IC8vIGRlY29kZXMgaW1hZ2UgZGF0YSB0byBjcmVhdGUgdGhlIGluZGV4ZWQgcGl4ZWwgaW1hZ2VcbiAgICB2YXIgZGVpbnRlcmxhY2U7XG4gICAgdmFyIGZyYW1lO1xuICAgIHZhciBiaXRGaWVsZDtcblxuICAgIGRlaW50ZXJsYWNlID0gZnVuY3Rpb24gKHdpZHRoKSB7IC8vIGRlIGludGVybGFjZSBwaXhlbCBkYXRhIGlmIG5lZWRlZFxuICAgICAgdmFyIGxpbmVzLCBmcm9tTGluZSwgcGFzcywgdG9MaW5lO1xuICAgICAgbGluZXMgPSBwaXhlbEJ1ZlNpemUgLyB3aWR0aDtcbiAgICAgIGZyb21MaW5lID0gMDtcbiAgICAgIGlmIChpbnRlcmxhY2VkQnVmU2l6ZSAhPT0gcGl4ZWxCdWZTaXplKSB7IC8vIGNyZWF0ZSB0aGUgYnVmZmVyIGlmIHNpemUgY2hhbmdlZCBvciB1bmRlZmluZWQuXG4gICAgICAgIGRlaW50ZXJsYWNlQnVmID0gbmV3IFVpbnQ4QXJyYXkocGl4ZWxCdWZTaXplKTtcbiAgICAgICAgaW50ZXJsYWNlZEJ1ZlNpemUgPSBwaXhlbEJ1ZlNpemU7XG4gICAgICB9XG4gICAgICBmb3IgKHBhc3MgPSAwOyBwYXNzIDwgNDsgcGFzcysrKSB7XG4gICAgICAgIGZvciAodG9MaW5lID0gaW50ZXJsYWNlT2Zmc2V0c1twYXNzXTsgdG9MaW5lIDwgbGluZXM7IHRvTGluZSArPSBpbnRlcmxhY2VTdGVwc1twYXNzXSkge1xuICAgICAgICAgIGRlaW50ZXJsYWNlQnVmLnNldChwaXhlbEJ1Zi5zdWJBcnJheShmcm9tTGluZSwgZnJvbUxpbmUgKyB3aWR0aCksIHRvTGluZSAqIHdpZHRoKTtcbiAgICAgICAgICBmcm9tTGluZSArPSB3aWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgZnJhbWUgPSB7fTtcbiAgICBnaWYuZnJhbWVzLnB1c2goZnJhbWUpO1xuICAgIGZyYW1lLmRpc3Bvc2FsTWV0aG9kID0gZ2lmLmRpc3Bvc2FsTWV0aG9kO1xuICAgIGZyYW1lLnRpbWUgPSBnaWYubGVuZ3RoO1xuICAgIGZyYW1lLmRlbGF5ID0gZ2lmLmRlbGF5VGltZSAqIDEwO1xuICAgIGdpZi5sZW5ndGggKz0gZnJhbWUuZGVsYXk7XG4gICAgaWYgKGdpZi50cmFuc3BhcmVuY3lHaXZlbikge1xuICAgICAgZnJhbWUudHJhbnNwYXJlbmN5SW5kZXggPSBnaWYudHJhbnNwYXJlbmN5SW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyYW1lLnRyYW5zcGFyZW5jeUluZGV4ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmcmFtZS5sZWZ0UG9zID0gKHN0LmRhdGFbc3QucG9zKytdKSArICgoc3QuZGF0YVtzdC5wb3MrK10pIDw8IDgpO1xuICAgIGZyYW1lLnRvcFBvcyA9IChzdC5kYXRhW3N0LnBvcysrXSkgKyAoKHN0LmRhdGFbc3QucG9zKytdKSA8PCA4KTtcbiAgICBmcmFtZS53aWR0aCA9IChzdC5kYXRhW3N0LnBvcysrXSkgKyAoKHN0LmRhdGFbc3QucG9zKytdKSA8PCA4KTtcbiAgICBmcmFtZS5oZWlnaHQgPSAoc3QuZGF0YVtzdC5wb3MrK10pICsgKChzdC5kYXRhW3N0LnBvcysrXSkgPDwgOCk7XG4gICAgYml0RmllbGQgPSBzdC5kYXRhW3N0LnBvcysrXTtcbiAgICBmcmFtZS5sb2NhbENvbG91clRhYmxlRmxhZyA9ICEhKGJpdEZpZWxkICYgMGIxMDAwMDAwMCk7XG4gICAgaWYgKGZyYW1lLmxvY2FsQ29sb3VyVGFibGVGbGFnKSB7XG4gICAgICBmcmFtZS5sb2NhbENvbG91clRhYmxlID0gcGFyc2VDb2xvdXJUYWJsZSgxIDw8ICgoYml0RmllbGQgJiAwYjExMSkgKyAxKSk7XG4gICAgfVxuICAgIGlmIChwaXhlbEJ1ZlNpemUgIT09IGZyYW1lLndpZHRoICogZnJhbWUuaGVpZ2h0KSB7IC8vIGNyZWF0ZSBhIHBpeGVsIGJ1ZmZlciBpZiBub3QgeWV0IGNyZWF0ZWQgb3IgaWYgY3VycmVudCBmcmFtZSBzaXplIGlzIGRpZmZlcmVudCBmcm9tIHByZXZpb3VzXG4gICAgICBwaXhlbEJ1ZiA9IG5ldyBVaW50OEFycmF5KGZyYW1lLndpZHRoICogZnJhbWUuaGVpZ2h0KTtcbiAgICAgIHBpeGVsQnVmU2l6ZSA9IGZyYW1lLndpZHRoICogZnJhbWUuaGVpZ2h0O1xuICAgIH1cbiAgICBsendEZWNvZGUoc3QuZGF0YVtzdC5wb3MrK10sIHN0LnJlYWRTdWJCbG9ja3NCKCkpOyAvLyBkZWNvZGUgdGhlIHBpeGVsc1xuICAgIGlmIChiaXRGaWVsZCAmIDBiMTAwMDAwMCkgeyAvLyBkZSBpbnRlcmxhY2UgaWYgbmVlZGVkXG4gICAgICBmcmFtZS5pbnRlcmxhY2VkID0gdHJ1ZTtcbiAgICAgIGRlaW50ZXJsYWNlKGZyYW1lLndpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJhbWUuaW50ZXJsYWNlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBwcm9jZXNzRnJhbWUoZnJhbWUpOyAvLyBjb252ZXJ0IHRvIGNhbnZhcyBpbWFnZVxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0ZyYW1lIChmcmFtZSkgeyAvLyBjcmVhdGVzIGEgUkdCQSBjYW52YXMgaW1hZ2UgZnJvbSB0aGUgaW5kZXhlZCBwaXhlbCBkYXRhLlxuICAgIHZhciBjdDtcbiAgICB2YXIgY0RhdGE7XG4gICAgdmFyIGRhdDtcbiAgICB2YXIgcGl4Q291bnQ7XG4gICAgdmFyIGluZDtcbiAgICB2YXIgdXNlVDtcbiAgICB2YXIgaTtcbiAgICB2YXIgcGl4ZWw7XG4gICAgdmFyIHBEYXQ7XG4gICAgdmFyIGNvbDtcbiAgICAvLyB2YXIgZnJhbWU7XG4gICAgdmFyIHRpO1xuXG4gICAgZnJhbWUuaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBmcmFtZS5pbWFnZS53aWR0aCA9IGdpZi53aWR0aDtcbiAgICBmcmFtZS5pbWFnZS5oZWlnaHQgPSBnaWYuaGVpZ2h0O1xuICAgIGZyYW1lLmltYWdlLmN0eCA9IGZyYW1lLmltYWdlLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3QgPSBmcmFtZS5sb2NhbENvbG91clRhYmxlRmxhZyA/IGZyYW1lLmxvY2FsQ29sb3VyVGFibGUgOiBnaWYuZ2xvYmFsQ29sb3VyVGFibGU7XG4gICAgaWYgKGdpZi5sYXN0RnJhbWUgPT09IG51bGwpIHtcbiAgICAgIGdpZi5sYXN0RnJhbWUgPSBmcmFtZTtcbiAgICB9XG4gICAgdXNlVCA9IChnaWYubGFzdEZyYW1lLmRpc3Bvc2FsTWV0aG9kID09PSAyIHx8IGdpZi5sYXN0RnJhbWUuZGlzcG9zYWxNZXRob2QgPT09IDMpO1xuICAgIGlmICghdXNlVCkge1xuICAgICAgZnJhbWUuaW1hZ2UuY3R4LmRyYXdJbWFnZShnaWYubGFzdEZyYW1lLmltYWdlLCAwLCAwLCBnaWYud2lkdGgsIGdpZi5oZWlnaHQpO1xuICAgIH1cbiAgICBjRGF0YSA9IGZyYW1lLmltYWdlLmN0eC5nZXRJbWFnZURhdGEoZnJhbWUubGVmdFBvcywgZnJhbWUudG9wUG9zLCBmcmFtZS53aWR0aCwgZnJhbWUuaGVpZ2h0KTtcbiAgICB0aSA9IGZyYW1lLnRyYW5zcGFyZW5jeUluZGV4O1xuICAgIGRhdCA9IGNEYXRhLmRhdGE7XG4gICAgaWYgKGZyYW1lLmludGVybGFjZWQpIHtcbiAgICAgIHBEYXQgPSBkZWludGVybGFjZUJ1ZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcERhdCA9IHBpeGVsQnVmO1xuICAgIH1cbiAgICBwaXhDb3VudCA9IHBEYXQubGVuZ3RoO1xuICAgIGluZCA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHBpeENvdW50OyBpKyspIHtcbiAgICAgIHBpeGVsID0gcERhdFtpXTtcbiAgICAgIGNvbCA9IGN0W3BpeGVsXTtcbiAgICAgIGlmICh0aSAhPT0gcGl4ZWwpIHtcbiAgICAgICAgZGF0W2luZCsrXSA9IGNvbFswXTtcbiAgICAgICAgZGF0W2luZCsrXSA9IGNvbFsxXTtcbiAgICAgICAgZGF0W2luZCsrXSA9IGNvbFsyXTtcbiAgICAgICAgZGF0W2luZCsrXSA9IDI1NTsgLy8gT3BhcXVlLlxuICAgICAgfSBlbHNlIGlmICh1c2VUKSB7XG4gICAgICAgIGRhdFtpbmQgKyAzXSA9IDA7IC8vIFRyYW5zcGFyZW50LlxuICAgICAgICBpbmQgKz0gNDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZCArPSA0O1xuICAgICAgfVxuICAgIH1cbiAgICBmcmFtZS5pbWFnZS5jdHgucHV0SW1hZ2VEYXRhKGNEYXRhLCBmcmFtZS5sZWZ0UG9zLCBmcmFtZS50b3BQb3MpO1xuICAgIGdpZi5sYXN0RnJhbWUgPSBmcmFtZTtcbiAgICBpZiAoIWdpZi53YWl0VGlsbERvbmUgJiYgdHlwZW9mIGdpZi5vbmxvYWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRvT25sb2FkRXZlbnQoKTtcbiAgICB9Ly8gaWYgIXdhaXRUaWxsRG9uZSB0aGUgY2FsbCBvbmxvYWQgbm93IGFmdGVyIGZpcnN0IGZyYW1lIGlzIGxvYWRlZFxuICB9O1xuXG4gIGZ1bmN0aW9uIGZpbm5pc2hlZCAoKSB7IC8vIGNhbGxlZCB3aGVuIHRoZSBsb2FkIGhhcyBjb21wbGV0ZWRcbiAgICBnaWYubG9hZGluZyA9IGZhbHNlO1xuICAgIGdpZi5mcmFtZUNvdW50ID0gZ2lmLmZyYW1lcy5sZW5ndGg7XG4gICAgc3QgPSB1bmRlZmluZWQ7XG4gICAgZ2lmLmNvbXBsZXRlID0gdHJ1ZTtcbiAgICBnaWYuZGlzcG9zYWxNZXRob2QgPSB1bmRlZmluZWQ7XG4gICAgZ2lmLnRyYW5zcGFyZW5jeUdpdmVuID0gdW5kZWZpbmVkO1xuICAgIGdpZi5kZWxheVRpbWUgPSB1bmRlZmluZWQ7XG4gICAgZ2lmLnRyYW5zcGFyZW5jeUluZGV4ID0gdW5kZWZpbmVkO1xuICAgIGdpZi53YWl0VGlsbERvbmUgPSB1bmRlZmluZWQ7XG4gICAgcGl4ZWxCdWYgPSB1bmRlZmluZWQ7IC8vIGRlcmVmZXJlbmNlIHBpeGVsIGJ1ZmZlclxuICAgIGRlaW50ZXJsYWNlQnVmID0gdW5kZWZpbmVkOyAvLyBkZXJlZmVyZW5jZSBpbnRlcmxhY2UgYnVmZiAobWF5IG9yIG1heSBub3QgYmUgdXNlZCk7XG4gICAgcGl4ZWxCdWZTaXplID0gdW5kZWZpbmVkO1xuICAgIGRlaW50ZXJsYWNlQnVmID0gdW5kZWZpbmVkO1xuICAgIGdpZi5jdXJyZW50RnJhbWUgPSAwO1xuICAgIGlmIChnaWYuZnJhbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGdpZi5pbWFnZSA9IGdpZi5mcmFtZXNbMF0uaW1hZ2U7XG4gICAgfVxuICAgIGRvT25sb2FkRXZlbnQoKTtcbiAgICBpZiAodHlwZW9mIGdpZi5vbmxvYWRhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIChnaWYub25sb2FkYWxsLmJpbmQoZ2lmKSkoe1xuICAgICAgICB0eXBlOiAnbG9hZGFsbCcsXG4gICAgICAgIHBhdGg6IFtnaWZdXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGdpZi5wbGF5T25Mb2FkKSB7XG4gICAgICBnaWYucGxheSgpO1xuICAgIH1cbiAgICBnaWYuZmluaXNoZWQoZ2lmLCBnaWYubGFzdEZyYW1lKTtcbiAgICAvLyBnaWYubGFzdEZyYW1lID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbGVkICgpIHsgLy8gY2FsbGVkIGlmIHRoZSBsb2FkIGhhcyBiZWVuIGNhbmNlbGxlZFxuICAgIGZpbm5pc2hlZCgpO1xuICAgIGlmICh0eXBlb2YgZ2lmLmNhbmNlbENhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAoZ2lmLmNhbmNlbENhbGxiYWNrLmJpbmQoZ2lmKSkoe1xuICAgICAgICB0eXBlOiAnY2FuY2VsZWQnLFxuICAgICAgICBwYXRoOiBbZ2lmXVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VFeHQgKCkgeyAvLyBwYXJzZSBleHRlbmRlZCBibG9ja3NcbiAgICBjb25zdCBibG9ja0lEID0gc3QuZGF0YVtzdC5wb3MrK107XG4gICAgaWYgKGJsb2NrSUQgPT09IEdJRl9GSUxFLkdDRXh0KSB7XG4gICAgICBwYXJzZUdDRXh0KCk7XG4gICAgfSBlbHNlIGlmIChibG9ja0lEID09PSBHSUZfRklMRS5DT01NRU5UKSB7XG4gICAgICBnaWYuY29tbWVudCArPSBzdC5yZWFkU3ViQmxvY2tzKCk7XG4gICAgfSBlbHNlIGlmIChibG9ja0lEID09PSBHSUZfRklMRS5BUFBFeHQpIHtcbiAgICAgIHBhcnNlQXBwRXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChibG9ja0lEID09PSBHSUZfRklMRS5VTktOT1dOKSB7XG4gICAgICAgIHN0LnBvcyArPSAxMztcbiAgICAgIH0gLy8gc2tpcCB1bmtub3cgYmxvY2tcbiAgICAgIHN0LnJlYWRTdWJCbG9ja3MoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUJsb2NrICgpIHsgLy8gcGFyc2luZyB0aGUgYmxvY2tzXG4gICAgaWYgKGdpZi5jYW5jZWwgIT09IHVuZGVmaW5lZCAmJiBnaWYuY2FuY2VsID09PSB0cnVlKSB7XG4gICAgICBjYW5jZWxlZCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGJsb2NrSWQgPSBzdC5kYXRhW3N0LnBvcysrXTtcbiAgICBpZiAoYmxvY2tJZCA9PT0gR0lGX0ZJTEUuSU1BR0UpIHsgLy8gaW1hZ2UgYmxvY2tcbiAgICAgIHBhcnNlSW1nKCk7XG4gICAgICBpZiAoZ2lmLmZpcnN0RnJhbWVPbmx5KSB7XG4gICAgICAgIGZpbm5pc2hlZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChibG9ja0lkID09PSBHSUZfRklMRS5FT0YpIHtcbiAgICAgIGZpbm5pc2hlZCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZUV4dCgpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZ2lmLm9ucHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGdpZi5vbnByb2dyZXNzKHtcbiAgICAgICAgYnl0ZXNSZWFkOiBzdC5wb3MsXG4gICAgICAgIHRvdGFsQnl0ZXM6IHN0LmRhdGEubGVuZ3RoLFxuICAgICAgICBmcmFtZTogZ2lmLmZyYW1lcy5sZW5ndGhcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRUaW1lb3V0KHBhcnNlQmxvY2ssIDApOyAvLyBwYXJzaW5nIGZyYW1lIGFzeW5jIHNvIHByb2Nlc3NlcyBjYW4gZ2V0IHNvbWUgdGltZSBpbi5cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbExvYWQgKGNhbGxiYWNrKSB7IC8vIGNhbmNlbHMgdGhlIGxvYWRpbmcuIFRoaXMgd2lsbCBjYW5jZWwgdGhlIGxvYWQgYmVmb3JlIHRoZSBuZXh0IGZyYW1lIGlzIGRlY29kZWRcbiAgICBpZiAoZ2lmLmNvbXBsZXRlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGdpZi5jYW5jZWxDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIGdpZi5jYW5jZWwgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZXJyb3IgKHR5cGUpIHtcbiAgICBpZiAodHlwZW9mIGdpZi5vbmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAoZ2lmLm9uZXJyb3IuYmluZCh0aGlzKSkoe1xuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBwYXRoOiBbdGhpc11cbiAgICAgIH0pO1xuICAgIH1cbiAgICBnaWYub25sb2FkID0gZ2lmLm9uZXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgZ2lmLmxvYWRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvT25sb2FkRXZlbnQgKCkgeyAvLyBmaXJlIG9ubG9hZCBldmVudCBpZiBzZXRcbiAgICBnaWYuY3VycmVudEZyYW1lID0gMDtcbiAgICBnaWYubmV4dEZyYW1lQXQgPSBnaWYubGFzdEZyYW1lQXQgPSBuZXcgRGF0ZSgpLnZhbHVlT2YoKTsgLy8ganVzdCBzZXRzIHRoZSB0aW1lIG5vd1xuICAgIGlmICh0eXBlb2YgZ2lmLm9ubG9hZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgKGdpZi5vbmxvYWQuYmluZChnaWYpKSh7XG4gICAgICAgIHR5cGU6ICdsb2FkJyxcbiAgICAgICAgcGF0aDogW2dpZl1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBnaWYub25lcnJvciA9IGdpZi5vbmxvYWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBkYXRhTG9hZGVkIChkYXRhKSB7IC8vIERhdGEgbG9hZGVkIGNyZWF0ZSBzdHJlYW0gYW5kIHBhcnNlXG4gICAgc3QgPSBuZXcgU3RyZWFtKGRhdGEpO1xuICAgIHBhcnNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkR2lmIChmaWxlbmFtZSkgeyAvLyBzdGFydHMgdGhlIGxvYWRcbiAgICB2YXIgYWpheCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIGFqYXgucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICBhamF4Lm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS50YXJnZXQuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgZXJyb3IoJ0ZpbGUgbm90IGZvdW5kJyk7XG4gICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LnN0YXR1cyA+PSAyMDAgJiYgZS50YXJnZXQuc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgIGRhdGFMb2FkZWQoYWpheC5yZXNwb25zZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvcignTG9hZGluZyBlcnJvciA6ICcgKyBlLnRhcmdldC5zdGF0dXMpO1xuICAgICAgfVxuICAgIH07XG4gICAgYWpheC5vcGVuKCdHRVQnLCBmaWxlbmFtZSwgdHJ1ZSk7XG4gICAgYWpheC5zZW5kKCk7XG4gICAgYWpheC5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGVycm9yKCdGaWxlIGVycm9yJyk7XG4gICAgfTtcbiAgICB0aGlzLnNyYyA9IGZpbGVuYW1lO1xuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5ICgpIHsgLy8gc3RhcnRzIHBsYXkgaWYgcGF1c2VkXG4gICAgaWYgKCFnaWYucGxheWluZykge1xuICAgICAgZ2lmLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgZ2lmLnBsYXlpbmcgPSB0cnVlO1xuICAgICAgcGxheWluZygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdXNlICgpIHsgLy8gc3RvcHMgcGxheVxuICAgIGdpZi5wYXVzZWQgPSB0cnVlO1xuICAgIGdpZi5wbGF5aW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVySUQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlUGxheSAoKSB7XG4gICAgaWYgKGdpZi5wYXVzZWQgfHwgIWdpZi5wbGF5aW5nKSB7XG4gICAgICBnaWYucGxheSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnaWYucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZWVrRnJhbWUgKGZyYW1lKSB7IC8vIHNlZWtzIHRvIGZyYW1lIG51bWJlci5cbiAgICBjbGVhclRpbWVvdXQodGltZXJJRCk7XG4gICAgZ2lmLmN1cnJlbnRGcmFtZSA9IGZyYW1lICUgZ2lmLmZyYW1lcy5sZW5ndGg7XG4gICAgaWYgKGdpZi5wbGF5aW5nKSB7XG4gICAgICBwbGF5aW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdpZi5pbWFnZSA9IGdpZi5mcmFtZXNbZ2lmLmN1cnJlbnRGcmFtZV0uaW1hZ2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2VlayAodGltZSkgeyAvLyB0aW1lIGluIFNlY29uZHMgIC8vIHNlZWsgdG8gZnJhbWUgdGhhdCB3b3VsZCBiZSBkaXNwbGF5ZWQgYXQgdGltZVxuICAgIGNsZWFyVGltZW91dCh0aW1lcklEKTtcbiAgICBpZiAodGltZSA8IDApIHtcbiAgICAgIHRpbWUgPSAwO1xuICAgIH1cbiAgICB0aW1lICo9IDEwMDA7IC8vIGluIG1zXG4gICAgdGltZSAlPSBnaWYubGVuZ3RoO1xuICAgIHZhciBmcmFtZSA9IDA7XG4gICAgd2hpbGUgKHRpbWUgPiBnaWYuZnJhbWVzW2ZyYW1lXS50aW1lICsgZ2lmLmZyYW1lc1tmcmFtZV0uZGVsYXkgJiYgZnJhbWUgPCBnaWYuZnJhbWVzLmxlbmd0aCkge1xuICAgICAgZnJhbWUgKz0gMTtcbiAgICB9XG4gICAgZ2lmLmN1cnJlbnRGcmFtZSA9IGZyYW1lO1xuICAgIGlmIChnaWYucGxheWluZykge1xuICAgICAgcGxheWluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnaWYuaW1hZ2UgPSBnaWYuZnJhbWVzW2dpZi5jdXJyZW50RnJhbWVdLmltYWdlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXlpbmcgKCkge1xuICAgIHZhciBkZWxheTtcbiAgICB2YXIgZnJhbWU7XG4gICAgaWYgKGdpZi5wbGF5U3BlZWQgPT09IDApIHtcbiAgICAgIGdpZi5wYXVzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZ2lmLnBsYXlTcGVlZCA8IDApIHtcbiAgICAgICAgZ2lmLmN1cnJlbnRGcmFtZSAtPSAxO1xuICAgICAgICBpZiAoZ2lmLmN1cnJlbnRGcmFtZSA8IDApIHtcbiAgICAgICAgICBnaWYuY3VycmVudEZyYW1lID0gZ2lmLmZyYW1lcy5sZW5ndGggLSAxO1xuICAgICAgICB9XG4gICAgICAgIGZyYW1lID0gZ2lmLmN1cnJlbnRGcmFtZTtcbiAgICAgICAgZnJhbWUgLT0gMTtcbiAgICAgICAgaWYgKGZyYW1lIDwgMCkge1xuICAgICAgICAgIGZyYW1lID0gZ2lmLmZyYW1lcy5sZW5ndGggLSAxO1xuICAgICAgICB9XG4gICAgICAgIGRlbGF5ID0gLWdpZi5mcmFtZXNbZnJhbWVdLmRlbGF5ICogMSAvIGdpZi5wbGF5U3BlZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnaWYuY3VycmVudEZyYW1lICs9IDE7XG4gICAgICAgIGdpZi5jdXJyZW50RnJhbWUgJT0gZ2lmLmZyYW1lcy5sZW5ndGg7XG4gICAgICAgIGRlbGF5ID0gZ2lmLmZyYW1lc1tnaWYuY3VycmVudEZyYW1lXS5kZWxheSAqIDEgLyBnaWYucGxheVNwZWVkO1xuICAgICAgfVxuICAgICAgZ2lmLmltYWdlID0gZ2lmLmZyYW1lc1tnaWYuY3VycmVudEZyYW1lXS5pbWFnZTtcbiAgICAgIHRpbWVySUQgPSBzZXRUaW1lb3V0KHBsYXlpbmcsIGRlbGF5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgZ2lmID0geyAvLyB0aGUgZ2lmIGltYWdlIG9iamVjdFxuICAgIG9ubG9hZDogbnVsbCwgLy8gZmlyZSBvbiBsb2FkLiBVc2Ugd2FpdFRpbGxEb25lID0gdHJ1ZSB0byBoYXZlIGxvYWQgZmlyZSBhdCBlbmQgb3IgZmFsc2UgdG8gZmlyZSBvbiBmaXJzdCBmcmFtZVxuICAgIG9uZXJyb3I6IG51bGwsIC8vIGZpcmVzIG9uIGVycm9yXG4gICAgb25wcm9ncmVzczogbnVsbCwgLy8gZmlyZXMgYSBsb2FkIHByb2dyZXNzIGV2ZW50XG4gICAgb25sb2FkYWxsOiBudWxsLCAvLyBldmVudCBmaXJlcyB3aGVuIGFsbCBmcmFtZXMgaGF2ZSBsb2FkZWQgYW5kIGdpZiBpcyByZWFkeVxuICAgIHBhdXNlZDogZmFsc2UsIC8vIHRydWUgaWYgcGF1c2VkXG4gICAgcGxheWluZzogZmFsc2UsIC8vIHRydWUgaWYgcGxheWluZ1xuICAgIHdhaXRUaWxsRG9uZTogdHJ1ZSwgLy8gSWYgdHJ1ZSBvbmxvYWQgd2lsbCBmaXJlIHdoZW4gYWxsIGZyYW1lcyBsb2FkZWQsIGlmIGZhbHNlLCBvbmxvYWQgd2lsbCBmaXJlIHdoZW4gZmlyc3QgZnJhbWUgaGFzIGxvYWRlZFxuICAgIGxvYWRpbmc6IGZhbHNlLCAvLyB0cnVlIGlmIHN0aWxsIGxvYWRpbmdcbiAgICBmaXJzdEZyYW1lT25seTogZmFsc2UsIC8vIGlmIHRydWUgb25seSBsb2FkIHRoZSBmaXJzdCBmcmFtZVxuICAgIHdpZHRoOiBudWxsLCAvLyB3aWR0aCBpbiBwaXhlbHNcbiAgICBoZWlnaHQ6IG51bGwsIC8vIGhlaWdodCBpbiBwaXhlbHNcbiAgICBmcmFtZXM6IFtdLCAvLyBhcnJheSBvZiBmcmFtZXNcbiAgICBjb21tZW50OiAnJywgLy8gY29tbWVudHMgaWYgZm91bmQgaW4gZmlsZS4gTm90ZSBJIHJlbWVtYmVyIHRoYXQgc29tZSBnaWZzIGhhdmUgY29tbWVudHMgcGVyIGZyYW1lIGlmIHNvIHRoaXMgd2lsbCBiZSBhbGwgY29tbWVudCBjb25jYXRlbmF0ZWRcbiAgICBsZW5ndGg6IDAsIC8vIGdpZiBsZW5ndGggaW4gbXMgKDEvMTAwMCBzZWNvbmQpXG4gICAgY3VycmVudEZyYW1lOiAwLCAvLyBjdXJyZW50IGZyYW1lLlxuICAgIGZyYW1lQ291bnQ6IDAsIC8vIG51bWJlciBvZiBmcmFtZXNcbiAgICBwbGF5U3BlZWQ6IDEsIC8vIHBsYXkgc3BlZWQgMSBub3JtYWwsIDIgdHdpY2UgMC41IGhhbGYsIC0xIHJldmVyc2UgZXRjLi4uXG4gICAgbGFzdEZyYW1lOiBudWxsLCAvLyB0ZW1wIGhvbGQgbGFzdCBmcmFtZSBsb2FkZWQgc28geW91IGNhbiBkaXNwbGF5IHRoZSBnaWYgYXMgaXQgbG9hZHNcbiAgICBpbWFnZTogbnVsbCwgLy8gdGhlIGN1cnJlbnQgaW1hZ2UgYXQgdGhlIGN1cnJlbnRGcmFtZVxuICAgIHBsYXlPbkxvYWQ6IHRydWUsIC8vIGlmIHRydWUgc3RhcnRzIHBsYXliYWNrIHdoZW4gbG9hZGVkXG4gICAgLy8gZnVuY3Rpb25zXG4gICAgbG9hZDogbG9hZEdpZiwgLy8gY2FsbCB0aGlzIHRvIGxvYWQgYSBmaWxlXG4gICAgY2FuY2VsOiBjYW5jZWxMb2FkLCAvLyBjYWxsIHRvIHN0b3AgbG9hZGluZ1xuICAgIHBsYXk6IHBsYXksIC8vIGNhbGwgdG8gc3RhcnQgcGxheVxuICAgIHBhdXNlOiBwYXVzZSwgLy8gY2FsbCB0byBwYXVzZVxuICAgIHNlZWs6IHNlZWssIC8vIGNhbGwgdG8gc2VlayB0byB0aW1lXG4gICAgc2Vla0ZyYW1lOiBzZWVrRnJhbWUsIC8vIGNhbGwgdG8gc2VlayB0byBmcmFtZVxuICAgIHRvZ2dsZVBsYXk6IHRvZ2dsZVBsYXksIC8vIGNhbGwgdG8gdG9nZ2xlIHBsYXkgYW5kIHBhdXNlIHN0YXRlXG4gICAgZmluaXNoZWQ6IGZ1bmN0aW9uIChpbnN0YW5jZSkge30gLy8gY2FsbCBvbiBmaW5pc2hcbiAgfTtcbiAgcmV0dXJuIGdpZjtcbn07XG5cbmV4cG9ydCBjb25zdCBDYW52YXNBbmltYXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMuc2V0dGluZ3MgPSB7XG4gICAgY29udGFpbmVyOiBudWxsLFxuICAgIGNvbnRhaW5lcldyYXBwZXI6IG51bGwsXG4gICAgZ2lmSW5zdGFuY2U6IG51bGwsXG4gICAgbGJXaWRnZXQ6IG51bGwsXG4gICAgaW1hZ2VTcmM6ICcnLFxuICAgIGN0eDogbnVsbCxcbiAgICBjYW52YXNXaWR0aDogbnVsbCxcbiAgICBjYW52YXNIZWlnaHQ6IG51bGwsXG4gICAgY2FudmFzV2lkdGhIYWxmOiBudWxsLFxuICAgIGNhbnZhc0hlaWdodEhhbGY6IG51bGwsXG4gICAgdXBkYXRlQWN0aXZlOiB0cnVlXG4gIH07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBtZXJnZU9iamVjdHModGhpcy5zZXR0aW5ncywgb3B0aW9ucyk7XG4gIH1cblxuICAvLyBtYWluIHVwZGF0ZSBmdW5jdGlvblxuICBmdW5jdGlvbiB1cGRhdGUgKHRpbWVyKSB7XG4gICAgaWYgKF90aGlzLnNldHRpbmdzLnVwZGF0ZUFjdGl2ZSkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MuY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTsgLy8gcmVzZXQgdHJhbnNmb3JtXG4gICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuY2FudmFzV2lkdGggIT09IGlubmVyV2lkdGggfHwgX3RoaXMuc2V0dGluZ3MuY2FudmFzSGVpZ2h0ICE9PSBpbm5lckhlaWdodCkge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5jYW52YXNXaWR0aEhhbGYgPSAoX3RoaXMuc2V0dGluZ3MuY2FudmFzV2lkdGggPSBfdGhpcy5zZXR0aW5ncy5jb250YWluZXIud2lkdGggPSBpbm5lcldpZHRoKSAvIDI7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmNhbnZhc0hlaWdodEhhbGYgPSAoX3RoaXMuc2V0dGluZ3MuY2FudmFzSGVpZ2h0ID0gX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLmhlaWdodCA9IGlubmVySGVpZ2h0KSAvIDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5jdHguY2xlYXJSZWN0KDAsIDAsIF90aGlzLnNldHRpbmdzLmNhbnZhc1dpZHRoLCBfdGhpcy5zZXR0aW5ncy5jYW52YXNIZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZ2lmSW5zdGFuY2UgIT09IG51bGwpIHsgLy8gSWYgZ2lmIG9iamVjdCBkZWZpbmVkXG4gICAgICAgIGlmICghX3RoaXMuc2V0dGluZ3MuZ2lmSW5zdGFuY2UubG9hZGluZykgeyAvLyBpZiBsb2FkZWRcbiAgICAgICAgICAvLyBjYW4gZG8gc29tZXRoaW5nIGhlcmVcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5naWZJbnN0YW5jZS5sYXN0RnJhbWUgIT09IG51bGwpIHsgLy8gU2hvd3MgZnJhbWVzIGFzIHRoZXkgbG9hZFxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLmN0eC5kcmF3SW1hZ2UoX3RoaXMuc2V0dGluZ3MuZ2lmSW5zdGFuY2UubGFzdEZyYW1lLmltYWdlLCAoX3RoaXMuc2V0dGluZ3MuY2FudmFzV2lkdGhIYWxmIC0gKF90aGlzLnNldHRpbmdzLmdpZkluc3RhbmNlLndpZHRoIC8gMikpLCAoX3RoaXMuc2V0dGluZ3MuY2FudmFzSGVpZ2h0SGFsZiAtIChfdGhpcy5zZXR0aW5ncy5naWZJbnN0YW5jZS5oZWlnaHQgLyAyKSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHJlc2V0IHRyYW5zZm9ybVxuICB0aGlzLmNsZWFyQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLnNldHRpbmdzLmN0eC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gIH07XG5cbiAgdGhpcy5vdmVybGF5TGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXG4gICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1jYW52YXMtb3ZlcmxheS13cmFwcGVyJyk7XG4gICAgY2FudmFzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LWNhbnZhcycpO1xuXG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH07XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnNldHRpbmdzLmNvbnRhaW5lciA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5zZXR0aW5ncy5jb250YWluZXJXcmFwcGVyID0gdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5iaW5kQ29udGFpbmVyLmFwcGVuZENoaWxkKF90aGlzLm92ZXJsYXlMYXlvdXQoKSk7XG4gICAgICB0aGlzLnNldHRpbmdzLmNvbnRhaW5lciA9IHF1ZXJ5KHRoaXMuc2V0dGluZ3MuY29udGFpbmVyV3JhcHBlciwgJy5jbC13aWRnZXQtY2FudmFzJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuY29udGFpbmVyICE9PSBudWxsICYmIHRoaXMuc2V0dGluZ3MuaW1hZ2VTcmMubGVuZ3RoID4gMCkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyV3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsgLy8gc2hvdyBjb250YWluZXJcbiAgICAgIF90aGlzLnNldHRpbmdzLmNvbnRhaW5lcldyYXBwZXIuc3R5bGUub3BhY2l0eSA9IDE7IC8vIHNob3cgY29udGFpbmVyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5jdHggPSBfdGhpcy5zZXR0aW5ncy5jb250YWluZXIuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLnVwZGF0ZUFjdGl2ZSA9IHRydWU7XG5cbiAgICAgIC8vIENhbiBub3QgbG9hZCBnaWYgY3Jvc3MgZG9tYWluIHVubGVzcyBpdCBoYXMgQ09SUyBoZWFkZXJcbiAgICAgIC8vIGNvbnN0IGdpZlVSTCA9IFwiaHR0cHM6Ly9nYXRld2F5LmNvbXBldGl0aW9ubGFicy5jb20vYWxleC9hc3NldHMvT2xwX1RYVUJwOTNfQ2dfQlFHc0Qvc2t1bGwtYW5pbWFpdG9uLmdpZlwiO1xuICAgICAgY29uc3QgZ2lmVVJMID0gX3RoaXMuc2V0dGluZ3MuaW1hZ2VTcmM7XG4gICAgICAvLyB0aW1lb3V0IGp1c3Qgd2FpdHMgdGlsbCBzY3JpcHQgaGFzIGJlZW4gcGFyc2VkIGFuZCBleGVjdXRlZFxuICAgICAgLy8gdGhlbiBzdGFydHMgbG9hZGluZyBhIGdpZlxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmdpZkluc3RhbmNlID0gR0lGKCk7IC8vIGNyZWF0ZXMgYSBuZXcgZ2lmXG4gICAgICAgIF90aGlzLnNldHRpbmdzLmdpZkluc3RhbmNlLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdhc3NldCBsb2FkaW5nIGVycm9yICcgKyBlLnR5cGUpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5naWZJbnN0YW5jZS5sb2FkKGdpZlVSTCk7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmdpZkluc3RhbmNlLmZpbmlzaGVkID0gZnVuY3Rpb24gKGluc3RhbmNlLCBsYXN0RnJhbWUpIHtcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy51cGRhdGVBY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICAgIC8vIGRyYXcgbGFzdCBmcmFtZVxuICAgICAgICAgIC8vIF90aGlzLnNldHRpbmdzLmN0eC5kcmF3SW1hZ2UobGFzdEZyYW1lLmltYWdlLCAwLCAwKTtcbiAgICAgICAgICAvLyBfdGhpcy5zZXR0aW5ncy5jdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcbiAgICAgICAgICAvLyBfdGhpcy5zZXR0aW5ncy5jdHguZmlsbFRleHQoJ0dJRiBsb2FkaW5nIGZyYW1lIDIyJywgMTAsIDIwKTtcblxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyV3JhcHBlci5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5jb250YWluZXJXcmFwcGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICAgIH0sIDIwMDApO1xuICAgICAgICB9O1xuICAgICAgfSwgMCk7XG5cbiAgICAgIF90aGlzLnNldHRpbmdzLmNhbnZhc1dpZHRoID0gX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLndpZHRoO1xuICAgICAgX3RoaXMuc2V0dGluZ3MuY2FudmFzSGVpZ2h0ID0gX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLmhlaWdodDtcbiAgICAgIF90aGlzLnNldHRpbmdzLmNhbnZhc1dpZHRoSGFsZiA9IF90aGlzLnNldHRpbmdzLmNhbnZhc1dpZHRoIC8gMjsgLy8gY2VudGVyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5jYW52YXNIZWlnaHRIYWxmID0gX3RoaXMuc2V0dGluZ3MuY2FudmFzSGVpZ2h0IC8gMjtcblxuICAgICAgLy8gdHJpZ2dlciBBQ0hcbiAgICAgIC8vIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNhbnZhc0FuaW1hdGlvbi5zZXR0aW5ncy5pbWFnZVNyYyA9ICdodHRwczovL2dhdGV3YXkuY29tcGV0aXRpb25sYWJzLmNvbS9hbGV4L2Fzc2V0cy9PbHBfVFhVQnA5M19DZ19CUUdzRC9za3VsbC1hbmltYWl0b24uZ2lmJztcbiAgICAgIC8vIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNhbnZhc0FuaW1hdGlvbi5pbml0KCk7XG5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xuICAgIH1cbiAgfTtcbn07XG4iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgSWRlbnRpY29uIGZyb20gJ2lkZW50aWNvbi5qcyc7XG5pbXBvcnQganNTSEEgZnJvbSAnanNzaGEnO1xuaW1wb3J0IGNzc1ZhcnMgZnJvbSAnY3NzLXZhcnMtcG9ueWZpbGwnO1xuXG5pbXBvcnQgbWVyZ2VPYmplY3RzIGZyb20gJy4uL3V0aWxzL21lcmdlT2JqZWN0cyc7XG5pbXBvcnQgbWFwT2JqZWN0IGZyb20gJy4uL3V0aWxzL21hcE9iamVjdCc7XG5pbXBvcnQgZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zIGZyb20gJy4uL3V0aWxzL2Zvcm1hdE51bWJlckxlYWRpbmdaZXJvcyc7XG5pbXBvcnQgc3RyaW5nQ29udGFpbnMgZnJvbSAnLi4vdXRpbHMvc3RyaW5nQ29udGFpbnMnO1xuaW1wb3J0IG9iamVjdEl0ZXJhdG9yIGZyb20gJy4uL3V0aWxzL29iamVjdEl0ZXJhdG9yJztcbmltcG9ydCBxdWVyeSBmcm9tICcuLi91dGlscy9xdWVyeSc7XG5pbXBvcnQgaGFzQ2xhc3MgZnJvbSAnLi4vdXRpbHMvaGFzQ2xhc3MnO1xuaW1wb3J0IGFkZENsYXNzIGZyb20gJy4uL3V0aWxzL2FkZENsYXNzJztcbmltcG9ydCByZW1vdmVDbGFzcyBmcm9tICcuLi91dGlscy9yZW1vdmVDbGFzcyc7XG5pbXBvcnQgY2xvc2VzdCBmcm9tICcuLi91dGlscy9jbG9zZXN0JztcbmltcG9ydCBpc01vYmlsZVRhYmxldCBmcm9tICcuLi91dGlscy9pc01vYmlsZVRhYmxldCc7XG5pbXBvcnQgY2FtZWxUb0tlYmFiQ2FzZSBmcm9tICcuLi91dGlscy9jYW1lbFRvS2ViYWJDYXNlJztcblxuaW1wb3J0IGNMYWJzIGZyb20gJy4vY0xhYnMnO1xuaW1wb3J0ICcuL0FqYXgnO1xuXG5pbXBvcnQgeyBOb3RpZmljYXRpb25zIH0gZnJvbSAnLi9Ob3RpZmljYXRpb25zJztcbmltcG9ydCB7IE1pbmlTY29yZUJvYXJkIH0gZnJvbSAnLi9NaW5pU2NvcmVCb2FyZCc7XG5pbXBvcnQgeyBNYWluV2lkZ2V0IH0gZnJvbSAnLi9NYWluV2lkZ2V0JztcbmltcG9ydCB7IENhbnZhc0FuaW1hdGlvbiB9IGZyb20gJy4vQ2FudmFzQW5pbWF0aW9uJztcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKGAuLi8uLi9pMThuL3RyYW5zbGF0aW9uXyR7cHJvY2Vzcy5lbnYuTEFOR30uanNvbmApO1xuXG4vKipcbiAqIE1haW4gbGVhZGVyYm9hcmQgd2lkZ2V0LCBjb250cm9scyBhbGwgYWN0aW9ucyBhbmQgaW5pdGlhdGlvbiBsb2dpYy5cbiAqIE1haW4gcmVzcG9uc2liaWxpdHkgaXMgdG8gY29udHJvbCB0aGUgaW50ZXJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHdpZGdldHMvcGx1Z2lucyBhbmQgdXNlciBldmVuIGFjdGlvbnNcbiAqIEBwYXJhbSBvcHRpb25zIHtPYmplY3R9IHNldHRpbmcgcGFyYW1ldGVycyB1c2VkIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdCBzZXR0aW5nc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBjb25zdCBMYldpZGdldCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBMYldpZGdldCBzZXR0aW5nc1xuICAgKiBAbWVtYmVyT2YgTGJXaWRnZXRcbiAgICogQGNvbnN0YW50XG4gICAqIEB0eXBlIHsgT2JqZWN0IH1cbiAgICovXG4gIHRoaXMuc2V0dGluZ3MgPSB7XG4gICAgZGVidWc6IHRydWUsXG4gICAgYmluZENvbnRhaW5lcjogZG9jdW1lbnQuYm9keSxcbiAgICBhdXRvU3RhcnQ6IHRydWUsXG4gICAgc3NlTWVzc2FnaW5nOiBudWxsLFxuICAgIG5vdGlmaWNhdGlvbnM6IG51bGwsXG4gICAgbWluaVNjb3JlQm9hcmQ6IG51bGwsXG4gICAgY2FudmFzQW5pbWF0aW9uOiBudWxsLFxuICAgIGVuYWJsZU5vdGlmaWNhdGlvbnM6IHRydWUsXG4gICAgbWFpbldpZGdldDogbnVsbCxcbiAgICBnbG9iYWxBamF4OiBuZXcgY0xhYnMuQWpheCgpLFxuICAgIGNoZWNrQWpheDogbmV3IGNMYWJzLkFqYXgoKSxcbiAgICBsYW5ndWFnZTogcHJvY2Vzcy5lbnYuTEFORyxcbiAgICBjdXJyZW5jeTogJycsXG4gICAgc3BhY2VOYW1lOiAnJyxcbiAgICBtZW1iZXJJZDogJycsXG4gICAgZ3JvdXBzOiAnJyxcbiAgICBnYW1lSWQ6ICcnLFxuICAgIGVuZm9yY2VHYW1lTG9va3VwOiBmYWxzZSwgLy8gdG91cm5hbWVudCBsb29rdXAgd2lsbCBpbmNsdWRlL2V4Y2x1ZGUgZ2FtZSBvbmx5IHJlcXVlc3RzXG4gICAgYXBpS2V5OiAnJyxcbiAgICBtZW1iZXI6IG51bGwsXG4gICAgbGF5b3V0OiB7XG4gICAgICBlbmFibGVNaW5pU2NvcmVCb2FyZERyYWdnaW5nOiB0cnVlLCAvLyBlbmFibGUvZGlzYWJsZSBkcmFnZ2luZyB3aXRoIG1vdXNlL3RvdWNoXG4gICAgICBtaW5pU2NvcmVCb2FyZFBvc2l0aW9uOiB7IC8vIGRlZmF1bHQgcG9zaXRpb24gb2YgbWluaSBzY29yZWJvYXJkIGxlZnQvcmlnaHQvYm90dG9tL3RvcCAoRXhhbXBsZTogdG9wOiAnMjBweCcpXG4gICAgICAgIGxlZnQ6IG51bGwsXG4gICAgICAgIHJpZ2h0OiBudWxsLFxuICAgICAgICB0b3A6IG51bGwsXG4gICAgICAgIGJvdHRvbTogbnVsbFxuICAgICAgfSxcbiAgICAgIGFsbG93T3JpZW50YXRpb25DaGFuZ2U6IHRydWUsIC8vIGFsbG93cyB0aGUgc3dpdGNoIGJldHdlZW4gaG9yaXpvbnRhbC92ZXJ0aWNhbCBvcmllbnRhdGlvblxuICAgICAgbWluaVNjb3JlQm9hcmRPcmllbnRhdGlvbjogJ2hvcml6b250YWwnIC8vIHZlcnRpY2FsL2hvcml6b250YWwgPT4gZGVmYXVsdCBpcyBob3Jpem9udGFsXG4gICAgfSxcbiAgICBjb21wZXRpdGlvbjoge1xuICAgICAgYWN0aXZlQ29tcGV0aXRpb25JZDogbnVsbCxcbiAgICAgIGFjdGl2ZUNvbnRlc3RJZDogbnVsbCxcbiAgICAgIGFjdGl2ZUNvbXBldGl0aW9uOiBudWxsLFxuICAgICAgYWN0aXZlQ29udGVzdDogbnVsbCxcbiAgICAgIHJlZnJlc2hJbnRlcnZhbDogbnVsbCxcbiAgICAgIHJlZnJlc2hJbnRlcnZhbE1pbGxpczogMTAwMDAsXG4gICAgICBhbGxvd05lZ2F0aXZlQ291bnRkb3duOiBmYWxzZSwgLy8gZmFsc2U6IHdpbGwgbWFyayBjb21wZXRpdGlvbiBhcyBmaW5pc2hpbmcsIHRydWU6IHdpbGwgY29udGludWUgdG8gY291bnRkb3duIGludG8gbmVnYXRpdmVcbiAgICAgIGluY2x1ZGVNZXRhZGF0YTogZmFsc2UsXG4gICAgICBleHRyYWN0SW1hZ2VIZWFkZXI6IHRydWUgLy8gd2lsbCBleHRyYWN0IHRoZSBmaXJzdCBmb3VuZCBpbWFnZSBpbnNpZGUgdGhlIGJvZHkgdGFnIGFuZCBtb3ZlIGl0IG9uIHRvcFxuICAgIH0sXG4gICAgYWNoaWV2ZW1lbnRzOiB7XG4gICAgICBsaW1pdDogMTAwLFxuICAgICAgdG90YWxDb3VudDogMCxcbiAgICAgIGxpc3Q6IFtdLFxuICAgICAgYXZhaWxhYmxlUmV3YXJkczogW10sXG4gICAgICByZXdhcmRzOiBbXSxcbiAgICAgIGV4cGlyZWRSZXdhcmRzOiBbXSxcbiAgICAgIGV4dHJhY3RJbWFnZUhlYWRlcjogdHJ1ZSAvLyB3aWxsIGV4dHJhY3QgdGhlIGZpcnN0IGZvdW5kIGltYWdlIGluc2lkZSB0aGUgYm9keSB0YWcgYW5kIG1vdmUgaXQgb24gdG9wXG4gICAgfSxcbiAgICByZXdhcmRzOiB7XG4gICAgICBhdmFpbGFibGVSZXdhcmRzOiBbXSxcbiAgICAgIHJld2FyZHM6IFtdLFxuICAgICAgZXhwaXJlZFJld2FyZHM6IFtdLFxuICAgICAgcmV3YXJkRm9ybWF0dGVyOiBmdW5jdGlvbiAocmV3YXJkKSB7XG4gICAgICAgIHZhciBkZWZhdWx0UmV3YXJkVmFsdWUgPSByZXdhcmQudmFsdWU7XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXdhcmQudW5pdE9mTWVhc3VyZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHJld2FyZC51bml0T2ZNZWFzdXJlLnN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgcmV3YXJkLnVuaXRPZk1lYXN1cmUuc3ltYm9sICE9PSBudWxsKSB7XG4gICAgICAgICAgZGVmYXVsdFJld2FyZFZhbHVlID0gcmV3YXJkLnVuaXRPZk1lYXN1cmUuc3ltYm9sICsgcmV3YXJkLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRSZXdhcmRWYWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICBtZXNzYWdlczogW11cbiAgICB9LFxuICAgIHRvdXJuYW1lbnRzOiB7XG4gICAgICBhY3RpdmVDb21wZXRpdGlvbklkOiBudWxsLFxuICAgICAgcmVhZHlDb21wZXRpdGlvbnM6IFtdLCAvLyBzdGF0dXNDb2RlIDNcbiAgICAgIGFjdGl2ZUNvbXBldGl0aW9uczogW10sIC8vIHN0YXR1c0NvZGUgNVxuICAgICAgZmluaXNoZWRDb21wZXRpdGlvbnM6IFtdIC8vIHN0YXR1c0NvZGUgN1xuICAgIH0sXG4gICAgbGVhZGVyYm9hcmQ6IHtcbiAgICAgIGZ1bGxMZWFkZXJib2FyZFNpemU6IDEwMCxcbiAgICAgIHJlZnJlc2hJbnRlcnZhbE1pbGxpczogMzAwMCxcbiAgICAgIHJlZnJlc2hJbnRlcnZhbDogbnVsbCxcbiAgICAgIHJlZnJlc2hMYkRhdGFJbnRlcnZhbDogbnVsbCxcbiAgICAgIGxlYWRlcmJvYXJkRGF0YTogW10sXG4gICAgICBsb2FkTGVhZGVyYm9hcmRIaXN0b3J5OiB7fSxcbiAgICAgIGxheW91dFNldHRpbmdzOiB7XG4gICAgICAgIC8vIHRvdXJuYW1lbnRMaXN0OiB0cnVlLFxuICAgICAgICBpbWFnZUJhbm5lcjogdHJ1ZSxcbiAgICAgICAgLy8gdGl0bGU6IHRydWUsXG4gICAgICAgIHRpdGxlTGlua1RvRGV0YWlsc1BhZ2U6IGZhbHNlIC8vIGlmIHNldCB0byBmYWxzZSB3aWxsIG1ha2UgdGhlIGRlc2NyaXB0aW9uIGF2YWlsYWJsZSB1bmRlciB0aXRsZVxuICAgICAgfSxcbiAgICAgIG1pbmlTY29yZUJvYXJkOiB7XG4gICAgICAgIGVuYWJsZVJhbmtpbmdzOiB0cnVlLCAvLyBlbmFibGVkIHJhbmtpbmdzIGJlZm9yZSBhZnRlciByYW5raW5ncyBvZiBtZW1iZXJzIFstMiBZT1UgKzJdXG4gICAgICAgIHJhbmtpbmdzQ291bnQ6IDJcbiAgICAgIH0sXG4gICAgICBwb2ludHNGb3JtYXR0ZXI6IGZ1bmN0aW9uIChwb2ludHMpIHtcbiAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICAgIH1cbiAgICB9LFxuICAgIG5hdmlnYXRpb246IHsgLy8gcHJpbWFyeSBuYXZpZ2F0aW9uIGl0ZW1zLCBpZiBhbGwgYXJlIGRpc2FibGVkIGluaXQgd2lsbCBmYWlsLCBpZiBvbmx5IDEgaXMgZW5hYmxlZCBpdGVtcyB3aWxsIGJlIGhpZGRlblxuICAgICAgdG91cm5hbWVudHM6IHtcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICBuYXZpZ2F0aW9uQ2xhc3M6ICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWxiJyxcbiAgICAgICAgbmF2aWdhdGlvbkNsYXNzSWNvbjogJ2NsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tbGItaWNvbicsXG4gICAgICAgIGNvbnRhaW5lckNsYXNzOiAnY2wtbWFpbi13aWRnZXQtbGInLFxuICAgICAgICBvcmRlcjogMVxuICAgICAgfSxcbiAgICAgIGFjaGlldmVtZW50czoge1xuICAgICAgICBlbmFibGU6IHRydWUsXG4gICAgICAgIG5hdmlnYXRpb25DbGFzczogJ2NsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tYWNoJyxcbiAgICAgICAgbmF2aWdhdGlvbkNsYXNzSWNvbjogJ2NsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tYWNoLWljb24nLFxuICAgICAgICBjb250YWluZXJDbGFzczogJ2NsLW1haW4td2lkZ2V0LXNlY3Rpb24tYWNoJyxcbiAgICAgICAgb3JkZXI6IDJcbiAgICAgIH0sXG4gICAgICByZXdhcmRzOiB7XG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAgICAgbmF2aWdhdGlvbkNsYXNzOiAnY2wtbWFpbi13aWRnZXQtbmF2aWdhdGlvbi1yZXdhcmRzJyxcbiAgICAgICAgbmF2aWdhdGlvbkNsYXNzSWNvbjogJ2NsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tcmV3YXJkcy1pY29uJyxcbiAgICAgICAgY29udGFpbmVyQ2xhc3M6ICdjbC1tYWluLXdpZGdldC1zZWN0aW9uLXJld2FyZCcsXG4gICAgICAgIG9yZGVyOiAzXG4gICAgICB9LFxuICAgICAgaW5ib3g6IHtcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICBuYXZpZ2F0aW9uQ2xhc3M6ICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWluYm94JyxcbiAgICAgICAgbmF2aWdhdGlvbkNsYXNzSWNvbjogJ2NsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24taW5ib3gtaWNvbicsXG4gICAgICAgIGNvbnRhaW5lckNsYXNzOiAnY2wtbWFpbi13aWRnZXQtc2VjdGlvbi1pbmJveCcsXG4gICAgICAgIG9yZGVyOiA0XG4gICAgICB9XG4gICAgfSxcbiAgICB1cmk6IHtcbiAgICAgIGdhdGV3YXlEb21haW46IGNMYWJzLmFwaS51cmwsXG5cbiAgICAgIG1lbWJlcnM6ICcvYXBpL3YxLzpzcGFjZS9tZW1iZXJzL3JlZmVyZW5jZS86aWQnLFxuICAgICAgYXNzZXRzOiAnL2Fzc2V0cy9hdHRhY2htZW50cy86YXR0YWNobWVudElkJyxcblxuICAgICAgbWVtYmVyU1NFOiAnL2FwaS92MS86c3BhY2Uvc3NlL3JlZmVyZW5jZS86aWQnLFxuICAgICAgbWVtYmVyU1NFSGVhcnRiZWF0OiAnL2FwaS92MS86c3BhY2Uvc3NlL3JlZmVyZW5jZS86aWQvaGVhcnRiZWF0JyxcblxuICAgICAgY29tcGV0aXRpb25zOiAnL2FwaS92MS86c3BhY2UvY29tcGV0aXRpb25zJyxcbiAgICAgIGNvbXBldGl0aW9uQnlJZDogJy9hcGkvdjEvOnNwYWNlL2NvbXBldGl0aW9ucy86aWQnLFxuICAgICAgY29udGVzdExlYWRlcmJvYXJkOiAnL2FwaS92MS86c3BhY2UvY29udGVzdHMvOmlkL2xlYWRlcmJvYXJkJyxcblxuICAgICAgYWNoaWV2ZW1lbnQ6ICcvYXBpL3YxLzpzcGFjZS9hY2hpZXZlbWVudHMvOmlkJyxcbiAgICAgIGFjaGlldmVtZW50czogJy9hcGkvdjEvOnNwYWNlL2FjaGlldmVtZW50cy9tZW1iZXJzL3JlZmVyZW5jZS86aWQnLFxuICAgICAgLy8gYWNoaWV2ZW1lbnRzOiBcIi9hcGkvdjEvOnNwYWNlL2FjaGlldmVtZW50c1wiLFxuICAgICAgYWNoaWV2ZW1lbnRzUHJvZ3Jlc3Npb246ICcvYXBpL3YxLzpzcGFjZS9tZW1iZXJzL3JlZmVyZW5jZS86aWQvYWNoaWV2ZW1lbnRzJyxcbiAgICAgIGFjaGlldmVtZW50c0lzc3VlZDogJy9hcGkvdjEvOnNwYWNlL21lbWJlcnMvcmVmZXJlbmNlLzppZC9hY2hpZXZlbWVudHMvaXNzdWVkJyxcblxuICAgICAgbWVzc2FnZXM6ICcvYXBpL3YxLzpzcGFjZS9tZW1iZXJzL3JlZmVyZW5jZS86aWQvbWVzc2FnZXMnLFxuICAgICAgbWVzc2FnZUJ5SWQ6ICcvYXBpL3YxLzpzcGFjZS9tZW1iZXJzL3JlZmVyZW5jZS86aWQvbWVzc2FnZXMvOm1lc3NhZ2VJZCcsXG5cbiAgICAgIG1lbWJlclJld2FyZDogJy9hcGkvdjEvOnNwYWNlL21lbWJlcnMvcmVmZXJlbmNlLzppZC9hd2FyZC86YXdhcmRJZCcsXG4gICAgICBtZW1iZXJSZXdhcmRDbGFpbTogJy9hcGkvdjEvOnNwYWNlL21lbWJlcnMvcmVmZXJlbmNlLzppZC9hd2FyZC86YXdhcmRJZC9hd2FyZCcsXG5cbiAgICAgIG1lbWJlckNvbXBldGl0aW9uczogJy9hcGkvdjEvOnNwYWNlL21lbWJlcnMvcmVmZXJlbmNlLzppZC9jb21wZXRpdGlvbnMnLFxuICAgICAgbWVtYmVyQ29tcGV0aXRpb25CeUlkOiAnL2FwaS92MS86c3BhY2UvbWVtYmVycy9yZWZlcmVuY2UvOmlkL2NvbXBldGl0aW9uLzpjb21wZXRpdGlvbklkJyxcbiAgICAgIG1lbWJlckNvbXBldGl0aW9uT3B0SW46ICcvYXBpL3YxLzpzcGFjZS9tZW1iZXJzL3JlZmVyZW5jZS86aWQvY29tcGV0aXRpb24vOmNvbXBldGl0aW9uSWQvb3B0aW4nLFxuICAgICAgbWVtYmVyQ29tcGV0aXRpb25PcHRJbkNoZWNrOiAnL2FwaS92MS86c3BhY2UvbWVtYmVycy9yZWZlcmVuY2UvOmlkL2NvbXBldGl0aW9uLzpjb21wZXRpdGlvbklkL29wdGluLWNoZWNrJyxcblxuICAgICAgdHJhbnNsYXRpb25QYXRoOiAnJyAvLyAuLi9pMThuL3RyYW5zbGF0aW9uXzpsYW5ndWFnZS5qc29uXG4gICAgfSxcbiAgICBsb2FkVHJhbnNsYXRpb25zOiB0cnVlLFxuICAgIHNob3dDb3B5cmlnaHQ6IHRydWUsXG4gICAgdHJhbnNsYXRpb246IHRyYW5zbGF0aW9uLFxuICAgIHJlc291cmNlczogW10sIC8vIEV4YW1wbGU6IFtcImh0dHA6Ly9leGFtcGxlLmNvbS9zdHlsZS5jc3NcIiwgXCJodHRwOi8vZXhhbXBsZS5jb20vbXktZm9udHMuY3NzXCJdXG4gICAgc3R5bGVzOiBudWxsLCAvLyBFeGFtcGxlOiB7d2lkZ2V0QmdDb2xvcjogJyMxZjI5NGEnLCB3aWRnZXRJY29uOiAndXJsKC4uLy4uLy4uL2V4YW1wbGVzL2ltYWdlcy9sb2dvLWljb24tMy5wbmcpJ31cbiAgICBwYXJ0aWFsRnVuY3Rpb25zOiB7XG4gICAgICBzdGFydHVwQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbnN0YW5jZSkge30sXG4gICAgICByZXdhcmRGb3JtYXR0ZXI6IGZ1bmN0aW9uIChyZXdhcmQpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRSZXdhcmRWYWx1ZSA9IHJld2FyZC52YWx1ZTtcblxuICAgICAgICBpZiAodHlwZW9mIHJld2FyZC51bml0T2ZNZWFzdXJlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcmV3YXJkLnVuaXRPZk1lYXN1cmUuc3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiByZXdhcmQudW5pdE9mTWVhc3VyZS5zeW1ib2wgIT09IG51bGwpIHtcbiAgICAgICAgICBkZWZhdWx0UmV3YXJkVmFsdWUgPSByZXdhcmQudW5pdE9mTWVhc3VyZS5zeW1ib2wgKyByZXdhcmQudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVmYXVsdFJld2FyZFZhbHVlO1xuICAgICAgfSxcbiAgICAgIGNvbXBldGl0aW9uRGF0YUF2YWlsYWJsZVJlc3BvbnNlUGFyc2VyOiBmdW5jdGlvbiAoY29tcGV0aXRpb25EYXRhLCBjYWxsYmFjaykgeyBjYWxsYmFjayhjb21wZXRpdGlvbkRhdGEpOyB9LFxuICAgICAgY29tcGV0aXRpb25EYXRhRmluaXNoZWRSZXNwb25zZVBhcnNlcjogZnVuY3Rpb24gKGNvbXBldGl0aW9uRGF0YSwgY2FsbGJhY2spIHsgY2FsbGJhY2soY29tcGV0aXRpb25EYXRhKTsgfSxcbiAgICAgIGFjdGl2ZUNvbXBldGl0aW9uRGF0YVJlc3BvbnNlUGFyc2VyOiBmdW5jdGlvbiAoY29tcGV0aXRpb25EYXRhLCBjYWxsYmFjaykgeyBjYWxsYmFjayhjb21wZXRpdGlvbkRhdGEpOyB9LFxuICAgICAgYWN0aXZlQ29udGVzdERhdGFSZXNwb25zZVBhcnNlcjogZnVuY3Rpb24gKGNvbnRlc3REYXRhLCBjYWxsYmFjaykgeyBjYWxsYmFjayhjb250ZXN0RGF0YSk7IH0sXG4gICAgICBsZWFkZXJib2FyZERhdGFSZXNwb25zZVBhcnNlcjogZnVuY3Rpb24gKGxlYWRlcmJvYXJkRGF0YSwgY2FsbGJhY2spIHsgY2FsbGJhY2sobGVhZGVyYm9hcmREYXRhKTsgfSxcbiAgICAgIGFjaGlldmVtZW50RGF0YUZvckFsbFJlc3BvbnNlUGFyc2VyOiBmdW5jdGlvbiAoYWNoaWV2ZW1lbnREYXRhLCBjYWxsYmFjaykgeyBjYWxsYmFjayhhY2hpZXZlbWVudERhdGEpOyB9LFxuICAgICAgYWNoaWV2ZW1lbnREYXRhRm9yTWVtYmVyR3JvdXBSZXNwb25zZVBhcnNlcjogZnVuY3Rpb24gKGFjaGlldmVtZW50RGF0YSwgY2FsbGJhY2spIHsgY2FsbGJhY2soYWNoaWV2ZW1lbnREYXRhKTsgfSxcbiAgICAgIGFjaGlldmVtZW50RGF0YVJlc3BvbnNlUGFyc2VyOiBmdW5jdGlvbiAoYWNoaWV2ZW1lbnREYXRhLCBjYWxsYmFjaykgeyBjYWxsYmFjayhhY2hpZXZlbWVudERhdGEpOyB9LFxuICAgICAgcmV3YXJkRGF0YVJlc3BvbnNlUGFyc2VyOiBmdW5jdGlvbiAocmV3YXJkRGF0YSwgY2FsbGJhY2spIHsgY2FsbGJhY2socmV3YXJkRGF0YSk7IH0sXG4gICAgICBtZXNzYWdlRGF0YVJlc3BvbnNlUGFyc2VyOiBmdW5jdGlvbiAobWVzc2FnZURhdGEsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKG1lc3NhZ2VEYXRhKTsgfSxcbiAgICAgIGNsYWltUmV3YXJkRGF0YVJlc3BvbnNlUGFyc2VyOiBmdW5jdGlvbiAoY2xhaW1SZXdhcmREYXRhLCBjYWxsYmFjaykgeyBjYWxsYmFjayhjbGFpbVJld2FyZERhdGEpOyB9LFxuICAgICAgaXNzdWVkQWNoaWV2ZW1lbnRzRGF0YVJlc3BvbnNlUGFyc2VyOiBmdW5jdGlvbiAoaXNzdWVkQWNoaWV2ZW1lbnRzRGF0YSwgY2FsbGJhY2spIHsgY2FsbGJhY2soaXNzdWVkQWNoaWV2ZW1lbnRzRGF0YSk7IH0sXG4gICAgICBtZW1iZXJBY2hpZXZlbWVudHNQcm9ncmVzc2lvbkRhdGFSZXNwb25zZVBhcnNlcjogZnVuY3Rpb24gKG1lbWJlckFjaGlldmVtZW50c1Byb2dyZXNzaW9uRGF0YSwgY2FsbGJhY2spIHsgY2FsbGJhY2sobWVtYmVyQWNoaWV2ZW1lbnRzUHJvZ3Jlc3Npb25EYXRhKTsgfSxcbiAgICAgIGNsYWltZWRSZXdhcmRzRGF0YVJlc3BvbnNlUGFyc2VyOiBmdW5jdGlvbiAoY2xhaW1lZFJld2FyZHNEYXRhLCBjYWxsYmFjaykgeyBjYWxsYmFjayhjbGFpbWVkUmV3YXJkc0RhdGEpOyB9LFxuICAgICAgbm90Q2xhaW1lZFJld2FyZHNEYXRhUmVzcG9uc2VQYXJzZXI6IGZ1bmN0aW9uIChub3RDbGFpbWVkUmV3YXJkc0RhdGEsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKG5vdENsYWltZWRSZXdhcmRzRGF0YSk7IH0sXG4gICAgICBleHBpcmVkUmV3YXJkc0RhdGFSZXNwb25zZVBhcnNlcjogZnVuY3Rpb24gKGV4cGlyZWRSZXdhcmRzRGF0YSwgY2FsbGJhY2spIHsgY2FsbGJhY2soZXhwaXJlZFJld2FyZHNEYXRhKTsgfSxcbiAgICAgIGF2YWlsYWJsZU1lc3NhZ2VzRGF0YVJlc3BvbnNlUGFyc2VyOiBmdW5jdGlvbiAoYXZhaWxhYmxlTWVzc2FnZXNEYXRhLCBjYWxsYmFjaykgeyBjYWxsYmFjayhhdmFpbGFibGVNZXNzYWdlc0RhdGEpOyB9XG4gICAgfVxuICB9O1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLnNldHRpbmdzID0gbWVyZ2VPYmplY3RzKHRoaXMuc2V0dGluZ3MsIG9wdGlvbnMpO1xuICB9XG5cbiAgLy8gYWxpYXMgcmVmZXJlbmNlcyB0byBtb2R1bGVzXG4gIHRoaXMuQ2FudmFzQW5pbWF0aW9uID0gQ2FudmFzQW5pbWF0aW9uO1xuICB0aGlzLk5vdGlmaWNhdGlvbnMgPSBOb3RpZmljYXRpb25zO1xuICB0aGlzLk1pbmlTY29yZUJvYXJkID0gTWluaVNjb3JlQm9hcmQ7XG4gIHRoaXMuTWFpbldpZGdldCA9IE1haW5XaWRnZXQ7XG5cbiAgdGhpcy5sb2cgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnNldHRpbmdzLmRlYnVnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRm9ybWF0IGR1cmF0aW9uIG9mIERhdGUgVGltZSBmcm9tIG1vbWVudCgpIG9iamVjdFxuICAgKiBAbWVtYmVyT2YgTGJXaWRnZXRcbiAgICogQHBhcmFtIGR1cmF0aW9uIHttb21lbnR9XG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLmZvcm1hdERhdGVUaW1lID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgbGFyZ2VSZXN1bHQgPSBbXTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgaWYgKGR1cmF0aW9uLmRheXMoKSkgbGFyZ2VSZXN1bHQucHVzaChkdXJhdGlvbi5kYXlzKCkgKyAnPHNwYW4gY2xhc3M9XCJ0aW1lLWluZFwiPicgKyBfdGhpcy5zZXR0aW5ncy50cmFuc2xhdGlvbi50aW1lLmRheXMgKyAnPC9zcGFuPicpO1xuICAgIGlmIChkdXJhdGlvbi5ob3VycygpIHx8IGR1cmF0aW9uLmRheXMoKSA+IDApIHtcbiAgICAgIHJlc3VsdC5wdXNoKGZvcm1hdE51bWJlckxlYWRpbmdaZXJvcyhkdXJhdGlvbi5ob3VycygpLCAyKSArICc8c3BhbiBjbGFzcz1cInRpbWUtaW5kXCI+JyArIF90aGlzLnNldHRpbmdzLnRyYW5zbGF0aW9uLnRpbWUuaG91cnMgKyAnPC9zcGFuPicpO1xuICAgIH0gZWxzZSByZXN1bHQucHVzaCgnMDA8c3BhbiBjbGFzcz1cInRpbWUtaW5kXCI+JyArIF90aGlzLnNldHRpbmdzLnRyYW5zbGF0aW9uLnRpbWUuaG91cnMgKyAnPC9zcGFuPicpO1xuICAgIGlmIChkdXJhdGlvbi5taW51dGVzKCkgfHwgZHVyYXRpb24uaG91cnMoKSA+IDAgfHwgZHVyYXRpb24uZGF5cygpID4gMCkge1xuICAgICAgcmVzdWx0LnB1c2goZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zKGR1cmF0aW9uLm1pbnV0ZXMoKSwgMikgKyAoKGR1cmF0aW9uLmRheXMoKSA+IDApID8gJzxzcGFuIGNsYXNzPVwidGltZS1pbmRcIj4nICsgX3RoaXMuc2V0dGluZ3MudHJhbnNsYXRpb24udGltZS5taW51dGVzICsgJzwvc3Bhbj4nIDogJzxzcGFuIGNsYXNzPVwidGltZS1pbmRcIj4nICsgX3RoaXMuc2V0dGluZ3MudHJhbnNsYXRpb24udGltZS5taW51dGVzU2hvcnRIYW5kICsgJzwvc3Bhbj4nKSk7XG4gICAgfSBlbHNlIChyZXN1bHQucHVzaCgnMDAnICsgKChkdXJhdGlvbi5kYXlzKCkgPiAwKSA/ICc8c3BhbiBjbGFzcz1cInRpbWUtaW5kXCI+JyArIF90aGlzLnNldHRpbmdzLnRyYW5zbGF0aW9uLnRpbWUubWludXRlcyArICc8L3NwYW4+JyA6ICc8c3BhbiBjbGFzcz1cInRpbWUtaW5kXCI+JyArIF90aGlzLnNldHRpbmdzLnRyYW5zbGF0aW9uLnRpbWUubWludXRlc1Nob3J0SGFuZCArICc8L3NwYW4+JykpKTtcbiAgICAvLyBpZiAoZHVyYXRpb24uc2Vjb25kcygpICYmIGR1cmF0aW9uLmRheXMoKSA9PT0gMCl7IHJlc3VsdC5wdXNoKCBmb3JtYXROdW1iZXJMZWFkaW5nWmVyb3MoZHVyYXRpb24uc2Vjb25kcygpLCAyKSArICc8c3BhbiBjbGFzcz1cInRpbWUtaW5kXCI+czwvc3Bhbj4nICkgfWVsc2UgaWYoZHVyYXRpb24uZGF5cygpID09PSAwKXtyZXN1bHQucHVzaCggJzAwPHNwYW4gY2xhc3M9XCJ0aW1lLWluZFwiPnM8L3NwYW4+JyApfTtcbiAgICByZXN1bHQucHVzaChmb3JtYXROdW1iZXJMZWFkaW5nWmVyb3MoZHVyYXRpb24uc2Vjb25kcygpLCAyKSArICc8c3BhbiBjbGFzcz1cInRpbWUtaW5kXCI+JyArIF90aGlzLnNldHRpbmdzLnRyYW5zbGF0aW9uLnRpbWUuc2Vjb25kcyArICc8L3NwYW4+Jyk7XG4gICAgcmV0dXJuIChsYXJnZVJlc3VsdC5sZW5ndGggPiAwKSA/IChsYXJnZVJlc3VsdC5qb2luKCcgJykgKyAnICcgKyByZXN1bHQuam9pbignOicpKSA6IHJlc3VsdC5qb2luKCc6Jyk7XG4gIH07XG5cbiAgdGhpcy5wb3B1bGF0ZUlkZW50aWNvbkJhc2U2NEltYWdlID0gZnVuY3Rpb24gKHN0cikge1xuICAgIGlmIChzdHIubGVuZ3RoID4gMCkge1xuICAgICAgLyogZXNsaW50IG5ldy1jYXA6IFwib2ZmXCIgKi9cbiAgICAgIHZhciBzaGFPYmogPSBuZXcganNTSEEoJ1NIQS01MTInLCAnVEVYVCcpO1xuICAgICAgc2hhT2JqLnVwZGF0ZShzdHIpO1xuICAgICAgdmFyIGhhc2ggPSBzaGFPYmouZ2V0SGFzaCgnSEVYJywgMSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogZm9yIElFIDExIGNvbW1lbnQgb3V0IHRoZSBsaW5lcyBhYm92ZSBhbmQgdXNlIHRoaXMgY29kZSB3aXRoIHRoZSBqc1NIQSBsaWJyYXJ5IGluc2lkZSB1dGlsc1xuICAgICAgICogaW1wb3J0IGpzU0hBIGZyb20gJy4uL3V0aWxzL2pzU0hBJztcbiAgICAgIHZhciBzaGFPYmogPSBuZXcganNTSEEoc3RyLCAnVEVYVCcpO1xuICAgICAgdmFyIGhhc2ggPSBzaGFPYmouZ2V0SGFzaCgnU0hBLTUxMicsICdIRVgnLCAxKTtcbiAgICAgICovXG5cbiAgICAgIHZhciBkYXRhID0gbmV3IElkZW50aWNvbihoYXNoLCB7XG4gICAgICAgIGJhY2tncm91bmQ6IFsyNTUsIDI1NSwgMjU1LCAyNTVdLCAvLyByZ2JhIHdoaXRlXG4gICAgICAgIG1hcmdpbjogMC4xLCAvLyAyMCUgbWFyZ2luXG4gICAgICAgIHNpemU6IDIyLCAvLyA0MjBweCBzcXVhcmVcbiAgICAgICAgZm9ybWF0OiAnc3ZnJyAvLyB1c2UgU1ZHIGluc3RlYWQgb2YgUE5HXG4gICAgICB9KS50b1N0cmluZygpO1xuXG4gICAgICB2YXIgaWNvbiA9ICdkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCcgKyBkYXRhO1xuXG4gICAgICByZXR1cm4gaWNvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogZ2V0IGEgbGlzdCBvZiBhdmFpbGFibGUgY29tcGV0aXRpb24gZmlsdGVyZWQgYnkgcHJvdmlkZWQgZ2xvYmFsIGNyaXRlcmlhXG4gICAqIEBwYXJhbSBjYWxsYmFjayB7RnVuY3Rpb259XG4gICAqL1xuICBjb25zdCBjb21wZXRpdGlvbkNoZWNrQWpheCA9IG5ldyBjTGFicy5BamF4KCk7XG5cbiAgdGhpcy5jaGVja0ZvckF2YWlsYWJsZUNvbXBldGl0aW9ucyA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYWpheEluc3RhbmNlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgdXJsID0gKF90aGlzLnNldHRpbmdzLm1lbWJlcklkLmxlbmd0aCA9PT0gMCkgPyAoXG4gICAgICBfdGhpcy5zZXR0aW5ncy51cmkuY29tcGV0aXRpb25zLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLnNwYWNlTmFtZSlcbiAgICApIDogKFxuICAgICAgX3RoaXMuc2V0dGluZ3MudXJpLm1lbWJlckNvbXBldGl0aW9ucy5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLm1lbWJlcklkKVxuICAgICk7XG4gICAgdmFyIGZpbHRlcnMgPSBbXG4gICAgICAnc3RhdHVzQ29kZT49PTMnLFxuICAgICAgJ3N0YXR1c0NvZGU8PT01JyxcbiAgICAgICdfc29ydEJ5RmllbGRzPW9wdGlvbnMuc2NoZWR1bGVkRGF0ZXMuZW5kOmRlc2MnLFxuICAgICAgKCdfbGFuZz0nICsgX3RoaXMuc2V0dGluZ3MubGFuZ3VhZ2UpXG4gICAgXTtcbiAgICB2YXIgYWpheEluc3RhbmNlVG9Vc2UgPSAodHlwZW9mIGFqYXhJbnN0YW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgYWpheEluc3RhbmNlICE9PSBudWxsKSA/IGFqYXhJbnN0YW5jZSA6IGNvbXBldGl0aW9uQ2hlY2tBamF4O1xuXG4gICAgaWYgKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5jdXJyZW5jeSA9PT0gJ3N0cmluZycgJiYgX3RoaXMuc2V0dGluZ3MuY3VycmVuY3kubGVuZ3RoID4gMCkge1xuICAgICAgZmlsdGVycy5wdXNoKCdfdW9tS2V5PScgKyBfdGhpcy5zZXR0aW5ncy5jdXJyZW5jeSk7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmdhbWVJZC5sZW5ndGggPiAwICYmIF90aGlzLnNldHRpbmdzLmVuZm9yY2VHYW1lTG9va3VwKSB7XG4gICAgICBmaWx0ZXJzLnB1c2goJ29wdGlvbnMucHJvZHVjdHMucHJvZHVjdFJlZklkPScgKyBfdGhpcy5zZXR0aW5ncy5nYW1lSWQpO1xuICAgIH1cblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5ncm91cHMubGVuZ3RoID4gMCAmJiBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZC5sZW5ndGggPT09IDApIHtcbiAgICAgIGZpbHRlcnMucHVzaCgnb3B0aW9ucy5saW1pdEVudHJhbnRzVG89JyArIF90aGlzLnNldHRpbmdzLmdyb3Vwcyk7XG4gICAgfVxuXG4gICAgYWpheEluc3RhbmNlVG9Vc2UuYWJvcnQoKS5nZXREYXRhKHtcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIHVybCArICc/JyArIGZpbHRlcnMuam9pbignJicpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnWC1BUEktS0VZJzogX3RoaXMuc2V0dGluZ3MuYXBpS2V5XG4gICAgICB9LFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG5cbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5wYXJ0aWFsRnVuY3Rpb25zLmNvbXBldGl0aW9uRGF0YUF2YWlsYWJsZVJlc3BvbnNlUGFyc2VyKGpzb24uZGF0YSwgZnVuY3Rpb24gKGNvbXBEYXRhKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5yZWFkeUNvbXBldGl0aW9ucyA9IFtdO1xuICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuYWN0aXZlQ29tcGV0aXRpb25zID0gW107XG5cbiAgICAgICAgICAgIG1hcE9iamVjdChjb21wRGF0YSwgZnVuY3Rpb24gKGNvbXApIHtcbiAgICAgICAgICAgICAgaWYgKGNvbXAuc3RhdHVzQ29kZSA9PT0gMykge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLnJlYWR5Q29tcGV0aXRpb25zLnB1c2goY29tcCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcC5zdGF0dXNDb2RlID09PSA1KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuYWN0aXZlQ29tcGV0aXRpb25zLnB1c2goY29tcCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfdGhpcy5jaGVja0ZvckZpbmlzaGVkQ29tcGV0aXRpb25zKGNhbGxiYWNrLCBhamF4SW5zdGFuY2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGNoZWNrRm9yQWN0aXZlQ29tcGV0aXRpb25zICcgKyByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogZ2V0IGEgbGlzdCBvZiBmaW5pc2hlZCBjb21wZXRpdGlvbiBmaWx0ZXJlZCBieSBwcm92aWRlZCBnbG9iYWwgY3JpdGVyaWFcbiAgICogQHBhcmFtIGNhbGxiYWNrIHtGdW5jdGlvbn1cbiAgICovXG4gIGNvbnN0IGNvbXBldGl0aW9uRmluaXNoZWRDaGVja0FqYXggPSBuZXcgY0xhYnMuQWpheCgpO1xuXG4gIHRoaXMuY2hlY2tGb3JGaW5pc2hlZENvbXBldGl0aW9ucyA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYWpheEluc3RhbmNlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgdXJsID0gKF90aGlzLnNldHRpbmdzLm1lbWJlcklkLmxlbmd0aCA9PT0gMCkgPyAoXG4gICAgICBfdGhpcy5zZXR0aW5ncy51cmkuY29tcGV0aXRpb25zLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLnNwYWNlTmFtZSlcbiAgICApIDogKFxuICAgICAgX3RoaXMuc2V0dGluZ3MudXJpLm1lbWJlckNvbXBldGl0aW9ucy5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLm1lbWJlcklkKVxuICAgICk7XG4gICAgdmFyIGZpbHRlcnMgPSBbXG4gICAgICAnc3RhdHVzQ29kZT03JyxcbiAgICAgICdfbGltaXQ9MTAnLFxuICAgICAgJ19zb3J0QnlGaWVsZHM9b3B0aW9ucy5zY2hlZHVsZWREYXRlcy5lbmQ6ZGVzYycsXG4gICAgICAoJ19sYW5nPScgKyBfdGhpcy5zZXR0aW5ncy5sYW5ndWFnZSlcbiAgICBdO1xuICAgIHZhciBhamF4SW5zdGFuY2VUb1VzZSA9ICh0eXBlb2YgYWpheEluc3RhbmNlICE9PSAndW5kZWZpbmVkJyAmJiBhamF4SW5zdGFuY2UgIT09IG51bGwpID8gYWpheEluc3RhbmNlIDogY29tcGV0aXRpb25GaW5pc2hlZENoZWNrQWpheDtcblxuICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MuY3VycmVuY3kgPT09ICdzdHJpbmcnICYmIF90aGlzLnNldHRpbmdzLmN1cnJlbmN5Lmxlbmd0aCA+IDApIHtcbiAgICAgIGZpbHRlcnMucHVzaCgnX3VvbUtleT0nICsgX3RoaXMuc2V0dGluZ3MuY3VycmVuY3kpO1xuICAgIH1cblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5nYW1lSWQubGVuZ3RoID4gMCAmJiBfdGhpcy5zZXR0aW5ncy5lbmZvcmNlR2FtZUxvb2t1cCkge1xuICAgICAgZmlsdGVycy5wdXNoKCdvcHRpb25zLnByb2R1Y3RzLnByb2R1Y3RSZWZJZD0nICsgX3RoaXMuc2V0dGluZ3MuZ2FtZUlkKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZ3JvdXBzLmxlbmd0aCA+IDAgJiYgX3RoaXMuc2V0dGluZ3MubWVtYmVySWQubGVuZ3RoID09PSAwKSB7XG4gICAgICBmaWx0ZXJzLnB1c2goJ29wdGlvbnMubGltaXRFbnRyYW50c1RvPScgKyBfdGhpcy5zZXR0aW5ncy5ncm91cHMpO1xuICAgIH1cblxuICAgIGFqYXhJbnN0YW5jZVRvVXNlLmFib3J0KCkuZ2V0RGF0YSh7XG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyB1cmwgKyAnPycgKyBmaWx0ZXJzLmpvaW4oJyYnKSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxuICAgICAgfSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuXG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MucGFydGlhbEZ1bmN0aW9ucy5jb21wZXRpdGlvbkRhdGFGaW5pc2hlZFJlc3BvbnNlUGFyc2VyKGpzb24uZGF0YSwgZnVuY3Rpb24gKGNvbXBEYXRhKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5maW5pc2hlZENvbXBldGl0aW9ucyA9IFtdO1xuXG4gICAgICAgICAgICBtYXBPYmplY3QoY29tcERhdGEsIGZ1bmN0aW9uIChjb21wKSB7XG4gICAgICAgICAgICAgIGlmIChjb21wLnN0YXR1c0NvZGUgPT09IDcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5maW5pc2hlZENvbXBldGl0aW9ucy5wdXNoKGNvbXApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGNoZWNrRm9yQWN0aXZlQ29tcGV0aXRpb25zICcgKyByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLnByZXBhcmVBY3RpdmVDb21wZXRpdGlvbiA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGFjdGl2ZUNvbXBldGl0aW9uID0gbnVsbDtcbiAgICB2YXIgYWN0aXZlQ29tcGV0aXRpb25JZCA9IG51bGw7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuYWN0aXZlQ29tcGV0aXRpb25JZCAhPT0gbnVsbCkge1xuICAgICAgbWFwT2JqZWN0KF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLmFjdGl2ZUNvbXBldGl0aW9ucywgZnVuY3Rpb24gKGNvbXApIHtcbiAgICAgICAgaWYgKGNvbXAuaWQgPT09IF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLmFjdGl2ZUNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgICBhY3RpdmVDb21wZXRpdGlvbiA9IGNvbXA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbWFwT2JqZWN0KF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLnJlYWR5Q29tcGV0aXRpb25zLCBmdW5jdGlvbiAoY29tcCkge1xuICAgICAgICBpZiAoY29tcC5pZCA9PT0gX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuYWN0aXZlQ29tcGV0aXRpb25JZCkge1xuICAgICAgICAgIGFjdGl2ZUNvbXBldGl0aW9uID0gY29tcDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBtYXBPYmplY3QoX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuZmluaXNoZWRDb21wZXRpdGlvbnMsIGZ1bmN0aW9uIChjb21wKSB7XG4gICAgICAgIGlmIChjb21wLmlkID09PSBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5hY3RpdmVDb21wZXRpdGlvbklkKSB7XG4gICAgICAgICAgYWN0aXZlQ29tcGV0aXRpb24gPSBjb21wO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGFjdGl2ZUNvbXBldGl0aW9uICE9PSBudWxsKSB7XG4gICAgICAgIGFjdGl2ZUNvbXBldGl0aW9uSWQgPSBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5hY3RpdmVDb21wZXRpdGlvbklkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuYWN0aXZlQ29tcGV0aXRpb25JZCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZUNvbXBldGl0aW9uID09PSBudWxsICYmIF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLmFjdGl2ZUNvbXBldGl0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBhY3RpdmVDb21wZXRpdGlvbiA9IF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLmFjdGl2ZUNvbXBldGl0aW9uc1swXTtcbiAgICAgIGFjdGl2ZUNvbXBldGl0aW9uSWQgPSBhY3RpdmVDb21wZXRpdGlvbi5pZDtcbiAgICB9IGVsc2UgaWYgKGFjdGl2ZUNvbXBldGl0aW9uID09PSBudWxsICYmIF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLnJlYWR5Q29tcGV0aXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGFjdGl2ZUNvbXBldGl0aW9uID0gX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMucmVhZHlDb21wZXRpdGlvbnNbMF07XG4gICAgICBhY3RpdmVDb21wZXRpdGlvbklkID0gYWN0aXZlQ29tcGV0aXRpb24uaWQ7XG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZUNvbXBldGl0aW9uSWQgPT09IG51bGwpIHsgLy8gbm8gYWN0aXZlIG9yIHJlYWR5IGNvbXBldGl0aW9ucyBmb3VuZFxuICAgICAgX3RoaXMuZGVhY3RpdmF0ZUNvbXBldGl0aW9uc0FuZExlYWRlcmJvYXJkcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb25JZCAhPT0gYWN0aXZlQ29tcGV0aXRpb25JZCAmJiBhY3RpdmVDb21wZXRpdGlvbklkICE9PSBudWxsKSB7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uID0gYWN0aXZlQ29tcGV0aXRpb247XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uSWQgPSBhY3RpdmVDb21wZXRpdGlvbklkO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlQ29tcGV0aXRpb25JZCAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5sb2FkQWN0aXZlQ29tcGV0aXRpb24oZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgICBfdGhpcy5zZXRBY3RpdmVDb21wZXRpdGlvbihqc29uLCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5sb2FkQWN0aXZlQ29tcGV0aXRpb24gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciB1cmwgPSAoX3RoaXMuc2V0dGluZ3MubWVtYmVySWQubGVuZ3RoID09PSAwKSA/IChcbiAgICAgIF90aGlzLnNldHRpbmdzLnVyaS5jb21wZXRpdGlvbkJ5SWQucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbklkKVxuICAgICkgOiAoXG4gICAgICBfdGhpcy5zZXR0aW5ncy51cmkubWVtYmVyQ29tcGV0aXRpb25CeUlkLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MubWVtYmVySWQpLnJlcGxhY2UoJzpjb21wZXRpdGlvbklkJywgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb25JZClcbiAgICApO1xuICAgIHZhciBmaWx0ZXJzID0gW1xuICAgICAgKCdfaW5jbHVkZT1zdHJhdGVneScgKyAoX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uaW5jbHVkZU1ldGFkYXRhID8gJyxtZXRhZGF0YScgOiAnJykpLFxuICAgICAgKCdfbGFuZz0nICsgX3RoaXMuc2V0dGluZ3MubGFuZ3VhZ2UpXG4gICAgXTtcblxuICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MuY3VycmVuY3kgPT09ICdzdHJpbmcnICYmIF90aGlzLnNldHRpbmdzLmN1cnJlbmN5Lmxlbmd0aCA+IDApIHtcbiAgICAgIGZpbHRlcnMucHVzaCgnX3VvbUtleT0nICsgX3RoaXMuc2V0dGluZ3MuY3VycmVuY3kpO1xuICAgIH1cblxuICAgIF90aGlzLnNldHRpbmdzLmdsb2JhbEFqYXguYWJvcnQoKS5nZXREYXRhKHtcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIHVybCArICc/JyArIGZpbHRlcnMuam9pbignJicpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnWC1BUEktS0VZJzogX3RoaXMuc2V0dGluZ3MuYXBpS2V5XG4gICAgICB9LFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG5cbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5wYXJ0aWFsRnVuY3Rpb25zLmFjdGl2ZUNvbXBldGl0aW9uRGF0YVJlc3BvbnNlUGFyc2VyKGpzb24sIGZ1bmN0aW9uIChjb21wRGF0YSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjYWxsYmFjayhjb21wRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMubG9nKCdmYWlsZWQgdG8gbG9hZEFjdGl2ZUNvbXBldGl0aW9uICcgKyByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLnNldEFjdGl2ZUNvbXBldGl0aW9uID0gZnVuY3Rpb24gKGpzb24sIGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uID0ganNvbi5kYXRhO1xuICAgIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgPSBudWxsO1xuICAgIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3RJZCA9IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIGpzb24uZGF0YS5jb250ZXN0cyAhPT0gJ3VuZGVmaW5lZCcgJiYganNvbi5kYXRhLmNvbnRlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgIF90aGlzLnNldHRpbmdzLnBhcnRpYWxGdW5jdGlvbnMuYWN0aXZlQ29udGVzdERhdGFSZXNwb25zZVBhcnNlcihqc29uLmRhdGEuY29udGVzdHMsIGZ1bmN0aW9uIChjb250ZXN0cykge1xuICAgICAgICBtYXBPYmplY3QoY29udGVzdHMsIGZ1bmN0aW9uIChjb250ZXN0KSB7XG4gICAgICAgICAgaWYgKGNvbnRlc3Quc3RhdHVzQ29kZSA8IDcgJiYgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdCA9IGNvbnRlc3Q7XG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0SWQgPSBjb250ZXN0LmlkO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QucmV3YXJkcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5yZXdhcmRzID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZXdhcmRzID0gW107XG4gICAgICAgICAgICBtYXBPYmplY3QoX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5yZXdhcmRzLCBmdW5jdGlvbiAocmV3YXJkKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgcmV3YXJkLnJld2FyZFJhbmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmtQYXJ0cyA9IHJld2FyZC5yZXdhcmRSYW5rLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICAgICAgdmFyIHJld2FyZFJhbmsgPSBbXTtcblxuICAgICAgICAgICAgICAgIG1hcE9iamVjdChyYW5rUGFydHMsIGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoc3RyaW5nQ29udGFpbnMocGFydCwgJy0nKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFua1JhbmdlID0gcGFydC5zcGxpdCgnLScpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFnZVN0YXJ0ID0gcGFyc2VJbnQocmFua1JhbmdlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlRW5kID0gcGFyc2VJbnQocmFua1JhbmdlWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHJhZ2VTdGFydDsgaSA8PSByYW5nZUVuZDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV3YXJkUmFuay5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXdhcmRSYW5rLnB1c2gocGFyc2VJbnQocGFydCkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV3YXJkLnJld2FyZFJhbmsgPSByZXdhcmRSYW5rO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV3YXJkcy5wdXNoKHJld2FyZCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5yZXdhcmRzID0gcmV3YXJkcztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5nZXRMZWFkZXJib2FyZERhdGEgPSBmdW5jdGlvbiAoY291bnQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdElkICE9PSBudWxsKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIHVybCA9IF90aGlzLnNldHRpbmdzLnVyaS5jb250ZXN0TGVhZGVyYm9hcmQucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0SWQpO1xuICAgICAgdmFyIGZpbHRlcnMgPSBbXG4gICAgICAgICdfbGltaXQ9JyArIGNvdW50XG4gICAgICBdO1xuXG4gICAgICBpZiAoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubWluaVNjb3JlQm9hcmQuZW5hYmxlUmFua2luZ3MpIHtcbiAgICAgICAgZmlsdGVycy5wdXNoKCdyYW5raW5ncz0nICsgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubWluaVNjb3JlQm9hcmQucmFua2luZ3NDb3VudCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MubWVtYmVySWQgPT09ICdzdHJpbmcnICYmIF90aGlzLnNldHRpbmdzLm1lbWJlcklkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZmlsdGVycy5wdXNoKCdtZW1iZXJJZD0nICsgX3RoaXMuc2V0dGluZ3MubWVtYmVySWQpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXR0aW5ncy5nbG9iYWxBamF4LmFib3J0KCkuZ2V0RGF0YSh7XG4gICAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgICB1cmw6IF90aGlzLnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgdXJsICsgJz8nICsgZmlsdGVycy5qb2luKCcmJyksXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnWC1BUEktS0VZJzogX3RoaXMuc2V0dGluZ3MuYXBpS2V5XG4gICAgICAgIH0sXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XG4gICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgLy8gaWYoXG4gICAgICAgICAgICAvLyAgIHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sb2FkTGVhZGVyYm9hcmRIaXN0b3J5W190aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3RJZF0gPT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgIC8vICAgfHxcbiAgICAgICAgICAgIC8vICAgKFxuICAgICAgICAgICAgLy8gICAgIHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sb2FkTGVhZGVyYm9hcmRIaXN0b3J5W190aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3RJZF0gIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgIC8vICAgICAmJlxuICAgICAgICAgICAgLy8gICAgIF90aGlzLnNldHRpbmdzLmxvYWRMZWFkZXJib2FyZEhpc3RvcnlbX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdElkXSAhPT0gZGF0YVxuICAgICAgICAgICAgLy8gICApXG4gICAgICAgICAgICAvLyApIHtcbiAgICAgICAgICAgIC8vICAgX3RoaXMuc2V0dGluZ3MubG9hZExlYWRlcmJvYXJkSGlzdG9yeVtfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0SWRdID0ge1xuICAgICAgICAgICAgLy8gICAgIGNoYW5nZWQ6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoanNvbi5kYXRhKVxuICAgICAgICAgICAgLy8gICB9O1xuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5wYXJ0aWFsRnVuY3Rpb25zLmxlYWRlcmJvYXJkRGF0YVJlc3BvbnNlUGFyc2VyKGpzb24uZGF0YSwgZnVuY3Rpb24gKGxiRGF0YSkge1xuICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5sZWFkZXJib2FyZERhdGEgPSBsYkRhdGE7XG5cbiAgICAgICAgICAgICAgY2FsbGJhY2sobGJEYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBnZXRMZWFkZXJib2FyZERhdGEgJyArIHJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnVwZGF0ZUxlYWRlcmJvYXJkTmF2aWdhdGlvbkNvdW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2V0dGluZ3MubmF2aWdhdGlvbiAhPT0gbnVsbCkge1xuICAgICAgdmFyIG1lbnVJdGVtQ291bnQgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24sICcuJyArIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb24udG91cm5hbWVudHMubmF2aWdhdGlvbkNsYXNzICsgJyAuY2wtbWFpbi1uYXZpZ2F0aW9uLWl0ZW0tY291bnQnKTtcbiAgICAgIG1lbnVJdGVtQ291bnQuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuYWN0aXZlQ29tcGV0aXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy51cGRhdGVBY2hpZXZlbWVudE5hdmlnYXRpb25Db3VudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24gIT09IG51bGwpIHtcbiAgICAgIHZhciBtZW51SXRlbUNvdW50ID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5zZXR0aW5ncy5uYXZpZ2F0aW9uLCAnLicgKyBfdGhpcy5zZXR0aW5ncy5uYXZpZ2F0aW9uLmFjaGlldmVtZW50cy5uYXZpZ2F0aW9uQ2xhc3MgKyAnIC5jbC1tYWluLW5hdmlnYXRpb24taXRlbS1jb3VudCcpO1xuICAgICAgbWVudUl0ZW1Db3VudC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudHMudG90YWxDb3VudDtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy51cGRhdGVSZXdhcmRzTmF2aWdhdGlvbkNvdW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2V0dGluZ3MubmF2aWdhdGlvbiAhPT0gbnVsbCkge1xuICAgICAgdmFyIG1lbnVJdGVtQ291bnQgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24sICcuJyArIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb24ucmV3YXJkcy5uYXZpZ2F0aW9uQ2xhc3MgKyAnIC5jbC1tYWluLW5hdmlnYXRpb24taXRlbS1jb3VudCcpO1xuICAgICAgbWVudUl0ZW1Db3VudC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5yZXdhcmRzLmF2YWlsYWJsZVJld2FyZHMubGVuZ3RoO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnVwZGF0ZU1lc3NhZ2VzTmF2aWdhdGlvbkNvdW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2V0dGluZ3MubmF2aWdhdGlvbiAhPT0gbnVsbCkge1xuICAgICAgdmFyIG1lbnVJdGVtQ291bnQgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24sICcuJyArIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb24uaW5ib3gubmF2aWdhdGlvbkNsYXNzICsgJyAuY2wtbWFpbi1uYXZpZ2F0aW9uLWl0ZW0tY291bnQnKTtcbiAgICAgIG1lbnVJdGVtQ291bnQuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubWVzc2FnZXMubWVzc2FnZXMubGVuZ3RoO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2hlY2tBY2hpZXZlbWVudHNBamF4ID0gbmV3IGNMYWJzLkFqYXgoKTtcbiAgdGhpcy5jaGVja0ZvckF2YWlsYWJsZUFjaGlldmVtZW50cyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHVybCA9IF90aGlzLnNldHRpbmdzLnVyaS5hY2hpZXZlbWVudHMucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZCk7XG4gICAgLy8gdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIC8vIHZhciBjcmVhdGVkRGF0ZUZpbHRlciA9IGRhdGUudG9JU09TdHJpbmcoKTtcbiAgICB2YXIgZmlsdGVycyA9IFtcbiAgICAgICdfbGltaXQ9JyArIF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50cy5saW1pdCxcbiAgICAgICdfaW5jbHVkZT1yZXdhcmRzJyxcbiAgICAgIC8vICdzY2hlZHVsZWRFbmQ+PT0nICsgY3JlYXRlZERhdGVGaWx0ZXIsXG4gICAgICAoJ19sYW5nPScgKyBfdGhpcy5zZXR0aW5ncy5sYW5ndWFnZSlcbiAgICBdO1xuICAgIHZhciB3aXRoR3JvdXBzID0gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmN1cnJlbmN5ID09PSAnc3RyaW5nJyAmJiBfdGhpcy5zZXR0aW5ncy5jdXJyZW5jeS5sZW5ndGggPiAwKSB7XG4gICAgICBmaWx0ZXJzLnB1c2goJ191b21LZXk9JyArIF90aGlzLnNldHRpbmdzLmN1cnJlbmN5KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLm1lbWJlci5ncm91cHMgIT09ICd1bmRlZmluZWQnICYmIF90aGlzLnNldHRpbmdzLm1lbWJlci5ncm91cHMubGVuZ3RoID4gMCkge1xuICAgICAgd2l0aEdyb3VwcyA9IHRydWU7XG4gICAgICBmaWx0ZXJzLnB1c2goJ21lbWJlckdyb3Vwcz0nICsgX3RoaXMuc2V0dGluZ3MubWVtYmVyLmdyb3Vwcy5qb2luKCcsJykpO1xuICAgIH1cblxuICAgIC8vICcmc2NoZWR1bGVkRW5kPj09JyArIGNyZWF0ZWREYXRlRmlsdGVyICtcbiAgICBjaGVja0FjaGlldmVtZW50c0FqYXguYWJvcnQoKS5nZXREYXRhKHtcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIHVybCArICc/X2xhbmc9JyArIF90aGlzLnNldHRpbmdzLmxhbmd1YWdlICsgJyZfdW9tS2V5PScgKyBfdGhpcy5zZXR0aW5ncy5jdXJyZW5jeSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxuICAgICAgfSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICB2YXIganNvbkRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcblxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLnBhcnRpYWxGdW5jdGlvbnMuYWNoaWV2ZW1lbnREYXRhRm9yQWxsUmVzcG9uc2VQYXJzZXIoanNvbkRhdGEsIGZ1bmN0aW9uIChqc29uRm9yQWxsKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudHMudG90YWxDb3VudCA9IHBhcnNlSW50KGpzb25Gb3JBbGwubWV0YS50b3RhbFJlY29yZHNGb3VuZCk7XG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudHMubGlzdCA9IFtdO1xuXG4gICAgICAgICAgICBtYXBPYmplY3QoanNvbkZvckFsbC5kYXRhLCBmdW5jdGlvbiAoYWNoKSB7XG4gICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50cy5saXN0LnB1c2goYWNoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAod2l0aEdyb3Vwcykge1xuICAgICAgICAgICAgICBjaGVja0FjaGlldmVtZW50c0FqYXguYWJvcnQoKS5nZXREYXRhKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnR0VUJyxcbiAgICAgICAgICAgICAgICB1cmw6IF90aGlzLnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgdXJsICsgJz8nICsgZmlsdGVycy5qb2luKCcmJyksXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5wYXJ0aWFsRnVuY3Rpb25zLmFjaGlldmVtZW50RGF0YUZvck1lbWJlckdyb3VwUmVzcG9uc2VQYXJzZXIoanNvbiwgZnVuY3Rpb24gKGFjaGlldm1lbnRNZW1iZXJHcm91cERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBtYXBPYmplY3QoYWNoaWV2bWVudE1lbWJlckdyb3VwRGF0YS5kYXRhLCBmdW5jdGlvbiAoYWNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcE9iamVjdChfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudHMubGlzdCwgZnVuY3Rpb24gKGFjaENoZWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY2hDaGVjay5pZCA9PT0gYWNoLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudHMubGlzdC5wdXNoKGFjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudHMudG90YWxDb3VudCA9IF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50cy5saXN0Lmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50cy5saXN0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBjaGVja0ZvckF2YWlsYWJsZUFjaGlldmVtZW50cyAnICsgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhqc29uRm9yQWxsLmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGNoZWNrRm9yQXZhaWxhYmxlQWNoaWV2ZW1lbnRzICcgKyByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ2V0QWNoaWV2ZW1lbnRzQWpheCA9IG5ldyBjTGFicy5BamF4KCk7XG4gIHRoaXMuZ2V0QWNoaWV2ZW1lbnQgPSBmdW5jdGlvbiAoYWNoaWV2ZW1lbnRJZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZ2V0QWNoaWV2ZW1lbnRzQWpheC5hYm9ydCgpLmdldERhdGEoe1xuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIF90aGlzLnNldHRpbmdzLnVyaS5hY2hpZXZlbWVudC5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIGFjaGlldmVtZW50SWQpICsgJz9fbGFuZz0nICsgX3RoaXMuc2V0dGluZ3MubGFuZ3VhZ2UgKyAnJl91b21LZXk9JyArIF90aGlzLnNldHRpbmdzLmN1cnJlbmN5LFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnWC1BUEktS0VZJzogX3RoaXMuc2V0dGluZ3MuYXBpS2V5XG4gICAgICB9LFxuICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UsIGRhdGFPYmosIHhocikge1xuICAgICAgICB2YXIganNvbiA9IG51bGw7XG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MucGFydGlhbEZ1bmN0aW9ucy5hY2hpZXZlbWVudERhdGFSZXNwb25zZVBhcnNlcihqc29uLCBmdW5jdGlvbiAoYWNoaWV2ZW1lbnREYXRhKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhhY2hpZXZlbWVudERhdGEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdldFJld2FyZEFqYXggPSBuZXcgY0xhYnMuQWpheCgpO1xuICB0aGlzLmdldFJld2FyZCA9IGZ1bmN0aW9uIChyZXdhcmRJZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZ2V0UmV3YXJkQWpheC5hYm9ydCgpLmdldERhdGEoe1xuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIF90aGlzLnNldHRpbmdzLnVyaS5tZW1iZXJSZXdhcmQucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZCkucmVwbGFjZSgnOmF3YXJkSWQnLCByZXdhcmRJZCksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcbiAgICAgIH0sXG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XG4gICAgICAgIHZhciBqc29uID0gbnVsbDtcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5wYXJ0aWFsRnVuY3Rpb25zLnJld2FyZERhdGFSZXNwb25zZVBhcnNlcihqc29uLCBmdW5jdGlvbiAocmV3YXJkRGF0YSkge1xuICAgICAgICAgICAgY2FsbGJhY2socmV3YXJkRGF0YSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ2V0TWVzc2FnZUFqYXggPSBuZXcgY0xhYnMuQWpheCgpO1xuICB0aGlzLmdldE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZUlkLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBnZXRNZXNzYWdlQWpheC5hYm9ydCgpLmdldERhdGEoe1xuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIF90aGlzLnNldHRpbmdzLnVyaS5tZXNzYWdlQnlJZC5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLm1lbWJlcklkKS5yZXBsYWNlKCc6bWVzc2FnZUlkJywgbWVzc2FnZUlkKSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxuICAgICAgfSxcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcbiAgICAgICAgdmFyIGpzb24gPSBudWxsO1xuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIF90aGlzLnNldHRpbmdzLnBhcnRpYWxGdW5jdGlvbnMubWVzc2FnZURhdGFSZXNwb25zZVBhcnNlcihqc29uLCBmdW5jdGlvbiAobWVzc2FnZURhdGEpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG1lc3NhZ2VEYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjbGFpbVJld2FyZEFqYXggPSBuZXcgY0xhYnMuQWpheCgpO1xuICB0aGlzLmNsYWltUmV3YXJkID0gZnVuY3Rpb24gKHJld2FyZElkLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBjbGFpbVJld2FyZEFqYXguYWJvcnQoKS5nZXREYXRhKHtcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyBfdGhpcy5zZXR0aW5ncy51cmkubWVtYmVyUmV3YXJkQ2xhaW0ucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZCkucmVwbGFjZSgnOmF3YXJkSWQnLCByZXdhcmRJZCksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcbiAgICAgIH0sXG4gICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UsIGRhdGFPYmosIHhocikge1xuICAgICAgICB2YXIganNvbiA9IG51bGw7XG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MucGFydGlhbEZ1bmN0aW9ucy5jbGFpbVJld2FyZERhdGFSZXNwb25zZVBhcnNlcihqc29uLCBmdW5jdGlvbiAoY2xhaW1SZXdhcmREYXRhKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhjbGFpbVJld2FyZERhdGEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGNoZWNrRm9yTWVtYmVyQWNoaWV2ZW1lbnRzQWpheCA9IG5ldyBjTGFicy5BamF4KCk7XG4gIHRoaXMuY2hlY2tGb3JNZW1iZXJBY2hpZXZlbWVudHNJc3N1ZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciB1cmwgPSBfdGhpcy5zZXR0aW5ncy51cmkuYWNoaWV2ZW1lbnRzSXNzdWVkLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MubWVtYmVySWQpO1xuXG4gICAgY2hlY2tGb3JNZW1iZXJBY2hpZXZlbWVudHNBamF4LmFib3J0KCkuZ2V0RGF0YSh7XG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyB1cmwsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcbiAgICAgIH0sXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UsIGRhdGFPYmosIHhocikge1xuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcblxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLnBhcnRpYWxGdW5jdGlvbnMuaXNzdWVkQWNoaWV2ZW1lbnRzRGF0YVJlc3BvbnNlUGFyc2VyKGpzb24sIGZ1bmN0aW9uIChpc3N1ZWRBY2hpZXZlbWVudHNEYXRhKSB7XG4gICAgICAgICAgICB2YXIgaWRMaXN0ID0gW107XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgaXNzdWVkQWNoaWV2ZW1lbnRzRGF0YS5hZ2dyZWdhdGlvbnMgIT09ICd1bmRlZmluZWQnICYmIGlzc3VlZEFjaGlldmVtZW50c0RhdGEuYWdncmVnYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgbWFwT2JqZWN0KGlzc3VlZEFjaGlldmVtZW50c0RhdGEuYWdncmVnYXRpb25zWzBdLml0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGlkTGlzdC5wdXNoKGl0ZW0udmFsdWUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soaWRMaXN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBjaGVja0Zvck1lbWJlckFjaGlldmVtZW50c0lzc3VlZCAnICsgcmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGNoZWNrRm9yTWVtYmVyQWNoaWV2ZW1lbnRzUHJvZ3Jlc3Npb25BamF4ID0gbmV3IGNMYWJzLkFqYXgoKTtcbiAgdGhpcy5jaGVja0Zvck1lbWJlckFjaGlldmVtZW50c1Byb2dyZXNzaW9uID0gZnVuY3Rpb24gKGlkTGlzdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciB1cmwgPSBfdGhpcy5zZXR0aW5ncy51cmkuYWNoaWV2ZW1lbnRzUHJvZ3Jlc3Npb24ucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZCk7XG5cbiAgICBjaGVja0Zvck1lbWJlckFjaGlldmVtZW50c1Byb2dyZXNzaW9uQWpheC5hYm9ydCgpLmdldERhdGEoe1xuICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICB1cmw6IF90aGlzLnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgdXJsICsgKGlkTGlzdC5sZW5ndGggPiAwID8gKCc/aWQ9JyArIGlkTGlzdC5qb2luKCcsJykpIDogJycpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnWC1BUEktS0VZJzogX3RoaXMuc2V0dGluZ3MuYXBpS2V5XG4gICAgICB9LFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5wYXJ0aWFsRnVuY3Rpb25zLm1lbWJlckFjaGlldmVtZW50c1Byb2dyZXNzaW9uRGF0YVJlc3BvbnNlUGFyc2VyKGpzb24uZGF0YSwgZnVuY3Rpb24gKG1lbWJlckFjaGlldmVtZW50c1Byb2dyZXNzaW9uRGF0YSkge1xuICAgICAgICAgICAgICBjYWxsYmFjayhtZW1iZXJBY2hpZXZlbWVudHNQcm9ncmVzc2lvbkRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGNoZWNrRm9yTWVtYmVyQWNoaWV2ZW1lbnRzUHJvZ3Jlc3Npb24gJyArIHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjaGVja0ZvckF2YWlsYWJsZVJld2FyZHNBamF4ID0gbmV3IGNMYWJzLkFqYXgoKTtcbiAgdGhpcy5jaGVja0ZvckF2YWlsYWJsZVJld2FyZHMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciB1cmwgPSBfdGhpcy5zZXR0aW5ncy51cmkubWVzc2FnZXMucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZCk7XG5cbiAgICAvLyBjbGFpbWVkIHJld2FyZHNcbiAgICBjaGVja0ZvckF2YWlsYWJsZVJld2FyZHNBamF4LmFib3J0KCkuZ2V0RGF0YSh7XG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyB1cmwgKyAnP19zb3J0QnlGaWVsZHM9Y3JlYXRlZDpkZXNjJm1lc3NhZ2VUeXBlPVJld2FyZCZwcml6ZS5jbGFpbWVkPXRydWUmX2hhc1ZhbHVlc0Zvcj1wcml6ZSZfbGltaXQ9MTAwJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxuICAgICAgfSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICB2YXIganNvbkNsYWltZWRQcml6ZXMgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcblxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLnJld2FyZHMucmV3YXJkcyA9IFtdO1xuICAgICAgICAgIF90aGlzLnNldHRpbmdzLnJld2FyZHMuYXZhaWxhYmxlUmV3YXJkcyA9IFtdO1xuICAgICAgICAgIF90aGlzLnNldHRpbmdzLnJld2FyZHMuZXhwaXJlZFJld2FyZHMgPSBbXTtcblxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLnBhcnRpYWxGdW5jdGlvbnMuY2xhaW1lZFJld2FyZHNEYXRhUmVzcG9uc2VQYXJzZXIoanNvbkNsYWltZWRQcml6ZXMuZGF0YSwgZnVuY3Rpb24gKGNsYWltZWRSZXdhcmRzRGF0YSkge1xuICAgICAgICAgICAgbWFwT2JqZWN0KGNsYWltZWRSZXdhcmRzRGF0YSwgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgdmFyIGV4cGlyZWQgPSAodHlwZW9mIG1lc3NhZ2UuZXhwaXJ5ID09PSAndW5kZWZpbmVkJykgPyBmYWxzZSA6IChtb21lbnQobWVzc2FnZS5leHBpcnkpLmRpZmYobW9tZW50KCkpIDwgMCk7XG5cbiAgICAgICAgICAgICAgaWYgKCFleHBpcmVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MucmV3YXJkcy5yZXdhcmRzLnB1c2gobWVzc2FnZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBub3QtY2xhaW1lZCByZXdhcmRzXG4gICAgICAgICAgICBjaGVja0ZvckF2YWlsYWJsZVJld2FyZHNBamF4LmFib3J0KCkuZ2V0RGF0YSh7XG4gICAgICAgICAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgICAgICAgICB1cmw6IF90aGlzLnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgdXJsICsgJz9fc29ydEJ5RmllbGRzPWNyZWF0ZWQ6ZGVzYyZtZXNzYWdlVHlwZT1SZXdhcmQmcHJpemUuY2xhaW1lZD1mYWxzZSZfaGFzVmFsdWVzRm9yPXByaXplJl9saW1pdD0xMDAnLFxuICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UsIGRhdGFPYmosIHhocikge1xuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgIHZhciBqc29uTm90Q2xhaW1lZCA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5wYXJ0aWFsRnVuY3Rpb25zLm5vdENsYWltZWRSZXdhcmRzRGF0YVJlc3BvbnNlUGFyc2VyKGpzb25Ob3RDbGFpbWVkLmRhdGEsIGZ1bmN0aW9uIChub3RDbGFpbWVkUmV3YXJkc0RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwT2JqZWN0KG5vdENsYWltZWRSZXdhcmRzRGF0YSwgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwaXJlZCA9ICh0eXBlb2YgbWVzc2FnZS5leHBpcnkgPT09ICd1bmRlZmluZWQnKSA/IGZhbHNlIDogKG1vbWVudChtZXNzYWdlLmV4cGlyeSkuZGlmZihtb21lbnQoKSkgPCAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmICghZXhwaXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MucmV3YXJkcy5hdmFpbGFibGVSZXdhcmRzLnB1c2gobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBleHBpcmVkIHJld2FyZHNcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXRjRGF0ZSA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArICctJyArIGZvcm1hdE51bWJlckxlYWRpbmdaZXJvcygoZGF0ZS5nZXRVVENNb250aCgpICsgMSksIDIpICsgJy0nICsgZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCAyKSArICdUJyArIGZvcm1hdE51bWJlckxlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCksIDIpICsgJzonICsgZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCAyKSArICc6MDAnO1xuICAgICAgICAgICAgICAgICAgICBjaGVja0ZvckF2YWlsYWJsZVJld2FyZHNBamF4LmFib3J0KCkuZ2V0RGF0YSh7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIHVybCArICc/X3NvcnRCeUZpZWxkcz1jcmVhdGVkOmRlc2MmX2xpbWl0PTEwMCZtZXNzYWdlVHlwZT1SZXdhcmQmX2hhc1ZhbHVlc0Zvcj1leHBpcnkmZXhwaXJ5PD09JyArIHV0Y0RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpzb25FeHBpcmVkUmV3YXJkcyA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLnBhcnRpYWxGdW5jdGlvbnMuZXhwaXJlZFJld2FyZHNEYXRhUmVzcG9uc2VQYXJzZXIoanNvbkV4cGlyZWRSZXdhcmRzLmRhdGEsIGZ1bmN0aW9uIChleHBpcmVkUmV3YXJkc0RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBPYmplY3QoZXhwaXJlZFJld2FyZHNEYXRhLCBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MucmV3YXJkcy5leHBpcmVkUmV3YXJkcy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soX3RoaXMuc2V0dGluZ3MucmV3YXJkcy5yZXdhcmRzLCBfdGhpcy5zZXR0aW5ncy5yZXdhcmRzLmF2YWlsYWJsZVJld2FyZHMsIF90aGlzLnNldHRpbmdzLnJld2FyZHMuZXhwaXJlZFJld2FyZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGNoZWNrRm9yQXZhaWxhYmxlUmV3YXJkcyBleHBpcmVkICcgKyByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBjaGVja0ZvckF2YWlsYWJsZVJld2FyZHMgbm90LWNsYWltZWQgJyArIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGNoZWNrRm9yQXZhaWxhYmxlUmV3YXJkcyBjbGFpbWVkICcgKyByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgY2hlY2tGb3JBdmFpbGFibGVNZXNzYWdlc0FqYXggPSBuZXcgY0xhYnMuQWpheCgpO1xuICB0aGlzLmNoZWNrRm9yQXZhaWxhYmxlTWVzc2FnZXMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciB1cmwgPSBfdGhpcy5zZXR0aW5ncy51cmkubWVzc2FnZXMucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZCk7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuXG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0TW9udGgoKSAtIDEpO1xuXG4gICAgdmFyIGNyZWF0ZWREYXRlRmlsdGVyID0gZGF0ZS5nZXRGdWxsWWVhcigpICsgJy0nICsgZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zKChkYXRlLmdldE1vbnRoKCkgKyAxKSwgMikgKyAnLScgKyBmb3JtYXROdW1iZXJMZWFkaW5nWmVyb3MoZGF0ZS5nZXREYXRlKCksIDIpO1xuXG4gICAgY2hlY2tGb3JBdmFpbGFibGVNZXNzYWdlc0FqYXguYWJvcnQoKS5nZXREYXRhKHtcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIHVybCArICc/X3NvcnRCeUZpZWxkcz1jcmVhdGVkOmRlc2MmX2hhc05vVmFsdWVzRm9yPXByaXplJl9saW1pdD0xMDAmY3JlYXRlZD49PScgKyBjcmVhdGVkRGF0ZUZpbHRlcixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxuICAgICAgfSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICB2YXIganNvbkF2YWlsYWJsZU1lc3NhZ2VzID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG5cbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5wYXJ0aWFsRnVuY3Rpb25zLmF2YWlsYWJsZU1lc3NhZ2VzRGF0YVJlc3BvbnNlUGFyc2VyKGpzb25BdmFpbGFibGVNZXNzYWdlcy5kYXRhLCBmdW5jdGlvbiAoYXZhaWxhYmxlTWVzc2FnZXNEYXRhKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5tZXNzYWdlcy5tZXNzYWdlcyA9IFtdO1xuXG4gICAgICAgICAgICBtYXBPYmplY3QoYXZhaWxhYmxlTWVzc2FnZXNEYXRhLCBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5tZXNzYWdlcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKF90aGlzLnNldHRpbmdzLm1lc3NhZ2VzLm1lc3NhZ2VzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBjaGVja0ZvckF2YWlsYWJsZU1lc3NhZ2VzICcgKyByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgb3B0SW5NZW1iZXJBamF4ID0gbmV3IGNMYWJzLkFqYXgoKTtcbiAgdGhpcy5vcHRJbk1lbWJlclRvQWN0aXZlQ29tcGV0aXRpb24gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciB1cmwgPSBfdGhpcy5zZXR0aW5ncy51cmkubWVtYmVyQ29tcGV0aXRpb25PcHRJbi5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLm1lbWJlcklkKS5yZXBsYWNlKCc6Y29tcGV0aXRpb25JZCcsIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uSWQpO1xuXG4gICAgb3B0SW5NZW1iZXJBamF4LmFib3J0KCkuZ2V0RGF0YSh7XG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyB1cmwsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcbiAgICAgIH0sXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UsIGRhdGFPYmosIHhocikge1xuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBvcHRJbk1lbWJlclRvQWN0aXZlQ29tcGV0aXRpb24gJyArIHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXZhbGlkYXRpb25Db3VudCA9IDA7XG4gIHRoaXMucmV2YWxpZGF0ZUlmU3VjY2Vzc2Z1bGxPcHRJbiA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5sb2FkQWN0aXZlQ29tcGV0aXRpb24oZnVuY3Rpb24gKGNvbXBldGl0aW9uSnNvbikge1xuICAgICAgaWYgKHR5cGVvZiBjb21wZXRpdGlvbkpzb24uZGF0YS5vcHRpbiA9PT0gJ2Jvb2xlYW4nICYmICFjb21wZXRpdGlvbkpzb24uZGF0YS5vcHRpbikge1xuICAgICAgICByZXZhbGlkYXRpb25Db3VudCsrO1xuXG4gICAgICAgIGlmIChyZXZhbGlkYXRpb25Db3VudCA8IDUpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnJldmFsaWRhdGVJZlN1Y2Nlc3NmdWxsT3B0SW4oY2FsbGJhY2spO1xuICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2YWxpZGF0aW9uQ291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb21wZXRpdGlvbkpzb24uZGF0YS5vcHRpbiA9PT0gJ2Jvb2xlYW4nICYmIGNvbXBldGl0aW9uSnNvbi5kYXRhLm9wdGluKSB7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBldGl0aW9uSnNvbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5sZWFkZXJib2FyZERhdGFSZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQucmVmcmVzaExiRGF0YUludGVydmFsKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQucmVmcmVzaExiRGF0YUludGVydmFsKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAoX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24gIT09IG51bGwgJiYgdHlwZW9mIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLm9wdGluUmVxdWlyZWQgPT09ICdib29sZWFuJyAmJiAhX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW5SZXF1aXJlZCkgfHxcbiAgICAgICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4gPT09ICdib29sZWFuJyAmJiBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5vcHRpbilcbiAgICApIHtcbiAgICAgIHZhciBjb3VudCA9IChfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5hY3RpdmUpID8gMCA6IF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmZ1bGxMZWFkZXJib2FyZFNpemU7XG4gICAgICBfdGhpcy5nZXRMZWFkZXJib2FyZERhdGEoY291bnQsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5hY3RpdmUpIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLmxvYWRTY29yZUJvYXJkKCk7XG4gICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLmFjdGl2ZSkgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5sb2FkTGVhZGVyYm9hcmQoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hMYkRhdGFJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMubGVhZGVyYm9hcmREYXRhUmVmcmVzaCgpO1xuICAgIH0sIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hJbnRlcnZhbE1pbGxpcyk7XG4gIH07XG5cbiAgdGhpcy5hY3RpdmVEYXRhUmVmcmVzaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24ucmVmcmVzaEludGVydmFsKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24ucmVmcmVzaEludGVydmFsKTtcbiAgICB9XG5cbiAgICBfdGhpcy5jaGVja0ZvckF2YWlsYWJsZUNvbXBldGl0aW9ucyhmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy51cGRhdGVMZWFkZXJib2FyZE5hdmlnYXRpb25Db3VudHMoKTtcblxuICAgICAgX3RoaXMucHJlcGFyZUFjdGl2ZUNvbXBldGl0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gKF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmFjdGl2ZSkgPyAwIDogX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuZnVsbExlYWRlcmJvYXJkU2l6ZTtcblxuICAgICAgICAvLyBjbGVhciB0byBub3QgY2xhc2ggd2l0aCBMQiByZWZyZXNoIHRoYXQgY291bGQgaGFwcGVuIGF0IHNhbWUgdGltZVxuICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQucmVmcmVzaEludGVydmFsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hJbnRlcnZhbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuYWN0aXZlIHx8IF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2V0dGluZ3MuYWN0aXZlKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uICE9PSBudWxsICYmIHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5vcHRpblJlcXVpcmVkID09PSAnYm9vbGVhbicgJiYgIV90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLm9wdGluUmVxdWlyZWQpIHx8XG4gICAgICAgICAgICAoX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24gIT09IG51bGwgJiYgdHlwZW9mIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLm9wdGluID09PSAnYm9vbGVhbicgJiYgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4pXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBfdGhpcy5nZXRMZWFkZXJib2FyZERhdGEoY291bnQsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5hY3RpdmUpIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLmxvYWRTY29yZUJvYXJkKCk7XG4gICAgICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLmFjdGl2ZSkgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5sb2FkTGVhZGVyYm9hcmQoKTtcblxuICAgICAgICAgICAgICAvLyByZS1zdGFydCBsZWFkZXJib2FyZCByZWZyZXNoXG4gICAgICAgICAgICAgIF90aGlzLmxlYWRlcmJvYXJkRGF0YVJlZnJlc2goKTtcblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5hY3RpdmUpIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLmxvYWRTY29yZUJvYXJkKCk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5zZXR0aW5ncy5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgX3RoaXMuZ2V0TGVhZGVyYm9hcmREYXRhKGNvdW50LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubG9hZExlYWRlcmJvYXJkKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyByZXN0YXJ0IGxlYWRlcmJvYXJkIHJlZnJlc2hcbiAgICAgICAgICAgIF90aGlzLmxlYWRlcmJvYXJkRGF0YVJlZnJlc2goKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuYWN0aXZlKSBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5sb2FkU2NvcmVCb2FyZCgpO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24ucmVmcmVzaEludGVydmFsID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5hY3RpdmVEYXRhUmVmcmVzaCgpO1xuICAgIH0sIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLnJlZnJlc2hJbnRlcnZhbE1pbGxpcyk7XG4gIH07XG5cbiAgdGhpcy5kZWFjdGl2YXRlQ29tcGV0aXRpb25zQW5kTGVhZGVyYm9hcmRzID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZWZyZXNoSW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZWZyZXNoSW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLmNsZWFyQWxsKCk7XG4gICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5jbGVhckFsbCgpO1xuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5zdG9wQWN0aXZpdHkgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hJbnRlcnZhbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hJbnRlcnZhbCk7XG4gICAgICBjbGVhckludGVydmFsKF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hJbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLnJlZnJlc2hJbnRlcnZhbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLnJlZnJlc2hJbnRlcnZhbCk7XG4gICAgICBjbGVhckludGVydmFsKF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLnJlZnJlc2hJbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hMYkRhdGFJbnRlcnZhbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hMYkRhdGFJbnRlcnZhbCk7XG4gICAgICBjbGVhckludGVydmFsKF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hMYkRhdGFJbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLnVwZGF0ZUludGVydmFsKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MudXBkYXRlSW50ZXJ2YWwpO1xuICAgICAgY2xlYXJJbnRlcnZhbChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZWZyZXNoSW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucmVzdGFydEFjdGl2aXR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLmFjdGl2ZURhdGFSZWZyZXNoKCk7XG4gICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQudXBkYXRlU2NvcmVCb2FyZCgpO1xuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5sb2FkTWVtYmVyID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLnNldHRpbmdzLmdsb2JhbEFqYXguYWJvcnQoKS5nZXREYXRhKHtcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIF90aGlzLnNldHRpbmdzLnVyaS5tZW1iZXJzLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MubWVtYmVySWQpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnWC1BUEktS0VZJzogX3RoaXMuc2V0dGluZ3MuYXBpS2V5XG4gICAgICB9LFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG5cbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5tZW1iZXIgPSBqc29uLmRhdGE7XG5cbiAgICAgICAgICBjYWxsYmFjayhqc29uLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGxvYWRNZW1iZXIgJyArIHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMubG9hZFdpZGdldFRyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLnVyaS50cmFuc2xhdGlvblBhdGggPT09ICdzdHJpbmcnICYmIF90aGlzLnNldHRpbmdzLnVyaS50cmFuc2xhdGlvblBhdGgubGVuZ3RoID4gMCAmJiBfdGhpcy5zZXR0aW5ncy5sb2FkVHJhbnNsYXRpb25zKSB7XG4gICAgICB2YXIgdXJsID0gKHN0cmluZ0NvbnRhaW5zKF90aGlzLnNldHRpbmdzLnVyaS50cmFuc2xhdGlvblBhdGgsICdodHRwJykpID8gX3RoaXMuc2V0dGluZ3MudXJpLnRyYW5zbGF0aW9uUGF0aC5yZXBsYWNlKCc6bGFuZ3VhZ2UnLCBfdGhpcy5zZXR0aW5ncy5sYW5ndWFnZSkgOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIF90aGlzLnNldHRpbmdzLnVyaS50cmFuc2xhdGlvblBhdGgucmVwbGFjZSgnOmxhbmd1YWdlJywgX3RoaXMuc2V0dGluZ3MubGFuZ3VhZ2UpO1xuXG4gICAgICBfdGhpcy5zZXR0aW5ncy5nbG9iYWxBamF4LmFib3J0KCkuZ2V0RGF0YSh7XG4gICAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcbiAgICAgICAgfSxcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy50cmFuc2xhdGlvbiA9IG1lcmdlT2JqZWN0cyhfdGhpcy5zZXR0aW5ncy50cmFuc2xhdGlvbiwganNvbik7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmxvZygnbm8gdHJhbnNsYXRpb24gZm9vdW5kICcgKyByZXNwb25zZSk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5zdGFydHVwID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5pbml0TGF5b3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmFjdGl2ZSA9IHRydWU7XG4gICAgICBfdGhpcy5hY3RpdmVEYXRhUmVmcmVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLnBhcnRpYWxGdW5jdGlvbnMuc3RhcnR1cENhbGxiYWNrKF90aGlzKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZW5hYmxlTm90aWZpY2F0aW9ucykge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5ub3RpZmljYXRpb25zLmluaXQoKTtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuY2FudmFzQW5pbWF0aW9uLmluaXQoKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2xlYW51cCgpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBfY2xlYW51cEluc3RhbmNlO1xuICB0aGlzLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChfY2xlYW51cEluc3RhbmNlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX2NsZWFudXBJbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgX2NsZWFudXBJbnN0YW5jZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5wcmVMb2FkZXJSZXJ1bigpO1xuXG4gICAgICBfdGhpcy5jbGVhbnVwKCk7XG4gICAgfSwgMzAwMCk7XG4gIH07XG5cbiAgdGhpcy5sb2FkU3R5bGVzaGVldCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGNyZWF0ZWRSZXNvdXJjZXMgPSBmYWxzZTtcbiAgICB2YXIgYXZhaWxhYmxlTGlua3MgPSBbXTtcblxuICAgIG9iamVjdEl0ZXJhdG9yKHF1ZXJ5KCdsaW5rJyksIGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICBpZiAobGluayAhPT0gbnVsbCkge1xuICAgICAgICBhdmFpbGFibGVMaW5rcy5wdXNoKG5ldyBVUkwobGluay5ocmVmLCBkb2N1bWVudC5iYXNlVVJJKS5ocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG1hcE9iamVjdChfdGhpcy5zZXR0aW5ncy5yZXNvdXJjZXMsIGZ1bmN0aW9uIChyZXNvdXJjZSwga2V5LCBjb3VudCkge1xuICAgICAgdmFyIGV4aXN0cyA9IGZhbHNlO1xuXG4gICAgICBtYXBPYmplY3QoYXZhaWxhYmxlTGlua3MsIGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICAgIGlmIChsaW5rID09PSBuZXcgVVJMKHJlc291cmNlLCBkb2N1bWVudC5iYXNlVVJJKS5ocmVmKSB7XG4gICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgncmVsJywgJ3N0eWxlc2hlZXQnKTtcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCByZXNvdXJjZSk7XG5cbiAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgbGluay5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGxpbmsub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG5cbiAgICAgICAgY3JlYXRlZFJlc291cmNlcyA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIWNyZWF0ZWRSZXNvdXJjZXMgJiYgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmNsaWNrZWRNaW5pU2NvcmVCb2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5kcmFnZ2luZykge1xuICAgICAgX3RoaXMuZGVhY3RpdmF0ZUNvbXBldGl0aW9uc0FuZExlYWRlcmJvYXJkcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxlYWRlcmJvYXJkRGF0YSA9IFtdO1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmluaXRMYXlvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIGxvYWQgdG91cm5hbWVudHMgZGF0YVxuICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5uYXZpZ2F0aW9uLnRvdXJuYW1lbnRzLmVuYWJsZSkge1xuICAgICAgICAgICAgX3RoaXMuYWN0aXZlRGF0YVJlZnJlc2goKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBsb2FkIGFjaGlldmVtZW50IGRhdGFcbiAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MubmF2aWdhdGlvbi5hY2hpZXZlbWVudHMuZW5hYmxlKSB7XG4gICAgICAgICAgICBfdGhpcy5jaGVja0ZvckF2YWlsYWJsZUFjaGlldmVtZW50cyhmdW5jdGlvbiAoYWNoaWV2ZW1lbnREYXRhKSB7XG4gICAgICAgICAgICAgIF90aGlzLnVwZGF0ZUFjaGlldmVtZW50TmF2aWdhdGlvbkNvdW50cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbG9hZCBpbml0aWFsIGF2YWlsYWJsZSByZXdhcmQgZGF0YVxuICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5uYXZpZ2F0aW9uLnJld2FyZHMuZW5hYmxlKSB7XG4gICAgICAgICAgICBfdGhpcy5jaGVja0ZvckF2YWlsYWJsZVJld2FyZHMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy51cGRhdGVSZXdhcmRzTmF2aWdhdGlvbkNvdW50cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbG9hZCBpbml0aWFsIGF2YWlsYWJsZSBtZXNzYWdlcyBkYXRhXG4gICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb24uaW5ib3guZW5hYmxlKSB7XG4gICAgICAgICAgICBfdGhpcy5jaGVja0ZvckF2YWlsYWJsZU1lc3NhZ2VzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMudXBkYXRlTWVzc2FnZXNOYXZpZ2F0aW9uQ291bnRzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSwgMjAwKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogT3BlbiBtYWluIHdpZGdldCBhbmQgb3BlbiBzcGVjaWZpYyB0YWIgYW5kIGxvYWRzIHJlbGV2YW50IGFjdGlvblxuICAgKiBAbWVtYmVyT2YgTGJXaWRnZXRcbiAgICogQHBhcmFtIHRhYiBTdHJpbmdcbiAgICogQHBhcmFtIGFjdGlvbkNhbGxiYWNrIEZ1bmN0aW9uXG4gICAqL1xuICB0aGlzLm9wZW5XaXRoVGFiQW5kQWN0aW9uID0gZnVuY3Rpb24gKHRhYiwgYWN0aW9uQ2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2V0dGluZ3MuYWN0aXZlKSB7XG4gICAgICB2YXIgbG9hZFRhYiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2V0dGluZ3MuY29udGFpbmVyLCB0YWIpO1xuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5uYXZpZ2F0aW9uU3dpdGNoKGxvYWRUYWIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuYWN0aXZlRGF0YVJlZnJlc2goKTtcblxuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbkNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgYWN0aW9uQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH0sIDIwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmRlYWN0aXZhdGVDb21wZXRpdGlvbnNBbmRMZWFkZXJib2FyZHMoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmluaXRMYXlvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubmF2aWdhdGlvblN3aXRjaChxdWVyeShfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLmNvbnRhaW5lciwgdGFiKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuYWN0aXZlRGF0YVJlZnJlc2goKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb25DYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBhY3Rpb25DYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0sIDIwMCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIHRoaXMub25VSUNoYW5nZSA9IGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB2YXIgY3VycmVudFdpZGdldFN0YXR1cyA9IG5ldyBDdXN0b21FdmVudCgnb25XaWRnZXRDaGFuZ2UnLCB7XG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIG1haW5XaWRnZXQ6IF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2V0dGluZ3MuYWN0aXZlLFxuICAgICAgICAgIG1pbmlTY29yZUJvYXJkOiBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5hY3RpdmVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5iaW5kQ29udGFpbmVyLmRpc3BhdGNoRXZlbnQoY3VycmVudFdpZGdldFN0YXR1cyk7XG4gICAgfSwgMzAwKTtcbiAgfTtcbiAgdmFyIGxvYWRDb21wZXRpdGlvbkxpc3RBamF4ID0gbmV3IGNMYWJzLkFqYXgoKTtcbiAgdGhpcy5ldmVudEhhbmRsZXJzID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAvLyBtaW5pIHNjb3JlYm9hcmQgb3B0LWluIGFjdGlvblxuICAgIGlmIChoYXNDbGFzcyhlbCwgJ2NsLXdpZGdldC1tcy1vcHRpbi1hY3Rpb24nKSAmJiAhaGFzQ2xhc3MoZWwsICdjaGVja2luZycpKSB7XG4gICAgICBhZGRDbGFzcyhlbCwgJ2NoZWNraW5nJyk7XG5cbiAgICAgIF90aGlzLm9wdEluTWVtYmVyVG9BY3RpdmVDb21wZXRpdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnJldmFsaWRhdGVJZlN1Y2Nlc3NmdWxsT3B0SW4oZnVuY3Rpb24gKGNvbXBldGl0aW9uSnNvbikge1xuICAgICAgICAgIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uID0gY29tcGV0aXRpb25Kc29uLmRhdGE7XG5cbiAgICAgICAgICAvLyBfdGhpcy5nZXRMZWFkZXJib2FyZERhdGEoMSwgZnVuY3Rpb24oIGRhdGEgKXtcbiAgICAgICAgICAvLyAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQubG9hZFNjb3JlQm9hcmQoIGRhdGEgKTtcbiAgICAgICAgICAvLyB9KTtcblxuICAgICAgICAgIC8vIGV4dHJhIGFjdGlvbiB0byBsb2FkIGNvbXBldGl0aW9uIGRldGFpbHMgb24gbWluaSBzY29yZWJvYXJkIG9wdC1pbiAtIFByb2R1Y3QgcmVxdWVzdFxuICAgICAgICAgIF90aGlzLmRlYWN0aXZhdGVDb21wZXRpdGlvbnNBbmRMZWFkZXJib2FyZHMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubGVhZGVyYm9hcmREYXRhID0gW107XG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmluaXRMYXlvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5hY3RpdmVEYXRhUmVmcmVzaCgpO1xuXG4gICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubG9hZENvbXBldGl0aW9uRGV0YWlscyhmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZW1vdmVDbGFzcyhlbCwgJ2NoZWNraW5nJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIExlYWRlcmJvYXJkIGRldGFpbHMgb3B0LWluIGFjdGlvblxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLW9wdGluLWFjdGlvbicpICYmICFoYXNDbGFzcyhlbCwgJ2NoZWNraW5nJykpIHtcbiAgICAgIGFkZENsYXNzKGVsLCAnY2hlY2tpbmcnKTtcblxuICAgICAgX3RoaXMub3B0SW5NZW1iZXJUb0FjdGl2ZUNvbXBldGl0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMucmV2YWxpZGF0ZUlmU3VjY2Vzc2Z1bGxPcHRJbihmdW5jdGlvbiAoY29tcGV0aXRpb25Kc29uKSB7XG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24gPSBjb21wZXRpdGlvbkpzb24uZGF0YTtcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmNvbXBldGl0aW9uRGV0YWlsc09wdEluQnV0dG9uU3RhdGUoKTtcblxuICAgICAgICAgIHJlbW92ZUNsYXNzKGVsLCAnY2hlY2tpbmcnKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gTGVhZGVyYm9hcmQgZGV0YWlscyBvcHQtaW4gYWN0aW9uXG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgJ2NsLW1haW4td2lkZ2V0LWxiLW9wdGluLWFjdGlvbicpICYmICFoYXNDbGFzcyhlbCwgJ2NoZWNraW5nJykpIHtcbiAgICAgIGFkZENsYXNzKGVsLCAnY2hlY2tpbmcnKTtcblxuICAgICAgX3RoaXMub3B0SW5NZW1iZXJUb0FjdGl2ZUNvbXBldGl0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMucmV2YWxpZGF0ZUlmU3VjY2Vzc2Z1bGxPcHRJbihmdW5jdGlvbiAoY29tcGV0aXRpb25Kc29uKSB7XG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24gPSBjb21wZXRpdGlvbkpzb24uZGF0YTtcblxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubG9hZENvbXBldGl0aW9uRGV0YWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZW1vdmVDbGFzcyhlbCwgJ2NoZWNraW5nJyk7XG4gICAgICAgICAgZWwucGFyZW50Tm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBjbG9zZSBtaW5pIHNjb3JlYm9hcmQgaW5mbyBhcmVhXG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgJ2NsLXdpZGdldC1tcy1pbmZvcm1hdGlvbi1jbG9zZScpICYmICFoYXNDbGFzcyhlbCwgJ2NoZWNraW5nJykpIHtcbiAgICAgIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLmNsZWFyQWxsKCk7XG5cbiAgICAgIC8vIGNsb3NlIG5vdGlmaWNhdGlvbiB3aW5kb3dcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtd2lkZ2V0LW5vdGlmLWluZm9ybWF0aW9uLWNsb3NlJykgJiYgIWhhc0NsYXNzKGVsLCAnY2hlY2tpbmcnKSkge1xuICAgICAgX3RoaXMuc2V0dGluZ3Mubm90aWZpY2F0aW9ucy5oaWRlTm90aWZpY2F0aW9uKCk7XG5cbiAgICAgIC8vIGNsb3NlIGxlYWRlcmJvYXJkIHdpbmRvd1xuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1sYi1oZWFkZXItY2xvc2UnKSB8fCBoYXNDbGFzcyhlbCwgJ2NsLW1haW4td2lkZ2V0LWFjaC1oZWFkZXItY2xvc2UnKSB8fCBoYXNDbGFzcyhlbCwgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1oZWFkZXItY2xvc2UnKSB8fCBoYXNDbGFzcyhlbCwgJ2NsLW1haW4td2lkZ2V0LWluYm94LWhlYWRlci1jbG9zZScpIHx8IGhhc0NsYXNzKGVsLCAnY2wtd2lkZ2V0LW1haW4td2lkZ2V0LW92ZXJsYXktd3JhcHBlcicpKSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmhpZGUoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgICAgICAgX3RoaXMuYWN0aXZlRGF0YVJlZnJlc2goKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBsb2FkIGVtYmVkZGVkIGNvbXBldGl0aW9uIGRldGFpbHNcbiAgICB9IGVsc2UgaWYgKCFfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5sYXlvdXRTZXR0aW5ncy50aXRsZUxpbmtUb0RldGFpbHNQYWdlICYmIChoYXNDbGFzcyhlbCwgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtY29udGVudC1sYWJlbCcpIHx8IGNsb3Nlc3QoZWwsICcuY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1jb250ZW50LWxhYmVsJykgIT09IG51bGwpKSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNob3dFbWJlZGRlZENvbXBldGl0aW9uRGV0YWlsc0NvbnRlbnQoZnVuY3Rpb24gKCkge30pO1xuXG4gICAgICAvLyBoaWRlIGVtYmVkZGVkIGNvbXBldGl0aW9uIGRldGFpbHNcbiAgICB9IGVsc2UgaWYgKCFfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5sYXlvdXRTZXR0aW5ncy50aXRsZUxpbmtUb0RldGFpbHNQYWdlICYmIGhhc0NsYXNzKGVsLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1kZXNjcmlwdGlvbi1jbG9zZScpKSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmhpZGVFbWJlZGRlZENvbXBldGl0aW9uRGV0YWlsc0NvbnRlbnQoZnVuY3Rpb24gKCkge30pO1xuXG4gICAgICAvLyBsb2FkIGNvbXBldGl0aW9uIGRldGFpbHNcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1jb250ZW50LWxhYmVsJykgfHwgY2xvc2VzdChlbCwgJy5jbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWNvbnRlbnQtbGFiZWwnKSAhPT0gbnVsbCkge1xuICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09IG51bGwpIHtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5sb2FkQ29tcGV0aXRpb25EZXRhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGxvYWQgYWNoaWV2ZW1lbnQgZGV0YWlsc1xuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1hY2gtbGlzdC1tb3JlJykpIHtcbiAgICAgIF90aGlzLmdldEFjaGlldmVtZW50KGVsLmRhdGFzZXQuaWQsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubG9hZEFjaGlldmVtZW50RGV0YWlscyhkYXRhLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGxlYWRlcmJvYXJkIGRldGFpbHMgYmFjayBidXR0b25cbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1iYWNrLWJ0bicpKSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmhpZGVDb21wZXRpdGlvbkRldGFpbHMoKTtcblxuICAgICAgLy8gYWNoaWV2ZW1lbnRzIGRldGFpbHMgYmFjayBidXR0b25cbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtYmFjay1idG4nKSkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5oaWRlQWNoaWV2ZW1lbnREZXRhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIH0pO1xuXG4gICAgICAvLyByZXdhcmRzIGRldGFpbHMgYmFjayBidXR0b25cbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtYmFjay1idG4nKSkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5oaWRlUmV3YXJkRGV0YWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICB9KTtcblxuICAgICAgLy8gbWVzc2FnZXMgZGV0YWlscyBiYWNrIGJ1dHRvblxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWJhY2stYnRuJykpIHtcbiAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuaGlkZU1lc3NhZ2VEZXRhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBsb2FkIHJld2FyZHMgZGV0YWlsc1xuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1yZXctbGlzdC1pdGVtJykgfHwgY2xvc2VzdChlbCwgJy5jbC1yZXctbGlzdC1pdGVtJykgIT09IG51bGwpIHtcbiAgICAgIHZhciByZXdhcmRJZCA9IChoYXNDbGFzcyhlbCwgJ2NsLXJldy1saXN0LWl0ZW0nKSkgPyBlbC5kYXRhc2V0LnJld2FyZElkIDogY2xvc2VzdChlbCwgJy5jbC1yZXctbGlzdC1pdGVtJykuZGF0YXNldC5yZXdhcmRJZDtcbiAgICAgIF90aGlzLmdldFJld2FyZChyZXdhcmRJZCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5sb2FkUmV3YXJkRGV0YWlscyhkYXRhLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGxvYWQgaW5ib3ggZGV0YWlsc1xuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1pbmJveC1saXN0LWl0ZW0nKSB8fCBjbG9zZXN0KGVsLCAnLmNsLWluYm94LWxpc3QtaXRlbScpICE9PSBudWxsKSB7XG4gICAgICB2YXIgbWVzc2FnZUlkID0gKGhhc0NsYXNzKGVsLCAnY2wtaW5ib3gtbGlzdC1pdGVtJykpID8gZWwuZGF0YXNldC5yZXdhcmRJZCA6IGNsb3Nlc3QoZWwsICcuY2wtaW5ib3gtbGlzdC1pdGVtJykuZGF0YXNldC5pZDtcbiAgICAgIF90aGlzLmdldE1lc3NhZ2UobWVzc2FnZUlkLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmxvYWRNZXNzYWdlRGV0YWlscyhkYXRhLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGNsYWltIHJld2FyZFxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtY2xhaW0tYnRuJykpIHtcbiAgICAgIF90aGlzLmNsYWltUmV3YXJkKGVsLmRhdGFzZXQuaWQsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLmRhdGEuY2xhaW1lZCkge1xuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubG9hZFJld2FyZHMoKTtcblxuICAgICAgICAgIGFkZENsYXNzKGVsLCAnY2wtY2xhaW1lZCcpO1xuICAgICAgICAgIGVsLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLnRyYW5zbGF0aW9uLnJld2FyZHMuY2xhaW1lZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVDbGFzcyhlbCwgJ2NsLWNsYWltZWQnKTtcbiAgICAgICAgICBlbC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy50cmFuc2xhdGlvbi5yZXdhcmRzLmNsYWltO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gbG9hZCBhY2hpZXZlbWVudCBkZXRhaWxzIHdpbmRvdyBmcm9tIG5vdGlmaWNhdGlvbiB3aW5kb3dcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtd2lkZ2V0LW5vdGlmLWluZm9ybWF0aW9uLWRldGFpbHMtd3JhcHBlcicpIHx8IGNsb3Nlc3QoZWwsICcuY2wtd2lkZ2V0LW5vdGlmLWluZm9ybWF0aW9uLWRldGFpbHMtd3JhcHBlcicpICE9PSBudWxsKSB7XG4gICAgICBfdGhpcy5vcGVuV2l0aFRhYkFuZEFjdGlvbignLmNsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tYWNoLWljb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZCA9IChoYXNDbGFzcyhlbCwgJ2NsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi1kZXRhaWxzLXdyYXBwZXInKSkgPyBlbC5kYXRhc2V0LmlkIDogY2xvc2VzdChlbCwgJy5jbC13aWRnZXQtbm90aWYtaW5mb3JtYXRpb24tZGV0YWlscy13cmFwcGVyJykuZGF0YXNldC5pZDtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3Mubm90aWZpY2F0aW9ucy5oaWRlTm90aWZpY2F0aW9uKCk7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuaGlkZUFjaGlldmVtZW50RGV0YWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuZ2V0QWNoaWV2ZW1lbnQoaWQsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmxvYWRBY2hpZXZlbWVudERldGFpbHMoZGF0YSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHByaW1hcnkgd2lkZ2V0IG5hdmlnYXRpb25cbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtbWFpbi1uYXZpZ2F0aW9uLWl0ZW0nKSkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5uYXZpZ2F0aW9uU3dpdGNoKGVsKTtcblxuICAgICAgLy8gY29tcGV0aXRpb24gbGlzdFxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1sYi1oZWFkZXItbGlzdC1pY29uJykpIHtcbiAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZWZyZXNoSW50ZXJ2YWwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hJbnRlcnZhbCk7XG4gICAgICB9XG4gICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmxvYWRDb21wZXRpdGlvbkxpc3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5hY3RpdmVEYXRhUmVmcmVzaCgpO1xuICAgICAgfSwgbG9hZENvbXBldGl0aW9uTGlzdEFqYXgpO1xuXG4gICAgICAvLyBsb2FkIGNvbXBldGl0aW9uXG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgJ2NsLXRvdXItbGlzdC1pdGVtJykgfHwgY2xvc2VzdChlbCwgJy5jbC10b3VyLWxpc3QtaXRlbScpICE9PSBudWxsKSB7XG4gICAgICB2YXIgdG91cm5hbWVudElkID0gKGhhc0NsYXNzKGVsLCAnY2wtdG91ci1saXN0LWl0ZW0nKSkgPyBlbC5kYXRhc2V0LmlkIDogY2xvc2VzdChlbCwgJy5jbC10b3VyLWxpc3QtaXRlbScpLmRhdGFzZXQuaWQ7XG4gICAgICB2YXIgcHJlTG9hZGVyID0gX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5wcmVsb2FkZXIoKTtcblxuICAgICAgcHJlTG9hZGVyLnNob3coZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLmFjdGl2ZUNvbXBldGl0aW9uSWQgPSB0b3VybmFtZW50SWQ7XG4gICAgICAgIF90aGlzLmFjdGl2ZURhdGFSZWZyZXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmhpZGVDb21wZXRpdGlvbkxpc3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5sYXlvdXRTZXR0aW5ncy50aXRsZUxpbmtUb0RldGFpbHNQYWdlKSB7XG4gICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2hvd0VtYmVkZGVkQ29tcGV0aXRpb25EZXRhaWxzQ29udGVudChmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5sb2FkQ29tcGV0aXRpb25EZXRhaWxzKGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJlTG9hZGVyLmhpZGUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gaGlkZSBjb21wZXRpdGlvbiBsaXN0IHZpZXdcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtbWFpbi13aWRnZXQtdG91cm5hbWVudHMtYmFjay1idG4nKSkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5oaWRlQ29tcGV0aXRpb25MaXN0KCk7XG5cbiAgICAgIC8vIG1pbmkgc2NvcmVib2FyZCBhY3Rpb24gdG8gb3BlbiBwcmltYXJ5IHdpZGdldFxuICAgIH0gZWxzZSBpZiAoKGhhc0NsYXNzKGVsLCAnY2wtd2lkZ2V0LW1zLWljb24td3JhcHBlcicpIHx8IGNsb3Nlc3QoZWwsICcuY2wtd2lkZ2V0LW1zLWljb24td3JhcHBlcicpICE9PSBudWxsKSB8fCAoaGFzQ2xhc3MoZWwsICdjbC13aWRnZXQtbXMtaW5mb3JtYXRpb24td3JhcHBlcicpIHx8IGNsb3Nlc3QoZWwsICcuY2wtd2lkZ2V0LW1zLWluZm9ybWF0aW9uLXdyYXBwZXInKSAhPT0gbnVsbCkpIHtcbiAgICAgIF90aGlzLmNsaWNrZWRNaW5pU2NvcmVCb2FyZCgpO1xuXG4gICAgICAvLyBhY2NvcmRpb24gbmF2aWdhdGlvblxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1hY2NvcmRpb24tbGFiZWwnKSkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5hY2NvcmRpb25OYXZpZ2F0aW9uKGVsKTtcbiAgICB9XG4gICAgLy8gRGlzcGF0Y2ggQ3VzdG9tIEV2ZW50XG4gICAgdGhpcy5vblVJQ2hhbmdlKCk7XG4gIH07XG5cbiAgdGhpcy5ldmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMjc6IC8vIG9uIGVzY2FwZVxuICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLmFjdGl2ZSkge1xuICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5oaWRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICAgICAgICAgIF90aGlzLmFjdGl2ZURhdGFSZWZyZXNoKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoX3RoaXMuaXNNb2JpbGUoKSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgZWwgPSBldmVudC50YXJnZXQ7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5kcmFnZ2luZykge1xuICAgICAgICAgIF90aGlzLmV2ZW50SGFuZGxlcnMoZWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgZWwgPSBldmVudC50YXJnZXQ7XG5cbiAgICAgICAgX3RoaXMuZXZlbnRIYW5kbGVycyhlbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5jbG9zZUV2ZXJ5dGhpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLmRlYWN0aXZhdGVDb21wZXRpdGlvbnNBbmRMZWFkZXJib2FyZHMoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubGVhZGVyYm9hcmREYXRhID0gW107XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9LCAyMDApO1xuICAgIH0pO1xuXG4gICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5oaWRlKCk7XG4gICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVyQWN0aXZlID0gZmFsc2U7XG4gIH07XG5cbiAgdmFyIHJlc3RhcnRSZWxvYWRJbnRlcnZhbDtcbiAgdGhpcy5yZXN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmhpZGUoKCkgPT4ge1xuICAgICAgX3RoaXMuZGVhY3RpdmF0ZUNvbXBldGl0aW9uc0FuZExlYWRlcmJvYXJkcygoKSA9PiB7XG4gICAgICAgIF90aGlzLnN0b3BBY3Rpdml0eSgoKSA9PiB7XG4gICAgICAgICAgX3RoaXMubG9hZE1lbWJlcigobWVtYmVyKSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkV2lkZ2V0VHJhbnNsYXRpb25zKCgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHJlc3RhcnRSZWxvYWRJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChyZXN0YXJ0UmVsb2FkSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuZGVzdHJveUxheW91dCgpO1xuXG4gICAgICAgICAgICAgIHJlc3RhcnRSZWxvYWRJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgIF90aGlzLnN0YXJ0dXAoKTtcbiAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuaXNNb2JpbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzTW9iaWxlVGFibGV0KCk7XG4gIH07XG5cbiAgdGhpcy5hcHBseUFwcGVhcmFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2V0dGluZ3Muc3R5bGVzICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBzdHlsZXMgPSBPYmplY3Qua2V5cyh0aGlzLnNldHRpbmdzLnN0eWxlcykucmVkdWNlKChhY2N1bXVsYXRvciwgY3VycmVudFZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uYWNjdW11bGF0b3IsXG4gICAgICAgICAgW2AtLWxiMy0ke2NhbWVsVG9LZWJhYkNhc2UoY3VycmVudFZhbHVlKX1gXTogdGhpcy5zZXR0aW5ncy5zdHlsZXNbY3VycmVudFZhbHVlXVxuICAgICAgICB9O1xuICAgICAgfSwge30pO1xuXG4gICAgICBjc3NWYXJzKHtcbiAgICAgICAgaW5jbHVkZTogJ2xpbmtbcmVsPXN0eWxlc2hlZXRdLHN0eWxlJyxcbiAgICAgICAgd2F0Y2g6IHRydWUsXG4gICAgICAgIG9ubHlMZWdhY3k6IGZhbHNlLFxuICAgICAgICB2YXJpYWJsZXM6IHsgLi4uc3R5bGVzIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSW5pdCBMYldpZGdldCBtZXRob2RcbiAgICogQG1ldGhvZFxuICAgKiBAbWVtYmVyT2YgTGJXaWRnZXRcbiAgICogQHJldHVybiB7dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubG9hZFN0eWxlc2hlZXQoKCkgPT4ge1xuICAgICAgdGhpcy5hcHBseUFwcGVhcmFuY2UoKTtcblxuICAgICAgdGhpcy5sb2FkTWVtYmVyKChtZW1iZXIpID0+IHtcbiAgICAgICAgdGhpcy5sb2FkV2lkZ2V0VHJhbnNsYXRpb25zKCgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5jYW52YXNBbmltYXRpb24gPSBuZXcgQ2FudmFzQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLm5vdGlmaWNhdGlvbnMgPSBuZXcgTm90aWZpY2F0aW9ucyh7XG4gICAgICAgICAgICAgIGNhbnZhc0luc3RhbmNlOiB0aGlzLnNldHRpbmdzLmNhbnZhc0FuaW1hdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkID0gbmV3IE1pbmlTY29yZUJvYXJkKHtcbiAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MubWFpbldpZGdldCA9IG5ldyBNYWluV2lkZ2V0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Mubm90aWZpY2F0aW9ucy5zZXR0aW5ncy5sYldpZGdldCA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmxiV2lkZ2V0ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MubWFpbldpZGdldC5zZXR0aW5ncy5sYldpZGdldCA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmNhbnZhc0FuaW1hdGlvbi5zZXR0aW5ncy5sYldpZGdldCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuc3RhcnR1cCgpO1xuICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuaGlkZSgoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuZGVhY3RpdmF0ZUNvbXBldGl0aW9uc0FuZExlYWRlcmJvYXJkcygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnR1cCgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBpZiAodGhpcy5zZXR0aW5ncy5hdXRvU3RhcnQpIHtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxufTtcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBtYXBPYmplY3QgZnJvbSAnLi4vdXRpbHMvbWFwT2JqZWN0JztcbmltcG9ydCBoYXNDbGFzcyBmcm9tICcuLi91dGlscy9oYXNDbGFzcyc7XG5pbXBvcnQgcmVtb3ZlQ2xhc3MgZnJvbSAnLi4vdXRpbHMvcmVtb3ZlQ2xhc3MnO1xuaW1wb3J0IG9iamVjdEl0ZXJhdG9yIGZyb20gJy4uL3V0aWxzL29iamVjdEl0ZXJhdG9yJztcbmltcG9ydCBxdWVyeSBmcm9tICcuLi91dGlscy9xdWVyeSc7XG5pbXBvcnQgY2xvc2VzdCBmcm9tICcuLi91dGlscy9jbG9zZXN0JztcbmltcG9ydCBhZGRDbGFzcyBmcm9tICcuLi91dGlscy9hZGRDbGFzcyc7XG5pbXBvcnQgcmVtb3ZlIGZyb20gJy4uL3V0aWxzL3JlbW92ZSc7XG5pbXBvcnQgYXBwZW5kTmV4dCBmcm9tICcuLi91dGlscy9hcHBlbmROZXh0JztcbmltcG9ydCBzdHJpcEh0bWwgZnJvbSAnLi4vdXRpbHMvc3RyaXBIdG1sJztcblxuLyoqXG4gKiBNYWluV2lkZ2V0XG4gKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBjb25zdCBNYWluV2lkZ2V0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgLyoqXG4gICAqIE1haW5XaWRnZXQgc2V0dGluZ3NcbiAgICogQG1lbWJlck9mIE1haW5XaWRnZXRcbiAgICogQGNvbnN0YW50XG4gICAqIEB0eXBlIHsgT2JqZWN0IH1cbiAgICovXG4gIHRoaXMuc2V0dGluZ3MgPSB7XG4gICAgbGJXaWRnZXQ6IG51bGwsXG4gICAgY29udGFpbmVyOiBudWxsLFxuICAgIG92ZXJsYXlDb250YWluZXI6IG51bGwsXG4gICAgbmF2aWdhdGlvbjogbnVsbCxcbiAgICBzZWN0aW9uOiBudWxsLFxuICAgIGRldGFpbHNDb250YWluZXI6IG51bGwsXG4gICAgdG91cm5hbWVudExpc3RDb250YWluZXI6IG51bGwsXG4gICAgaGVhZGVyRGF0ZTogbnVsbCxcbiAgICBsYWJlbERhdGU6IG51bGwsXG4gICAgcHJlTG9hZGVyOiB7XG4gICAgICBwcmVMb2FkZXJBY3RpdmU6IGZhbHNlLFxuICAgICAgcHJlTG9hZGVybGFzdEF0dGVtcHQ6IG51bGwsXG4gICAgICBwcmVsb2FkZXJDYWxsYmFja1JlY292ZXJ5OiBmdW5jdGlvbiAoKSB7XG4gICAgICB9XG4gICAgfSxcbiAgICBhY2hpZXZlbWVudDoge1xuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgZGV0YWlsc0NvbnRhaW5lcjogbnVsbFxuICAgIH0sXG4gICAgcmV3YXJkOiB7XG4gICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICBkZXRhaWxzQ29udGFpbmVyOiBudWxsXG4gICAgfSxcbiAgICBtZXNzYWdlczoge1xuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgZGV0YWlsc0NvbnRhaW5lcjogbnVsbFxuICAgIH0sXG4gICAgbGVhZGVyYm9hcmQ6IHtcbiAgICAgIGRlZmF1bHRFbXB0eUxpc3Q6IDIwLFxuICAgICAgdG9wUmVzdWx0U2l6ZTogMyxcbiAgICAgIGhlYWRlcjogbnVsbCxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHJlc3VsdENvbnRhaW5lcjogbnVsbCxcbiAgICAgIGxpc3Q6IG51bGwsXG4gICAgICB0b3BSZXN1bHRzOiBudWxsLFxuICAgICAgdGltZXJJbnRlcnZhbDogbnVsbFxuICAgIH0sXG4gICAgdG91cm5hbWVudHNTZWN0aW9uOiB7XG4gICAgICBhY2NvcmRpb25MYXlvdXQ6IFt7XG4gICAgICAgIGxhYmVsOiAnVXBjb21pbmcgVG91cm5hbWVudHMnLFxuICAgICAgICB0eXBlOiAncmVhZHlDb21wZXRpdGlvbnMnLFxuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgc2hvd1RvcFJlc3VsdHM6IDFcbiAgICAgIH0sIHtcbiAgICAgICAgbGFiZWw6ICdBY3RpdmUgVG91cm5hbWVudHMnLFxuICAgICAgICB0eXBlOiAnYWN0aXZlQ29tcGV0aXRpb25zJyxcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgc2hvd1RvcFJlc3VsdHM6IDFcbiAgICAgIH0sIHtcbiAgICAgICAgbGFiZWw6ICdGaW5pc2hlZCBUb3VybmFtZW50cycsXG4gICAgICAgIHR5cGU6ICdmaW5pc2hlZENvbXBldGl0aW9ucycsXG4gICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICBzaG93VG9wUmVzdWx0czogMVxuICAgICAgfV1cbiAgICB9LFxuICAgIHJld2FyZHNTZWN0aW9uOiB7XG4gICAgICBhY2NvcmRpb25MYXlvdXQ6IFt7XG4gICAgICAgIGxhYmVsOiAnQXZhaWxhYmxlIFJld2FyZHMnLFxuICAgICAgICB0eXBlOiAnYXZhaWxhYmxlUmV3YXJkcycsXG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIHNob3dUb3BSZXN1bHRzOiAxXG4gICAgICB9LCB7XG4gICAgICAgIGxhYmVsOiAnQ2xhaW1lZCBSZXdhcmRzJyxcbiAgICAgICAgdHlwZTogJ3Jld2FyZHMnLFxuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgc2hvd1RvcFJlc3VsdHM6IDFcbiAgICAgIH0sIHtcbiAgICAgICAgbGFiZWw6ICdFeHBpcmVkIFJld2FyZHMnLFxuICAgICAgICB0eXBlOiAnZXhwaXJlZFJld2FyZHMnLFxuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgc2hvd1RvcFJlc3VsdHM6IDFcbiAgICAgIH1dXG4gICAgfSxcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIG5hdmlnYXRpb25Td2l0Y2hMYXN0QXRlbXB0OiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICBuYXZpZ2F0aW9uU3dpdGNoSW5Qcm9ncmVzczogZmFsc2VcbiAgfTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZm9yICh2YXIgb3B0IGluIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5nc1tvcHRdID0gb3B0aW9uc1tvcHRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBY2NvcmRpb24gc3R5bGUgbGF5b3V0XG4gICAqIC0gcGFyYW1ldGVyczpcbiAgICogICAgICAtIGxhYmVsOiBTdHJpbmcgXCJBdmFpbGFibGUgcmV3YXJkc1wiXG4gICAqICAgICAgLSB0eXBlOiBTdHJpbmcgXCJhdmFpbGFibGUtcmV3YXJkc1wiXG4gICAqICAgICAgLSBzaG93bjogQm9vbGVhbiB0cnVlL2ZhbHNlXG4gICAqXG4gICAqIEBtZW1iZXJPZiBNYWluV2lkZ2V0XG4gICAqIEBwYXJhbSBkYXRhIHsgQXJyYXkgfVxuICAgKiBAcGFyYW0gb25MYXlvdXQgeyBGdW5jdGlvbiB9XG4gICAqL1xuICB0aGlzLmFjY29yZGlvblN0eWxlID0gZnVuY3Rpb24gKGRhdGEsIG9uTGF5b3V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgYWNjb3JkaW9uV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgYWNjb3JkaW9uV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4tYWNjb3JkaW9uLWNvbnRhaW5lcicpO1xuXG4gICAgbWFwT2JqZWN0KGRhdGEsIGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgdmFyIGFjY29yZGlvblNlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBhY2NvcmRpb25MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdmFyIHRvcFNob3duRW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBhY2NvcmRpb25MaXN0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgYWNjb3JkaW9uTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICBhY2NvcmRpb25TZWN0aW9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNjb3JkaW9uICcgKyBlbnRyeS50eXBlICsgKCh0eXBlb2YgZW50cnkuc2hvdyA9PT0gJ2Jvb2xlYW4nICYmIGVudHJ5LnNob3cpID8gJyBjbC1zaG93bicgOiAnJykpO1xuICAgICAgYWNjb3JkaW9uTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2NvcmRpb24tbGFiZWwnKTtcbiAgICAgIHRvcFNob3duRW50cnkuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2NvcmRpb24tZW50cnknKTtcbiAgICAgIGFjY29yZGlvbkxpc3RDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2NvcmRpb24tbGlzdC1jb250YWluZXInKTtcbiAgICAgIGFjY29yZGlvbkxpc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2NvcmRpb24tbGlzdCcpO1xuXG4gICAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnJld2FyZHNbZW50cnkudHlwZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFjY29yZGlvbkxhYmVsLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnJld2FyZHNbZW50cnkudHlwZV07XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi50b3VybmFtZW50c1tlbnRyeS50eXBlXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYWNjb3JkaW9uTGFiZWwuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24udG91cm5hbWVudHNbZW50cnkudHlwZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2NvcmRpb25MYWJlbC5pbm5lckhUTUwgPSBlbnRyeS5sYWJlbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvbkxheW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvbkxheW91dChhY2NvcmRpb25TZWN0aW9uLCBhY2NvcmRpb25MaXN0LCB0b3BTaG93bkVudHJ5LCBlbnRyeSk7XG4gICAgICB9XG5cbiAgICAgIGFjY29yZGlvbkxpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQoYWNjb3JkaW9uTGlzdCk7XG5cbiAgICAgIGFjY29yZGlvblNlY3Rpb24uYXBwZW5kQ2hpbGQoYWNjb3JkaW9uTGFiZWwpO1xuICAgICAgYWNjb3JkaW9uU2VjdGlvbi5hcHBlbmRDaGlsZCh0b3BTaG93bkVudHJ5KTtcbiAgICAgIGFjY29yZGlvblNlY3Rpb24uYXBwZW5kQ2hpbGQoYWNjb3JkaW9uTGlzdENvbnRhaW5lcik7XG5cbiAgICAgIGFjY29yZGlvbldyYXBwZXIuYXBwZW5kQ2hpbGQoYWNjb3JkaW9uU2VjdGlvbik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYWNjb3JkaW9uV3JhcHBlcjtcbiAgfTtcblxuICB0aGlzLmFjY29yZGlvbk5hdmlnYXRpb24gPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIC8vIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHBhcmVudEVsID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKGhhc0NsYXNzKHBhcmVudEVsLCAnY2wtc2hvd24nKSkge1xuICAgICAgcmVtb3ZlQ2xhc3MocGFyZW50RWwsICdjbC1zaG93bicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmplY3RJdGVyYXRvcihxdWVyeShjbG9zZXN0KHBhcmVudEVsLCAnLmNsLW1haW4tYWNjb3JkaW9uLWNvbnRhaW5lcicpLCAnLmNsLXNob3duJyksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmVtb3ZlQ2xhc3Mob2JqLCAnY2wtc2hvd24nKTtcbiAgICAgIH0pO1xuXG4gICAgICBhZGRDbGFzcyhwYXJlbnRFbCwgJ2NsLXNob3duJyk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMubmF2aWdhdGlvblNvcnRlciA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEub3JkZXIgPCBiLm9yZGVyKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChhLm9yZGVyID4gYi5vcmRlcikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIHRoaXMubmF2aWdhdGlvbkl0ZW1zID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgbmF2aWdhdGlvbkxpc3QpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gc29ydGluZyBuYXZpZ2F0aW9uIGJ5IG9yZGVyIG51bWJlclxuICAgIG5hdmlnYXRpb25MaXN0LnNvcnQoX3RoaXMubmF2aWdhdGlvblNvcnRlcik7XG5cbiAgICBtYXBPYmplY3QobmF2aWdhdGlvbkxpc3QsIGZ1bmN0aW9uICh2YWwsIGtleSkge1xuICAgICAgdmFyIG5hdmlnYXRpb25JdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbmF2aWdhdGlvbkl0ZW1JY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbmF2aWdhdGlvbkl0ZW1Db3VudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICBuYXZpZ2F0aW9uSXRlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubmF2aWdhdGlvblt2YWwua2V5XS5uYXZpZ2F0aW9uQ2xhc3MgKyAnIGNsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24taXRlbScgKyAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubmF2aWdhdGlvblt2YWwua2V5XS5lbmFibGUgPyAnJyA6ICcgY2wtaGlkZGVuLW5hdmlnYXRpb24taXRlbScpKTtcbiAgICAgIG5hdmlnYXRpb25JdGVtSWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubmF2aWdhdGlvblt2YWwua2V5XS5uYXZpZ2F0aW9uQ2xhc3NJY29uICsgJyBjbC1tYWluLW5hdmlnYXRpb24taXRlbScpO1xuICAgICAgbmF2aWdhdGlvbkl0ZW1Db3VudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4tbmF2aWdhdGlvbi1pdGVtLWNvdW50Jyk7XG5cbiAgICAgIG5hdmlnYXRpb25JdGVtSWNvbi5hcHBlbmRDaGlsZChuYXZpZ2F0aW9uSXRlbUNvdW50KTtcbiAgICAgIG5hdmlnYXRpb25JdGVtLmFwcGVuZENoaWxkKG5hdmlnYXRpb25JdGVtSWNvbik7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobmF2aWdhdGlvbkl0ZW0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMub3ZlcmxheUxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tYWluLXdpZGdldC1vdmVybGF5LXdyYXBwZXInKTtcblxuICAgIHJldHVybiB3cmFwcGVyO1xuICB9O1xuXG4gIHRoaXMubGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgaW5uZXJXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICB2YXIgbmF2aWdhdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBuYXZpZ2F0aW9uSXRlbXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBtYWluU2VjdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgdmFyIHByZUxvYWRlckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBwcmVMb2FkZXJDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHByZUxvYWRlckJhcjEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgcHJlTG9hZGVyQmFyMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBwcmVMb2FkZXJCYXIzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICB2YXIgc2VjdGlvbkxCID0gX3RoaXMubGVhZGVyYm9hcmRBcmVhTGF5b3V0KCk7XG4gICAgdmFyIHNlY3Rpb25BQ0ggPSBfdGhpcy5hY2hpZXZlbWVudHNBcmVhTGF5b3V0KCk7XG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzID0gX3RoaXMucmV3YXJkc0FyZWFMYXlvdXQoKTtcbiAgICB2YXIgc2VjdGlvbkluYm94ID0gX3RoaXMuaW5ib3hBcmVhTGF5b3V0KCk7XG5cbiAgICB2YXIgbmF2aWdhdGlvbkl0ZW1MaXN0ID0gW107XG4gICAgbWFwT2JqZWN0KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24sIGZ1bmN0aW9uICh2YWwsIGtleSkge1xuICAgICAgbmF2aWdhdGlvbkl0ZW1MaXN0LnB1c2goe1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgb3JkZXI6IHBhcnNlSW50KHZhbC5vcmRlcilcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX3RoaXMubmF2aWdhdGlvbkl0ZW1zKG5hdmlnYXRpb25JdGVtcywgbmF2aWdhdGlvbkl0ZW1MaXN0KTsgLy8gcG9wdWxhdGUgc29ydGVkIG5hdmlnYXRpb25cblxuICAgIHdyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC13cmFwcGVyJyk7XG4gICAgaW5uZXJXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5uZXItd3JhcHBlcicpO1xuXG4gICAgbmF2aWdhdGlvbkNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tY29udGFpbmVyJyk7XG4gICAgbmF2aWdhdGlvbkl0ZW1zLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbmF2aWdhdGlvbi1pdGVtcycpO1xuXG4gICAgbWFpblNlY3Rpb25Db250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1zZWN0aW9uLWNvbnRhaW5lcicgKyAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3Muc2hvd0NvcHlyaWdodCA/ICcnIDogJyBjbC1oaWRkZW4tY29weXJpZ2h0JykpO1xuXG4gICAgcHJlTG9hZGVyQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcHJlLWxvYWRlcicpO1xuICAgIHByZUxvYWRlckNvbnRlbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1wcmUtbG9hZGVyLWNvbnRlbnQnKTtcbiAgICBwcmVMb2FkZXJCYXIxLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcHJlLWxvYWRlci1iYXInKTtcbiAgICBwcmVMb2FkZXJCYXIyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcHJlLWxvYWRlci1iYXInKTtcbiAgICBwcmVMb2FkZXJCYXIzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcHJlLWxvYWRlci1iYXInKTtcblxuICAgIHByZUxvYWRlckNvbnRlbnQuYXBwZW5kQ2hpbGQocHJlTG9hZGVyQmFyMSk7XG4gICAgcHJlTG9hZGVyQ29udGVudC5hcHBlbmRDaGlsZChwcmVMb2FkZXJCYXIyKTtcbiAgICBwcmVMb2FkZXJDb250ZW50LmFwcGVuZENoaWxkKHByZUxvYWRlckJhcjMpO1xuICAgIHByZUxvYWRlckNvbnRhaW5lci5hcHBlbmRDaGlsZChwcmVMb2FkZXJDb250ZW50KTtcblxuICAgIG5hdmlnYXRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQobmF2aWdhdGlvbkl0ZW1zKTtcblxuICAgIG1haW5TZWN0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25MQik7XG4gICAgbWFpblNlY3Rpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkFDSCk7XG4gICAgbWFpblNlY3Rpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHMpO1xuICAgIG1haW5TZWN0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveCk7XG4gICAgbWFpblNlY3Rpb25Db250YWluZXIuYXBwZW5kQ2hpbGQocHJlTG9hZGVyQ29udGFpbmVyKTtcblxuICAgIGlubmVyV3JhcHBlci5hcHBlbmRDaGlsZChuYXZpZ2F0aW9uQ29udGFpbmVyKTtcbiAgICBpbm5lcldyYXBwZXIuYXBwZW5kQ2hpbGQobWFpblNlY3Rpb25Db250YWluZXIpO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoaW5uZXJXcmFwcGVyKTtcblxuICAgIHJldHVybiB3cmFwcGVyO1xuICB9O1xuXG4gIHRoaXMubWFpbk5hdmlnYXRpb25DaGVjayA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBuYXZJdGVtcyA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWl0ZW0nKTtcbiAgICB2YXIgY2hlY2tFbmFibGVkID0gMDtcblxuICAgIG9iamVjdEl0ZXJhdG9yKG5hdkl0ZW1zLCBmdW5jdGlvbiAobmF2SXRlbSkge1xuICAgICAgaWYgKCFoYXNDbGFzcyhuYXZJdGVtLCAnY2wtaGlkZGVuLW5hdmlnYXRpb24taXRlbScpKSB7XG4gICAgICAgIGNoZWNrRW5hYmxlZCsrO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGNoZWNrRW5hYmxlZCA9PT0gMSkge1xuICAgICAgYWRkQ2xhc3MocXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWlubmVyLXdyYXBwZXInKSwgJ2NsLWhpZGRlbi1uYXZpZ2F0aW9uJyk7XG4gICAgfSBlbHNlIGlmIChjaGVja0VuYWJsZWQgPT09IDApIHtcbiAgICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmxvZygnQWxsIG5hdmlnYXRpb24gaXRlbXMgZGlzYWJsZWQsIGNoZWNrIFt0aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb25dJyk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMubGVhZGVyYm9hcmRBcmVhTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHNlY3Rpb25MQiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgdmFyIHNlY3Rpb25MQkhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uTEJIZWFkZXJMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25MQkhlYWRlckxpc3RJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25MQkhlYWRlckxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25MQkhlYWRlckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkxCSGVhZGVyQ2xvc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBzZWN0aW9uTEJEZXRhaWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25MQkRldGFpbHNJbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25MQkRldGFpbHNJbmZvSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uTEJEZXRhaWxzSW1hZ2VDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkxCRGV0YWlsc0NvbnRlbnRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkxCRGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICB2YXIgc2VjdGlvbkxCRGV0YWlsc0NvbnRlbnRDb250YWluZXJEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHZhciBzZWN0aW9uTEJEZXRhaWxzRGVzY3JpcHRpb25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkxCRGV0YWlsc0Rlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25MQkRldGFpbHNEZXNjcmlwdGlvbkNsb3NlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXG4gICAgdmFyIHNlY3Rpb25MQkxlYWRlcmJvYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyTGFiZWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25MQkxlYWRlcmJvYXJkUmVzdWx0c0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uTEJMZWFkZXJib2FyZEhlYWRlclRvcFJlc3VsdHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkxCTGVhZGVyYm9hcmRCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25MQkxlYWRlcmJvYXJkQm9keVJlc3VsdHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBzZWN0aW9uTEJNaXNzaW5nTWVtYmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICB2YXIgc2VjdGlvbkxCT3B0SW5Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkxCT3B0SW5BY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cbiAgICB2YXIgc2VjdGlvbkxCRm9vdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25MQkZvb3RlckNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBzZWN0aW9uVG91cm5hbWVudERldGFpbHNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0hlYWRlckxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0hlYWRlckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQmFja0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQm9keUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uVG91cm5hbWVudERldGFpbHNCb2R5SW1hZ2VDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uVG91cm5hbWVudERldGFpbHNPcHRJbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uVG91cm5hbWVudERldGFpbHNPcHRJbkFjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICAgIHZhciBzZWN0aW9uVG91cm5hbWVudExpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnRMaXN0Qm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uVG91cm5hbWVudExpc3RCb2R5UmVzdWx0cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uVG91cm5hbWVudEJhY2tBY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cbiAgICBzZWN0aW9uTEIuc2V0QXR0cmlidXRlKCdjbGFzcycsIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24udG91cm5hbWVudHMuY29udGFpbmVyQ2xhc3MgKyAnIGNsLW1haW4tc2VjdGlvbi1pdGVtIGNsLW1haW4tYWN0aXZlLXNlY3Rpb24nICsgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmxlYWRlcmJvYXJkLmxheW91dFNldHRpbmdzLmltYWdlQmFubmVyID8gJyBjbC1tYWluLXNlY3Rpb24taW1hZ2UtYmFubmVyLWFjdGl2ZScgOiAnJykpO1xuICAgIHNlY3Rpb25MQkhlYWRlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWhlYWRlcicpO1xuICAgIHNlY3Rpb25MQkhlYWRlckxpc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1oZWFkZXItbGlzdCcpO1xuICAgIHNlY3Rpb25MQkhlYWRlckxpc3RJY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItaGVhZGVyLWxpc3QtaWNvbicpO1xuICAgIHNlY3Rpb25MQkhlYWRlckxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItaGVhZGVyLWxhYmVsJyk7XG4gICAgc2VjdGlvbkxCSGVhZGVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWhlYWRlci1kYXRlJyk7XG4gICAgc2VjdGlvbkxCSGVhZGVyQ2xvc2Uuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1oZWFkZXItY2xvc2UnKTtcblxuICAgIHNlY3Rpb25MQkRldGFpbHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzJyk7XG4gICAgc2VjdGlvbkxCRGV0YWlsc0luZm8uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWluZm8nKTtcbiAgICBzZWN0aW9uTEJEZXRhaWxzSW5mb0ljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWluZm8taWNvbicpO1xuICAgIHNlY3Rpb25MQkRldGFpbHNJbWFnZUNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtaW1hZ2UtY29udGFpbmVyJyk7XG4gICAgc2VjdGlvbkxCRGV0YWlsc0NvbnRlbnRDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWNvbnRlbnQnKTtcbiAgICBzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1jb250ZW50LWxhYmVsJyk7XG4gICAgc2VjdGlvbkxCRGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbFRleHQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWNvbnRlbnQtbGFiZWwtdGV4dCcpO1xuICAgIHNlY3Rpb25MQkRldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtY29udGVudC1kYXRlJyk7XG4gICAgc2VjdGlvbkxCRGV0YWlsc0Rlc2NyaXB0aW9uQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1kZXNjcmlwdGlvbi1jb250YWluZXInKTtcbiAgICBzZWN0aW9uTEJEZXRhaWxzRGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWRlc2NyaXB0aW9uJyk7XG4gICAgc2VjdGlvbkxCRGV0YWlsc0Rlc2NyaXB0aW9uQ2xvc2Uuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWRlc2NyaXB0aW9uLWNsb3NlJyk7XG5cbiAgICAvLyBMZWFkZXJib2FyZCByZXN1bHQgY29udGFpbmVyXG4gICAgc2VjdGlvbkxCTGVhZGVyYm9hcmQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1sZWFkZXJib2FyZCcpO1xuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItbGVhZGVyYm9hcmQtaGVhZGVyJyk7XG4gICAgc2VjdGlvbkxCTGVhZGVyYm9hcmRIZWFkZXJMYWJlbHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1sZWFkZXJib2FyZC1oZWFkZXItbGFiZWxzJyk7XG4gICAgc2VjdGlvbkxCTGVhZGVyYm9hcmRSZXN1bHRzQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItbGVhZGVyYm9hcmQtcmVzLWNvbnRhaW5lcicpO1xuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyVG9wUmVzdWx0cy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWxlYWRlcmJvYXJkLWhlYWRlci10b3AtcmVzJyk7XG4gICAgc2VjdGlvbkxCTGVhZGVyYm9hcmRCb2R5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItbGVhZGVyYm9hcmQtYm9keScpO1xuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkQm9keVJlc3VsdHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1sZWFkZXJib2FyZC1ib2R5LXJlcycpO1xuXG4gICAgc2VjdGlvbkxCTWlzc2luZ01lbWJlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLW1pc3NpbmctbWVtYmVyJyk7XG5cbiAgICAvLyBmb290ZXJcbiAgICBzZWN0aW9uTEJGb290ZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1mb290ZXInKTtcbiAgICBzZWN0aW9uTEJGb290ZXJDb250ZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZm9vdGVyLWNvbnRlbnQnKTtcblxuICAgIC8vIGRldGFpbHMgc2VjdGlvblxuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtY29udGFpbmVyJyk7XG4gICAgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1oZWFkZXInKTtcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNIZWFkZXJMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtaGVhZGVyLWxhYmVsJyk7XG4gICAgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtaGVhZGVyLWRhdGUnKTtcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNCYWNrQnRuLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1iYWNrLWJ0bicpO1xuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0JvZHlDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWJvZHktY29udGFpbmVyJyk7XG4gICAgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQm9keUltYWdlQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1ib2R5LWltYWdlLWNvbnQnKTtcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNCb2R5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1ib2R5Jyk7XG4gICAgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzT3B0SW5Db250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLW9wdGluLWNvbnRhaW5lcicpO1xuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc09wdEluQWN0aW9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1vcHRpbi1hY3Rpb24nKTtcblxuICAgIHNlY3Rpb25Ub3VybmFtZW50TGlzdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXRvdXJuYW1lbnRzLWxpc3QnKTtcbiAgICBzZWN0aW9uVG91cm5hbWVudEJhY2tBY3Rpb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC10b3VybmFtZW50cy1iYWNrLWJ0bicpO1xuICAgIHNlY3Rpb25Ub3VybmFtZW50TGlzdEJvZHkuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC10b3VybmFtZW50cy1saXN0LWJvZHknKTtcbiAgICBzZWN0aW9uVG91cm5hbWVudExpc3RCb2R5UmVzdWx0cy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXRvdXJuYW1lbnRzLWxpc3QtYm9keS1yZXMnKTtcblxuICAgIHNlY3Rpb25MQk9wdEluQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItb3B0aW4tY29udGFpbmVyJyk7XG4gICAgc2VjdGlvbkxCT3B0SW5BY3Rpb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1vcHRpbi1hY3Rpb24nKTtcblxuICAgIHNlY3Rpb25MQkhlYWRlckxhYmVsLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzLmxhYmVsO1xuICAgIHNlY3Rpb25MQkZvb3RlckNvbnRlbnQuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24uZ2xvYmFsLmNvcHk7XG4gICAgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzT3B0SW5BY3Rpb24uaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24udG91cm5hbWVudHMuZW50ZXI7XG4gICAgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzT3B0SW5BY3Rpb24uaHJlZiA9ICdqYXZhc2NyaXB0OnZvaWQoMCk7JztcbiAgICBzZWN0aW9uTEJPcHRJbkFjdGlvbi5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi50b3VybmFtZW50cy5lbnRlcjtcbiAgICBzZWN0aW9uTEJPcHRJbkFjdGlvbi5ocmVmID0gJ2phdmFzY3JpcHQ6dm9pZCgwKTsnO1xuXG4gICAgc2VjdGlvbkxCSGVhZGVyTGlzdC5hcHBlbmRDaGlsZChzZWN0aW9uTEJIZWFkZXJMaXN0SWNvbik7XG4gICAgc2VjdGlvbkxCSGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25MQkhlYWRlckxpc3QpO1xuICAgIHNlY3Rpb25MQkhlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uTEJIZWFkZXJMYWJlbCk7XG4gICAgc2VjdGlvbkxCSGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25MQkhlYWRlckRhdGUpO1xuICAgIHNlY3Rpb25MQkhlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uTEJIZWFkZXJDbG9zZSk7XG5cbiAgICBzZWN0aW9uTEJEZXRhaWxzSW5mby5hcHBlbmRDaGlsZChzZWN0aW9uTEJEZXRhaWxzSW5mb0ljb24pO1xuICAgIHNlY3Rpb25MQkRldGFpbHNDb250ZW50Q29udGFpbmVyTGFiZWwuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCRGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbFRleHQpO1xuICAgIHNlY3Rpb25MQkRldGFpbHNDb250ZW50Q29udGFpbmVyTGFiZWwuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCRGV0YWlsc0NvbnRlbnRDb250YWluZXJEYXRlKTtcbiAgICBzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsKTtcbiAgICBzZWN0aW9uTEJEZXRhaWxzLmFwcGVuZENoaWxkKHNlY3Rpb25MQkRldGFpbHNJbmZvKTtcblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5sZWFkZXJib2FyZC5sYXlvdXRTZXR0aW5ncy5pbWFnZUJhbm5lcikge1xuICAgICAgc2VjdGlvbkxCRGV0YWlscy5hcHBlbmRDaGlsZChzZWN0aW9uTEJEZXRhaWxzSW1hZ2VDb250YWluZXIpO1xuICAgIH1cblxuICAgIHNlY3Rpb25MQkRldGFpbHMuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCRGV0YWlsc0NvbnRlbnRDb250YWluZXIpO1xuXG4gICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5sZWFkZXJib2FyZC5sYXlvdXRTZXR0aW5ncy50aXRsZUxpbmtUb0RldGFpbHNQYWdlKSB7XG4gICAgICBzZWN0aW9uTEJEZXRhaWxzRGVzY3JpcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCRGV0YWlsc0Rlc2NyaXB0aW9uKTtcbiAgICAgIHNlY3Rpb25MQkRldGFpbHNEZXNjcmlwdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uTEJEZXRhaWxzRGVzY3JpcHRpb25DbG9zZSk7XG4gICAgICBzZWN0aW9uTEJEZXRhaWxzLmFwcGVuZENoaWxkKHNlY3Rpb25MQkRldGFpbHNEZXNjcmlwdGlvbkNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgc2VjdGlvbkxCTGVhZGVyYm9hcmRIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCTGVhZGVyYm9hcmRIZWFkZXJMYWJlbHMpO1xuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkLmFwcGVuZENoaWxkKHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyKTtcbiAgICAvLyBzZWN0aW9uTEJMZWFkZXJib2FyZC5hcHBlbmRDaGlsZChzZWN0aW9uTEJMZWFkZXJib2FyZEhlYWRlclRvcFJlc3VsdHMpO1xuICAgIC8vIHNlY3Rpb25MQkxlYWRlcmJvYXJkQm9keS5hcHBlbmRDaGlsZChzZWN0aW9uTEJMZWFkZXJib2FyZEJvZHlSZXN1bHRzKTtcbiAgICAvLyBzZWN0aW9uTEJMZWFkZXJib2FyZC5hcHBlbmRDaGlsZChzZWN0aW9uTEJMZWFkZXJib2FyZEJvZHkpO1xuXG4gICAgc2VjdGlvbkxCTGVhZGVyYm9hcmRSZXN1bHRzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyVG9wUmVzdWx0cyk7XG4gICAgc2VjdGlvbkxCTGVhZGVyYm9hcmRCb2R5LmFwcGVuZENoaWxkKHNlY3Rpb25MQkxlYWRlcmJvYXJkQm9keVJlc3VsdHMpO1xuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkUmVzdWx0c0NvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uTEJMZWFkZXJib2FyZEJvZHkpO1xuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkLmFwcGVuZENoaWxkKHNlY3Rpb25MQkxlYWRlcmJvYXJkUmVzdWx0c0NvbnRhaW5lcik7XG5cbiAgICBzZWN0aW9uTEJGb290ZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCRm9vdGVyQ29udGVudCk7XG5cbiAgICBzZWN0aW9uVG91cm5hbWVudExpc3RCb2R5LmFwcGVuZENoaWxkKHNlY3Rpb25Ub3VybmFtZW50TGlzdEJvZHlSZXN1bHRzKTtcbiAgICBzZWN0aW9uVG91cm5hbWVudExpc3QuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnRMaXN0Qm9keSk7XG4gICAgc2VjdGlvblRvdXJuYW1lbnRMaXN0LmFwcGVuZENoaWxkKHNlY3Rpb25Ub3VybmFtZW50QmFja0FjdGlvbik7XG5cbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyTGFiZWwpO1xuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0hlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uVG91cm5hbWVudERldGFpbHNIZWFkZXJEYXRlKTtcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyKTtcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQmFja0J0bik7XG4gICAgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQm9keUNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uVG91cm5hbWVudERldGFpbHNCb2R5SW1hZ2VDb250YWluZXIpO1xuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0JvZHlDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQm9keSk7XG4gICAgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0JvZHlDb250YWluZXIpO1xuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc09wdEluQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc09wdEluQWN0aW9uKTtcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzT3B0SW5Db250YWluZXIpO1xuXG4gICAgc2VjdGlvbkxCT3B0SW5Db250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCT3B0SW5BY3Rpb24pO1xuXG4gICAgc2VjdGlvbkxCLmFwcGVuZENoaWxkKHNlY3Rpb25MQkhlYWRlcik7XG4gICAgc2VjdGlvbkxCLmFwcGVuZENoaWxkKHNlY3Rpb25MQkRldGFpbHMpO1xuICAgIHNlY3Rpb25MQi5hcHBlbmRDaGlsZChzZWN0aW9uTEJMZWFkZXJib2FyZCk7XG4gICAgc2VjdGlvbkxCLmFwcGVuZENoaWxkKHNlY3Rpb25MQk1pc3NpbmdNZW1iZXIpO1xuICAgIHNlY3Rpb25MQi5hcHBlbmRDaGlsZChzZWN0aW9uTEJPcHRJbkNvbnRhaW5lcik7XG4gICAgc2VjdGlvbkxCLmFwcGVuZENoaWxkKHNlY3Rpb25MQkZvb3Rlcik7XG4gICAgc2VjdGlvbkxCLmFwcGVuZENoaWxkKHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0NvbnRhaW5lcik7XG4gICAgc2VjdGlvbkxCLmFwcGVuZENoaWxkKHNlY3Rpb25Ub3VybmFtZW50TGlzdCk7XG5cbiAgICByZXR1cm4gc2VjdGlvbkxCO1xuICB9O1xuXG4gIHRoaXMuYWNoaWV2ZW1lbnRzQXJlYUxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBzZWN0aW9uQUNIID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICB2YXIgc2VjdGlvbkFDSEhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uQUNISGVhZGVyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkFDSEhlYWRlckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkFDSEhlYWRlckNsb3NlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICB2YXIgc2VjdGlvbkFDSERldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkFDSERldGFpbHNJbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25BQ0hEZXRhaWxzSW5mb0ljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkFDSERldGFpbHNDb250ZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBzZWN0aW9uQUNITGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uQUNITGlzdEJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkFDSExpc3RCb2R5UmVzdWx0cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgdmFyIHNlY3Rpb25BQ0hGb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkFDSEZvb3RlckNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0hlYWRlckxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNIZWFkZXJEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCYWNrQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQm9keUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQm9keUltYWdlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBzZWN0aW9uQUNILnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5uYXZpZ2F0aW9uLmFjaGlldmVtZW50cy5jb250YWluZXJDbGFzcyArICcgY2wtbWFpbi1zZWN0aW9uLWl0ZW0nKTtcbiAgICBzZWN0aW9uQUNISGVhZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWhlYWRlcicpO1xuICAgIHNlY3Rpb25BQ0hIZWFkZXJMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1oZWFkZXItbGFiZWwnKTtcbiAgICBzZWN0aW9uQUNISGVhZGVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1oZWFkZXItZGF0ZScpO1xuICAgIHNlY3Rpb25BQ0hIZWFkZXJDbG9zZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1oZWFkZXItY2xvc2UnKTtcblxuICAgIHNlY3Rpb25BQ0hEZXRhaWxzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMnKTtcbiAgICBzZWN0aW9uQUNIRGV0YWlsc0luZm8uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtZGV0YWlscy1pbmZvJyk7XG4gICAgc2VjdGlvbkFDSERldGFpbHNJbmZvSWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1kZXRhaWxzLWluZm8taWNvbicpO1xuICAgIHNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1kZXRhaWxzLWNvbnRlbnQnKTtcbiAgICBzZWN0aW9uQUNIRGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1kZXRhaWxzLWNvbnRlbnQtbGFiZWwnKTtcbiAgICBzZWN0aW9uQUNIRGV0YWlsc0NvbnRlbnRDb250YWluZXJEYXRlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtY29udGVudC1kYXRlJyk7XG5cbiAgICAvLyBMZWFkZXJib2FyZCByZXN1bHQgY29udGFpbmVyXG4gICAgc2VjdGlvbkFDSExpc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtbGlzdCcpO1xuICAgIHNlY3Rpb25BQ0hMaXN0Qm9keS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1saXN0LWJvZHknKTtcbiAgICBzZWN0aW9uQUNITGlzdEJvZHlSZXN1bHRzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWxpc3QtYm9keS1yZXMnKTtcblxuICAgIC8vIGZvb3RlclxuICAgIHNlY3Rpb25BQ0hGb290ZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtZm9vdGVyJyk7XG4gICAgc2VjdGlvbkFDSEZvb3RlckNvbnRlbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtZm9vdGVyLWNvbnRlbnQnKTtcblxuICAgIC8vIGRldGFpbHMgc2VjdGlvblxuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtZGV0YWlscy1jb250YWluZXInKTtcbiAgICBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzSGVhZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtaGVhZGVyJyk7XG4gICAgc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0hlYWRlckxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtaGVhZGVyLWxhYmVsJyk7XG4gICAgc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0hlYWRlckRhdGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtZGV0YWlscy1oZWFkZXItZGF0ZScpO1xuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCYWNrQnRuLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtYmFjay1idG4nKTtcbiAgICBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQm9keUNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1kZXRhaWxzLWJvZHktY29udGFpbmVyJyk7XG4gICAgc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0JvZHlJbWFnZUNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1kZXRhaWxzLWJvZHktaW1hZ2UtY29udCcpO1xuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtYm9keScpO1xuXG4gICAgc2VjdGlvbkFDSEhlYWRlckxhYmVsLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmFjaGlldmVtZW50cy5sYWJlbDtcbiAgICBzZWN0aW9uQUNIRm9vdGVyQ29udGVudC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5nbG9iYWwuY29weTtcblxuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0hlYWRlckxhYmVsKTtcbiAgICBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzSGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNIZWFkZXJEYXRlKTtcbiAgICBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNIZWFkZXIpO1xuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0JhY2tCdG4pO1xuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5SW1hZ2VDb250YWluZXIpO1xuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5KTtcbiAgICBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5Q29udGFpbmVyKTtcblxuICAgIHNlY3Rpb25BQ0hIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkFDSEhlYWRlckxhYmVsKTtcbiAgICBzZWN0aW9uQUNISGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hIZWFkZXJEYXRlKTtcbiAgICBzZWN0aW9uQUNISGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hIZWFkZXJDbG9zZSk7XG5cbiAgICBzZWN0aW9uQUNIRGV0YWlsc0luZm8uYXBwZW5kQ2hpbGQoc2VjdGlvbkFDSERldGFpbHNJbmZvSWNvbik7XG4gICAgc2VjdGlvbkFDSERldGFpbHNDb250ZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsKTtcbiAgICBzZWN0aW9uQUNIRGV0YWlsc0NvbnRlbnRDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkFDSERldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZSk7XG4gICAgc2VjdGlvbkFDSERldGFpbHMuYXBwZW5kQ2hpbGQoc2VjdGlvbkFDSERldGFpbHNJbmZvKTtcbiAgICBzZWN0aW9uQUNIRGV0YWlscy5hcHBlbmRDaGlsZChzZWN0aW9uQUNIRGV0YWlsc0NvbnRlbnRDb250YWluZXIpO1xuXG4gICAgc2VjdGlvbkFDSExpc3RCb2R5LmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hMaXN0Qm9keVJlc3VsdHMpO1xuICAgIHNlY3Rpb25BQ0hMaXN0LmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hMaXN0Qm9keSk7XG5cbiAgICBzZWN0aW9uQUNIRm9vdGVyLmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hGb290ZXJDb250ZW50KTtcblxuICAgIHNlY3Rpb25BQ0guYXBwZW5kQ2hpbGQoc2VjdGlvbkFDSEhlYWRlcik7XG4gICAgc2VjdGlvbkFDSC5hcHBlbmRDaGlsZChzZWN0aW9uQUNIRGV0YWlscyk7XG4gICAgc2VjdGlvbkFDSC5hcHBlbmRDaGlsZChzZWN0aW9uQUNITGlzdCk7XG4gICAgc2VjdGlvbkFDSC5hcHBlbmRDaGlsZChzZWN0aW9uQUNIRm9vdGVyKTtcbiAgICBzZWN0aW9uQUNILmFwcGVuZENoaWxkKHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNDb250YWluZXIpO1xuXG4gICAgcmV0dXJuIHNlY3Rpb25BQ0g7XG4gIH07XG5cbiAgdGhpcy5yZXdhcmRzQXJlYUxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBzZWN0aW9uUmV3YXJkcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzSGVhZGVyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvblJld2FyZHNIZWFkZXJEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzSGVhZGVyQ2xvc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0RldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvblJld2FyZHNEZXRhaWxzSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uUmV3YXJkc0RldGFpbHNJbmZvSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uUmV3YXJkc0xpc3RCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzTGlzdEJvZHlSZXN1bHRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICB2YXIgc2VjdGlvblJld2FyZHNGb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvblJld2FyZHNGb290ZXJDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICB2YXIgc2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0hlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uUmV3YXJkc0RldGFpbHNIZWFkZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uUmV3YXJkc0RldGFpbHNIZWFkZXJEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0JhY2tCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0JvZHlDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvblJld2FyZHNEZXRhaWxzQm9keUltYWdlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0JvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvblJld2FyZHNXaW5uaW5nc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uUmV3YXJkc1dpbm5pbmdzSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uUmV3YXJkc1dpbm5pbmdzVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvblJld2FyZHNDbGFpbUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uUmV3YXJkc0NsYWltQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXG4gICAgc2VjdGlvblJld2FyZHMuc2V0QXR0cmlidXRlKCdjbGFzcycsIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24ucmV3YXJkcy5jb250YWluZXJDbGFzcyArICcgY2wtbWFpbi1zZWN0aW9uLWl0ZW0nKTtcbiAgICBzZWN0aW9uUmV3YXJkc0hlYWRlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1oZWFkZXInKTtcbiAgICBzZWN0aW9uUmV3YXJkc0hlYWRlckxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWhlYWRlci1sYWJlbCcpO1xuICAgIHNlY3Rpb25SZXdhcmRzSGVhZGVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1oZWFkZXItZGF0ZScpO1xuICAgIHNlY3Rpb25SZXdhcmRzSGVhZGVyQ2xvc2Uuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtaGVhZGVyLWNsb3NlJyk7XG5cbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtZGV0YWlscycpO1xuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0luZm8uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtZGV0YWlscy1pbmZvJyk7XG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzSW5mb0ljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtZGV0YWlscy1pbmZvLWljb24nKTtcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtY29udGVudCcpO1xuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWNvbnRlbnQtbGFiZWwnKTtcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWNvbnRlbnQtZGF0ZScpO1xuXG4gICAgLy8gTGVhZGVyYm9hcmQgcmVzdWx0IGNvbnRhaW5lclxuICAgIHNlY3Rpb25SZXdhcmRzTGlzdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1saXN0Jyk7XG4gICAgc2VjdGlvblJld2FyZHNMaXN0Qm9keS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1saXN0LWJvZHknKTtcbiAgICBzZWN0aW9uUmV3YXJkc0xpc3RCb2R5UmVzdWx0cy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1saXN0LWJvZHktcmVzJyk7XG5cbiAgICAvLyBmb290ZXJcbiAgICBzZWN0aW9uUmV3YXJkc0Zvb3Rlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1mb290ZXInKTtcbiAgICBzZWN0aW9uUmV3YXJkc0Zvb3RlckNvbnRlbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtZm9vdGVyLWNvbnRlbnQnKTtcblxuICAgIC8vIGRldGFpbHMgc2VjdGlvblxuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWNvbnRhaW5lcicpO1xuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0hlYWRlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWhlYWRlcicpO1xuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0hlYWRlckxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtaGVhZGVyLWxhYmVsJyk7XG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzSGVhZGVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWhlYWRlci1kYXRlJyk7XG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQmFja0J0bi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWJhY2stYnRuJyk7XG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQm9keUNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWJvZHktY29udGFpbmVyJyk7XG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQm9keUltYWdlQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtYm9keS1pbWFnZS1jb250Jyk7XG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQm9keS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWJvZHknKTtcbiAgICBzZWN0aW9uUmV3YXJkc1dpbm5pbmdzQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLXdpbm5pbmdzLWNvbnRhaW5lcicpO1xuICAgIHNlY3Rpb25SZXdhcmRzV2lubmluZ3NJY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLXdpbm5pbmdzLWljb24nKTtcbiAgICBzZWN0aW9uUmV3YXJkc1dpbm5pbmdzVmFsdWUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtd2lubmluZ3MtdmFsdWUnKTtcbiAgICBzZWN0aW9uUmV3YXJkc0NsYWltQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWNsYWltLWNvbnRhaW5lcicpO1xuICAgIHNlY3Rpb25SZXdhcmRzQ2xhaW1CdG4uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtY2xhaW0tYnRuJyk7XG5cbiAgICBzZWN0aW9uUmV3YXJkc0hlYWRlckxhYmVsLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnJld2FyZHMubGFiZWw7XG4gICAgc2VjdGlvblJld2FyZHNGb290ZXJDb250ZW50LmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmdsb2JhbC5jb3B5O1xuICAgIHNlY3Rpb25SZXdhcmRzQ2xhaW1CdG4uaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ucmV3YXJkcy5jbGFpbTtcblxuICAgIHNlY3Rpb25SZXdhcmRzV2lubmluZ3NDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNXaW5uaW5nc0ljb24pO1xuICAgIHNlY3Rpb25SZXdhcmRzV2lubmluZ3NDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNXaW5uaW5nc1ZhbHVlKTtcbiAgICBzZWN0aW9uUmV3YXJkc0NsYWltQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzQ2xhaW1CdG4pO1xuXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzSGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0hlYWRlckxhYmVsKTtcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNEZXRhaWxzSGVhZGVyRGF0ZSk7XG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0hlYWRlcik7XG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0JhY2tCdG4pO1xuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0JvZHlDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNEZXRhaWxzQm9keUltYWdlQ29udGFpbmVyKTtcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNCb2R5Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0JvZHkpO1xuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0JvZHlDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNXaW5uaW5nc0NvbnRhaW5lcik7XG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0JvZHlDb250YWluZXIpO1xuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0NvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0NsYWltQ29udGFpbmVyKTtcblxuICAgIHNlY3Rpb25SZXdhcmRzSGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzSGVhZGVyTGFiZWwpO1xuICAgIHNlY3Rpb25SZXdhcmRzSGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzSGVhZGVyRGF0ZSk7XG4gICAgc2VjdGlvblJld2FyZHNIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNIZWFkZXJDbG9zZSk7XG5cbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNJbmZvLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0luZm9JY29uKTtcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbCk7XG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZSk7XG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0luZm8pO1xuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlscy5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyKTtcblxuICAgIHNlY3Rpb25SZXdhcmRzTGlzdEJvZHkuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNMaXN0Qm9keVJlc3VsdHMpO1xuICAgIHNlY3Rpb25SZXdhcmRzTGlzdC5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0xpc3RCb2R5KTtcblxuICAgIHNlY3Rpb25SZXdhcmRzRm9vdGVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRm9vdGVyQ29udGVudCk7XG5cbiAgICBzZWN0aW9uUmV3YXJkcy5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0hlYWRlcik7XG4gICAgc2VjdGlvblJld2FyZHMuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNEZXRhaWxzKTtcbiAgICBzZWN0aW9uUmV3YXJkcy5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0xpc3QpO1xuICAgIHNlY3Rpb25SZXdhcmRzLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRm9vdGVyKTtcbiAgICBzZWN0aW9uUmV3YXJkcy5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250YWluZXIpO1xuXG4gICAgcmV0dXJuIHNlY3Rpb25SZXdhcmRzO1xuICB9O1xuXG4gIHRoaXMuaW5ib3hBcmVhTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHNlY3Rpb25JbmJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgdmFyIHNlY3Rpb25JbmJveEhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uSW5ib3hIZWFkZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uSW5ib3hIZWFkZXJEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25JbmJveEhlYWRlckNsb3NlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICB2YXIgc2VjdGlvbkluYm94RGV0YWlscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzSW5mb0ljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkluYm94RGV0YWlsc0NvbnRlbnRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkluYm94RGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGVudENvbnRhaW5lckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBzZWN0aW9uSW5ib3hMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25JbmJveExpc3RCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25JbmJveExpc3RCb2R5UmVzdWx0cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgdmFyIHNlY3Rpb25JbmJveEZvb3RlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uSW5ib3hGb290ZXJDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICB2YXIgc2VjdGlvbkluYm94RGV0YWlsc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHNlY3Rpb25JbmJveERldGFpbHNIZWFkZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzSGVhZGVyRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzQmFja0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgc2VjdGlvbkluYm94RGV0YWlsc0JvZHlDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgc2VjdGlvbkluYm94RGV0YWlsc0JvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHNlY3Rpb25JbmJveC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubmF2aWdhdGlvbi5pbmJveC5jb250YWluZXJDbGFzcyArICcgY2wtbWFpbi1zZWN0aW9uLWl0ZW0nKTtcbiAgICBzZWN0aW9uSW5ib3hIZWFkZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1oZWFkZXInKTtcbiAgICBzZWN0aW9uSW5ib3hIZWFkZXJMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWluYm94LWhlYWRlci1sYWJlbCcpO1xuICAgIHNlY3Rpb25JbmJveEhlYWRlckRhdGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1oZWFkZXItZGF0ZScpO1xuICAgIHNlY3Rpb25JbmJveEhlYWRlckNsb3NlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtaGVhZGVyLWNsb3NlJyk7XG5cbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtZGV0YWlscycpO1xuICAgIHNlY3Rpb25JbmJveERldGFpbHNJbmZvLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtZGV0YWlscy1pbmZvJyk7XG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0luZm9JY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtZGV0YWlscy1pbmZvLWljb24nKTtcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGVudENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWluYm94LWRldGFpbHMtY29udGVudCcpO1xuICAgIHNlY3Rpb25JbmJveERldGFpbHNDb250ZW50Q29udGFpbmVyTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWNvbnRlbnQtbGFiZWwnKTtcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGVudENvbnRhaW5lckRhdGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWNvbnRlbnQtZGF0ZScpO1xuXG4gICAgLy8gTGVhZGVyYm9hcmQgcmVzdWx0IGNvbnRhaW5lclxuICAgIHNlY3Rpb25JbmJveExpc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1saXN0Jyk7XG4gICAgc2VjdGlvbkluYm94TGlzdEJvZHkuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1saXN0LWJvZHknKTtcbiAgICBzZWN0aW9uSW5ib3hMaXN0Qm9keVJlc3VsdHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1saXN0LWJvZHktcmVzJyk7XG5cbiAgICAvLyBmb290ZXJcbiAgICBzZWN0aW9uSW5ib3hGb290ZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1mb290ZXInKTtcbiAgICBzZWN0aW9uSW5ib3hGb290ZXJDb250ZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtZm9vdGVyLWNvbnRlbnQnKTtcblxuICAgIC8vIGRldGFpbHMgc2VjdGlvblxuICAgIHNlY3Rpb25JbmJveERldGFpbHNDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWNvbnRhaW5lcicpO1xuICAgIHNlY3Rpb25JbmJveERldGFpbHNIZWFkZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWhlYWRlcicpO1xuICAgIHNlY3Rpb25JbmJveERldGFpbHNIZWFkZXJMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWluYm94LWRldGFpbHMtaGVhZGVyLWxhYmVsJyk7XG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0hlYWRlckRhdGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWhlYWRlci1kYXRlJyk7XG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0JhY2tCdG4uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWJhY2stYnRuJyk7XG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0JvZHlDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWJvZHktY29udGFpbmVyJyk7XG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0JvZHkuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWJvZHknKTtcblxuICAgIHNlY3Rpb25JbmJveEhlYWRlckxhYmVsLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLm1lc3NhZ2VzLmxhYmVsO1xuICAgIHNlY3Rpb25JbmJveEZvb3RlckNvbnRlbnQuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24uZ2xvYmFsLmNvcHk7XG5cbiAgICBzZWN0aW9uSW5ib3hIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94SGVhZGVyTGFiZWwpO1xuICAgIHNlY3Rpb25JbmJveEhlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hIZWFkZXJEYXRlKTtcbiAgICBzZWN0aW9uSW5ib3hIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94SGVhZGVyQ2xvc2UpO1xuXG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0luZm8uYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94RGV0YWlsc0luZm9JY29uKTtcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsKTtcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGVudENvbnRhaW5lckRhdGUpO1xuICAgIHNlY3Rpb25JbmJveERldGFpbHMuYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94RGV0YWlsc0luZm8pO1xuICAgIHNlY3Rpb25JbmJveERldGFpbHMuYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94RGV0YWlsc0NvbnRlbnRDb250YWluZXIpO1xuXG4gICAgc2VjdGlvbkluYm94TGlzdEJvZHkuYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94TGlzdEJvZHlSZXN1bHRzKTtcbiAgICBzZWN0aW9uSW5ib3hMaXN0LmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveExpc3RCb2R5KTtcblxuICAgIHNlY3Rpb25JbmJveERldGFpbHNIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94RGV0YWlsc0hlYWRlckxhYmVsKTtcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzSGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveERldGFpbHNIZWFkZXJEYXRlKTtcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveERldGFpbHNIZWFkZXIpO1xuICAgIHNlY3Rpb25JbmJveERldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94RGV0YWlsc0JhY2tCdG4pO1xuICAgIHNlY3Rpb25JbmJveERldGFpbHNCb2R5Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveERldGFpbHNCb2R5KTtcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveERldGFpbHNCb2R5Q29udGFpbmVyKTtcblxuICAgIHNlY3Rpb25JbmJveEZvb3Rlci5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hGb290ZXJDb250ZW50KTtcblxuICAgIHNlY3Rpb25JbmJveC5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hIZWFkZXIpO1xuICAgIHNlY3Rpb25JbmJveC5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hEZXRhaWxzKTtcbiAgICBzZWN0aW9uSW5ib3guYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94TGlzdCk7XG4gICAgc2VjdGlvbkluYm94LmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveEZvb3Rlcik7XG4gICAgc2VjdGlvbkluYm94LmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveERldGFpbHNDb250YWluZXIpO1xuXG4gICAgcmV0dXJuIHNlY3Rpb25JbmJveDtcbiAgfTtcblxuICB0aGlzLmxlYWRlcmJvYXJkSGVhZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHJhbmtDb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgaWNvbkNvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBuYW1lQ29sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGdyb3d0aENvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBwb2ludHNDb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHJhbmtDb2wuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yYW5rLWNvbCBjbC1jb2wnKTtcbiAgICBpY29uQ29sLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtaWNvbi1jb2wgY2wtY29sJyk7XG4gICAgbmFtZUNvbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW5hbWUtY29sIGNsLWNvbCcpO1xuICAgIGdyb3d0aENvbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWdyb3d0aC1jb2wgY2wtY29sJyk7XG4gICAgcG9pbnRzQ29sLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcG9pbnRzLWNvbCBjbC1jb2wnKTtcblxuICAgIHJhbmtDb2wuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucmFuaztcbiAgICBpY29uQ29sLmlubmVySFRNTCA9ICcnO1xuICAgIG5hbWVDb2wuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQubmFtZTtcbiAgICBncm93dGhDb2wuaW5uZXJIVE1MID0gJyc7XG4gICAgcG9pbnRzQ29sLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnBvaW50cztcblxuICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmhlYWRlci5hcHBlbmRDaGlsZChyYW5rQ29sKTtcbiAgICBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5oZWFkZXIuYXBwZW5kQ2hpbGQoaWNvbkNvbCk7XG4gICAgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuaGVhZGVyLmFwcGVuZENoaWxkKG5hbWVDb2wpO1xuICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmhlYWRlci5hcHBlbmRDaGlsZChncm93dGhDb2wpO1xuICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmhlYWRlci5hcHBlbmRDaGlsZChwb2ludHNDb2wpO1xuXG4gICAgdmFyIHJld2FyZENvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciByZXdhcmRFbmFibGVkID0gKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0ICE9PSAndW5kZWZpbmVkJyAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0ICE9PSBudWxsICYmIHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnJld2FyZHMgIT09ICd1bmRlZmluZWQnICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QucmV3YXJkcy5sZW5ndGggPiAwKTtcbiAgICByZXdhcmRDb2wuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yZXdhcmQtY29sIGNsLWNvbCcgKyAocmV3YXJkRW5hYmxlZCA/ICcgY2wtY29sLXJld2FyZC1lbmFibGVkJyA6ICcnKSk7XG4gICAgcmV3YXJkQ29sLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnByaXplO1xuXG4gICAgYWRkQ2xhc3MoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuaGVhZGVyLCAnY2wtcmV3YXJkLWVuYWJsZWQnKTtcblxuICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmhlYWRlci5hcHBlbmRDaGlsZChyZXdhcmRDb2wpO1xuICB9O1xuXG4gIHRoaXMubGVhZGVyYm9hcmRSb3cgPSBmdW5jdGlvbiAocmFuaywgaWNvbiwgbmFtZSwgY2hhbmdlLCBncm93dGgsIHBvaW50cywgcmV3YXJkLCBjb3VudCwgbWVtYmVyRm91bmQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBjZWxsV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciByYW5rQ2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHJhbmtDZWxWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBpY29uQ2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGljb25DZWxJbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICB2YXIgbmFtZUNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBncm93dGhDZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgcG9pbnRzQ2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIG1lbWJlckZvdW5kQ2xhc3MgPSAobWVtYmVyRm91bmQpID8gJyBjbC1sYi1tZW1iZXItcm93JyA6ICcnO1xuXG4gICAgY2VsbFdyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1sYi1yb3cgY2wtbGItcmFuay0nICsgcmFuayArICcgY2wtbGItY291bnQtJyArIGNvdW50ICsgbWVtYmVyRm91bmRDbGFzcyk7XG4gICAgcmFua0NlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXJhbmstY29sIGNsLWNvbCBjbC1yYW5rLScgKyByYW5rKTtcbiAgICByYW5rQ2VsVmFsdWUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yYW5rLWNvbC12YWx1ZScpO1xuICAgIGljb25DZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1pY29uLWNvbCBjbC1jb2wnKTtcbiAgICBpY29uQ2VsSW1nLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtaWNvbi1jb2wtaW1nJyk7XG4gICAgbmFtZUNlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW5hbWUtY29sIGNsLWNvbCcpO1xuICAgIGdyb3d0aENlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWdyb3d0aC1jb2wgY2wtY29sJyk7XG4gICAgcG9pbnRzQ2VsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcG9pbnRzLWNvbCBjbC1jb2wnKTtcblxuICAgIGNlbGxXcmFwcGVyLmRhdGFzZXQucmFuayA9IHJhbms7XG5cbiAgICByYW5rQ2VsVmFsdWUuaW5uZXJIVE1MID0gcmFuaztcbiAgICBuYW1lQ2VsLmlubmVySFRNTCA9IG5hbWU7XG4gICAgZ3Jvd3RoQ2VsLmRhdGFzZXQuZ3Jvd3RoID0gKGNoYW5nZSA8IDApID8gJ2Rvd24nIDogKGNoYW5nZSA+IDAgPyAndXAnIDogJ3NhbWUnKTtcbiAgICBncm93dGhDZWwuZGF0YXNldC5jaGFuZ2UgPSBjaGFuZ2U7XG4gICAgZ3Jvd3RoQ2VsLmlubmVySFRNTCA9IGdyb3d0aDtcbiAgICBwb2ludHNDZWwuaW5uZXJIVE1MID0gcG9pbnRzO1xuXG4gICAgaWYgKGljb24ubGVuZ3RoID4gMCkge1xuICAgICAgaWNvbkNlbEltZy5zcmMgPSBpY29uO1xuICAgICAgaWNvbkNlbEltZy5hbHQgPSBuYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBpY29uQ2VsSW1nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuXG4gICAgcmFua0NlbC5hcHBlbmRDaGlsZChyYW5rQ2VsVmFsdWUpO1xuICAgIGNlbGxXcmFwcGVyLmFwcGVuZENoaWxkKHJhbmtDZWwpO1xuICAgIGljb25DZWwuYXBwZW5kQ2hpbGQoaWNvbkNlbEltZyk7XG4gICAgY2VsbFdyYXBwZXIuYXBwZW5kQ2hpbGQoaWNvbkNlbCk7XG4gICAgY2VsbFdyYXBwZXIuYXBwZW5kQ2hpbGQobmFtZUNlbCk7XG4gICAgY2VsbFdyYXBwZXIuYXBwZW5kQ2hpbGQoZ3Jvd3RoQ2VsKTtcbiAgICBjZWxsV3JhcHBlci5hcHBlbmRDaGlsZChwb2ludHNDZWwpO1xuXG4gICAgdmFyIHJld2FyZENlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciByZXdhcmRFbmFibGVkID0gKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0ICE9PSAndW5kZWZpbmVkJyAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0ICE9PSBudWxsICYmIHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnJld2FyZHMgIT09ICd1bmRlZmluZWQnICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QucmV3YXJkcy5sZW5ndGggPiAwKTtcbiAgICByZXdhcmRDZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yZXdhcmQtY29sIGNsLWNvbCcgKyAocmV3YXJkRW5hYmxlZCA/ICcgY2wtY29sLXJld2FyZC1lbmFibGVkJyA6ICcnKSk7XG4gICAgcmV3YXJkQ2VsLmlubmVySFRNTCA9ICh0eXBlb2YgcmV3YXJkICE9PSAndW5kZWZpbmVkJyAmJiByZXdhcmQgIT09IG51bGwpID8gcmV3YXJkIDogJyc7XG5cbiAgICBhZGRDbGFzcyhjZWxsV3JhcHBlciwgJ2NsLXJld2FyZC1lbmFibGVkJyk7XG5cbiAgICBjZWxsV3JhcHBlci5hcHBlbmRDaGlsZChyZXdhcmRDZWwpO1xuXG4gICAgcmV0dXJuIGNlbGxXcmFwcGVyO1xuICB9O1xuXG4gIHRoaXMubGVhZGVyYm9hcmRSb3dVcGRhdGUgPSBmdW5jdGlvbiAocmFuaywgaWNvbiwgbmFtZSwgY2hhbmdlLCBncm93dGgsIHBvaW50cywgcmV3YXJkLCBjb3VudCwgbWVtYmVyRm91bmQsIG9uTWlzc2luZykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGNlbGxSb3cgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5jb250YWluZXIsICcuY2wtbGItcmFuay0nICsgcmFuayArICcuY2wtbGItY291bnQtJyArIGNvdW50KTtcblxuICAgIGlmIChjZWxsUm93ID09PSBudWxsKSB7XG4gICAgICBvbk1pc3NpbmcocmFuaywgaWNvbiwgbmFtZSwgY2hhbmdlLCBncm93dGgsIHBvaW50cywgcmV3YXJkLCBjb3VudCwgbWVtYmVyRm91bmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmFua0NlbCA9IHF1ZXJ5KGNlbGxSb3csICcuY2wtcmFuay1jb2wtdmFsdWUnKTtcbiAgICAgIHZhciBpY29uQ2VsID0gcXVlcnkoY2VsbFJvdywgJy5jbC1pY29uLWNvbC1pbWcnKTtcbiAgICAgIHZhciBuYW1lQ2VsID0gcXVlcnkoY2VsbFJvdywgJy5jbC1uYW1lLWNvbCcpO1xuICAgICAgdmFyIGdyb3d0aENlbCA9IHF1ZXJ5KGNlbGxSb3csICcuY2wtZ3Jvd3RoLWNvbCcpO1xuICAgICAgdmFyIHBvaW50c0NlbCA9IHF1ZXJ5KGNlbGxSb3csICcuY2wtcG9pbnRzLWNvbCcpO1xuICAgICAgdmFyIG1lbWJlckZvdW5kQ2xhc3MgPSAnY2wtbGItbWVtYmVyLXJvdyc7XG4gICAgICB2YXIgcm93SGFzQ2xhc3MgPSBoYXNDbGFzcyhjZWxsUm93LCBtZW1iZXJGb3VuZENsYXNzKTtcblxuICAgICAgaWYgKGNvdW50ID4gMCAmJiAhaGFzQ2xhc3MoY2VsbFJvdywgJ2NsLXNoYXJlZC1yYW5rJykpIHtcbiAgICAgICAgYWRkQ2xhc3MoY2VsbFJvdywgJ2NsLXNoYXJlZC1yYW5rJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZW1iZXJGb3VuZCAmJiAhcm93SGFzQ2xhc3MpIHtcbiAgICAgICAgYWRkQ2xhc3MoY2VsbFJvdywgbWVtYmVyRm91bmRDbGFzcyk7XG4gICAgICB9IGVsc2UgaWYgKCFtZW1iZXJGb3VuZCAmJiByb3dIYXNDbGFzcykge1xuICAgICAgICByZW1vdmVDbGFzcyhjZWxsUm93LCBtZW1iZXJGb3VuZENsYXNzKTtcbiAgICAgIH1cblxuICAgICAgY2VsbFJvdy5kYXRhc2V0LnJhbmsgPSByYW5rO1xuXG4gICAgICByYW5rQ2VsLmlubmVySFRNTCA9IHJhbms7XG4gICAgICBuYW1lQ2VsLmlubmVySFRNTCA9IG5hbWU7XG5cbiAgICAgIGdyb3d0aENlbC5kYXRhc2V0Lmdyb3d0aCA9IChjaGFuZ2UgPCAwKSA/ICdkb3duJyA6IChjaGFuZ2UgPiAwID8gJ3VwJyA6ICdzYW1lJyk7XG4gICAgICBncm93dGhDZWwuZGF0YXNldC5jaGFuZ2UgPSBjaGFuZ2U7XG4gICAgICBncm93dGhDZWwuaW5uZXJIVE1MID0gZ3Jvd3RoO1xuXG4gICAgICBwb2ludHNDZWwuaW5uZXJIVE1MID0gcG9pbnRzO1xuXG4gICAgICBpZiAoaWNvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGljb25DZWwuc3JjID0gaWNvbjtcbiAgICAgICAgaWNvbkNlbC5hbHQgPSBuYW1lO1xuICAgICAgICBpY29uQ2VsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWNvbkNlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09ICd1bmRlZmluZWQnICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09IG51bGwgJiYgdHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QucmV3YXJkcyAhPT0gJ3VuZGVmaW5lZCcgJiYgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5yZXdhcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHJld2FyZENlbCA9IHF1ZXJ5KGNlbGxSb3csICcuY2wtcmV3YXJkLWNvbCcpO1xuICAgICAgICBpZiAocmV3YXJkQ2VsICE9PSBudWxsKSB7XG4gICAgICAgICAgcmV3YXJkQ2VsLmlubmVySFRNTCA9ICh0eXBlb2YgcmV3YXJkICE9PSAndW5kZWZpbmVkJyAmJiByZXdhcmQgIT09IG51bGwpID8gcmV3YXJkIDogJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wb3B1bGF0ZUxlYWRlcmJvYXJkUmVzdWx0c1dpdGhEZWZhdWx0RW50cmllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciB0b3BSZXN1bHRzID0gW107XG4gICAgdmFyIHJlbWFpbmluZ1Jlc3VsdHMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQudG9wUmVzdWx0U2l6ZTsgaSsrKSB7XG4gICAgICBjb25zdCByYW5rID0gaSArIDE7XG5cbiAgICAgIHRvcFJlc3VsdHMucHVzaCh7XG4gICAgICAgIG5hbWU6ICctLScsXG4gICAgICAgIHJhbms6IHJhbmssXG4gICAgICAgIHBvaW50czogJy0tJyxcbiAgICAgICAgbWVtYmVySWQ6ICcnLFxuICAgICAgICBtZW1iZXJSZWZJZDogJydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAobGV0IHMgPSBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50b3BSZXN1bHRTaXplOyBzIDwgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuZGVmYXVsdEVtcHR5TGlzdDsgcysrKSB7XG4gICAgICBjb25zdCByYW5rID0gcyArIDE7XG5cbiAgICAgIHJlbWFpbmluZ1Jlc3VsdHMucHVzaCh7XG4gICAgICAgIG5hbWU6ICctLScsXG4gICAgICAgIHJhbms6IHJhbmssXG4gICAgICAgIHBvaW50czogJy0tJyxcbiAgICAgICAgbWVtYmVySWQ6ICcnLFxuICAgICAgICBtZW1iZXJSZWZJZDogJydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF90aGlzLnVwZGF0ZUxlYWRlcmJvYXJkVG9wUmVzdWx0cyh0b3BSZXN1bHRzKTtcbiAgICBfdGhpcy51cGRhdGVMZWFkZXJib2FyZFJlc3VsdHMocmVtYWluaW5nUmVzdWx0cyk7XG4gIH07XG5cbiAgdGhpcy51cGRhdGVMZWFkZXJib2FyZFRvcFJlc3VsdHMgPSBmdW5jdGlvbiAodG9wUmVzdWx0cykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHJhbmtDaGVjayA9IFtdO1xuICAgIHZhciBjbGVhbnVwUmFua0NoZWNrID0gW107XG5cbiAgICAvLyBjbGVhbnVwXG4gICAgbWFwT2JqZWN0KHRvcFJlc3VsdHMsIGZ1bmN0aW9uIChsYikge1xuICAgICAgY2xlYW51cFJhbmtDaGVjay5wdXNoKGxiLnJhbmspO1xuICAgICAgb2JqZWN0SXRlcmF0b3IocXVlcnkoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQudG9wUmVzdWx0cywgJy5jbC1sYi1yYW5rLScgKyBsYi5yYW5rICsgJy5jbC1zaGFyZWQtcmFuaycpLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJlbW92ZShvYmopO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBvYmplY3RJdGVyYXRvcihxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50b3BSZXN1bHRzLCAnLmNsLWxiLXJvdycpLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICB2YXIgcmFuayA9IHBhcnNlSW50KG9iai5kYXRhc2V0LnJhbmspO1xuICAgICAgaWYgKGNsZWFudXBSYW5rQ2hlY2suaW5kZXhPZihyYW5rKSA9PT0gLTEgJiYgcmFuayA+IF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmRlZmF1bHRFbXB0eUxpc3QpIHtcbiAgICAgICAgcmVtb3ZlKG9iaik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBtYXBPYmplY3QodG9wUmVzdWx0cywgZnVuY3Rpb24gKGxiKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgdmFyIGljb24gPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5wb3B1bGF0ZUlkZW50aWNvbkJhc2U2NEltYWdlKGxiLm1lbWJlcklkKTtcbiAgICAgIHZhciBtZW1iZXJGb3VuZCA9IChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCA9PT0gbGIubWVtYmVySWQgfHwgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQgPT09IGxiLm1lbWJlclJlZklkKTtcbiAgICAgIHZhciBtZW1iZXJOYW1lID0gKG1lbWJlckZvdW5kKSA/IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnlvdSA6IGxiLm5hbWU7XG4gICAgICB2YXIgcmV3YXJkID0gX3RoaXMuZ2V0UmV3YXJkKGxiLnJhbmspO1xuICAgICAgdmFyIGNoYW5nZSA9ICh0eXBlb2YgbGIuY2hhbmdlID09PSAndW5kZWZpbmVkJykgPyAwIDogbGIuY2hhbmdlO1xuICAgICAgdmFyIGdyb3d0aFR5cGUgPSAoY2hhbmdlIDwgMCkgPyAnZG93bicgOiAoY2hhbmdlID4gMCA/ICd1cCcgOiAnc2FtZScpO1xuICAgICAgdmFyIGdyb3d0aEljb24gPSBcIjxzcGFuIGNsYXNzPSdjbC1ncm93dGgtaWNvbiBjbC1ncm93dGgtXCIgKyBncm93dGhUeXBlICsgXCInPjwvc3Bhbj5cIjtcbiAgICAgIHZhciBmb3JtYXR0ZWRQb2ludHMgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5sZWFkZXJib2FyZC5wb2ludHNGb3JtYXR0ZXIobGIucG9pbnRzKTtcblxuICAgICAgaWYgKHJhbmtDaGVjay5pbmRleE9mKGxiLnJhbmspICE9PSAtMSkge1xuICAgICAgICBmb3IgKHZhciByYyA9IDA7IHJjIDwgcmFua0NoZWNrLmxlbmd0aDsgcmMrKykge1xuICAgICAgICAgIGlmIChsYi5yYW5rID09PSByYW5rQ2hlY2tbcmNdKSB7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfdGhpcy5sZWFkZXJib2FyZFJvd1VwZGF0ZShcbiAgICAgICAgbGIucmFuayxcbiAgICAgICAgaWNvbiwgLy8gaWNvblxuICAgICAgICBtZW1iZXJOYW1lLFxuICAgICAgICBjaGFuZ2UsXG4gICAgICAgIGdyb3d0aEljb24sIC8vIGdyb3d0aFxuICAgICAgICBmb3JtYXR0ZWRQb2ludHMsXG4gICAgICAgIHJld2FyZCwgLy8gcmV3YXJkXG4gICAgICAgIGNvdW50LFxuICAgICAgICBtZW1iZXJGb3VuZCxcbiAgICAgICAgZnVuY3Rpb24gKHJhbmssIGljb24sIG5hbWUsIGNoYW5nZSwgZ3Jvd3RoLCBwb2ludHMsIHJld2FyZCwgY291bnQsIG1lbWJlckZvdW5kKSB7XG4gICAgICAgICAgdmFyIG5ld1JvdyA9IF90aGlzLmxlYWRlcmJvYXJkUm93KHJhbmssIGljb24sIG5hbWUsIGNoYW5nZSwgZ3Jvd3RoLCBwb2ludHMsIHJld2FyZCwgY291bnQsIG1lbWJlckZvdW5kKTtcbiAgICAgICAgICB2YXIgcHJldkNlbGxSb3cgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5jb250YWluZXIsICcuY2wtbGItcmFuay0nICsgcmFuayArICcuY2wtbGItY291bnQtJyArIChjb3VudCAtIDEpKTtcblxuICAgICAgICAgIGlmIChwcmV2Q2VsbFJvdyAhPT0gbnVsbCAmJiB0eXBlb2YgcHJldkNlbGxSb3cubGVuZ3RoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgYXBwZW5kTmV4dChwcmV2Q2VsbFJvdywgbmV3Um93KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQudG9wUmVzdWx0cy5hcHBlbmRDaGlsZChuZXdSb3cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgcmFua0NoZWNrLnB1c2gobGIucmFuayk7XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5nZXRSZXdhcmQgPSBmdW5jdGlvbiAocmFuaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHJld2FyZFJlc3BvbnNlID0gW107XG5cbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09ICd1bmRlZmluZWQnICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09IG51bGwpIHtcbiAgICAgIG1hcE9iamVjdChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnJld2FyZHMsIGZ1bmN0aW9uIChyZXdhcmQpIHtcbiAgICAgICAgaWYgKHJld2FyZC5yZXdhcmRSYW5rIGluc3RhbmNlb2YgQXJyYXkgJiYgcmV3YXJkLnJld2FyZFJhbmsuaW5kZXhPZihyYW5rKSAhPT0gLTEpIHtcbiAgICAgICAgICByZXdhcmRSZXNwb25zZS5wdXNoKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnBhcnRpYWxGdW5jdGlvbnMucmV3YXJkRm9ybWF0dGVyKHJld2FyZCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV3YXJkUmVzcG9uc2Uuam9pbignLCAnKTtcbiAgfTtcblxuICB0aGlzLnVwZGF0ZUxlYWRlcmJvYXJkUmVzdWx0cyA9IGZ1bmN0aW9uIChyZW1haW5pbmdSZXN1bHRzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgcmFua0NoZWNrID0gW107XG4gICAgdmFyIGNsZWFudXBSYW5rQ2hlY2sgPSBbXTtcblxuICAgIC8vIGNsZWFudXBcbiAgICBtYXBPYmplY3QocmVtYWluaW5nUmVzdWx0cywgZnVuY3Rpb24gKGxiKSB7XG4gICAgICBjbGVhbnVwUmFua0NoZWNrLnB1c2gobGIucmFuayk7XG4gICAgICBvYmplY3RJdGVyYXRvcihxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5saXN0LCAnLmNsLWxiLXJhbmstJyArIGxiLnJhbmsgKyAnLmNsLXNoYXJlZC1yYW5rJyksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmVtb3ZlKG9iaik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIG9iamVjdEl0ZXJhdG9yKHF1ZXJ5KF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmNvbnRhaW5lciwgJy5jbC1sYi1yb3cnKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgdmFyIHJhbmsgPSBwYXJzZUludChvYmouZGF0YXNldC5yYW5rKTtcbiAgICAgIGlmIChjbGVhbnVwUmFua0NoZWNrLmluZGV4T2YocmFuaykgPT09IC0xICYmIHJhbmsgPiBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5kZWZhdWx0RW1wdHlMaXN0KSB7XG4gICAgICAgIHJlbW92ZShvYmopO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbWFwT2JqZWN0KHJlbWFpbmluZ1Jlc3VsdHMsIGZ1bmN0aW9uIChsYikge1xuICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgIHZhciBpY29uID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQucG9wdWxhdGVJZGVudGljb25CYXNlNjRJbWFnZShsYi5tZW1iZXJJZCk7XG4gICAgICB2YXIgbWVtYmVyRm91bmQgPSAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQgPT09IGxiLm1lbWJlcklkIHx8IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm1lbWJlcklkID09PSBsYi5tZW1iZXJSZWZJZCk7XG4gICAgICB2YXIgbWVtYmVyTmFtZSA9IChtZW1iZXJGb3VuZCkgPyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5sZWFkZXJib2FyZC55b3UgOiBsYi5uYW1lO1xuICAgICAgdmFyIHJld2FyZCA9IF90aGlzLmdldFJld2FyZChsYi5yYW5rKTtcbiAgICAgIHZhciBjaGFuZ2UgPSAodHlwZW9mIGxiLmNoYW5nZSA9PT0gJ3VuZGVmaW5lZCcpID8gMCA6IGxiLmNoYW5nZTtcbiAgICAgIHZhciBncm93dGhUeXBlID0gKGNoYW5nZSA8IDApID8gJ2Rvd24nIDogKGNoYW5nZSA+IDAgPyAndXAnIDogJ3NhbWUnKTtcbiAgICAgIHZhciBncm93dGhJY29uID0gXCI8c3BhbiBjbGFzcz0nY2wtZ3Jvd3RoLWljb24gY2wtZ3Jvd3RoLVwiICsgZ3Jvd3RoVHlwZSArIFwiJz48L3NwYW4+XCI7XG4gICAgICB2YXIgZm9ybWF0dGVkUG9pbnRzID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubGVhZGVyYm9hcmQucG9pbnRzRm9ybWF0dGVyKGxiLnBvaW50cyk7XG5cbiAgICAgIGlmIChyYW5rQ2hlY2suaW5kZXhPZihsYi5yYW5rKSAhPT0gLTEpIHtcbiAgICAgICAgZm9yICh2YXIgcmMgPSAwOyByYyA8IHJhbmtDaGVjay5sZW5ndGg7IHJjKyspIHtcbiAgICAgICAgICBpZiAobGIucmFuayA9PT0gcmFua0NoZWNrW3JjXSkge1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX3RoaXMubGVhZGVyYm9hcmRSb3dVcGRhdGUoXG4gICAgICAgIGxiLnJhbmssXG4gICAgICAgIGljb24sIC8vIGljb25cbiAgICAgICAgbWVtYmVyTmFtZSxcbiAgICAgICAgY2hhbmdlLFxuICAgICAgICBncm93dGhJY29uLCAvLyBncm93dGhcbiAgICAgICAgZm9ybWF0dGVkUG9pbnRzLFxuICAgICAgICByZXdhcmQsXG4gICAgICAgIGNvdW50LFxuICAgICAgICBtZW1iZXJGb3VuZCxcbiAgICAgICAgZnVuY3Rpb24gKHJhbmssIGljb24sIG5hbWUsIGNoYW5nZSwgZ3Jvd3RoLCBwb2ludHMsIHJld2FyZCwgY291bnQsIG1lbWJlckZvdW5kKSB7XG4gICAgICAgICAgdmFyIG5ld1JvdyA9IF90aGlzLmxlYWRlcmJvYXJkUm93KHJhbmssIGljb24sIG5hbWUsIG5hbWUsIGdyb3d0aCwgcG9pbnRzLCByZXdhcmQsIGNvdW50LCBtZW1iZXJGb3VuZCk7XG4gICAgICAgICAgdmFyIHByZXZDZWxsUm93ID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuY29udGFpbmVyLCAnLmNsLWxiLXJhbmstJyArIHJhbmsgKyAnLmNsLWxiLWNvdW50LScgKyAoY291bnQgLSAxKSk7XG5cbiAgICAgICAgICBpZiAocHJldkNlbGxSb3cgIT09IG51bGwgJiYgdHlwZW9mIHByZXZDZWxsUm93Lmxlbmd0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGFwcGVuZE5leHQocHJldkNlbGxSb3csIG5ld1Jvdyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxpc3QuYXBwZW5kQ2hpbGQobmV3Um93KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIHJhbmtDaGVjay5wdXNoKGxiLnJhbmspO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMudXBkYXRlTGVhZGVyYm9hcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgdG9wUmVzdWx0cyA9IFtdO1xuICAgIHZhciByZW1haW5pbmdSZXN1bHRzID0gW107XG5cbiAgICBfdGhpcy5wb3B1bGF0ZUxlYWRlcmJvYXJkUmVzdWx0c1dpdGhEZWZhdWx0RW50cmllcygpO1xuXG4gICAgbWFwT2JqZWN0KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmxlYWRlcmJvYXJkLmxlYWRlcmJvYXJkRGF0YSwgZnVuY3Rpb24gKGxiKSB7XG4gICAgICBpZiAobGIucmFuayA8PSBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50b3BSZXN1bHRTaXplKSB7XG4gICAgICAgIHRvcFJlc3VsdHMucHVzaChsYik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW1haW5pbmdSZXN1bHRzLnB1c2gobGIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX3RoaXMudXBkYXRlTGVhZGVyYm9hcmRUb3BSZXN1bHRzKHRvcFJlc3VsdHMpO1xuICAgIF90aGlzLnVwZGF0ZUxlYWRlcmJvYXJkUmVzdWx0cyhyZW1haW5pbmdSZXN1bHRzKTtcblxuICAgIHZhciBtZW1iZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5saXN0LCAnLmNsLWxiLW1lbWJlci1yb3cnKTtcbiAgICBpZiAobWVtYmVyICE9PSBudWxsKSB7XG4gICAgICBfdGhpcy5taXNzaW5nTWVtYmVyKF90aGlzLmlzRWxlbWVudFZpc2libGVJblZpZXcobWVtYmVyLCBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5saXN0LnBhcmVudE5vZGUpKTtcbiAgICAgIF90aGlzLm1pc3NpbmdNZW1iZXIoX3RoaXMuaXNFbGVtZW50VmlzaWJsZUluVmlldyhtZW1iZXIsIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlc3VsdENvbnRhaW5lcikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5taXNzaW5nTWVtYmVyUmVzZXQoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy51cGRhdGVMZWFkZXJib2FyZFRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgZGlmZiA9IG1vbWVudChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnNjaGVkdWxlZFN0YXJ0KS5kaWZmKG1vbWVudCgpKTtcbiAgICB2YXIgZGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLm1pbmlMZWFkZXJib2FyZC5zdGFydHNJbiArICc6ICcgKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5mb3JtYXREYXRlVGltZShtb21lbnQuZHVyYXRpb24oZGlmZikpO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnRpbWVySW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50aW1lckludGVydmFsKTtcbiAgICB9XG5cbiAgICBpZiAoZGlmZiA8PSAwICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RhdHVzQ29kZSA9PT0gMCkge1xuICAgICAgZGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLm1pbmlMZWFkZXJib2FyZC5zdGFydGluZztcbiAgICB9IGVsc2UgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RhdHVzQ29kZSA9PT0gMSkge1xuICAgICAgZGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzLnN0YXJ0aW5nO1xuICAgIH0gZWxzZSBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zdGF0dXNDb2RlID09PSAyKSB7XG4gICAgICBkaWZmID0gbW9tZW50KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc2NoZWR1bGVkRW5kKS5kaWZmKG1vbWVudCgpKTtcbiAgICAgIGRhdGUgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5mb3JtYXREYXRlVGltZShtb21lbnQuZHVyYXRpb24oZGlmZikpO1xuXG4gICAgICBpZiAoZGlmZiA8PSAwKSB7XG4gICAgICAgIGRhdGUgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi50b3VybmFtZW50cy5maW5pc2hpbmc7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnN0YXR1c0NvZGUgPT09IDMpIHtcbiAgICAgIGRhdGUgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi50b3VybmFtZW50cy5maW5pc2hpbmc7XG4gICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnN0YXR1c0NvZGUgPj0gNCkge1xuICAgICAgZGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzLmZpbmlzaGVkO1xuICAgIH1cblxuICAgIF90aGlzLnNldHRpbmdzLmhlYWRlckRhdGUuaW5uZXJIVE1MID0gZGF0ZTtcbiAgICBfdGhpcy5zZXR0aW5ncy5sYWJlbERhdGUuaW5uZXJIVE1MID0gZGF0ZTtcbiAgICBfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyRGF0ZS5pbm5lckhUTUwgPSBkYXRlO1xuXG4gICAgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQudGltZXJJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudXBkYXRlTGVhZGVyYm9hcmRUaW1lKCk7XG4gICAgfSwgMTAwMCk7XG4gIH07XG5cbiAgdGhpcy5nZXRBY3RpdmVDb21wZXRpdGlvbkRlc2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0ICE9PSBudWxsICYmIHRoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5kZXNjcmlwdGlvbi5sZW5ndGggPiAwKSA/IHRoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5kZXNjcmlwdGlvbiA6ICgodGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbiAhPT0gbnVsbCkgPyB0aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLmRlc2NyaXB0aW9uIDogJycpO1xuICB9O1xuXG4gIHRoaXMuZXh0cmFjdEltYWdlID0gZnVuY3Rpb24gKGJvZHksIGltYWdlQ29udGFpbmVyLCBpc0JvZHlWaXJ0dWFsT3B0KSB7XG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICAgIGNvbnN0IGFjdGl2ZUltYWdlQ29udGFpbmVyID0gY2xvc2VzdChib2R5LCAnLmNsLW1haW4tc2VjdGlvbi1pbWFnZS1iYW5uZXItYWN0aXZlJyk7XG4gICAgdmFyIGltYWdlRm91bmQgPSBmYWxzZTtcbiAgICBjb25zdCBpc0JvZHlWaXJ0dWFsID0gKHR5cGVvZiBpc0JvZHlWaXJ0dWFsT3B0ID09PSAnYm9vbGVhbicpID8gaXNCb2R5VmlydHVhbE9wdCA6IGZhbHNlO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmV4dHJhY3RJbWFnZUhlYWRlcikge1xuICAgICAgb2JqZWN0SXRlcmF0b3IocXVlcnkoYm9keSwgJ2ltZycpLCBmdW5jdGlvbiAoaW1nLCBrZXksIGNvdW50KSB7XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgIGltYWdlRm91bmQgPSB0cnVlO1xuICAgICAgICAgIHZhciBuZXdJbWcgPSBpbWcuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgIGFkZENsYXNzKG5ld0ltZywgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtaW1hZ2UnKTtcbiAgICAgICAgICBpbWFnZUNvbnRhaW5lci5hcHBlbmRDaGlsZChuZXdJbWcpO1xuXG4gICAgICAgICAgcmVtb3ZlKGltZyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghaW1hZ2VGb3VuZCAmJiBhY3RpdmVJbWFnZUNvbnRhaW5lciAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlQ2xhc3MoYWN0aXZlSW1hZ2VDb250YWluZXIsICdjbC1tYWluLXNlY3Rpb24taW1hZ2UtYmFubmVyLWFjdGl2ZScpO1xuICAgIH0gZWxzZSBpZiAoaW1hZ2VGb3VuZCAmJiBhY3RpdmVJbWFnZUNvbnRhaW5lciA9PT0gbnVsbCAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5sZWFkZXJib2FyZC5sYXlvdXRTZXR0aW5ncy5pbWFnZUJhbm5lciAmJiAhaXNCb2R5VmlydHVhbCkge1xuICAgICAgYWRkQ2xhc3MoY2xvc2VzdChib2R5LCAnLmNsLW1haW4tc2VjdGlvbi1pdGVtJyksICdjbC1tYWluLXNlY3Rpb24taW1hZ2UtYmFubmVyLWFjdGl2ZScpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmxlYWRlcmJvYXJkRGV0YWlsc1VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBtYWluTGFiZWwgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5zZWN0aW9uLCAnLmNsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtY29udGVudC1sYWJlbC10ZXh0Jyk7XG4gICAgdmFyIGJvZHkgPSBudWxsO1xuXG4gICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5sZWFkZXJib2FyZC5sYXlvdXRTZXR0aW5ncy50aXRsZUxpbmtUb0RldGFpbHNQYWdlKSB7XG4gICAgICBib2R5ID0gcXVlcnkoX3RoaXMuc2V0dGluZ3Muc2VjdGlvbiwgJy5jbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWRlc2NyaXB0aW9uJyk7XG4gICAgICBib2R5LmlubmVySFRNTCA9IF90aGlzLmdldEFjdGl2ZUNvbXBldGl0aW9uRGVzY3JpcHRpb24oKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubGVhZGVyYm9hcmQubGF5b3V0U2V0dGluZ3MuaW1hZ2VCYW5uZXIpIHtcbiAgICAgIHZhciBpbWFnZSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLnNlY3Rpb24sICcuY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1pbWFnZS1jb250YWluZXInKTtcbiAgICAgIGltYWdlLmlubmVySFRNTCA9ICcnO1xuXG4gICAgICBpZiAoYm9keSA9PT0gbnVsbCkge1xuICAgICAgICBib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGJvZHkuaW5uZXJIVE1MID0gX3RoaXMuZ2V0QWN0aXZlQ29tcGV0aXRpb25EZXNjcmlwdGlvbigpO1xuXG4gICAgICAgIF90aGlzLmV4dHJhY3RJbWFnZShib2R5LCBpbWFnZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5leHRyYWN0SW1hZ2UoYm9keSwgaW1hZ2UsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtYWluTGFiZWwuaW5uZXJIVE1MID0gKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09IG51bGwpID8gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5sYWJlbCA6IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzLm5vQXZhaWxhYmxlQ29tcGV0aXRpb25zO1xuICB9O1xuXG4gIHRoaXMuc2hvd0VtYmVkZGVkQ29tcGV0aXRpb25EZXRhaWxzQ29udGVudCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGlmIChoYXNDbGFzcyh0aGlzLnNldHRpbmdzLnNlY3Rpb24sICdjbC1tYWluLWFjdGl2ZS1lbWJlZGRlZC1kZXNjcmlwdGlvbicpKSB7XG4gICAgICByZW1vdmVDbGFzcyh0aGlzLnNldHRpbmdzLnNlY3Rpb24sICdjbC1tYWluLWFjdGl2ZS1lbWJlZGRlZC1kZXNjcmlwdGlvbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZGRDbGFzcyh0aGlzLnNldHRpbmdzLnNlY3Rpb24sICdjbC1tYWluLWFjdGl2ZS1lbWJlZGRlZC1kZXNjcmlwdGlvbicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICB9O1xuXG4gIHRoaXMuaGlkZUVtYmVkZGVkQ29tcGV0aXRpb25EZXRhaWxzQ29udGVudCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHJlbW92ZUNsYXNzKHRoaXMuc2V0dGluZ3Muc2VjdGlvbiwgJ2NsLW1haW4tYWN0aXZlLWVtYmVkZGVkLWRlc2NyaXB0aW9uJyk7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgfTtcblxuICB0aGlzLmxlYWRlcmJvYXJkT3B0SW5DaGVjayA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBvcHRJbiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLnNlY3Rpb24sICcuY2wtbWFpbi13aWRnZXQtbGItb3B0aW4tYWN0aW9uJyk7XG5cbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbiAhPT0gbnVsbCAmJiB0eXBlb2YgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW5SZXF1aXJlZCA9PT0gJ2Jvb2xlYW4nICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLm9wdGluUmVxdWlyZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4gPT09ICdib29sZWFuJyAmJiAhX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4pIHtcbiAgICAgICAgb3B0SW4uaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24udG91cm5hbWVudHMuZW50ZXI7XG4gICAgICAgIG9wdEluLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRJbi5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdEluLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG4gIH07XG5cbiAgLy8gY2xlYW51cC9yZWNvdmVyIGFjdGl2aXR5XG4gIHRoaXMucHJlTG9hZGVyUmVydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVyQWN0aXZlICYmIF90aGlzLnNldHRpbmdzLnByZUxvYWRlci5wcmVsb2FkZXJDYWxsYmFja1JlY292ZXJ5ICE9PSBudWxsICYmXG4gICAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVybGFzdEF0dGVtcHQgIT09IG51bGwgJiYgdHlwZW9mIF90aGlzLnNldHRpbmdzLnByZUxvYWRlci5wcmVMb2FkZXJsYXN0QXR0ZW1wdCA9PT0gJ251bWJlcicgJiZcbiAgICAgIChfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVybGFzdEF0dGVtcHQgKyA4MDAwKSA8IG5ldyBEYXRlKCkuZ2V0VGltZSgpKSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlbG9hZGVyQ2FsbGJhY2tSZWNvdmVyeSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnByZWxvYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBwcmVMb2FkZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5zZWN0aW9uLCAnLmNsLW1haW4td2lkZ2V0LXByZS1sb2FkZXInKTtcbiAgICAvLyB2YXIgY29udGVudCA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLnNlY3Rpb24sICcuY2wtbWFpbi13aWRnZXQtcHJlLWxvYWRlci1jb250ZW50Jyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc2hvdzogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLnByZUxvYWRlci5wcmVMb2FkZXJBY3RpdmUgPSB0cnVlO1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVybGFzdEF0dGVtcHQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgcHJlTG9hZGVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwcmVMb2FkZXIuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgIH0sIDIwKTtcblxuICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MucHJlTG9hZGVyLnByZWxvYWRlckNhbGxiYWNrUmVjb3ZlcnkgPT09IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MucHJlTG9hZGVyLnByZWxvYWRlckNhbGxiYWNrUmVjb3ZlcnkgPSBjYWxsYmFjaztcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9LFxuICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVyQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLnByZUxvYWRlci5wcmVMb2FkZXJsYXN0QXR0ZW1wdCA9IG51bGw7XG4gICAgICAgIHByZUxvYWRlci5zdHlsZS5vcGFjaXR5ID0gMDtcblxuICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MucHJlTG9hZGVyLnByZWxvYWRlckNhbGxiYWNrUmVjb3ZlcnkgIT09IG51bGwpIHtcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlbG9hZGVyQ2FsbGJhY2tSZWNvdmVyeSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwcmVMb2FkZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSwgMjAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHRoaXMuZGVzdHJveUxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlKF90aGlzLnNldHRpbmdzLmNvbnRhaW5lcik7XG4gICAgICByZW1vdmUoX3RoaXMuc2V0dGluZ3Mub3ZlcmxheUNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyID0gbnVsbDtcbiAgICBfdGhpcy5zZXR0aW5ncy5vdmVybGF5Q29udGFpbmVyID0gbnVsbDtcbiAgfTtcblxuICB0aGlzLmxvYWRMZWFkZXJib2FyZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5jb250YWluZXIgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5iaW5kQ29udGFpbmVyLmFwcGVuZENoaWxkKF90aGlzLmxheW91dCgpKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLm92ZXJsYXlDb250YWluZXIgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5iaW5kQ29udGFpbmVyLmFwcGVuZENoaWxkKF90aGlzLm92ZXJsYXlMYXlvdXQoKSk7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5uYXZpZ2F0aW9uID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tY29udGFpbmVyJyk7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5zZWN0aW9uID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LXNlY3Rpb24tY29udGFpbmVyJyk7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5jb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5zZWN0aW9uLCAnLmNsLW1haW4td2lkZ2V0LWxiLWxlYWRlcmJvYXJkJyk7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5oZWFkZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItbGVhZGVyYm9hcmQtaGVhZGVyLWxhYmVscycpO1xuICAgICAgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQucmVzdWx0Q29udGFpbmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWxiLWxlYWRlcmJvYXJkLXJlcy1jb250YWluZXInKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxpc3QgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItbGVhZGVyYm9hcmQtYm9keS1yZXMnKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnRvcFJlc3VsdHMgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItbGVhZGVyYm9hcmQtaGVhZGVyLXRvcC1yZXMnKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1jb250YWluZXInKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRMaXN0Q29udGFpbmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LXRvdXJuYW1lbnRzLWxpc3QnKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXJEYXRlID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtaGVhZGVyLWRhdGUnKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLmhlYWRlckRhdGUgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItaGVhZGVyLWRhdGUnKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLmxhYmVsRGF0ZSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWNvbnRlbnQtZGF0ZScpO1xuICAgICAgX3RoaXMuc2V0dGluZ3MuYWNoaWV2ZW1lbnQuY29udGFpbmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLicgKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5uYXZpZ2F0aW9uLmFjaGlldmVtZW50cy5jb250YWluZXJDbGFzcyk7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudC5kZXRhaWxzQ29udGFpbmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWFjaC1kZXRhaWxzLWNvbnRhaW5lcicpO1xuICAgICAgX3RoaXMuc2V0dGluZ3MucmV3YXJkLmNvbnRhaW5lciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy4nICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubmF2aWdhdGlvbi5yZXdhcmRzLmNvbnRhaW5lckNsYXNzKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLnJld2FyZC5kZXRhaWxzQ29udGFpbmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWNvbnRhaW5lcicpO1xuICAgICAgX3RoaXMuc2V0dGluZ3MubWVzc2FnZXMuY29udGFpbmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLicgKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5uYXZpZ2F0aW9uLmluYm94LmNvbnRhaW5lckNsYXNzKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLm1lc3NhZ2VzLmRldGFpbHNDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtaW5ib3gtZGV0YWlscy1jb250YWluZXInKTtcblxuICAgICAgX3RoaXMubWFpbk5hdmlnYXRpb25DaGVjaygpO1xuICAgICAgX3RoaXMubGVhZGVyYm9hcmRIZWFkZXIoKTtcbiAgICB9XG5cbiAgICBfdGhpcy5ldmVudExpc3RlbmVycygpO1xuXG4gICAgX3RoaXMubGVhZGVyYm9hcmRPcHRJbkNoZWNrKCk7XG4gICAgX3RoaXMubGVhZGVyYm9hcmREZXRhaWxzVXBkYXRlKCk7XG4gICAgX3RoaXMudXBkYXRlTGVhZGVyYm9hcmQoKTtcblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0ICE9PSBudWxsKSB7XG4gICAgICBfdGhpcy51cGRhdGVMZWFkZXJib2FyZFRpbWUoKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmNsZWFyQWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5zZXR0aW5ncy5hY3RpdmUgPSBmYWxzZTtcblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50aW1lckludGVydmFsKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQudGltZXJJbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgX3RoaXMuc2V0dGluZ3MucHJlTG9hZGVyLnByZUxvYWRlckFjdGl2ZSA9IGZhbHNlO1xuICB9O1xuXG4gIHRoaXMuaGlkZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5jbGVhckFsbCgpO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlQ2xhc3MoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnY2wtc2hvdycpO1xuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLm92ZXJsYXlDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICBfdGhpcy5oaWRlQ29tcGV0aXRpb25EZXRhaWxzKCk7XG4gICAgICAgIF90aGlzLmhpZGVBY2hpZXZlbWVudERldGFpbHMoKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfSwgMzApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm1pc3NpbmdNZW1iZXIgPSBmdW5jdGlvbiAoaXNWaXNpYmxlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgYXJlYSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1sYi1taXNzaW5nLW1lbWJlcicpO1xuICAgIHZhciBtZW1iZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5saXN0LCAnLmNsLWxiLW1lbWJlci1yb3cnKTtcblxuICAgIGlmIChhcmVhICE9PSBudWxsICYmIG1lbWJlciAhPT0gbnVsbCkge1xuICAgICAgYXJlYS5pbm5lckhUTUwgPSBtZW1iZXIuaW5uZXJIVE1MO1xuICAgIH1cblxuICAgIGlmICghaXNWaXNpYmxlKSB7XG4gICAgICBpZiAoYXJlYSAhPT0gbnVsbCAmJiBtZW1iZXIgIT09IG51bGwpIHtcbiAgICAgICAgYXJlYS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZWEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYXJlYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm1pc3NpbmdNZW1iZXJSZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBhcmVhID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWxiLW1pc3NpbmctbWVtYmVyJyk7XG4gICAgYXJlYS5pbm5lckhUTUwgPSAnJztcbiAgfTtcblxuICB0aGlzLmlzRWxlbWVudFZpc2libGVJblZpZXcgPSBmdW5jdGlvbiAoZWwsIGNvbnRhaW5lcikge1xuICAgIHZhciBwb3NpdGlvbiA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBlbGVtQ29udGFpbmVyID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBlbGVtVG9wID0gcG9zaXRpb24udG9wO1xuICAgIHZhciBlbGVtQm90dG9tID0gcG9zaXRpb24uYm90dG9tO1xuICAgIHZhciBlbGVtSGVpZ2h0ID0gcG9zaXRpb24uaGVpZ2h0O1xuXG4gICAgcmV0dXJuIGVsZW1Ub3AgPD0gZWxlbUNvbnRhaW5lci50b3BcbiAgICAgID8gZWxlbUNvbnRhaW5lci50b3AgLSBlbGVtVG9wIDw9IGVsZW1IZWlnaHQgOiBlbGVtQm90dG9tIC0gZWxlbUNvbnRhaW5lci5ib3R0b20gPD0gZWxlbUhlaWdodDtcbiAgfTtcblxuICB2YXIgb25yZXNpemVJbml0aWFsaXNlZCA9IGZhbHNlO1xuICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyB1bmlxdWUgc29sdXRpb24gdG8gc3VwcG9ydCBob3Jpem9udGFsIG1vYmlsZSBvcmllbnRhdGlvblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZXN1bHRDb250YWluZXIgIT09IG51bGwgJiYgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQucmVzdWx0Q29udGFpbmVyLm9uc2Nyb2xsID09PSBudWxsKSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZXN1bHRDb250YWluZXIub25zY3JvbGwgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgbWVtYmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubGlzdCwgJy5jbC1sYi1tZW1iZXItcm93Jyk7XG5cbiAgICAgICAgaWYgKG1lbWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzLm1pc3NpbmdNZW1iZXIoX3RoaXMuaXNFbGVtZW50VmlzaWJsZUluVmlldyhtZW1iZXIsIGV2dC50YXJnZXQpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubGlzdCAhPT0gbnVsbCAmJiBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5saXN0LnBhcmVudE5vZGUub25zY3JvbGwgPT09IG51bGwpIHtcbiAgICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxpc3QucGFyZW50Tm9kZS5vbnNjcm9sbCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBtZW1iZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5saXN0LCAnLmNsLWxiLW1lbWJlci1yb3cnKTtcblxuICAgICAgICBpZiAobWVtYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMubWlzc2luZ01lbWJlcihfdGhpcy5pc0VsZW1lbnRWaXNpYmxlSW5WaWV3KG1lbWJlciwgZXZ0LnRhcmdldCkpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghb25yZXNpemVJbml0aWFsaXNlZCkge1xuICAgICAgb25yZXNpemVJbml0aWFsaXNlZCA9IHRydWU7XG4gICAgICB3aW5kb3cub25yZXNpemUgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciBtZW1iZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5saXN0LCAnLmNsLWxiLW1lbWJlci1yb3cnKTtcblxuICAgICAgICBpZiAobWVtYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMubWlzc2luZ01lbWJlcihfdGhpcy5pc0VsZW1lbnRWaXNpYmxlSW5WaWV3KG1lbWJlciwgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubGlzdC5wYXJlbnROb2RlKSk7XG4gICAgICAgICAgX3RoaXMubWlzc2luZ01lbWJlcihfdGhpcy5pc0VsZW1lbnRWaXNpYmxlSW5WaWV3KG1lbWJlciwgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQucmVzdWx0Q29udGFpbmVyKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIC8vIHRoaXMuY2hlY2tMZWFkZXJib2FyZFNjcm9sbENvbnRhaW5lciA9IGZ1bmN0aW9uKCl7XG4gIC8vICB2YXIgX3RoaXMgPSB0aGlzLFxuICAvLyAgICBsYlNjcm9sbENvbnRhaW5lciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmNvbnRhaW5lciwgXCIuY2wtbWFpbi13aWRnZXQtbGItbGVhZGVyYm9hcmQtYm9keVwiKTtcbiAgLy9cbiAgLy8gIGlmKCBzY3JvbGxFbmFibGVkKGxiU2Nyb2xsQ29udGFpbmVyKSApe1xuICAvLyAgICBhZGRDbGFzcyhsYlNjcm9sbENvbnRhaW5lciwgXCJjbC1lbGVtZW50LXNjcm9sbGFibGVcIik7XG4gIC8vICB9ZWxzZXtcbiAgLy8gICAgcmVtb3ZlQ2xhc3MobGJTY3JvbGxDb250YWluZXIsIFwiY2wtZWxlbWVudC1zY3JvbGxhYmxlXCIpO1xuICAvLyAgfVxuICAvLyB9O1xuXG4gIHRoaXMuY29tcGV0aXRpb25EZXRhaWxzT3B0SW5CdXR0b25TdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBvcHRJbiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1vcHRpbi1hY3Rpb24nKTtcblxuICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW5SZXF1aXJlZCA9PT0gJ2Jvb2xlYW4nICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLm9wdGluUmVxdWlyZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4gPT09ICdib29sZWFuJyAmJiAhX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4pIHtcbiAgICAgICAgb3B0SW4uaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24udG91cm5hbWVudHMuZW50ZXI7XG4gICAgICAgIHJlbW92ZUNsYXNzKG9wdEluLCAnY2wtZGlzYWJsZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdEluLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzLnJlZ2lzdGVyZWQ7XG4gICAgICAgIGFkZENsYXNzKG9wdEluLCAnY2wtZGlzYWJsZWQnKTtcbiAgICAgIH1cbiAgICAgIG9wdEluLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdEluLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5sb2FkQ29tcGV0aXRpb25EZXRhaWxzID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgbGFiZWwgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtaGVhZGVyLWxhYmVsJyk7XG4gICAgLy8gdmFyIGRhdGUgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtaGVhZGVyLWRhdGUnKTtcbiAgICB2YXIgYm9keSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1ib2R5Jyk7XG4gICAgdmFyIGltYWdlID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWJvZHktaW1hZ2UtY29udCcpO1xuXG4gICAgaW1hZ2UuaW5uZXJIVE1MID0gJyc7XG4gICAgbGFiZWwuaW5uZXJIVE1MID0gKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QubGFiZWwubGVuZ3RoID4gMCkgPyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LmxhYmVsIDogX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ubGFiZWw7XG4gICAgYm9keS5pbm5lckhUTUwgPSAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5kZXNjcmlwdGlvbi5sZW5ndGggPiAwKSA/IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QuZGVzY3JpcHRpb24gOiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5kZXNjcmlwdGlvbjtcbiAgICBfdGhpcy5jb21wZXRpdGlvbkRldGFpbHNPcHRJbkJ1dHRvblN0YXRlKCk7XG5cbiAgICBfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIF90aGlzLnNldHRpbmdzLmhlYWRlckRhdGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIF90aGlzLmV4dHJhY3RJbWFnZShib2R5LCBpbWFnZSk7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFkZENsYXNzKF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXIsICdjbC1zaG93Jyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgfSwgNTApO1xuICB9O1xuXG4gIHRoaXMubG9hZENvbXBldGl0aW9uTGlzdCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYWpheEluc3RhbmNlKSB7XG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICAgIGNvbnN0IGxpc3RSZXNDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50TGlzdENvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC10b3VybmFtZW50cy1saXN0LWJvZHktcmVzJyk7XG4gICAgY29uc3QgbGlzdEljb24gPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItaGVhZGVyLWxpc3QtaWNvbicpO1xuICAgIGNvbnN0IHByZUxvYWRlciA9IF90aGlzLnByZWxvYWRlcigpO1xuXG4gICAgcHJlTG9hZGVyLnNob3coZnVuY3Rpb24gKCkge1xuICAgICAgbGlzdEljb24uc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmNoZWNrRm9yQXZhaWxhYmxlQ29tcGV0aXRpb25zKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjY29yZGlvbk9iaiA9IF90aGlzLmFjY29yZGlvblN0eWxlKF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzU2VjdGlvbi5hY2NvcmRpb25MYXlvdXQsIGZ1bmN0aW9uIChhY2NvcmRpb25TZWN0aW9uLCBsaXN0Q29udGFpbmVyLCB0b3BFbnRyeUNvbnRhaW5lciwgbGF5b3V0KSB7XG4gICAgICAgICAgdmFyIHRvdXJuYW1lbnREYXRhID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudG91cm5hbWVudHNbbGF5b3V0LnR5cGVdO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0b3VybmFtZW50RGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmICh0b3VybmFtZW50RGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgYWNjb3JkaW9uU2VjdGlvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWFwT2JqZWN0KHRvdXJuYW1lbnREYXRhLCBmdW5jdGlvbiAodG91cm5hbWVudCwga2V5LCBjb3VudCkge1xuICAgICAgICAgICAgICBpZiAoKGNvdW50ICsgMSkgPD0gbGF5b3V0LnNob3dUb3BSZXN1bHRzICYmIHF1ZXJ5KHRvcEVudHJ5Q29udGFpbmVyLCAnLmNsLXRvdXJuYW1lbnQtJyArIHRvdXJuYW1lbnQuaWQpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvcEVudHJ5Q29udGFpbmVSbGlzdEl0ZW0gPSBfdGhpcy50b3VybmFtZW50SXRlbSh0b3VybmFtZW50KTtcbiAgICAgICAgICAgICAgICB0b3BFbnRyeUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0b3BFbnRyeUNvbnRhaW5lUmxpc3RJdGVtKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChxdWVyeShsaXN0Q29udGFpbmVyLCAnLmNsLXRvdXJuYW1lbnQtJyArIHRvdXJuYW1lbnQuaWQpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3RJdGVtID0gX3RoaXMudG91cm5hbWVudEl0ZW0odG91cm5hbWVudCk7XG4gICAgICAgICAgICAgICAgbGlzdENvbnRhaW5lci5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGlzdFJlc0NvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgbGlzdFJlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChhY2NvcmRpb25PYmopO1xuXG4gICAgICAgIF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRMaXN0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhZGRDbGFzcyhfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50TGlzdENvbnRhaW5lciwgJ2NsLXNob3cnKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG5cbiAgICAgICAgICBwcmVMb2FkZXIuaGlkZSgpO1xuICAgICAgICB9LCA1MCk7XG4gICAgICB9LCBhamF4SW5zdGFuY2UpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuaGlkZUNvbXBldGl0aW9uTGlzdCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgY29uc3QgbGlzdEljb24gPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItaGVhZGVyLWxpc3QtaWNvbicpO1xuXG4gICAgbGlzdEljb24uc3R5bGUub3BhY2l0eSA9ICcxJztcbiAgICBfdGhpcy5oaWRlRW1iZWRkZWRDb21wZXRpdGlvbkRldGFpbHNDb250ZW50KCk7XG4gICAgX3RoaXMubWlzc2luZ01lbWJlclJlc2V0KCk7XG5cbiAgICByZW1vdmVDbGFzcyhfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50TGlzdENvbnRhaW5lciwgJ2NsLXNob3cnKTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudExpc3RDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICB9LCAyMDApO1xuICB9O1xuXG4gIHRoaXMuaGlkZUNvbXBldGl0aW9uRGV0YWlscyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZW1vdmVDbGFzcyhfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyLCAnY2wtc2hvdycpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MuZGV0YWlsc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgX3RoaXMuc2V0dGluZ3MuaGVhZGVyRGF0ZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICB9LCAyMDApO1xuICB9O1xuXG4gIHRoaXMuYWNoaWV2ZW1lbnRJdGVtID0gZnVuY3Rpb24gKGFjaCwgYWNoaWV2ZWQsIHBlcmMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBkZXRhaWxzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGRldGFpbHNXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGNhdGVnb3J5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIHByb2dyZXNzaW9uV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBwcm9ncmVzc2lvbkNvbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgcHJvZ3Jlc3Npb25CYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgbW9yZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgY3BvbW50YWluc0ltYWdlID0gKHR5cGVvZiBhY2guaWNvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgYWNoLmljb24ubGVuZ3RoID4gMCk7XG5cbiAgICBsaXN0SXRlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LWl0ZW0gY2wtYWNoLScgKyBhY2guaWQgKyAoY3BvbW50YWluc0ltYWdlID8gJyBjbC1hY2gtd2l0aC1pbWFnZScgOiAnJykpO1xuICAgIGRldGFpbHNDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2gtbGlzdC1kZXRhaWxzLWNvbnQnKTtcbiAgICBkZXRhaWxzV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LWRldGFpbHMtd3JhcCcpO1xuICAgIGxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNoLWxpc3QtZGV0YWlscy1sYWJlbCcpO1xuICAgIGNhdGVnb3J5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNoLWxpc3QtZGV0YWlscy1jYXRlZ29yeScpO1xuICAgIGRlc2NyaXB0aW9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNoLWxpc3QtZGV0YWlscy1kZXNjcmlwdGlvbicpO1xuICAgIHByb2dyZXNzaW9uV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LXByb2dyZXNzaW9uJyk7XG4gICAgcHJvZ3Jlc3Npb25Db250LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNoLWxpc3QtcHJvZ3Jlc3Npb24tY29udCcpO1xuICAgIHByb2dyZXNzaW9uQmFyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNoLWxpc3QtcHJvZ3Jlc3Npb24tYmFyJyk7XG4gICAgbW9yZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LW1vcmUnKTtcblxuICAgIG1vcmVCdXR0b24uZGF0YXNldC5pZCA9IGFjaC5pZDtcbiAgICBtb3JlQnV0dG9uLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmFjaGlldmVtZW50cy5tb3JlO1xuICAgIG1vcmVCdXR0b24uaHJlZiA9ICdqYXZhc2NyaXB0OnZvaWQoMCk7JztcblxuICAgIGxpc3RJdGVtLmRhdGFzZXQuaWQgPSBhY2guaWQ7XG5cbiAgICBsYWJlbC5pbm5lckhUTUwgPSBhY2gubmFtZTtcbiAgICBjYXRlZ29yeS5pbm5lckhUTUwgPSBhY2guY2F0ZWdvcnkuam9pbignLCAnKTtcblxuICAgIGRldGFpbHNXcmFwcGVyLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICBkZXRhaWxzV3JhcHBlci5hcHBlbmRDaGlsZChjYXRlZ29yeSk7XG4gICAgZGV0YWlsc1dyYXBwZXIuYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb24pO1xuXG4gICAgaWYgKGNwb21udGFpbnNJbWFnZSkge1xuICAgICAgdmFyIGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICB2YXIgaW1hZ2VJY29uV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgaW1hZ2VJY29uV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LWl0ZW0taW1nLXdyYXBwZXInKTtcbiAgICAgIGltYWdlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNoLWxpc3QtaXRlbS1pbWcnKTtcblxuICAgICAgaW1hZ2Uuc3JjID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy51cmkuYXNzZXRzLnJlcGxhY2UoJzphdHRhY2htZW50SWQnLCBhY2guaWNvbik7XG4gICAgICBpbWFnZS5hbHQgPSBhY2gubmFtZTtcblxuICAgICAgLy8gaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24oKXtcbiAgICAgIC8vIH07XG5cbiAgICAgIGltYWdlSWNvbldyYXBwZXIuYXBwZW5kQ2hpbGQoaW1hZ2UpO1xuICAgICAgZGV0YWlsc0NvbnRhaW5lci5hcHBlbmRDaGlsZChpbWFnZUljb25XcmFwcGVyKTtcbiAgICB9XG5cbiAgICBkZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKGRldGFpbHNXcmFwcGVyKTtcblxuICAgIHByb2dyZXNzaW9uQ29udC5hcHBlbmRDaGlsZChwcm9ncmVzc2lvbkJhcik7XG4gICAgcHJvZ3Jlc3Npb25XcmFwcGVyLmFwcGVuZENoaWxkKHByb2dyZXNzaW9uQ29udCk7XG4gICAgcHJvZ3Jlc3Npb25XcmFwcGVyLmFwcGVuZENoaWxkKG1vcmVCdXR0b24pO1xuXG4gICAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZGV0YWlsc0NvbnRhaW5lcik7XG4gICAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQocHJvZ3Jlc3Npb25XcmFwcGVyKTtcblxuICAgIHJldHVybiBsaXN0SXRlbTtcbiAgfTtcblxuICB0aGlzLmFjaGlldmVtZW50TGlzdExheW91dCA9IGZ1bmN0aW9uIChhY2hpZXZlbWVudERhdGEpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBhY2hMaXN0ID0gcXVlcnkoX3RoaXMuc2V0dGluZ3Muc2VjdGlvbiwgJy4nICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubmF2aWdhdGlvbi5hY2hpZXZlbWVudHMuY29udGFpbmVyQ2xhc3MgKyAnIC5jbC1tYWluLXdpZGdldC1hY2gtbGlzdC1ib2R5LXJlcycpO1xuXG4gICAgbWFwT2JqZWN0KGFjaGlldmVtZW50RGF0YSwgZnVuY3Rpb24gKGFjaCkge1xuICAgICAgaWYgKHF1ZXJ5KGFjaExpc3QsICcuY2wtYWNoLScgKyBhY2guaWQpID09PSBudWxsKSB7XG4gICAgICAgIHZhciBsaXN0SXRlbSA9IF90aGlzLmFjaGlldmVtZW50SXRlbShhY2gpO1xuXG4gICAgICAgIGFjaExpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMubG9hZEFjaGlldmVtZW50RGV0YWlscyA9IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGxhYmVsID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuYWNoaWV2ZW1lbnQuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1hY2gtZGV0YWlscy1oZWFkZXItbGFiZWwnKTtcbiAgICB2YXIgYm9keSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50LmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtYm9keScpO1xuICAgIHZhciBpbWFnZSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50LmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtYm9keS1pbWFnZS1jb250Jyk7XG5cbiAgICBpbWFnZS5pbm5lckhUTUwgPSAnJztcblxuICAgIGxhYmVsLmlubmVySFRNTCA9IGRhdGEuZGF0YS5uYW1lO1xuICAgIGJvZHkuaW5uZXJIVE1MID0gZGF0YS5kYXRhLmRlc2NyaXB0aW9uO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmFjaGlldmVtZW50cy5leHRyYWN0SW1hZ2VIZWFkZXIpIHtcbiAgICAgIHZhciBpbWFnZUxvb2t1cCA9IHF1ZXJ5KGJvZHksICdpbWcnKTtcbiAgICAgIG9iamVjdEl0ZXJhdG9yKGltYWdlTG9va3VwLCBmdW5jdGlvbiAoaW1nLCBrZXksIGNvdW50KSB7XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgIHZhciBuZXdJbWcgPSBpbWcuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgIGltYWdlLmFwcGVuZENoaWxkKG5ld0ltZyk7XG5cbiAgICAgICAgICByZW1vdmUoaW1nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3RoaXMuc2V0dGluZ3MuYWNoaWV2ZW1lbnQuZGV0YWlsc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFkZENsYXNzKF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50LmRldGFpbHNDb250YWluZXIsICdjbC1zaG93Jyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgfSwgNTApO1xuICB9O1xuXG4gIHRoaXMuaGlkZUFjaGlldmVtZW50RGV0YWlscyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZW1vdmVDbGFzcyhfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudC5kZXRhaWxzQ29udGFpbmVyLCAnY2wtc2hvdycpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MuYWNoaWV2ZW1lbnQuZGV0YWlsc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgIH0sIDIwMCk7XG4gIH07XG5cbiAgdGhpcy5sb2FkUmV3YXJkRGV0YWlscyA9IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGxhYmVsID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MucmV3YXJkLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtaGVhZGVyLWxhYmVsJyk7XG4gICAgdmFyIGJvZHkgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5yZXdhcmQuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1yZXdhcmQtZGV0YWlscy1ib2R5Jyk7XG4gICAgdmFyIGltYWdlID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MucmV3YXJkLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtYm9keS1pbWFnZS1jb250Jyk7XG4gICAgdmFyIGNsYWltQnRuID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MucmV3YXJkLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtcmV3YXJkLWNsYWltLWJ0bicpO1xuICAgIHZhciBpY29uID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MucmV3YXJkLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtcmV3YXJkLXdpbm5pbmdzLWljb24nKTtcbiAgICB2YXIgdmFsdWUgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5yZXdhcmQuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1yZXdhcmQtd2lubmluZ3MtdmFsdWUnKTtcblxuICAgIGxhYmVsLmlubmVySFRNTCA9IGRhdGEuZGF0YS5yZXdhcmQucmV3YXJkTmFtZTtcbiAgICBib2R5LmlubmVySFRNTCA9IGRhdGEuZGF0YS5yZXdhcmQuZGVzY3JpcHRpb247XG4gICAgdmFsdWUuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MucGFydGlhbEZ1bmN0aW9ucy5yZXdhcmRGb3JtYXR0ZXIoZGF0YS5kYXRhLnJld2FyZCk7XG4gICAgY2xhaW1CdG4uZGF0YXNldC5pZCA9IGRhdGEuZGF0YS5pZDtcblxuICAgIGlmIChkYXRhLmRhdGEuY2xhaW1lZCkge1xuICAgICAgYWRkQ2xhc3MoY2xhaW1CdG4sICdjbC1jbGFpbWVkJyk7XG4gICAgICBjbGFpbUJ0bi5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5yZXdhcmRzLmNsYWltZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZUNsYXNzKGNsYWltQnRuLCAnY2wtY2xhaW1lZCcpO1xuICAgICAgY2xhaW1CdG4uaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ucmV3YXJkcy5jbGFpbTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRhdGEuZGF0YS5yZXdhcmQuaWNvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGljb24uaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgIHZhciBfaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIHZhciBpbWFnZUljb25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBpbWFnZUljb25XcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcmV3YXJkLWxpc3QtaXRlbS1pbWctd3JhcHBlcicpO1xuICAgICAgX2ltYWdlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcmV3YXJkLWxpc3QtaXRlbS1pbWcnKTtcblxuICAgICAgX2ltYWdlLnNyYyA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudXJpLmFzc2V0cy5yZXBsYWNlKCc6YXR0YWNobWVudElkJywgZGF0YS5kYXRhLnJld2FyZC5pY29uKTtcbiAgICAgIF9pbWFnZS5hbHQgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5wYXJ0aWFsRnVuY3Rpb25zLnJld2FyZEZvcm1hdHRlcihkYXRhLmRhdGEucmV3YXJkKTtcblxuICAgICAgaWNvbi5hcHBlbmRDaGlsZChfaW1hZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpY29uLmlubmVySFRNTCA9IFwiPHNwYW4gY2xhc3M9J2NsLXBsYWNlLWhvbGRlci1yZXdhcmQtaW1hZ2UnPjwvc3Bhbj5cIjtcbiAgICB9XG5cbiAgICBvYmplY3RJdGVyYXRvcihxdWVyeShib2R5LCAnaW1nJyksIGZ1bmN0aW9uIChpbWcsIGtleSwgY291bnQpIHtcbiAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICB2YXIgbmV3SW1nID0gaW1nLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgaW1hZ2UuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGltYWdlLmFwcGVuZENoaWxkKG5ld0ltZyk7XG5cbiAgICAgICAgcmVtb3ZlKGltZyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfdGhpcy5zZXR0aW5ncy5yZXdhcmQuZGV0YWlsc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFkZENsYXNzKF90aGlzLnNldHRpbmdzLnJld2FyZC5kZXRhaWxzQ29udGFpbmVyLCAnY2wtc2hvdycpO1xuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgIH0sIDUwKTtcbiAgfTtcblxuICB0aGlzLmxvYWRNZXNzYWdlRGV0YWlscyA9IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGxhYmVsID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubWVzc2FnZXMuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWhlYWRlci1sYWJlbCcpO1xuICAgIHZhciBib2R5ID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubWVzc2FnZXMuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWJvZHknKTtcblxuICAgIGxhYmVsLmlubmVySFRNTCA9IGRhdGEuZGF0YS5zdWJqZWN0O1xuICAgIGJvZHkuaW5uZXJIVE1MID0gZGF0YS5kYXRhLmJvZHk7XG5cbiAgICBfdGhpcy5zZXR0aW5ncy5tZXNzYWdlcy5kZXRhaWxzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWRkQ2xhc3MoX3RoaXMuc2V0dGluZ3MubWVzc2FnZXMuZGV0YWlsc0NvbnRhaW5lciwgJ2NsLXNob3cnKTtcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICB9LCA1MCk7XG4gIH07XG5cbiAgdGhpcy5oaWRlUmV3YXJkRGV0YWlscyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZW1vdmVDbGFzcyhfdGhpcy5zZXR0aW5ncy5yZXdhcmQuZGV0YWlsc0NvbnRhaW5lciwgJ2NsLXNob3cnKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldHRpbmdzLnJld2FyZC5kZXRhaWxzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgfSwgMjAwKTtcbiAgfTtcblxuICB0aGlzLmhpZGVNZXNzYWdlRGV0YWlscyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZW1vdmVDbGFzcyhfdGhpcy5zZXR0aW5ncy5tZXNzYWdlcy5kZXRhaWxzQ29udGFpbmVyLCAnY2wtc2hvdycpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MubWVzc2FnZXMuZGV0YWlsc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgIH0sIDIwMCk7XG4gIH07XG5cbiAgdGhpcy51cGRhdGVBY2hpZXZlbWVudFByb2dyZXNzaW9uQW5kSXNzdWVkID0gZnVuY3Rpb24gKGlzc3VlZCwgcHJvZ3Jlc3Npb24pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBhY2hMaXN0ID0gcXVlcnkoX3RoaXMuc2V0dGluZ3Muc2VjdGlvbiwgJy4nICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubmF2aWdhdGlvbi5hY2hpZXZlbWVudHMuY29udGFpbmVyQ2xhc3MgKyAnIC5jbC1tYWluLXdpZGdldC1hY2gtbGlzdC1ib2R5LXJlcycpO1xuXG4gICAgb2JqZWN0SXRlcmF0b3IocXVlcnkoYWNoTGlzdCwgJy5jbC1hY2gtbGlzdC1pdGVtJyksIGZ1bmN0aW9uIChhY2gpIHtcbiAgICAgIHZhciBpZCA9IGFjaC5kYXRhc2V0LmlkO1xuICAgICAgdmFyIGlzc3VlZFN0YXR1cyA9IChpc3N1ZWQuaW5kZXhPZihpZCkgIT09IC0xKTtcblxuICAgICAgdmFyIHBlcmMgPSAwO1xuICAgICAgbWFwT2JqZWN0KHByb2dyZXNzaW9uLCBmdW5jdGlvbiAocHIpIHtcbiAgICAgICAgaWYgKHByLmFjaGlldmVtZW50SWQgPT09IGlkKSB7XG4gICAgICAgICAgcGVyYyA9IChwYXJzZUZsb2F0KHByLmdvYWxQZXJjZW50YWdlQ29tcGxldGUpICogMTAwKS50b0ZpeGVkKDEpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGFjaCAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgYmFyID0gcXVlcnkoYWNoLCAnLmNsLWFjaC1saXN0LXByb2dyZXNzaW9uLWJhcicpO1xuXG4gICAgICAgIGlmIChpc3N1ZWRTdGF0dXMpIHtcbiAgICAgICAgICBhZGRDbGFzcyhiYXIsICdjbC1hY2gtY29tcGxldGUnKTtcbiAgICAgICAgICBiYXIuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24uYWNoaWV2ZW1lbnRzLmNvbXBsZXRlO1xuICAgICAgICAgIGJhci5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcGVyY1ZhbHVlID0gKChwZXJjID4gMSB8fCBwZXJjID09PSAwKSA/IHBlcmMgOiAxKSArICclJztcbiAgICAgICAgICBiYXIuaW5uZXJIVE1MID0gKHBlcmMgPiAyNSB8fCAocGVyYyA+IDE1ICYmIHBhcnNlSW50KF90aGlzLnNldHRpbmdzLnNlY3Rpb24ub2Zmc2V0V2lkdGgpID4gNDUwKSkgPyBwZXJjVmFsdWUgOiAnJztcbiAgICAgICAgICBiYXIuc3R5bGUud2lkdGggPSBwZXJjVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmxvYWRBY2hpZXZlbWVudHMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuY2hlY2tGb3JBdmFpbGFibGVBY2hpZXZlbWVudHMoZnVuY3Rpb24gKGFjaGlldmVtZW50RGF0YSkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQudXBkYXRlQWNoaWV2ZW1lbnROYXZpZ2F0aW9uQ291bnRzKCk7XG4gICAgICBfdGhpcy5hY2hpZXZlbWVudExpc3RMYXlvdXQoYWNoaWV2ZW1lbnREYXRhKTtcblxuICAgICAgdmFyIGlkTGlzdCA9IFtdO1xuICAgICAgbWFwT2JqZWN0KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmFjaGlldmVtZW50cy5saXN0LCBmdW5jdGlvbiAoYWNoKSB7XG4gICAgICAgIGlkTGlzdC5wdXNoKGFjaC5pZCk7XG4gICAgICB9KTtcblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmNoZWNrRm9yTWVtYmVyQWNoaWV2ZW1lbnRzSXNzdWVkKGZ1bmN0aW9uIChpc3N1ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5jaGVja0Zvck1lbWJlckFjaGlldmVtZW50c1Byb2dyZXNzaW9uKGlkTGlzdCwgZnVuY3Rpb24gKHByb2dyZXNzaW9uKSB7XG4gICAgICAgICAgICBfdGhpcy51cGRhdGVBY2hpZXZlbWVudFByb2dyZXNzaW9uQW5kSXNzdWVkKGlzc3VlZCwgcHJvZ3Jlc3Npb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0sIDQwMCk7XG5cbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLnJld2FyZEl0ZW0gPSBmdW5jdGlvbiAocmV3KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgbGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgZGV0YWlsc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBkZXRhaWxzV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgbGlzdEl0ZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yZXctbGlzdC1pdGVtIGNsLXJldy0nICsgcmV3LmlkKTtcbiAgICBkZXRhaWxzQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcmV3LWxpc3QtZGV0YWlscy1jb250Jyk7XG4gICAgZGV0YWlsc1dyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yZXctbGlzdC1kZXRhaWxzLXdyYXAnKTtcbiAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXJldy1saXN0LWRldGFpbHMtbGFiZWwnKTtcbiAgICBkZXNjcmlwdGlvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXJldy1saXN0LWRldGFpbHMtZGVzY3JpcHRpb24nKTtcblxuICAgIGxpc3RJdGVtLmRhdGFzZXQuaWQgPSByZXcuaWQ7XG4gICAgdmFyIGxhYmVsVGV4dCA9IHN0cmlwSHRtbChyZXcuc3ViamVjdCk7XG4gICAgdmFyIGRlc2NyaXB0aW9uVGV4dCA9IHN0cmlwSHRtbChyZXcuYm9keSk7XG5cbiAgICBpZiAodHlwZW9mIHJldy5wcml6ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGxpc3RJdGVtLmRhdGFzZXQucmV3YXJkSWQgPSByZXcucHJpemUuaWQ7XG4gICAgICBsYWJlbFRleHQgPSBzdHJpcEh0bWwocmV3LnN1YmplY3QgKyAnIC0gJyArIHJldy5wcml6ZS5yZXdhcmQucmV3YXJkTmFtZSArICcgKCcgKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5wYXJ0aWFsRnVuY3Rpb25zLnJld2FyZEZvcm1hdHRlcihyZXcucHJpemUucmV3YXJkKSArICcpJyk7XG4gICAgICBkZXNjcmlwdGlvblRleHQgPSBzdHJpcEh0bWwoKHR5cGVvZiByZXcucHJpemUucmV3YXJkLmRlc2NyaXB0aW9uICE9PSAndW5kZWZpbmVkJyAmJiByZXcucHJpemUucmV3YXJkLmRlc2NyaXB0aW9uLmxlbmd0aCA+IDApID8gcmV3LnByaXplLnJld2FyZC5kZXNjcmlwdGlvbiA6IHJldy5ib2R5KTtcbiAgICB9XG5cbiAgICBsYWJlbC5pbm5lckhUTUwgPSAobGFiZWxUZXh0Lmxlbmd0aCA+IDgwKSA/IChsYWJlbFRleHQuc3Vic3RyKDAsIDgwKSArICcuLi4nKSA6IGxhYmVsVGV4dDtcbiAgICBkZXNjcmlwdGlvbi5pbm5lckhUTUwgPSAoZGVzY3JpcHRpb25UZXh0Lmxlbmd0aCA+IDIwMCkgPyAoZGVzY3JpcHRpb25UZXh0LnN1YnN0cigwLCAyMDApICsgJy4uLicpIDogZGVzY3JpcHRpb25UZXh0O1xuXG4gICAgZGV0YWlsc1dyYXBwZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgIGRldGFpbHNXcmFwcGVyLmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uKTtcbiAgICBkZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKGRldGFpbHNXcmFwcGVyKTtcbiAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChkZXRhaWxzQ29udGFpbmVyKTtcblxuICAgIHJldHVybiBsaXN0SXRlbTtcbiAgfTtcblxuICB0aGlzLm1lc3NhZ2VJdGVtID0gZnVuY3Rpb24gKGluYm94KSB7XG4gICAgLy8gdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgbGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgZGV0YWlsc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBkZXRhaWxzV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBjb250ZW50ID0gc3RyaXBIdG1sKGluYm94LmJvZHkpO1xuXG4gICAgbGlzdEl0ZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1pbmJveC1saXN0LWl0ZW0gY2wtaW5ib3gtJyArIGluYm94LmlkKTtcbiAgICBkZXRhaWxzQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtaW5ib3gtbGlzdC1kZXRhaWxzLWNvbnQnKTtcbiAgICBkZXRhaWxzV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWluYm94LWxpc3QtZGV0YWlscy13cmFwJyk7XG4gICAgbGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1pbmJveC1saXN0LWRldGFpbHMtbGFiZWwnKTtcbiAgICBkZXNjcmlwdGlvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWluYm94LWxpc3QtZGV0YWlscy1kZXNjcmlwdGlvbicpO1xuXG4gICAgbGlzdEl0ZW0uZGF0YXNldC5pZCA9IGluYm94LmlkO1xuICAgIGxhYmVsLmlubmVySFRNTCA9IChpbmJveC5zdWJqZWN0Lmxlbmd0aCA+IDM2KSA/IGluYm94LnN1YmplY3Quc3Vic3RyKDAsIDM2KSArICcuLi4nIDogaW5ib3guc3ViamVjdDtcbiAgICBkZXNjcmlwdGlvbi5pbm5lckhUTUwgPSAoY29udGVudC5sZW5ndGggPiA2MCkgPyBjb250ZW50LnN1YnN0cigwLCA2MCkgKyAnLi4uJyA6IGNvbnRlbnQ7XG5cbiAgICBkZXRhaWxzV3JhcHBlci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgZGV0YWlsc1dyYXBwZXIuYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb24pO1xuICAgIGRldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoZGV0YWlsc1dyYXBwZXIpO1xuICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGRldGFpbHNDb250YWluZXIpO1xuXG4gICAgcmV0dXJuIGxpc3RJdGVtO1xuICB9O1xuXG4gIHRoaXMudG91cm5hbWVudEl0ZW0gPSBmdW5jdGlvbiAodG91cm5hbWVudCkge1xuICAgIC8vIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGRldGFpbHNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgZGV0YWlsc1dyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgZGVzY3JpcHRpb25Db250ZW50ID0gc3RyaXBIdG1sKHRvdXJuYW1lbnQuZGVzY3JpcHRpb24pO1xuXG4gICAgbGlzdEl0ZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC10b3VyLWxpc3QtaXRlbSBjbC10b3VyLScgKyB0b3VybmFtZW50LmlkKTtcbiAgICBkZXRhaWxzQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtdG91ci1saXN0LWRldGFpbHMtY29udCcpO1xuICAgIGRldGFpbHNXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtdG91ci1saXN0LWRldGFpbHMtd3JhcCcpO1xuICAgIGxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtdG91ci1saXN0LWRldGFpbHMtbGFiZWwnKTtcbiAgICBkZXNjcmlwdGlvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXRvdXItbGlzdC1kZXRhaWxzLWRlc2NyaXB0aW9uJyk7XG5cbiAgICBsaXN0SXRlbS5kYXRhc2V0LmlkID0gdG91cm5hbWVudC5pZDtcbiAgICBsYWJlbC5pbm5lckhUTUwgPSB0b3VybmFtZW50LmxhYmVsO1xuICAgIGRlc2NyaXB0aW9uLmlubmVySFRNTCA9IChkZXNjcmlwdGlvbkNvbnRlbnQubGVuZ3RoID4gMTAwKSA/IGRlc2NyaXB0aW9uQ29udGVudC5zdWJzdHIoMCwgMTAwKSArICcuLi4nIDogZGVzY3JpcHRpb25Db250ZW50O1xuXG4gICAgZGV0YWlsc1dyYXBwZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgIGRldGFpbHNXcmFwcGVyLmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uKTtcbiAgICBkZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKGRldGFpbHNXcmFwcGVyKTtcbiAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChkZXRhaWxzQ29udGFpbmVyKTtcblxuICAgIHJldHVybiBsaXN0SXRlbTtcbiAgfTtcblxuICB0aGlzLnJld2FyZHNMaXN0TGF5b3V0ID0gZnVuY3Rpb24gKHJld2FyZHMsIGF2YWlsYWJsZVJld2FyZHMsIGV4cGlyZWRSZXdhcmRzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgcmV3YXJkTGlzdCA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLnNlY3Rpb24sICcuJyArIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24ucmV3YXJkcy5jb250YWluZXJDbGFzcyArICcgLmNsLW1haW4td2lkZ2V0LXJld2FyZC1saXN0LWJvZHktcmVzJyk7XG5cbiAgICB2YXIgYWNjb3JkaW9uT2JqID0gX3RoaXMuYWNjb3JkaW9uU3R5bGUoX3RoaXMuc2V0dGluZ3MucmV3YXJkc1NlY3Rpb24uYWNjb3JkaW9uTGF5b3V0LCBmdW5jdGlvbiAoYWNjb3JkaW9uU2VjdGlvbiwgbGlzdENvbnRhaW5lciwgdG9wRW50cnlDb250YWluZXIsIGxheW91dCkge1xuICAgICAgdmFyIHJld2FyZERhdGEgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5yZXdhcmRzW2xheW91dC50eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiByZXdhcmREYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAocmV3YXJkRGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBhY2NvcmRpb25TZWN0aW9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICAgICAgbWFwT2JqZWN0KHJld2FyZERhdGEsIGZ1bmN0aW9uIChyZXcsIGtleSwgY291bnQpIHtcbiAgICAgICAgICBpZiAoKGNvdW50ICsgMSkgPD0gbGF5b3V0LnNob3dUb3BSZXN1bHRzICYmIHF1ZXJ5KHRvcEVudHJ5Q29udGFpbmVyLCAnLmNsLXJld2FyZC0nICsgcmV3LmlkKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHRvcEVudHJ5Q29udGFpbmVSbGlzdEl0ZW0gPSBfdGhpcy5yZXdhcmRJdGVtKHJldyk7XG4gICAgICAgICAgICB0b3BFbnRyeUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0b3BFbnRyeUNvbnRhaW5lUmxpc3RJdGVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocXVlcnkobGlzdENvbnRhaW5lciwgJy5jbC1yZXdhcmQtJyArIHJldy5pZCkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsaXN0SXRlbSA9IF90aGlzLnJld2FyZEl0ZW0ocmV3KTtcbiAgICAgICAgICAgIGxpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXdhcmRMaXN0LmlubmVySFRNTCA9ICcnO1xuICAgIHJld2FyZExpc3QuYXBwZW5kQ2hpbGQoYWNjb3JkaW9uT2JqKTtcblxuICAgIC8vIG1hcE9iamVjdChyZXdhcmREYXRhLCBmdW5jdGlvbihyZXcpe1xuICAgIC8vICAgaWYoIHF1ZXJ5KHJld2FyZExpc3QsIFwiLmNsLXJld2FyZC1cIiArIHJldy5pZCkgPT09IG51bGwgKSB7XG4gICAgLy8gICAgIHZhciBsaXN0SXRlbSA9IF90aGlzLnJld2FyZEl0ZW0ocmV3KTtcbiAgICAvL1xuICAgIC8vICAgICByZXdhcmRMaXN0LmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcbiAgfTtcblxuICB0aGlzLm1lc3NhZ2VzTGlzdExheW91dCA9IGZ1bmN0aW9uIChyZXdhcmRzLCBhdmFpbGFibGVSZXdhcmRzLCBleHBpcmVkUmV3YXJkcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIG1lc3NhZ2VMaXN0ID0gcXVlcnkoX3RoaXMuc2V0dGluZ3Muc2VjdGlvbiwgJy4nICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubmF2aWdhdGlvbi5pbmJveC5jb250YWluZXJDbGFzcyArICcgLmNsLW1haW4td2lkZ2V0LWluYm94LWxpc3QtYm9keS1yZXMnKTtcblxuICAgIG1lc3NhZ2VMaXN0LmlubmVySFRNTCA9ICcnO1xuXG4gICAgbWFwT2JqZWN0KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm1lc3NhZ2VzLm1lc3NhZ2VzLCBmdW5jdGlvbiAoaW5ib3hJdGVtLCBrZXksIGNvdW50KSB7XG4gICAgICB2YXIgbGlzdEl0ZW0gPSBfdGhpcy5tZXNzYWdlSXRlbShpbmJveEl0ZW0pO1xuICAgICAgbWVzc2FnZUxpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMubG9hZFJld2FyZHMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuY2hlY2tGb3JBdmFpbGFibGVSZXdhcmRzKGZ1bmN0aW9uIChyZXdhcmRzLCBhdmFpbGFibGVSZXdhcmRzLCBleHBpcmVkUmV3YXJkcykge1xuICAgICAgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQudXBkYXRlUmV3YXJkc05hdmlnYXRpb25Db3VudHMoKTtcbiAgICAgIF90aGlzLnJld2FyZHNMaXN0TGF5b3V0KHJld2FyZHMsIGF2YWlsYWJsZVJld2FyZHMsIGV4cGlyZWRSZXdhcmRzKTtcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMubG9hZE1lc3NhZ2VzID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmNoZWNrRm9yQXZhaWxhYmxlTWVzc2FnZXMoZnVuY3Rpb24gKHJld2FyZHMsIGF2YWlsYWJsZVJld2FyZHMsIGV4cGlyZWRSZXdhcmRzKSB7XG4gICAgICBfdGhpcy5tZXNzYWdlc0xpc3RMYXlvdXQocmV3YXJkcywgYXZhaWxhYmxlUmV3YXJkcywgZXhwaXJlZFJld2FyZHMpO1xuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGNoYW5nZUludGVydmFsO1xuICB2YXIgY2hhbmdlQ29udGFpbmVySW50ZXJ2YWw7XG4gIHRoaXMubmF2aWdhdGlvblN3aXRjaCA9IGZ1bmN0aW9uICh0YXJnZXQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgcHJlTG9hZGVyID0gX3RoaXMucHJlbG9hZGVyKCk7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MubmF2aWdhdGlvblN3aXRjaEluUHJvZ3Jlc3MgJiYgX3RoaXMuc2V0dGluZ3MubmF2aWdhdGlvblN3aXRjaExhc3RBdGVtcHQgKyAzMDAwIDwgbmV3IERhdGUoKS5nZXRUaW1lKCkpIHtcbiAgICAgIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb25Td2l0Y2hJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5uYXZpZ2F0aW9uU3dpdGNoSW5Qcm9ncmVzcykge1xuICAgICAgX3RoaXMuc2V0dGluZ3MubmF2aWdhdGlvblN3aXRjaEluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgX3RoaXMuc2V0dGluZ3MubmF2aWdhdGlvblN3aXRjaExhc3RBdGVtcHQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgICAgaWYgKCFoYXNDbGFzcyh0YXJnZXQucGFyZW50Tm9kZSwgJ2NsLWFjdGl2ZS1uYXYnKSkge1xuICAgICAgICBwcmVMb2FkZXIuc2hvdyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGNoYW5nZUludGVydmFsKSBjbGVhclRpbWVvdXQoY2hhbmdlSW50ZXJ2YWwpO1xuICAgICAgICAgIGlmIChjaGFuZ2VDb250YWluZXJJbnRlcnZhbCkgY2xlYXJUaW1lb3V0KGNoYW5nZUNvbnRhaW5lckludGVydmFsKTtcblxuICAgICAgICAgIG9iamVjdEl0ZXJhdG9yKHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWl0ZW1zIC5jbC1hY3RpdmUtbmF2JyksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKG9iaiwgJ2NsLWFjdGl2ZS1uYXYnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG9iamVjdEl0ZXJhdG9yKHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1zZWN0aW9uLWNvbnRhaW5lciAuY2wtbWFpbi1hY3RpdmUtc2VjdGlvbicpLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyhvYmosICdjbC1tYWluLWFjdGl2ZS1zZWN0aW9uJyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgb2JqLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9LCAxNTApO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY2hhbmdlQ29udGFpbmVySW50ZXJ2YWwgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChoYXNDbGFzcyh0YXJnZXQsICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWxiLWljb24nKSkge1xuICAgICAgICAgICAgICBfdGhpcy5sb2FkTGVhZGVyYm9hcmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsYkNvbnRhaW5lciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1zZWN0aW9uLWNvbnRhaW5lciAuJyArIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24udG91cm5hbWVudHMuY29udGFpbmVyQ2xhc3MpO1xuXG4gICAgICAgICAgICAgICAgbGJDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgY2hhbmdlSW50ZXJ2YWwgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGxiQ29udGFpbmVyLCAnY2wtbWFpbi1hY3RpdmUtc2VjdGlvbicpO1xuICAgICAgICAgICAgICAgIH0sIDMwKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcHJlTG9hZGVyLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb25Td2l0Y2hJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNDbGFzcyh0YXJnZXQsICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWFjaC1pY29uJykpIHtcbiAgICAgICAgICAgICAgX3RoaXMubG9hZEFjaGlldmVtZW50cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjaENvbnRhaW5lciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1zZWN0aW9uLWNvbnRhaW5lciAuJyArIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24uYWNoaWV2ZW1lbnRzLmNvbnRhaW5lckNsYXNzKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50LmRldGFpbHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICAgICAgICAgIGFjaENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgICBjaGFuZ2VJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWNoQ29udGFpbmVyLCAnY2wtbWFpbi1hY3RpdmUtc2VjdGlvbicpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMzApO1xuXG4gICAgICAgICAgICAgICAgcHJlTG9hZGVyLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb25Td2l0Y2hJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNDbGFzcyh0YXJnZXQsICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLXJld2FyZHMtaWNvbicpKSB7XG4gICAgICAgICAgICAgIF90aGlzLmxvYWRSZXdhcmRzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmV3YXJkc0NvbnRhaW5lciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1zZWN0aW9uLWNvbnRhaW5lciAuJyArIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24ucmV3YXJkcy5jb250YWluZXJDbGFzcyk7XG5cbiAgICAgICAgICAgICAgICByZXdhcmRzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgIGNoYW5nZUludGVydmFsID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBhZGRDbGFzcyhyZXdhcmRzQ29udGFpbmVyLCAnY2wtbWFpbi1hY3RpdmUtc2VjdGlvbicpO1xuICAgICAgICAgICAgICAgIH0sIDMwKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcHJlTG9hZGVyLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb25Td2l0Y2hJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNDbGFzcyh0YXJnZXQsICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWluYm94LWljb24nKSkge1xuICAgICAgICAgICAgICBfdGhpcy5sb2FkTWVzc2FnZXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBpbmJveENvbnRhaW5lciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1zZWN0aW9uLWNvbnRhaW5lciAuJyArIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm5hdmlnYXRpb24uaW5ib3guY29udGFpbmVyQ2xhc3MpO1xuXG4gICAgICAgICAgICAgICAgaW5ib3hDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgY2hhbmdlSW50ZXJ2YWwgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGluYm94Q29udGFpbmVyLCAnY2wtbWFpbi1hY3RpdmUtc2VjdGlvbicpO1xuICAgICAgICAgICAgICAgIH0sIDMwKTtcblxuICAgICAgICAgICAgICAgIHByZUxvYWRlci5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5uYXZpZ2F0aW9uU3dpdGNoSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAyNTApO1xuXG4gICAgICAgICAgYWRkQ2xhc3ModGFyZ2V0LnBhcmVudE5vZGUsICdjbC1hY3RpdmUtbmF2Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubmF2aWdhdGlvblN3aXRjaEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5yZXNldE5hdmlnYXRpb24gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIGNvbnN0IGxpc3RJY29uID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWxiLWhlYWRlci1saXN0LWljb24nKTtcblxuICAgIG9iamVjdEl0ZXJhdG9yKHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWl0ZW1zIC5jbC1hY3RpdmUtbmF2JyksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJlbW92ZUNsYXNzKG9iaiwgJ2NsLWFjdGl2ZS1uYXYnKTtcbiAgICB9KTtcblxuICAgIG9iamVjdEl0ZXJhdG9yKHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1zZWN0aW9uLWNvbnRhaW5lciAuY2wtbWFpbi1hY3RpdmUtc2VjdGlvbicpLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICBvYmouc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHJlbW92ZUNsYXNzKG9iaiwgJ2NsLW1haW4tYWN0aXZlLXNlY3Rpb24nKTtcbiAgICB9KTtcblxuICAgIHZhciBhY3RpdmVOYXZlID0gZmFsc2U7XG4gICAgb2JqZWN0SXRlcmF0b3IocXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tY29udGFpbmVyIC5jbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWl0ZW0nKSwgZnVuY3Rpb24gKG5hdkl0ZW0sIGtleSwgY291bnQpIHtcbiAgICAgIGlmICghYWN0aXZlTmF2ZSAmJiAhaGFzQ2xhc3MobmF2SXRlbSwgJ2NsLWhpZGRlbi1uYXZpZ2F0aW9uLWl0ZW0nKSkge1xuICAgICAgICBfdGhpcy5uYXZpZ2F0aW9uU3dpdGNoKHF1ZXJ5KG5hdkl0ZW0sICcuY2wtbWFpbi1uYXZpZ2F0aW9uLWl0ZW0nKSk7XG4gICAgICAgIGFjdGl2ZU5hdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGlzdEljb24uc3R5bGUub3BhY2l0eSA9ICcxJztcbiAgICBfdGhpcy5oaWRlRW1iZWRkZWRDb21wZXRpdGlvbkRldGFpbHNDb250ZW50KCk7XG4gICAgX3RoaXMuaGlkZUNvbXBldGl0aW9uTGlzdCgpO1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAndW5kZWZpbmVkJykgY2FsbGJhY2soKTtcbiAgICB9LCA3MCk7XG4gIH07XG5cbiAgdGhpcy5pbml0TGF5b3V0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLnNldHRpbmdzLmFjdGl2ZSA9IHRydWU7XG5cbiAgICBfdGhpcy5sb2FkTGVhZGVyYm9hcmQoKTtcblxuICAgIF90aGlzLnNldHRpbmdzLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICBfdGhpcy5zZXR0aW5ncy5vdmVybGF5Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWRkQ2xhc3MoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnY2wtc2hvdycpO1xuXG4gICAgICB2YXIgbWVtYmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubGlzdCwgJy5jbC1sYi1tZW1iZXItcm93Jyk7XG4gICAgICBpZiAobWVtYmVyICE9PSBudWxsKSB7XG4gICAgICAgIF90aGlzLm1pc3NpbmdNZW1iZXIoX3RoaXMuaXNFbGVtZW50VmlzaWJsZUluVmlldyhtZW1iZXIsIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxpc3QucGFyZW50Tm9kZSkpO1xuICAgICAgICBfdGhpcy5taXNzaW5nTWVtYmVyKF90aGlzLmlzRWxlbWVudFZpc2libGVJblZpZXcobWVtYmVyLCBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZXN1bHRDb250YWluZXIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLm1pc3NpbmdNZW1iZXJSZXNldCgpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5yZXNldE5hdmlnYXRpb24oY2FsbGJhY2spO1xuICAgIH0sIDMwKTtcbiAgfTtcbn07XG4iLCJpbXBvcnQgY0xhYnMgZnJvbSAnLi9jTGFicyc7XG5cbi8qKlxuICogU1NFIE1lc3NhZ2luZ1xuICogQHBhcmFtIG9wdGlvbnMge09iamVjdH1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgY29uc3QgTWVzc2FnaW5nID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgLyoqXG4gICAqIE1lc3NhZ2luZyBzZXR0aW5nc1xuICAgKiBAbWVtYmVyT2YgTWVzc2FnaW5nXG4gICAqIEBjb25zdGFudFxuICAgKiBAdHlwZSB7IE9iamVjdCB9XG4gICAqL1xuICB0aGlzLnNldHRpbmdzID0ge1xuICAgIHNvdXJjZTogbnVsbCxcbiAgICBhamF4OiB7XG4gICAgICB1cmw6IG51bGwsXG4gICAgICBhcGlLZXk6IHVuZGVmaW5lZCxcbiAgICAgIGVycm9yQ2FsbGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNzZVVybDogbnVsbCxcbiAgICBoZWFydGJlYXQ6IG51bGwsXG4gICAgbGFzdEhlYXJ0YmVhdDogbnVsbCxcbiAgICBtYWluQWpheDogbmV3IGNMYWJzLkFqYXgoKSxcbiAgICBoZWFydEJlYXRBamF4OiBuZXcgY0xhYnMuQWpheCgpLFxuICAgIGhlYXJ0V2FpdFRpbWU6IDI1MDAwLFxuICAgIG1lc3NhZ2VRdWV1ZTogW10sXG4gICAgbWVzc2FnZUludGVydmFsOiAxMDAwLFxuICAgIHN0YXJ0dXBDaGVjazogdHJ1ZSxcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIGRlYnVnOiBmYWxzZSxcbiAgICBjYWxsYmFjazogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB9LFxuICAgIG9uU3RhcnR1cEVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgfVxuICB9O1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmb3IgKHZhciBvcHQgaW4gb3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgICB0aGlzLnNldHRpbmdzW29wdF0gPSBvcHRpb25zW29wdF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5pbnRlcnZhbEluc3RhbmNlID0gbnVsbDtcbiAgdGhpcy5oZWFydGJlYXRJbnRlcnZhbEluc3RhbmNlID0gbnVsbDtcblxuICB0aGlzLmxvb2t1cERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5tZXNzYWdlUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIGRhdGEgPSBfdGhpcy5zZXR0aW5ncy5tZXNzYWdlUXVldWVbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IF90aGlzLnNldHRpbmdzLm1lc3NhZ2VRdWV1ZS5pbmRleE9mKGRhdGEpO1xuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubWVzc2FnZVF1ZXVlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MuYWpheC51cmwgPT09ICdzdHJpbmcnICYmIF90aGlzLnNldHRpbmdzLmFqYXgudXJsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgX3RoaXMuZ2V0RGF0YShkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmNhbGxiYWNrKGRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLnNldEludGVydmFsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5pbnRlcnZhbEluc3RhbmNlID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMubG9va3VwRGF0YSgpO1xuICAgIH0sIF90aGlzLnNldHRpbmdzLm1lc3NhZ2VJbnRlcnZhbCk7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuaGVhcnRiZWF0ICE9PSBudWxsKSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5sYXN0SGVhcnRiZWF0ID0gbmV3IERhdGUoKTtcbiAgICAgIF90aGlzLmhlYXJ0YmVhdEludGVydmFsSW5zdGFuY2UgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHZhciBkaWZmID0gX3RoaXMuc2V0dGluZ3MubGFzdEhlYXJ0YmVhdC5nZXRUaW1lKCkgLSBjdXJyZW50VGltZS5nZXRUaW1lKCk7XG5cbiAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLnNvdXJjZS5yZWFkeVN0YXRlID09PSAwICYmIGRpZmYgPiBfdGhpcy5zZXR0aW5ncy5oZWFydFdhaXRUaW1lKSB7XG4gICAgICAgICAgX3RoaXMuY2xvc2VDaGFuZWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLmhlYXJCZWF0Q2hlY2soKTtcbiAgICAgIH0sIF90aGlzLnNldHRpbmdzLmhlYXJ0V2FpdFRpbWUpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmVxdWVzdCBhIGhlYXJ0YmVhdFxuICAgKiAtIGlmIHRoZSByZXF1ZXN0IGlzIGZhaWxpbmcgY2xvc2UgdGhlIGNvbm5lY3Rpb25cbiAgICogLSBpZiB0aGUgcmVxdWVzdCBpcyBzdWNjZXNzZnVsIGJ1dCB0aGUgY29ubmVjdGlvbiBpcyBjbG9zZWQgcmVvcGVuIGFuZCBjYWxsIGZvciBhIGhlYXJ0YmVhdCBhZ2FpblxuICAgKlxuICAgKiBAbWVtYmVyT2YgTWVzc2FnaW5nXG4gICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMuaGVhckJlYXRDaGVjayA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGRhdGFPYmogPSB7XG4gICAgICB1cmw6IF90aGlzLnNldHRpbmdzLmhlYXJ0YmVhdCxcbiAgICAgIGhlYWRlcnM6IF90aGlzLnNldHRpbmdzLmFqYXguYXBpS2V5LFxuICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UsIGRhdGFPYmplY3QsIHhocikge1xuICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gMjAwICYmIF90aGlzLnNldHRpbmdzLnNvdXJjZS5yZWFkeVN0YXRlID09PSAwKSB7XG4gICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmRlYnVnKSBjb25zb2xlLmxvZygnW01zZ10gU1NFIENsb3NpbmcgY29ubmVjdGlvbicpO1xuICAgICAgICAgIF90aGlzLmNsb3NlQ2hhbmVsKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwICYmIF90aGlzLnNldHRpbmdzLnNvdXJjZS5yZWFkeVN0YXRlID09PSAyKSB7XG4gICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmRlYnVnKSBjb25zb2xlLmxvZygnW01zZ10gU1NFIFRyeWluZyB0byByZS1vcGVuIHRoZSBjb25uZWN0aW9uJyk7XG4gICAgICAgICAgX3RoaXMub3BlbkNoYW5lbCgpO1xuXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5oZWFyQmVhdENoZWNrKCk7XG4gICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmFqYXguYXBpS2V5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGF0YU9iai5oZWFkZXJzID0gX3RoaXMuc2V0dGluZ3MuYWpheC5hcGlLZXk7XG4gICAgfVxuXG4gICAgX3RoaXMuc2V0dGluZ3MuaGVhcnRCZWF0QWpheC5hYm9ydCgpLmdldERhdGEoZGF0YU9iaik7XG4gIH07XG5cbiAgdGhpcy5nZXREYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgZGF0YU9iaiA9IHtcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MuYWpheC51cmwsXG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iamVjdCwgeGhyKSB7XG4gICAgICAgIHZhciBqc29uID0ge307XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmRlYnVnKSBjb25zb2xlLmxvZyhlLCBfdGhpcy5zZXR0aW5ncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIF90aGlzLnNldHRpbmdzLmNhbGxiYWNrKGpzb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLnNldHRpbmdzLmFqYXguZXJyb3JDYWxsYmFjayhqc29uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmFqYXguYXBpS2V5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGF0YU9iai5oZWFkZXJzID0gX3RoaXMuc2V0dGluZ3MuYWpheC5hcGlLZXk7XG4gICAgfVxuXG4gICAgX3RoaXMuc2V0dGluZ3MubWFpbkFqYXguYWJvcnQoKS5nZXREYXRhKGRhdGFPYmopO1xuICB9O1xuXG4gIHRoaXMub3BlbkNoYW5lbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuc2V0dGluZ3Muc291cmNlID0gbmV3IEV2ZW50U291cmNlKF90aGlzLnNldHRpbmdzLnNzZVVybCwgeyB3aXRoQ3JlZGVudGlhbHM6IHRydWUgfSk7XG5cbiAgICBfdGhpcy5zZXJ2ZXJTaWRlRXZlbnRMaXN0ZW5lcnMoX3RoaXMuc2V0dGluZ3Muc291cmNlKTtcbiAgfTtcblxuICB0aGlzLnNlcnZlclNpZGVFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MuYWN0aXZlID0gdHJ1ZTtcbiAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5kZWJ1ZykgY29uc29sZS5sb2coJ1tNc2ddIGNvbm5lY3Rpb24gb3BlbmVkJywgZSk7XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbTXNnXSBtZXNzYWdlIGNoZWNrJywgX3RoaXMuc2V0dGluZ3Muc3NlVXJsKTtcbiAgICAgICAgY29uc29sZS5sb2coZS5kYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZS5kYXRhO1xuICAgICAgdmFyIGpzb24gPSBudWxsO1xuXG4gICAgICB0cnkge1xuICAgICAgICBqc29uID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmhlYXJ0YmVhdCAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5sYXN0SGVhcnRiZWF0ID0gbmV3IERhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGpzb24gIT09IG51bGwgJiYgdHlwZW9mIGpzb24uaGVhcnRiZWF0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5tZXNzYWdlUXVldWUucHVzaChqc29uKTtcbiAgICAgIH1cbiAgICB9LCBmYWxzZSk7XG5cbiAgICBzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbTXNnXSBlcnJvciBjaGVjaycsIF90aGlzLnNldHRpbmdzLnNzZVVybCk7XG4gICAgICB9XG5cbiAgICAgIC8qIGVzbGludCBlcWVxZXE6IFwib2ZmXCIgKi9cbiAgICAgIGlmIChlLnJlYWR5U3RhdGUgPT0gRXZlbnRTb3VyY2UuQ0xPU0VEKSB7XG4gICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5kZWJ1ZykgY29uc29sZS53YXJuKCdbTXNnXSBjb25uZWN0aW9uIGNsb3NlZCcsIGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmRlYnVnKSBjb25zb2xlLmxvZyhlLCBlLnJlYWR5U3RhdGUpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jbG9zZUNoYW5lbCgpO1xuXG4gICAgICBfdGhpcy5zZXR0aW5ncy5zdGFydHVwQ2hlY2sgPSBmYWxzZTtcbiAgICB9LCBmYWxzZSk7XG4gIH07XG5cbiAgdGhpcy5jbG9zZUNoYW5lbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNldHRpbmdzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuc2V0dGluZ3Muc291cmNlLmNsb3NlKCk7XG4gIH07XG5cbiAgdGhpcy5zc2VGYWlsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLnNldHRpbmdzLmhlYXJ0YmVhdCA9IG51bGw7XG4gICAgX3RoaXMuc2V0dGluZ3MuYWN0aXZlID0gZmFsc2U7XG5cbiAgICBpZiAoX3RoaXMuaGVhcnRiZWF0SW50ZXJ2YWxJbnN0YW5jZSAhPT0gbnVsbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbChfdGhpcy5oZWFydGJlYXRJbnRlcnZhbEluc3RhbmNlKTtcbiAgICB9XG5cbiAgICBfdGhpcy5zZXR0aW5ncy5vblN0YXJ0dXBFcnJvcihfdGhpcy5zZXR0aW5ncyk7XG4gIH07XG5cbiAgdGhpcy53aW5kb3dBY3Rpdml0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBoaWRkZW4gPSAnaGlkZGVuJztcblxuICAgICAgLy8gU3RhbmRhcmRzOlxuICAgICAgaWYgKGhpZGRlbiBpbiBkb2N1bWVudCkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25jaGFuZ2UpO1xuICAgICAgfSBlbHNlIGlmICgoaGlkZGVuID0gJ21vekhpZGRlbicpIGluIGRvY3VtZW50KSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21venZpc2liaWxpdHljaGFuZ2UnLCBvbmNoYW5nZSk7XG4gICAgICB9IGVsc2UgaWYgKChoaWRkZW4gPSAnd2Via2l0SGlkZGVuJykgaW4gZG9jdW1lbnQpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0dmlzaWJpbGl0eWNoYW5nZScsIG9uY2hhbmdlKTtcbiAgICAgIH0gZWxzZSBpZiAoKGhpZGRlbiA9ICdtc0hpZGRlbicpIGluIGRvY3VtZW50KSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21zdmlzaWJpbGl0eWNoYW5nZScsIG9uY2hhbmdlKTtcbiAgICAgIH0gZWxzZSBpZiAoJ29uZm9jdXNpbicgaW4gZG9jdW1lbnQpIHsgLy8gSUUgOSBhbmQgbG93ZXI6XG4gICAgICAgIGRvY3VtZW50Lm9uZm9jdXNpbiA9IGRvY3VtZW50Lm9uZm9jdXNvdXQgPSBvbmNoYW5nZTtcbiAgICAgIH0gZWxzZSB7IC8vIEFsbCBvdGhlcnM6XG4gICAgICAgIHdpbmRvdy5vbnBhZ2VzaG93ID0gd2luZG93Lm9ucGFnZWhpZGUgPSB3aW5kb3cub25mb2N1cyA9IHdpbmRvdy5vbmJsdXIgPSBvbmNoYW5nZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25jaGFuZ2UgKGV2dCkge1xuICAgICAgICB2YXIgc3RhdHVzID0gJyc7XG4gICAgICAgIHZhciB2ID0gJ3Zpc2libGUnO1xuICAgICAgICB2YXIgaCA9ICdoaWRkZW4nO1xuICAgICAgICB2YXIgZXZ0TWFwID0ge1xuICAgICAgICAgIGZvY3VzOiB2LCBmb2N1c2luOiB2LCBwYWdlc2hvdzogdiwgYmx1cjogaCwgZm9jdXNvdXQ6IGgsIHBhZ2VoaWRlOiBoXG4gICAgICAgIH07XG5cbiAgICAgICAgZXZ0ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgaWYgKGV2dC50eXBlIGluIGV2dE1hcCkge1xuICAgICAgICAgIHN0YXR1cyA9IGV2dE1hcFtldnQudHlwZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdHVzID0gdGhpc1toaWRkZW5dID8gJ2hpZGRlbicgOiAndmlzaWJsZSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdHVzID09PSAndmlzaWJsZScgJiYgKF90aGlzLnNldHRpbmdzLnNvdXJjZS5yZWFkeVN0YXRlICE9PSAwICYmIF90aGlzLnNldHRpbmdzLnNvdXJjZS5yZWFkeVN0YXRlICE9PSAxKSkge1xuICAgICAgICAgIF90aGlzLm9wZW5DaGFuZWwoKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09ICdoaWRkZW4nICYmIChfdGhpcy5zZXR0aW5ncy5zb3VyY2UucmVhZHlTdGF0ZSA9PT0gMCB8fCBfdGhpcy5zZXR0aW5ncy5zb3VyY2UucmVhZHlTdGF0ZSA9PT0gMSkpIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZUNoYW5lbCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCB0aGUgaW5pdGlhbCBzdGF0ZSAoYnV0IG9ubHkgaWYgYnJvd3NlciBzdXBwb3J0cyB0aGUgUGFnZSBWaXNpYmlsaXR5IEFQSSlcbiAgICAgIGlmIChkb2N1bWVudFtoaWRkZW5dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb25jaGFuZ2UoeyB0eXBlOiBkb2N1bWVudFtoaWRkZW5dID8gJ2JsdXInIDogJ2ZvY3VzJyB9KTtcbiAgICAgIH1cbiAgICB9KSgpO1xuICB9O1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5kZWJ1ZykgY29uc29sZS5sb2coJ1tNc2ddIFNTRSBzdGFydGluZycsIF90aGlzLnNldHRpbmdzLnNzZVVybCwgbmV3IERhdGUoKSk7XG5cbiAgICAgIF90aGlzLm9wZW5DaGFuZWwoKTtcblxuICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmRlYnVnKSBjb25zb2xlLmxvZygnW01zZ10gU1NFIHN0YXJ0ZWQnLCBfdGhpcy5zZXR0aW5ncy5zc2VVcmwsIG5ldyBEYXRlKCksIF90aGlzLnNldHRpbmdzLnNvdXJjZS5yZWFkeVN0YXRlKTtcblxuICAgICAgX3RoaXMuc2V0SW50ZXJ2YWwoKTtcbiAgICAgIF90aGlzLndpbmRvd0FjdGl2aXR5KCk7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLnNldHRpbmdzLnN0YXJ0dXBDaGVjaykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdzc2UgZmFpbGVkJyk7XG4gICAgICAgICAgX3RoaXMuc3NlRmFpbGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDIwMDApO1xuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5sb2FkJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5kZWJ1ZykgY29uc29sZS5sb2coJ1tNc2ddIGNsb3NpbmcgbWVzc2FnaW5nIHNlcnZpY2UnLCBuZXcgRGF0ZSgpKTtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3Muc291cmNlLmNsb3NlKCk7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIF90aGlzLnNldHRpbmdzLmhlYXJ0QmVhdEFqYXguYWJvcnQoKTtcblxuICAgICAgICBpZiAoX3RoaXMuaW50ZXJ2YWxJbnN0YW5jZSkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoX3RoaXMuaW50ZXJ2YWxJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZGVidWcpIGNvbnNvbGUubG9nKCdbTXNnXSBjbG9zaW5nIG1lc3NhZ2luZyBzZXJ2aWNlJyk7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLnNvdXJjZS5jbG9zZSgpO1xuXG4gICAgICAgIF90aGlzLnNldHRpbmdzLmhlYXJ0QmVhdEFqYXguYWJvcnQoKTtcblxuICAgICAgICBpZiAoX3RoaXMuaW50ZXJ2YWxJbnN0YW5jZSkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoX3RoaXMuaW50ZXJ2YWxJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5kZWJ1ZykgY29uc29sZS5sb2coJ0V2ZW50U291cmNlIGZhaWxlZCcpO1xuICAgICAgX3RoaXMuc3NlRmFpbGVkKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaW5pdCgpO1xufTtcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBxdWVyeSBmcm9tICcuLi91dGlscy9xdWVyeSc7XG5pbXBvcnQgbWFwT2JqZWN0IGZyb20gJy4uL3V0aWxzL21hcE9iamVjdCc7XG5pbXBvcnQgYWRkQ2xhc3MgZnJvbSAnLi4vdXRpbHMvYWRkQ2xhc3MnO1xuaW1wb3J0IGhhc0NsYXNzIGZyb20gJy4uL3V0aWxzL2hhc0NsYXNzJztcbmltcG9ydCByZW1vdmVDbGFzcyBmcm9tICcuLi91dGlscy9yZW1vdmVDbGFzcyc7XG5pbXBvcnQgcmVtb3ZlIGZyb20gJy4uL3V0aWxzL3JlbW92ZSc7XG5pbXBvcnQgZHJhZ0VsZW1lbnQgZnJvbSAnLi9kcmFnRWxlbWVudCc7XG5cbi8qKlxuICogTWluaVNjb3JlQm9hcmRcbiAqIEBwYXJhbSBvcHRpb25zIHtPYmplY3R9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGNvbnN0IE1pbmlTY29yZUJvYXJkID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgLyoqXG4gICAqIE1pbmlTY29yZUJvYXJkIHNldHRpbmdzXG4gICAqIEBtZW1iZXJPZiBNaW5pU2NvcmVCb2FyZFxuICAgKiBAY29uc3RhbnRcbiAgICogQHR5cGUgeyBPYmplY3QgfVxuICAgKi9cbiAgdGhpcy5zZXR0aW5ncyA9IHtcbiAgICBsYldpZGdldDogbnVsbCxcbiAgICBjb250YWluZXI6IG51bGwsXG4gICAgb3ZlcmxheUNvbnRhaW5lcjogbnVsbCxcbiAgICBpbmZvQ29udGFpbmVyOiBudWxsLFxuICAgIHVwZGF0ZUludGVydmFsOiBudWxsLFxuICAgIHVwZGF0ZUludGVydmFsVGltZTogMTAwMCxcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIGVuYWJsZURyYWdnaW5nOiB0cnVlLFxuICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICB2ZXJ0aWNhbENsYXNzOiAnY2wtdmVydGljYWwtbWluaSdcbiAgfTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZm9yICh2YXIgb3B0IGluIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5nc1tvcHRdID0gb3B0aW9uc1tvcHRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMubGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGljb25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBpbmZvcm1hdGlvbldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgaW5mb3JtYXRpb25Ub3BXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGluZm9ybWF0aW9uV3JhcHBlckNsb3NlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGluZm9ybWF0aW9uQ2xvc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cbiAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXdyYXBwZXInKTtcbiAgICBpY29uV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1pY29uLXdyYXBwZXInKTtcbiAgICBpY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWljb24nKTtcbiAgICBpbmZvcm1hdGlvblRvcFdyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtaW5mb3JtYXRpb24tdG9wLXdyYXBwZXInKTtcbiAgICBpbmZvcm1hdGlvbldyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtaW5mb3JtYXRpb24td3JhcHBlcicpO1xuICAgIGluZm9ybWF0aW9uV3JhcHBlckNsb3NlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWluZm9ybWF0aW9uLWNsb3NlLXdyYXBwZXInKTtcbiAgICBpbmZvcm1hdGlvbkNsb3NlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWluZm9ybWF0aW9uLWNsb3NlJyk7XG5cbiAgICBpbmZvcm1hdGlvbkNsb3NlLmhyZWYgPSAnamF2YXNjcmlwdDp2b2lkKDApOyc7XG4gICAgaW5mb3JtYXRpb25DbG9zZS5pbm5lckhUTUwgPSAneCc7XG5cbiAgICB0aGlzLmluaXRpYWxMYXlvdXRQb3NpdGlvbih3cmFwcGVyKTtcblxuICAgIGluZm9ybWF0aW9uV3JhcHBlckNsb3NlLmFwcGVuZENoaWxkKGluZm9ybWF0aW9uQ2xvc2UpO1xuICAgIGluZm9ybWF0aW9uV3JhcHBlci5hcHBlbmRDaGlsZChpbmZvcm1hdGlvbldyYXBwZXJDbG9zZSk7XG4gICAgaW5mb3JtYXRpb25Ub3BXcmFwcGVyLmFwcGVuZENoaWxkKGluZm9ybWF0aW9uV3JhcHBlcik7XG4gICAgaWNvbldyYXBwZXIuYXBwZW5kQ2hpbGQoaWNvbik7XG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChpY29uV3JhcHBlcik7XG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChpbmZvcm1hdGlvblRvcFdyYXBwZXIpO1xuXG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH07XG5cbiAgdGhpcy5pbml0aWFsTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiAod3JhcHBlcikge1xuICAgIGNvbnN0IF90aGlzID0gdGhpcztcblxuICAgIG1hcE9iamVjdChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5sYXlvdXQubWluaVNjb3JlQm9hcmRQb3NpdGlvbiwgZnVuY3Rpb24gKHBvc2l0aW9uLCBwb3NpdGlvbktleSkge1xuICAgICAgaWYgKHBvc2l0aW9uICE9PSBudWxsKSB7XG4gICAgICAgIHdyYXBwZXIuc3R5bGVbcG9zaXRpb25LZXldID0gcG9zaXRpb247XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmxheW91dC5taW5pU2NvcmVCb2FyZE9yaWVudGF0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgc3dpdGNoIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5sYXlvdXQubWluaVNjb3JlQm9hcmRPcmllbnRhdGlvbikge1xuICAgICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndmVydGljYWwnOlxuICAgICAgICAgIGFkZENsYXNzKHdyYXBwZXIsIF90aGlzLnNldHRpbmdzLnZlcnRpY2FsQ2xhc3MpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIGRlZmF1bHQgYmVoYXZpb3VyXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub3ZlcmxheUxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1vdmVybGF5LXdyYXBwZXInKTtcblxuICAgIHJldHVybiB3cmFwcGVyO1xuICB9O1xuXG4gIHRoaXMudGltZU1hbmFnZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgZGlmZiA9IDA7XG4gICAgdmFyIGxhYmVsID0gJyZuYnNwOyc7XG4gICAgdmFyIGRhdGUgPSAnJztcbiAgICB2YXIgZGF0ZU9iaiA9ICcnO1xuICAgIHZhciBpbnZlcnNlID0gZmFsc2U7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdCAhPT0gbnVsbCkge1xuICAgICAgdmFyIHN0YXJ0RGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc2NoZWR1bGVkU3RhcnQ7XG4gICAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QuYWN0dWFsU3RhcnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QuYWN0dWFsU3RhcnQ7XG4gICAgICB9XG5cbiAgICAgIGRpZmYgPSBtb21lbnQoc3RhcnREYXRlKS5kaWZmKG1vbWVudCgpKTtcbiAgICAgIGxhYmVsID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubWluaUxlYWRlcmJvYXJkLnN0YXJ0c0luO1xuICAgICAgZGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmZvcm1hdERhdGVUaW1lKG1vbWVudC5kdXJhdGlvbihkaWZmKSk7XG4gICAgICBkYXRlT2JqID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuZm9ybWF0RGF0ZVRpbWUobW9tZW50LmR1cmF0aW9uKGRpZmYpKTtcbiAgICAgIGludmVyc2UgPSBmYWxzZTtcblxuICAgICAgaWYgKGRpZmYgPD0gMCAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnN0YXR1c0NvZGUgPT09IDApIHtcbiAgICAgICAgbGFiZWwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5taW5pTGVhZGVyYm9hcmQuc3RhcnRpbmc7XG4gICAgICAgIGRhdGUgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zdGF0dXNDb2RlID09PSAxKSB7XG4gICAgICAgIGxhYmVsID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubWluaUxlYWRlcmJvYXJkLnN0YXJ0aW5nO1xuICAgICAgICBkYXRlID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RhdHVzQ29kZSA9PT0gMikge1xuICAgICAgICBkaWZmID0gbW9tZW50KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc2NoZWR1bGVkRW5kKS5kaWZmKG1vbWVudCgpKTtcbiAgICAgICAgZGF0ZU9iaiA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmZvcm1hdERhdGVUaW1lKG1vbWVudC5kdXJhdGlvbihkaWZmKSk7XG4gICAgICAgIGxhYmVsID0gJyZuYnNwOyc7XG4gICAgICAgIGRhdGUgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5mb3JtYXREYXRlVGltZShtb21lbnQuZHVyYXRpb24oZGlmZikpO1xuICAgICAgICBpbnZlcnNlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zdGF0dXNDb2RlID09PSAzKSB7XG4gICAgICAgIGxhYmVsID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubWluaUxlYWRlcmJvYXJkLmZpbmlzaGluZztcbiAgICAgICAgZGF0ZSA9ICcnO1xuICAgICAgICBpbnZlcnNlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zdGF0dXNDb2RlID49IDQpIHtcbiAgICAgICAgbGFiZWwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5taW5pTGVhZGVyYm9hcmQuZmluaXNoZWQ7XG4gICAgICAgIGRhdGUgPSAnJztcbiAgICAgICAgaW52ZXJzZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIGRpZmY6IGRpZmYsXG4gICAgICBkYXRlOiBkYXRlLFxuICAgICAgZGF0ZU9iajogZGF0ZU9iaixcbiAgICAgIGludmVyc2U6IGludmVyc2VcbiAgICB9O1xuICB9O1xuXG4gIHRoaXMubGF5b3V0RGVmYXVsdE9yRW1wdHlFbnRyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGJSZXN1bHRzTWVtRW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgbGJSZXN1bHRzTWVtTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgbGJSZXN1bHRzTWVtUmFuayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBsYlJlc3VsdHNNZW1JY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGxiUmVzdWx0c01lbUltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIHZhciBsYlJlc3VsdHNNZW1Qb2ludHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGxiUmVzdWx0c01lbUVudHJ5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtbWVtLWVudHJ5Jyk7XG4gICAgbGJSZXN1bHRzTWVtTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZGVmYXVsdC1tZW0tbGFiZWwnKTtcbiAgICBsYlJlc3VsdHNNZW1SYW5rLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtbWVtLXJhbmsnKTtcbiAgICBsYlJlc3VsdHNNZW1JY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtbWVtLWljb24nKTtcbiAgICBsYlJlc3VsdHNNZW1JbWcuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZGVmYXVsdC1tZW0taW1nJyk7XG4gICAgbGJSZXN1bHRzTWVtSW1nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgbGJSZXN1bHRzTWVtUG9pbnRzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtbWVtLXBvaW50cycpO1xuXG4gICAgbGJSZXN1bHRzTWVtRW50cnkuYXBwZW5kQ2hpbGQobGJSZXN1bHRzTWVtTGFiZWwpO1xuICAgIGxiUmVzdWx0c01lbUVudHJ5LmFwcGVuZENoaWxkKGxiUmVzdWx0c01lbVJhbmspO1xuICAgIGxiUmVzdWx0c01lbUljb24uYXBwZW5kQ2hpbGQobGJSZXN1bHRzTWVtSW1nKTtcbiAgICBsYlJlc3VsdHNNZW1FbnRyeS5hcHBlbmRDaGlsZChsYlJlc3VsdHNNZW1JY29uKTtcbiAgICBsYlJlc3VsdHNNZW1FbnRyeS5hcHBlbmRDaGlsZChsYlJlc3VsdHNNZW1Qb2ludHMpO1xuXG4gICAgcmV0dXJuIGxiUmVzdWx0c01lbUVudHJ5O1xuICB9O1xuXG4gIHRoaXMubGF5b3V0Rmlyc3RUb09yRW1wdHlFbnRyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGJSZXN1bHRzTWVtRW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgbGJSZXN1bHRzTWVtTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgbGJSZXN1bHRzTWVtUmFuayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBsYlJlc3VsdHNNZW1JY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGxiUmVzdWx0c01lbUltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIHZhciBsYlJlc3VsdHNNZW1Qb2ludHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGxiUmVzdWx0c01lbUVudHJ5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1lbnRyeScpO1xuICAgIGxiUmVzdWx0c01lbUxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1sYWJlbCcpO1xuICAgIGxiUmVzdWx0c01lbVJhbmsuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLXJhbmsnKTtcbiAgICBsYlJlc3VsdHNNZW1JY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1pY29uJyk7XG4gICAgbGJSZXN1bHRzTWVtSW1nLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1pbWcnKTtcbiAgICBsYlJlc3VsdHNNZW1JbWcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBsYlJlc3VsdHNNZW1Qb2ludHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLXBvaW50cycpO1xuXG4gICAgbGJSZXN1bHRzTWVtRW50cnkuYXBwZW5kQ2hpbGQobGJSZXN1bHRzTWVtTGFiZWwpO1xuICAgIGxiUmVzdWx0c01lbUVudHJ5LmFwcGVuZENoaWxkKGxiUmVzdWx0c01lbVJhbmspO1xuICAgIGxiUmVzdWx0c01lbUljb24uYXBwZW5kQ2hpbGQobGJSZXN1bHRzTWVtSW1nKTtcbiAgICBsYlJlc3VsdHNNZW1FbnRyeS5hcHBlbmRDaGlsZChsYlJlc3VsdHNNZW1JY29uKTtcbiAgICBsYlJlc3VsdHNNZW1FbnRyeS5hcHBlbmRDaGlsZChsYlJlc3VsdHNNZW1Qb2ludHMpO1xuXG4gICAgcmV0dXJuIGxiUmVzdWx0c01lbUVudHJ5O1xuICB9O1xuXG4gIC8vIGxldCB0ZXN0TGl2ZSA9IGZhbHNlO1xuICB0aGlzLmxheW91dERlZmF1bHRPckVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHRpbWVNYW5hZ2VtZW50ID0gX3RoaXMudGltZU1hbmFnZW1lbnQoKTtcbiAgICAvLyB2YXIgZGlmZiA9IHRpbWVNYW5hZ2VtZW50LmRpZmY7XG4gICAgdmFyIGxhYmVsID0gdGltZU1hbmFnZW1lbnQubGFiZWw7XG4gICAgdmFyIGRhdGUgPSB0aW1lTWFuYWdlbWVudC5kYXRlO1xuICAgIC8vIHZhciBkYXRlT2JqID0gdGltZU1hbmFnZW1lbnQuZGF0ZU9iajtcbiAgICB2YXIgd3JhcHBlckRvbU9iaiA9IF90aGlzLnNldHRpbmdzLmluZm9Db250YWluZXI7XG4gICAgdmFyIGRlZmF1bHREb21PYmogPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtd3JhcHBlcicpO1xuICAgIHZhciBpbnZlcnNlID0gdGltZU1hbmFnZW1lbnQuaW52ZXJzZTtcblxuICAgIGlmIChkZWZhdWx0RG9tT2JqID09PSBudWxsKSB7XG4gICAgICBfdGhpcy5yZW1vdmVVbnVzZWRFbGVtZW50cygpO1xuXG4gICAgICBhZGRDbGFzcyhfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICdjbC1tcy1kZWZhdWx0LXN0eWxlJyk7XG5cbiAgICAgIHZhciBsYldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBsYkRhdGVXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbGJEYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBsYkRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBsYlJlc3VsdHNXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbGJSZXN1bHRzTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdmFyIGxiSGVhZGVycyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdmFyIGxiSGVhZGVyc1JhbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBsYkhlYWRlcnNQb2ludHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBsYlJlc3VsdHNNZW1FbnRyeSA9IF90aGlzLmxheW91dERlZmF1bHRPckVtcHR5RW50cnkoKTtcbiAgICAgIHZhciBpbWcgPSBxdWVyeShsYlJlc3VsdHNNZW1FbnRyeSwgJy5jbC13aWRnZXQtbXMtZGVmYXVsdC1tZW0taW1nJyk7XG5cbiAgICAgIGxiV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LXdyYXBwZXInKTtcbiAgICAgIGxiRGF0ZUxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtZGF0ZS1sYWJlbCcpO1xuICAgICAgbGJEYXRlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtZGF0ZScpO1xuICAgICAgbGJEYXRlV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LWRhdGUtd3JhcHBlcicpO1xuICAgICAgbGJSZXN1bHRzV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LXJlc3VsdHMtd3JhcHBlcicpO1xuICAgICAgbGJSZXN1bHRzTGlzdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LXJlc3VsdHMtbGlzdCcpO1xuICAgICAgbGJIZWFkZXJzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtcmVzdWx0cy1oZWFkZXJzJyk7XG4gICAgICBsYkhlYWRlcnNSYW5rLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtcmVzdWx0cy1oZWFkZXItcmFuaycpO1xuICAgICAgbGJIZWFkZXJzUG9pbnRzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtcmVzdWx0cy1oZWFkZXItcG9pbnRzJyk7XG5cbiAgICAgIGxiUmVzdWx0c01lbUVudHJ5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtbWVtLWVudHJ5Jyk7XG5cbiAgICAgIGxiRGF0ZUxhYmVsLmlubmVySFRNTCA9IGxhYmVsO1xuICAgICAgbGJEYXRlLmlubmVySFRNTCA9IGRhdGU7XG5cbiAgICAgIGxiRGF0ZVdyYXBwZXIuYXBwZW5kQ2hpbGQobGJEYXRlTGFiZWwpO1xuICAgICAgbGJEYXRlV3JhcHBlci5hcHBlbmRDaGlsZChsYkRhdGUpO1xuXG4gICAgICBxdWVyeShsYlJlc3VsdHNNZW1FbnRyeSwgJy5jbC13aWRnZXQtbXMtZGVmYXVsdC1tZW0tcmFuaycpLmlubmVySFRNTCA9ICctLSc7XG4gICAgICBxdWVyeShsYlJlc3VsdHNNZW1FbnRyeSwgJy5jbC13aWRnZXQtbXMtZGVmYXVsdC1tZW0tcG9pbnRzJykuaW5uZXJIVE1MID0gJy0tJztcblxuICAgICAgaW1nLnNyYyA9ICcnO1xuICAgICAgaW1nLmFsdCA9ICcnO1xuICAgICAgaW1nLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICBsYkhlYWRlcnNSYW5rLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnJhbms7XG4gICAgICBsYkhlYWRlcnNQb2ludHMuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucG9pbnRzO1xuXG4gICAgICBsYkhlYWRlcnMuYXBwZW5kQ2hpbGQobGJIZWFkZXJzUmFuayk7XG4gICAgICBsYkhlYWRlcnMuYXBwZW5kQ2hpbGQobGJIZWFkZXJzUG9pbnRzKTtcbiAgICAgIGxiUmVzdWx0c0xpc3QuYXBwZW5kQ2hpbGQobGJSZXN1bHRzTWVtRW50cnkpO1xuICAgICAgbGJSZXN1bHRzV3JhcHBlci5hcHBlbmRDaGlsZChsYkhlYWRlcnMpO1xuICAgICAgbGJSZXN1bHRzV3JhcHBlci5hcHBlbmRDaGlsZChsYlJlc3VsdHNMaXN0KTtcblxuICAgICAgbGJXcmFwcGVyLmFwcGVuZENoaWxkKGxiRGF0ZVdyYXBwZXIpO1xuICAgICAgbGJXcmFwcGVyLmFwcGVuZENoaWxkKGxiUmVzdWx0c1dyYXBwZXIpO1xuXG4gICAgICBkZWZhdWx0RG9tT2JqID0gd3JhcHBlckRvbU9iai5hcHBlbmRDaGlsZChsYldyYXBwZXIpO1xuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkQ2xhc3Mod3JhcHBlckRvbU9iaiwgJ2NsLXNob3cnKTtcbiAgICAgIH0sIDIwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghaGFzQ2xhc3Mod3JhcHBlckRvbU9iaiwgJ2NsLXNob3cnKSkge1xuICAgICAgICBhZGRDbGFzcyh3cmFwcGVyRG9tT2JqLCAnY2wtc2hvdycpO1xuICAgICAgfVxuXG4gICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtcmVzdWx0cy1oZWFkZXItcmFuaycpLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnJhbms7XG4gICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtcmVzdWx0cy1oZWFkZXItcG9pbnRzJykuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucG9pbnRzO1xuICAgICAgcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1kZWZhdWx0LWRhdGUtbGFiZWwnKS5pbm5lckhUTUwgPSBsYWJlbDtcbiAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZGVmYXVsdC1kYXRlJykuaW5uZXJIVE1MID0gZGF0ZTtcbiAgICB9XG4gICAgYWRkQ2xhc3MocXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1kZWZhdWx0LWRhdGUtd3JhcHBlcicpLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtZGF0ZS1vbmx5Jyk7XG5cbiAgICBtYXBPYmplY3QoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubGVhZGVyYm9hcmQubGVhZGVyYm9hcmREYXRhLCBmdW5jdGlvbiAobGJFbnRyeSkge1xuICAgICAgaWYgKChsYkVudHJ5Lm1lbWJlclJlZklkID09PSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCB8fCBsYkVudHJ5Lm1lbWJlcklkID09PSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCkpIHtcbiAgICAgICAgdmFyIHNjb3JlQXJlYSA9IHF1ZXJ5KGRlZmF1bHREb21PYmosICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtcmVzdWx0cy1saXN0Jyk7XG4gICAgICAgIHNjb3JlQXJlYS5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtZGF0ZS1sYWJlbCcpLmlubmVySFRNTCA9IGxhYmVsO1xuICAgICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtZGF0ZScpLmlubmVySFRNTCA9IGRhdGU7XG5cbiAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmxlYWRlcmJvYXJkLm1pbmlTY29yZUJvYXJkLmVuYWJsZVJhbmtpbmdzICYmIHR5cGVvZiBsYkVudHJ5LnJhbmtpbmdzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIG1hcE9iamVjdChsYkVudHJ5LnJhbmtpbmdzLCBmdW5jdGlvbiAobGJSYW5raW5nRW50cnkpIHtcbiAgICAgICAgICAgIHNjb3JlQXJlYS5hcHBlbmRDaGlsZChfdGhpcy5sYXlvdXREZWZhdWx0T3JFbXB0eVNpbmdsZVJvdyhsYlJhbmtpbmdFbnRyeSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjb3JlQXJlYS5hcHBlbmRDaGlsZChfdGhpcy5sYXlvdXREZWZhdWx0T3JFbXB0eVNpbmdsZVJvdyhsYkVudHJ5KSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0ZXN0TGl2ZSA9IHRydWU7XG5cbiAgICAgICAgLy8gIHZhciBsYXN0U2NvcmUgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsIFwiLmNsLXdpZGdldC1tcy1kZWZhdWx0LWxhc3Qtc2NvcmVcIikuaW5uZXJIVE1MLFxuICAgICAgICAvLyAgaGlnaFNjb3JlID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCBcIi5jbC13aWRnZXQtbXMtZGVmYXVsdC1oaWdoLXNjb3JlXCIpLmlubmVySFRNTCxcbiAgICAgICAgLy8gIHJhbmsgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsIFwiLmNsLXdpZGdldC1tcy1kZWZhdWx0LXJhbmstdmFsdWVcIiksXG4gICAgICAgIC8vICBjaGFuZ2UgPSAobGJFbnRyeS5jaGFuZ2UgPCAwKSA/IFwiZG93blwiIDogKCBsYkVudHJ5LmNoYW5nZSA+IDAgPyBcInVwXCIgOiBcInNhbWVcIiApLFxuICAgICAgICAvLyAgcmFua1ZhbHVlID0gbGJFbnRyeS5yYW5rO1xuICAgICAgICAvL1xuICAgICAgICAvLyBpZiggbGFzdFNjb3JlICE9PSBTdHJpbmcobGJFbnRyeS5wb2ludHMpICYmIFN0cmluZyhsYkVudHJ5LnBvaW50cykgIT09IGhpZ2hTY29yZSApe1xuICAgICAgICAvLyAgcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCBcIi5jbC13aWRnZXQtbXMtZGVmYXVsdC1sYXN0LXNjb3JlXCIpLmlubmVySFRNTCA9IGhpZ2hTY29yZTtcbiAgICAgICAgLy8gfVxuICAgICAgICAvL1xuICAgICAgICAvLyBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsIFwiLmNsLXdpZGdldC1tcy1kZWZhdWx0LWhpZ2gtc2NvcmVcIikuaW5uZXJIVE1MID0gbGJFbnRyeS5wb2ludHM7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHJlbW92ZUNsYXNzKHJhbmssIFwiY2wtbXMtcmFuay11cFwiKTtcbiAgICAgICAgLy8gcmVtb3ZlQ2xhc3MocmFuaywgXCJjbC1tcy1yYW5rLWRvd25cIik7XG4gICAgICAgIC8vIHJlbW92ZUNsYXNzKHJhbmssIFwiY2wtbXMtcmFuay1zYW1lXCIpO1xuICAgICAgICAvL1xuICAgICAgICAvLyBhZGRDbGFzcyhyYW5rLCBcImNsLW1zLXJhbmstXCIgKyBjaGFuZ2UpO1xuICAgICAgICAvL1xuICAgICAgICAvLyByYW5rLmlubmVySFRNTCA9IHJhbmtWYWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChpbnZlcnNlICYmICFoYXNDbGFzcyhkZWZhdWx0RG9tT2JqLCAnY2wtaW52ZXJzZScpKSB7XG4gICAgICBhZGRDbGFzcyhkZWZhdWx0RG9tT2JqLCAnY2wtaW52ZXJzZScpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmxheW91dERlZmF1bHRPckVtcHR5U2luZ2xlUm93ID0gZnVuY3Rpb24gKGxiRW50cnkpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBpY29uID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQucG9wdWxhdGVJZGVudGljb25CYXNlNjRJbWFnZShsYkVudHJ5Lm1lbWJlcklkKTtcbiAgICB2YXIgbGJXcmFwcGVyID0gX3RoaXMubGF5b3V0RGVmYXVsdE9yRW1wdHlFbnRyeSgpO1xuICAgIHZhciBpbWcgPSBxdWVyeShsYldyYXBwZXIsICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtbWVtLWltZycpO1xuICAgIHZhciBzZWxmTWVtYmVyID0gKChsYkVudHJ5Lm1lbWJlclJlZklkID09PSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCB8fCBsYkVudHJ5Lm1lbWJlcklkID09PSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCkpO1xuICAgIHZhciBmb3JtYXR0ZWRQb2ludHMgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5sZWFkZXJib2FyZC5wb2ludHNGb3JtYXR0ZXIobGJFbnRyeS5wb2ludHMpO1xuXG4gICAgaW1nLnNyYyA9IGljb247XG4gICAgaW1nLmFsdCA9ICcnO1xuICAgIGltZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgIGlmIChzZWxmTWVtYmVyKSB7XG4gICAgICBhZGRDbGFzcyhsYldyYXBwZXIsICdjbC13aWRnZXQtbXMtZGVmYXVsdC1tZW0tc2VsZicpO1xuICAgIH1cblxuICAgIHF1ZXJ5KGxiV3JhcHBlciwgJy5jbC13aWRnZXQtbXMtZGVmYXVsdC1tZW0tbGFiZWwnKS5pbm5lckhUTUwgPSBzZWxmTWVtYmVyID8gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQueW91IDogJyc7XG4gICAgcXVlcnkobGJXcmFwcGVyLCAnLmNsLXdpZGdldC1tcy1kZWZhdWx0LW1lbS1yYW5rJykuaW5uZXJIVE1MID0gXCI8c3BhbiBjbGFzcz0nY2wtbWVtLXJhbmstbGFiZWwnPlwiICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucmFuayArIFwiPC9zcGFuPjxzcGFuIGNsYXNzPSdjbC1tZW0tcmFuayc+XCIgKyBsYkVudHJ5LnJhbmsgKyAnPC9zcGFuPic7XG4gICAgcXVlcnkobGJXcmFwcGVyLCAnLmNsLXdpZGdldC1tcy1kZWZhdWx0LW1lbS1wb2ludHMnKS5pbm5lckhUTUwgPSBcIjxzcGFuIGNsYXNzPSdjbC1tZW0tcG9pbnRzLWxhYmVsJz5cIiArIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnBvaW50cyArIFwiPC9zcGFuPjxzcGFuIGNsYXNzPSdjbC1tZW0tcG9pbnRzJz5cIiArIGZvcm1hdHRlZFBvaW50cyArICc8L3NwYW4+JztcblxuICAgIHJldHVybiBsYldyYXBwZXI7XG4gIH07XG5cbiAgdGhpcy5sYXlvdXRGaXJzdFRvT3JFbXB0eSA9IGZ1bmN0aW9uIChzdHJhdGVneSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHRpbWVNYW5hZ2VtZW50ID0gX3RoaXMudGltZU1hbmFnZW1lbnQoKTtcbiAgICAvLyB2YXIgZGlmZiA9IHRpbWVNYW5hZ2VtZW50LmRpZmY7XG4gICAgdmFyIGxhYmVsID0gdGltZU1hbmFnZW1lbnQubGFiZWw7XG4gICAgdmFyIGRhdGUgPSB0aW1lTWFuYWdlbWVudC5kYXRlO1xuICAgIHZhciB3cmFwcGVyRG9tT2JqID0gX3RoaXMuc2V0dGluZ3MuaW5mb0NvbnRhaW5lcjtcbiAgICB2YXIgZGVmYXVsdERvbU9iaiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZmlyc3QtdG8td3JhcHBlcicpO1xuICAgIHZhciBpbnZlcnNlID0gdGltZU1hbmFnZW1lbnQuaW52ZXJzZTtcblxuICAgIGlmIChkZWZhdWx0RG9tT2JqID09PSBudWxsKSB7XG4gICAgICBfdGhpcy5yZW1vdmVVbnVzZWRFbGVtZW50cygpO1xuXG4gICAgICBhZGRDbGFzcyhfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICdjbC1tcy1maXJzdC10by1zdHlsZScpO1xuXG4gICAgICB2YXIgbGJXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbGJEYXRlV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdmFyIGxiRGF0ZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbGJEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbGJSZXN1bHRzV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdmFyIGxiUmVzdWx0c0xpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBsYkhlYWRlcnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBsYkhlYWRlcnNSYW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbGJIZWFkZXJzUG9pbnRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbGJSZXN1bHRzTWVtRW50cnkgPSBfdGhpcy5sYXlvdXRGaXJzdFRvT3JFbXB0eUVudHJ5KCk7XG4gICAgICB2YXIgaW1nID0gcXVlcnkobGJSZXN1bHRzTWVtRW50cnksICcuY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1pbWcnKTtcblxuICAgICAgbGJXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLXdyYXBwZXInKTtcbiAgICAgIGxiRGF0ZUxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLWRhdGUtbGFiZWwnKTtcbiAgICAgIGxiRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1maXJzdC10by1kYXRlJyk7XG4gICAgICBsYkRhdGVXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLWRhdGUtd3JhcHBlcicpO1xuICAgICAgbGJSZXN1bHRzV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1maXJzdC10by1yZXN1bHRzLXdyYXBwZXInKTtcbiAgICAgIGxiUmVzdWx0c0xpc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tcmVzdWx0cy1saXN0Jyk7XG4gICAgICBsYkhlYWRlcnMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tcmVzdWx0cy1oZWFkZXJzJyk7XG4gICAgICBsYkhlYWRlcnNSYW5rLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLXJlc3VsdHMtaGVhZGVyLXJhbmsnKTtcbiAgICAgIGxiSGVhZGVyc1BvaW50cy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1maXJzdC10by1yZXN1bHRzLWhlYWRlci1wb2ludHMnKTtcblxuICAgICAgbGJSZXN1bHRzTWVtRW50cnkuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLWVudHJ5Jyk7XG5cbiAgICAgIC8vIGxiRGF0ZUxhYmVsLmlubmVySFRNTCA9IGxhYmVsO1xuICAgICAgbGJEYXRlLmlubmVySFRNTCA9IGxhYmVsO1xuXG4gICAgICBsYkRhdGVXcmFwcGVyLmFwcGVuZENoaWxkKGxiRGF0ZUxhYmVsKTtcbiAgICAgIGxiRGF0ZVdyYXBwZXIuYXBwZW5kQ2hpbGQobGJEYXRlKTtcblxuICAgICAgcXVlcnkobGJSZXN1bHRzTWVtRW50cnksICcuY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1yYW5rJykuaW5uZXJIVE1MID0gJy0tJztcbiAgICAgIHF1ZXJ5KGxiUmVzdWx0c01lbUVudHJ5LCAnLmNsLXdpZGdldC1tcy1maXJzdC10by1tZW0tcG9pbnRzJykuaW5uZXJIVE1MID0gJy0tLycgKyBzdHJhdGVneS5yZWNvcmRUaW1lV2hlblN1bVJlYWNoZXM7XG5cbiAgICAgIGltZy5zcmMgPSAnJztcbiAgICAgIGltZy5hbHQgPSAnJztcbiAgICAgIGltZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgICAgbGJIZWFkZXJzUmFuay5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5sZWFkZXJib2FyZC5yYW5rO1xuICAgICAgbGJIZWFkZXJzUG9pbnRzLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnBvaW50cztcblxuICAgICAgbGJIZWFkZXJzLmFwcGVuZENoaWxkKGxiSGVhZGVyc1JhbmspO1xuICAgICAgbGJIZWFkZXJzLmFwcGVuZENoaWxkKGxiSGVhZGVyc1BvaW50cyk7XG4gICAgICBsYlJlc3VsdHNMaXN0LmFwcGVuZENoaWxkKGxiUmVzdWx0c01lbUVudHJ5KTtcbiAgICAgIGxiUmVzdWx0c1dyYXBwZXIuYXBwZW5kQ2hpbGQobGJIZWFkZXJzKTtcbiAgICAgIGxiUmVzdWx0c1dyYXBwZXIuYXBwZW5kQ2hpbGQobGJSZXN1bHRzTGlzdCk7XG5cbiAgICAgIGxiV3JhcHBlci5hcHBlbmRDaGlsZChsYkRhdGVXcmFwcGVyKTtcbiAgICAgIGxiV3JhcHBlci5hcHBlbmRDaGlsZChsYlJlc3VsdHNXcmFwcGVyKTtcblxuICAgICAgZGVmYXVsdERvbU9iaiA9IHdyYXBwZXJEb21PYmouYXBwZW5kQ2hpbGQobGJXcmFwcGVyKTtcblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZENsYXNzKHdyYXBwZXJEb21PYmosICdjbC1zaG93Jyk7XG4gICAgICB9LCAyMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWhhc0NsYXNzKHdyYXBwZXJEb21PYmosICdjbC1zaG93JykpIHtcbiAgICAgICAgYWRkQ2xhc3Mod3JhcHBlckRvbU9iaiwgJ2NsLXNob3cnKTtcbiAgICAgIH1cblxuICAgICAgcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1maXJzdC10by1yZXN1bHRzLWhlYWRlci1yYW5rJykuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucmFuaztcbiAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZmlyc3QtdG8tcmVzdWx0cy1oZWFkZXItcG9pbnRzJykuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucG9pbnRzO1xuICAgICAgcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1maXJzdC10by1kYXRlLWxhYmVsJykuaW5uZXJIVE1MID0gbGFiZWw7XG4gICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLWRhdGUnKS5pbm5lckhUTUwgPSBkYXRlO1xuICAgIH1cblxuICAgIGFkZENsYXNzKHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZmlyc3QtdG8tZGF0ZS13cmFwcGVyJyksICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tZGF0ZS1vbmx5Jyk7XG5cbiAgICBtYXBPYmplY3QoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubGVhZGVyYm9hcmQubGVhZGVyYm9hcmREYXRhLCBmdW5jdGlvbiAobGJFbnRyeSkge1xuICAgICAgaWYgKChsYkVudHJ5Lm1lbWJlclJlZklkID09PSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCB8fCBsYkVudHJ5Lm1lbWJlcklkID09PSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCkpIHtcbiAgICAgICAgdmFyIHNjb3JlQXJlYSA9IHF1ZXJ5KGRlZmF1bHREb21PYmosICcuY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLXJlc3VsdHMtbGlzdCcpO1xuICAgICAgICBzY29yZUFyZWEuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmxlYWRlcmJvYXJkLm1pbmlTY29yZUJvYXJkLmVuYWJsZVJhbmtpbmdzICYmIHR5cGVvZiBsYkVudHJ5LnJhbmtpbmdzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIG1hcE9iamVjdChsYkVudHJ5LnJhbmtpbmdzLCBmdW5jdGlvbiAobGJSYW5raW5nRW50cnkpIHtcbiAgICAgICAgICAgIHNjb3JlQXJlYS5hcHBlbmRDaGlsZChfdGhpcy5sYXlvdXRGaXJzdFRvT3JFbXB0eVNpbmdsZVJvdyhsYlJhbmtpbmdFbnRyeSwgc3RyYXRlZ3kpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY29yZUFyZWEuYXBwZW5kQ2hpbGQoX3RoaXMubGF5b3V0Rmlyc3RUb09yRW1wdHlTaW5nbGVSb3cobGJFbnRyeSwgc3RyYXRlZ3kpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGludmVyc2UgJiYgIWhhc0NsYXNzKGRlZmF1bHREb21PYmosICdjbC1pbnZlcnNlJykpIHtcbiAgICAgIGFkZENsYXNzKGRlZmF1bHREb21PYmosICdjbC1pbnZlcnNlJyk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMubGF5b3V0Rmlyc3RUb09yRW1wdHlTaW5nbGVSb3cgPSBmdW5jdGlvbiAobGJFbnRyeSwgc3RyYXRlZ3kpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBpY29uID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQucG9wdWxhdGVJZGVudGljb25CYXNlNjRJbWFnZShsYkVudHJ5Lm1lbWJlcklkKTtcbiAgICB2YXIgbGJXcmFwcGVyID0gX3RoaXMubGF5b3V0Rmlyc3RUb09yRW1wdHlFbnRyeSgpO1xuICAgIHZhciBpbWcgPSBxdWVyeShsYldyYXBwZXIsICcuY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1pbWcnKTtcbiAgICB2YXIgc2VsZk1lbWJlciA9ICgobGJFbnRyeS5tZW1iZXJSZWZJZCA9PT0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQgfHwgbGJFbnRyeS5tZW1iZXJJZCA9PT0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQpKTtcbiAgICB2YXIgZm9ybWF0dGVkUG9pbnRzID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubGVhZGVyYm9hcmQucG9pbnRzRm9ybWF0dGVyKGxiRW50cnkucG9pbnRzKTtcblxuICAgIGlmIChzZWxmTWVtYmVyKSB7XG4gICAgICBhZGRDbGFzcyhsYldyYXBwZXIsICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLXNlbGYnKTtcbiAgICB9XG5cbiAgICBpbWcuc3JjID0gaWNvbjtcbiAgICBpbWcuYWx0ID0gJyc7XG4gICAgaW1nLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgcXVlcnkobGJXcmFwcGVyLCAnLmNsLXdpZGdldC1tcy1maXJzdC10by1tZW0tbGFiZWwnKS5pbm5lckhUTUwgPSBzZWxmTWVtYmVyID8gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQueW91IDogJyc7XG4gICAgcXVlcnkobGJXcmFwcGVyLCAnLmNsLXdpZGdldC1tcy1maXJzdC10by1tZW0tcmFuaycpLmlubmVySFRNTCA9IFwiPHNwYW4gY2xhc3M9J2NsLW1lbS1yYW5rLWxhYmVsJz5cIiArIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnJhbmsgKyBcIjwvc3Bhbj48c3BhbiBjbGFzcz0nY2wtbWVtLXJhbmsnPlwiICsgbGJFbnRyeS5yYW5rICsgJzwvc3Bhbj4nO1xuICAgIHF1ZXJ5KGxiV3JhcHBlciwgJy5jbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLXBvaW50cycpLmlubmVySFRNTCA9IFwiPHNwYW4gY2xhc3M9J2NsLW1lbS1wb2ludHMtbGFiZWwnPlwiICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucG9pbnRzICsgXCI8L3NwYW4+PHNwYW4gY2xhc3M9J2NsLW1lbS1wb2ludHMnPlwiICsgZm9ybWF0dGVkUG9pbnRzICsgJy8nICsgc3RyYXRlZ3kucmVjb3JkVGltZVdoZW5TdW1SZWFjaGVzICsgJzwvc3Bhbj4nO1xuXG4gICAgcmV0dXJuIGxiV3JhcHBlcjtcbiAgfTtcblxuICB0aGlzLmxheW91dFN1bUJlc3RPZiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciB0aW1lTWFuYWdlbWVudCA9IF90aGlzLnRpbWVNYW5hZ2VtZW50KCk7XG4gICAgLy8gdmFyIGRpZmYgPSB0aW1lTWFuYWdlbWVudC5kaWZmO1xuICAgIHZhciBsYWJlbCA9IHRpbWVNYW5hZ2VtZW50LmxhYmVsO1xuICAgIHZhciBkYXRlID0gdGltZU1hbmFnZW1lbnQuZGF0ZTtcbiAgICB2YXIgd3JhcHBlckRvbU9iaiA9IF90aGlzLnNldHRpbmdzLmluZm9Db250YWluZXI7XG4gICAgdmFyIHN1bUJlc3REb21PYmogPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LXdyYXBwZXInKTtcbiAgICB2YXIgaW52ZXJzZSA9IHRpbWVNYW5hZ2VtZW50LmludmVyc2U7XG5cbiAgICBpZiAoc3VtQmVzdERvbU9iaiA9PT0gbnVsbCkge1xuICAgICAgX3RoaXMucmVtb3ZlVW51c2VkRWxlbWVudHMoKTtcblxuICAgICAgdmFyIGxiV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdmFyIGxiRGF0ZVdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBsYkRhdGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdmFyIGxiRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdmFyIGxiUmVzdWx0c1dyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBsYlJlc3VsdHNTY29yZUFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBsYlJlc3VsdHNTY29yZUFyZWFIaWdoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbGJSZXN1bHRzU2NvcmVBcmVhSGlnaExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbGJSZXN1bHRzU2NvcmVBcmVhSGlnaFNjb3JlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbGJSZXN1bHRzU2NvcmVBcmVhTGFzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdmFyIGxiUmVzdWx0c1Njb3JlQXJlYUxhc3RMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdmFyIGxiUmVzdWx0c1Njb3JlQXJlYUxhc3RTY29yZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdmFyIGxiUmVzdWx0c1JhbmtBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgbGJSZXN1bHRzUmFua1ZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXG4gICAgICBsYldyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtc3VtLWJlc3Qtd3JhcHBlcicpO1xuICAgICAgbGJEYXRlTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtc3VtLWJlc3QtZGF0ZS1sYWJlbCcpO1xuICAgICAgbGJEYXRlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWRhdGUnKTtcbiAgICAgIGxiRGF0ZVdyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtc3VtLWJlc3QtZGF0ZS13cmFwcGVyJyk7XG4gICAgICBsYlJlc3VsdHNXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LXJlc3VsdHMtd3JhcHBlcicpO1xuXG4gICAgICBsYlJlc3VsdHNTY29yZUFyZWEuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtc3VtLWJlc3QtYXJlYScpO1xuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhSGlnaC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1zdW0tYmVzdC1oaWdoLWFyZWEnKTtcbiAgICAgIGxiUmVzdWx0c1Njb3JlQXJlYUhpZ2hMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1zdW0tYmVzdC1oaWdoLWxhYmVsJyk7XG4gICAgICBsYlJlc3VsdHNTY29yZUFyZWFIaWdoU2NvcmUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtc3VtLWJlc3QtaGlnaC1zY29yZScpO1xuXG4gICAgICBsYlJlc3VsdHNTY29yZUFyZWFMYXN0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWxhc3QtYXJlYScpO1xuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhTGFzdExhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWxhc3QtbGFiZWwnKTtcbiAgICAgIGxiUmVzdWx0c1Njb3JlQXJlYUxhc3RTY29yZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1zdW0tYmVzdC1sYXN0LXNjb3JlJyk7XG5cbiAgICAgIGxiUmVzdWx0c1JhbmtBcmVhLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LXJhbmstYXJlYScpO1xuICAgICAgbGJSZXN1bHRzUmFua1ZhbHVlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LXJhbmstdmFsdWUnKTtcblxuICAgICAgbGJEYXRlTGFiZWwuaW5uZXJIVE1MID0gKGRhdGUubGVuZ3RoID4gMCkgPyBkYXRlIDogbGFiZWw7XG4gICAgICBsYkRhdGUuaW5uZXJIVE1MID0gKGRhdGUubGVuZ3RoID4gMCkgPyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5taW5pTGVhZGVyYm9hcmQucmFuayA6ICcnO1xuXG4gICAgICBsYlJlc3VsdHNTY29yZUFyZWFIaWdoTGFiZWwuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubWluaUxlYWRlcmJvYXJkLmhpZ2hTY29yZTtcbiAgICAgIGxiUmVzdWx0c1Njb3JlQXJlYUhpZ2hTY29yZS5pbm5lckhUTUwgPSAnLS0nO1xuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhSGlnaC5hcHBlbmRDaGlsZChsYlJlc3VsdHNTY29yZUFyZWFIaWdoTGFiZWwpO1xuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhSGlnaC5hcHBlbmRDaGlsZChsYlJlc3VsdHNTY29yZUFyZWFIaWdoU2NvcmUpO1xuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhLmFwcGVuZENoaWxkKGxiUmVzdWx0c1Njb3JlQXJlYUhpZ2gpO1xuXG4gICAgICBsYlJlc3VsdHNTY29yZUFyZWFMYXN0TGFiZWwuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubWluaUxlYWRlcmJvYXJkLmxhc3RTY29yZTtcbiAgICAgIGxiUmVzdWx0c1Njb3JlQXJlYUxhc3RTY29yZS5pbm5lckhUTUwgPSAnLS0nO1xuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhTGFzdC5hcHBlbmRDaGlsZChsYlJlc3VsdHNTY29yZUFyZWFMYXN0TGFiZWwpO1xuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhTGFzdC5hcHBlbmRDaGlsZChsYlJlc3VsdHNTY29yZUFyZWFMYXN0U2NvcmUpO1xuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhLmFwcGVuZENoaWxkKGxiUmVzdWx0c1Njb3JlQXJlYUxhc3QpO1xuXG4gICAgICBsYlJlc3VsdHNSYW5rVmFsdWUuaW5uZXJIVE1MID0gJy0tJztcbiAgICAgIGxiUmVzdWx0c1JhbmtBcmVhLmFwcGVuZENoaWxkKGxiUmVzdWx0c1JhbmtWYWx1ZSk7XG5cbiAgICAgIGxiUmVzdWx0c1dyYXBwZXIuYXBwZW5kQ2hpbGQobGJSZXN1bHRzU2NvcmVBcmVhKTtcbiAgICAgIGxiUmVzdWx0c1dyYXBwZXIuYXBwZW5kQ2hpbGQobGJSZXN1bHRzUmFua0FyZWEpO1xuXG4gICAgICBsYkRhdGVXcmFwcGVyLmFwcGVuZENoaWxkKGxiRGF0ZUxhYmVsKTtcbiAgICAgIGxiRGF0ZVdyYXBwZXIuYXBwZW5kQ2hpbGQobGJEYXRlKTtcblxuICAgICAgbGJXcmFwcGVyLmFwcGVuZENoaWxkKGxiRGF0ZVdyYXBwZXIpO1xuICAgICAgbGJXcmFwcGVyLmFwcGVuZENoaWxkKGxiUmVzdWx0c1dyYXBwZXIpO1xuXG4gICAgICBzdW1CZXN0RG9tT2JqID0gd3JhcHBlckRvbU9iai5hcHBlbmRDaGlsZChsYldyYXBwZXIpO1xuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkQ2xhc3Mod3JhcHBlckRvbU9iaiwgJ2NsLXNob3cnKTtcbiAgICAgIH0sIDIwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghaGFzQ2xhc3Mod3JhcHBlckRvbU9iaiwgJ2NsLXNob3cnKSkge1xuICAgICAgICBhZGRDbGFzcyh3cmFwcGVyRG9tT2JqLCAnY2wtc2hvdycpO1xuICAgICAgfVxuICAgICAgcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1zdW0tYmVzdC1oaWdoLWxhYmVsJykuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubWluaUxlYWRlcmJvYXJkLmhpZ2hTY29yZTtcbiAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtc3VtLWJlc3QtbGFzdC1sYWJlbCcpLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLm1pbmlMZWFkZXJib2FyZC5sYXN0U2NvcmU7XG4gICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWRhdGUtbGFiZWwnKS5pbm5lckhUTUwgPSAoZGF0ZS5sZW5ndGggPiAwKSA/IGRhdGUgOiBsYWJlbDtcbiAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtc3VtLWJlc3QtZGF0ZScpLmlubmVySFRNTCA9IChkYXRlLmxlbmd0aCA+IDApID8gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubWluaUxlYWRlcmJvYXJkLnJhbmsgOiAnJztcbiAgICB9XG5cbiAgICBtYXBPYmplY3QoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubGVhZGVyYm9hcmQubGVhZGVyYm9hcmREYXRhLCBmdW5jdGlvbiAobGJFbnRyeSkge1xuICAgICAgaWYgKGxiRW50cnkubWVtYmVyUmVmSWQgPT09IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm1lbWJlcklkIHx8IGxiRW50cnkubWVtYmVySWQgPT09IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm1lbWJlcklkKSB7XG4gICAgICAgIHZhciBsYXN0U2NvcmUgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWxhc3Qtc2NvcmUnKS5pbm5lckhUTUw7XG4gICAgICAgIHZhciBoaWdoU2NvcmUgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWhpZ2gtc2NvcmUnKS5pbm5lckhUTUw7XG4gICAgICAgIHZhciByYW5rID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1zdW0tYmVzdC1yYW5rLXZhbHVlJyk7XG4gICAgICAgIHZhciBjaGFuZ2UgPSAobGJFbnRyeS5jaGFuZ2UgPCAwKSA/ICdkb3duJyA6IChsYkVudHJ5LmNoYW5nZSA+IDAgPyAndXAnIDogJ3NhbWUnKTtcbiAgICAgICAgdmFyIHJhbmtWYWx1ZSA9IGxiRW50cnkucmFuaztcbiAgICAgICAgdmFyIGZvcm1hdHRlZFBvaW50cyA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmxlYWRlcmJvYXJkLnBvaW50c0Zvcm1hdHRlcihsYkVudHJ5LnBvaW50cyk7XG5cbiAgICAgICAgaWYgKGxhc3RTY29yZSAhPT0gU3RyaW5nKGxiRW50cnkucG9pbnRzKSAmJiBTdHJpbmcobGJFbnRyeS5wb2ludHMpICE9PSBoaWdoU2NvcmUpIHtcbiAgICAgICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWxhc3Qtc2NvcmUnKS5pbm5lckhUTUwgPSBoaWdoU2NvcmU7XG4gICAgICAgIH1cblxuICAgICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWhpZ2gtc2NvcmUnKS5pbm5lckhUTUwgPSBmb3JtYXR0ZWRQb2ludHM7XG5cbiAgICAgICAgcmVtb3ZlQ2xhc3MocmFuaywgJ2NsLW1zLXJhbmstdXAnKTtcbiAgICAgICAgcmVtb3ZlQ2xhc3MocmFuaywgJ2NsLW1zLXJhbmstZG93bicpO1xuICAgICAgICByZW1vdmVDbGFzcyhyYW5rLCAnY2wtbXMtcmFuay1zYW1lJyk7XG5cbiAgICAgICAgYWRkQ2xhc3MocmFuaywgJ2NsLW1zLXJhbmstJyArIGNoYW5nZSk7XG5cbiAgICAgICAgcmFuay5pbm5lckhUTUwgPSByYW5rVmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoaW52ZXJzZSAmJiAhaGFzQ2xhc3Moc3VtQmVzdERvbU9iaiwgJ2NsLWludmVyc2UnKSkge1xuICAgICAgYWRkQ2xhc3Moc3VtQmVzdERvbU9iaiwgJ2NsLWludmVyc2UnKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5sYXlvdXRSZXF1aXJlc09wdEluID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHN0YXJ0RGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc2NoZWR1bGVkU3RhcnQ7XG4gICAgaWYgKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LmFjdHVhbFN0YXJ0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgc3RhcnREYXRlID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5hY3R1YWxTdGFydDtcbiAgICB9XG4gICAgdmFyIGRpZmYgPSBtb21lbnQoc3RhcnREYXRlKS5kaWZmKG1vbWVudCgpKTtcbiAgICB2YXIgbGFiZWwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5taW5pTGVhZGVyYm9hcmQuc3RhcnRzSW47XG4gICAgdmFyIHdyYXBwZXJEb21PYmogPSBfdGhpcy5zZXR0aW5ncy5pbmZvQ29udGFpbmVyO1xuICAgIHZhciBkYXRlID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuZm9ybWF0RGF0ZVRpbWUobW9tZW50LmR1cmF0aW9uKGRpZmYpKTtcblxuICAgIGlmIChkaWZmIDw9IDAgJiYgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zdGF0dXNDb2RlID09PSAwKSB7XG4gICAgICBsYWJlbCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLm1pbmlMZWFkZXJib2FyZC5zdGFydGluZztcbiAgICAgIGRhdGUgPSAnJztcbiAgICB9IGVsc2UgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RhdHVzQ29kZSA9PT0gMSkge1xuICAgICAgbGFiZWwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5taW5pTGVhZGVyYm9hcmQuc3RhcnRpbmc7XG4gICAgICBkYXRlID0gJyc7XG4gICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnN0YXR1c0NvZGUgPT09IDIpIHtcbiAgICAgIGRpZmYgPSBtb21lbnQoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zY2hlZHVsZWRFbmQpLmRpZmYobW9tZW50KCkpO1xuICAgICAgbGFiZWwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5taW5pTGVhZGVyYm9hcmQuc3RhcnRlZDtcbiAgICAgIGRhdGUgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5mb3JtYXREYXRlVGltZShtb21lbnQuZHVyYXRpb24oZGlmZikpO1xuXG4gICAgICBpZiAoZGlmZiA8PSAwKSB7XG4gICAgICAgIGxhYmVsID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24udG91cm5hbWVudHMuZmluaXNoaW5nO1xuICAgICAgICBkYXRlID0gJyc7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnN0YXR1c0NvZGUgPT09IDMpIHtcbiAgICAgIGxhYmVsID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubWluaUxlYWRlcmJvYXJkLmZpbmlzaGluZztcbiAgICAgIGRhdGUgPSAnJztcbiAgICB9IGVsc2UgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RhdHVzQ29kZSA+PSA0KSB7XG4gICAgICBsYWJlbCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLm1pbmlMZWFkZXJib2FyZC5maW5pc2hlZDtcbiAgICAgIGRhdGUgPSAnJztcbiAgICB9XG5cbiAgICBpZiAocXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1vcHRpbi13cmFwcGVyJykgPT09IG51bGwpIHtcbiAgICAgIF90aGlzLnJlbW92ZVVudXNlZEVsZW1lbnRzKCk7XG5cbiAgICAgIHZhciBvcHRJbldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBvcHRJbkRhdGVXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgb3B0SW5EYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBvcHRJbkRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBvcHRJbkRhdGVBY3Rpb25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgb3B0SW5EYXRlQWN0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXG4gICAgICBvcHRJbldyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtb3B0aW4td3JhcHBlcicpO1xuICAgICAgb3B0SW5EYXRlTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtb3B0aW4tZGF0ZS1sYWJlbCcpO1xuICAgICAgb3B0SW5EYXRlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLW9wdGluLWRhdGUnKTtcbiAgICAgIG9wdEluRGF0ZVdyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtb3B0aW4tZGF0ZS13cmFwcGVyJyk7XG4gICAgICBvcHRJbkRhdGVBY3Rpb25XcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLW9wdGluLWFjdGlvbi13cmFwcGVyJyk7XG4gICAgICBvcHRJbkRhdGVBY3Rpb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtb3B0aW4tYWN0aW9uJyk7XG5cbiAgICAgIG9wdEluRGF0ZUxhYmVsLmlubmVySFRNTCA9IGxhYmVsO1xuICAgICAgb3B0SW5EYXRlLmlubmVySFRNTCA9IGRhdGU7XG4gICAgICBvcHRJbkRhdGVBY3Rpb24uaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24udG91cm5hbWVudHMuZW50ZXI7XG5cbiAgICAgIG9wdEluRGF0ZVdyYXBwZXIuYXBwZW5kQ2hpbGQob3B0SW5EYXRlTGFiZWwpO1xuICAgICAgb3B0SW5EYXRlV3JhcHBlci5hcHBlbmRDaGlsZChvcHRJbkRhdGUpO1xuXG4gICAgICBvcHRJbkRhdGVBY3Rpb25XcmFwcGVyLmFwcGVuZENoaWxkKG9wdEluRGF0ZUFjdGlvbik7XG4gICAgICBvcHRJbldyYXBwZXIuYXBwZW5kQ2hpbGQob3B0SW5EYXRlV3JhcHBlcik7XG4gICAgICBvcHRJbldyYXBwZXIuYXBwZW5kQ2hpbGQob3B0SW5EYXRlQWN0aW9uV3JhcHBlcik7XG5cbiAgICAgIHdyYXBwZXJEb21PYmouYXBwZW5kQ2hpbGQob3B0SW5XcmFwcGVyKTtcblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZENsYXNzKHdyYXBwZXJEb21PYmosICdjbC1zaG93Jyk7XG4gICAgICB9LCAyMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWhhc0NsYXNzKHdyYXBwZXJEb21PYmosICdjbC1zaG93JykpIHtcbiAgICAgICAgYWRkQ2xhc3Mod3JhcHBlckRvbU9iaiwgJ2NsLXNob3cnKTtcbiAgICAgIH1cbiAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtb3B0aW4tYWN0aW9uJykuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24udG91cm5hbWVudHMuZW50ZXI7XG4gICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLW9wdGluLWRhdGUtbGFiZWwnKS5pbm5lckhUTUwgPSBsYWJlbDtcbiAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtb3B0aW4tZGF0ZScpLmlubmVySFRNTCA9IGRhdGU7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucmVtb3ZlVW51c2VkRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgZGVmYXVsdExheW91dFdyYXBwZXJEb21PYmogPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtd3JhcHBlcicpO1xuICAgIHZhciBvcHRJbldyYXBwZXJEb21PYmogPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLW9wdGluLXdyYXBwZXInKTtcbiAgICB2YXIgc3VtQmVzdERvbU9iaiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtc3VtLWJlc3Qtd3JhcHBlcicpO1xuICAgIHZhciBmaXJzdFRvRG9tT2JqID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1maXJzdC10by13cmFwcGVyJyk7XG5cbiAgICByZW1vdmVDbGFzcyhfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICdjbC1tcy1kZWZhdWx0LXN0eWxlJyk7XG4gICAgcmVtb3ZlQ2xhc3MoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnY2wtbXMtb3B0aW4tc3R5bGUnKTtcbiAgICByZW1vdmVDbGFzcyhfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICdjbC1tcy1zdW0tYmVzdC1zdHlsZScpO1xuICAgIHJlbW92ZUNsYXNzKF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJ2NsLW1zLWZpcnN0LXRvLXN0eWxlJyk7XG5cbiAgICBpZiAoZGVmYXVsdExheW91dFdyYXBwZXJEb21PYmogIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZShkZWZhdWx0TGF5b3V0V3JhcHBlckRvbU9iaik7XG4gICAgfVxuXG4gICAgaWYgKG9wdEluV3JhcHBlckRvbU9iaiAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlKG9wdEluV3JhcHBlckRvbU9iaik7XG4gICAgfVxuXG4gICAgaWYgKHN1bUJlc3REb21PYmogIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZShzdW1CZXN0RG9tT2JqKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RUb0RvbU9iaiAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlKGZpcnN0VG9Eb21PYmopO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmNsZWFyQWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MudXBkYXRlSW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy51cGRhdGVJbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgX3RoaXMucmVtb3ZlSW5mb0FyZWEoKTtcblxuICAgIF90aGlzLnNldHRpbmdzLmFjdGl2ZSA9IGZhbHNlO1xuICB9O1xuXG4gIHZhciByZW1vdmVJbmZvQXJlYUludGVydmFsO1xuICB0aGlzLnJlbW92ZUluZm9BcmVhID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHdyYXBwZXJEb21PYmogPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtc2hvdycpO1xuICAgIHZhciBsYXlvdXQgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtd3JhcHBlcicpO1xuXG4gICAgaWYgKHdyYXBwZXJEb21PYmogIT09IG51bGwpIHJlbW92ZUNsYXNzKHdyYXBwZXJEb21PYmosICdjbC1zaG93Jyk7XG5cbiAgICBpZiAobGF5b3V0ICE9PSBudWxsKSB7XG4gICAgICBpZiAocmVtb3ZlSW5mb0FyZWFJbnRlcnZhbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQocmVtb3ZlSW5mb0FyZWFJbnRlcnZhbCk7XG4gICAgICB9XG4gICAgICByZW1vdmVJbmZvQXJlYUludGVydmFsID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZShsYXlvdXQpO1xuICAgICAgfSwgMjAwKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy51cGRhdGVTY29yZUJvYXJkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MudXBkYXRlSW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy51cGRhdGVJbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgX3RoaXMuc2V0dGluZ3MudXBkYXRlSW50ZXJ2YWwgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmxvYWRJbmZvQXJlYShmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnVwZGF0ZVNjb3JlQm9hcmQoKTtcbiAgICAgIH0pO1xuICAgIH0sIF90aGlzLnNldHRpbmdzLnVwZGF0ZUludGVydmFsVGltZSk7XG4gIH07XG5cbiAgdGhpcy5sb2FkSW5mb0FyZWEgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmFjdGl2ZSAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbiAhPT0gbnVsbCAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5zdGF0dXNDb2RlIDwgNykge1xuICAgICAgaWYgKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5vcHRpblJlcXVpcmVkID09PSAnYm9vbGVhbicgJiYgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW5SZXF1aXJlZCAmJiB0eXBlb2YgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4gPT09ICdib29sZWFuJyAmJiAhX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4pIHtcbiAgICAgICAgX3RoaXMubGF5b3V0UmVxdWlyZXNPcHRJbigpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0ICE9PSBudWxsICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RyYXRlZ3kudHlwZSA9PT0gJ1N1bUJlc3QnKSB7XG4gICAgICAgIF90aGlzLmxheW91dFN1bUJlc3RPZigpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0ICE9PSBudWxsICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RyYXRlZ3kudHlwZSA9PT0gJ0ZpcnN0VG8nKSB7XG4gICAgICAgIF90aGlzLmxheW91dEZpcnN0VG9PckVtcHR5KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RyYXRlZ3kpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0SWQgIT09IG51bGwpIHtcbiAgICAgICAgX3RoaXMubGF5b3V0RGVmYXVsdE9yRW1wdHkoKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLmxheW91dERlZmF1bHRPckVtcHR5KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmNsZWFyQWxsKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5sYXlvdXQuZW5hYmxlTWluaVNjb3JlQm9hcmREcmFnZ2luZykge1xuICAgICAgZHJhZ0VsZW1lbnQoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWljb24nKSwgX3RoaXMuc2V0dGluZ3Mub3ZlcmxheUNvbnRhaW5lciwgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuYmluZENvbnRhaW5lciwgZnVuY3Rpb24gKG5ld1RvcCwgbmV3TGVmdCkge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zdG9wQWN0aXZpdHkoKTtcblxuICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubGF5b3V0LmFsbG93T3JpZW50YXRpb25DaGFuZ2UpIHtcbiAgICAgICAgICBpZiAobmV3VG9wIDw9IDUpIHtcbiAgICAgICAgICAgIGFkZENsYXNzKF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgX3RoaXMuc2V0dGluZ3MudmVydGljYWxDbGFzcyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChuZXdMZWZ0IDw9IDUpIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgX3RoaXMuc2V0dGluZ3MudmVydGljYWxDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmRyYWdnaW5nID0gdHJ1ZTtcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQucmVzdGFydEFjdGl2aXR5KCk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnNldHRpbmdzLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIH0sIDIwMCk7XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmNsaWNrZWRNaW5pU2NvcmVCb2FyZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaW5pdExheW91dCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5hY3RpdmUgPSB0cnVlO1xuICAgICAgX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuYmluZENvbnRhaW5lci5hcHBlbmRDaGlsZChfdGhpcy5sYXlvdXQoKSk7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5vdmVybGF5Q29udGFpbmVyID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuYmluZENvbnRhaW5lci5hcHBlbmRDaGlsZChfdGhpcy5vdmVybGF5TGF5b3V0KCkpO1xuICAgICAgX3RoaXMuc2V0dGluZ3MuaW5mb0NvbnRhaW5lciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtaW5mb3JtYXRpb24td3JhcHBlcicpO1xuXG4gICAgICBfdGhpcy5ldmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMubG9hZFNjb3JlQm9hcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLmluaXRMYXlvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMubG9hZEluZm9BcmVhKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMudXBkYXRlU2NvcmVCb2FyZCgpO1xuICAgICAgfSk7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy51cGRhdGVTY29yZUJvYXJkKCk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9KTtcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyBNZXNzYWdpbmcgfSBmcm9tICcuL01lc3NhZ2luZyc7XG5pbXBvcnQgbWFwT2JqZWN0IGZyb20gJy4uL3V0aWxzL21hcE9iamVjdCc7XG5pbXBvcnQgcmVtb3ZlQ2xhc3MgZnJvbSAnLi4vdXRpbHMvcmVtb3ZlQ2xhc3MnO1xuaW1wb3J0IHF1ZXJ5IGZyb20gJy4uL3V0aWxzL3F1ZXJ5JztcbmltcG9ydCBzdHJpcEh0bWwgZnJvbSAnLi4vdXRpbHMvc3RyaXBIdG1sJztcbmltcG9ydCBhZGRDbGFzcyBmcm9tICcuLi91dGlscy9hZGRDbGFzcyc7XG5cbi8qKlxuICogTm90aWZpY2F0aW9ucyBsZWFkZXJib2FyZCB3aWRnZXRcbiAqIEBwYXJhbSBvcHRpb25zIHtPYmplY3R9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGNvbnN0IE5vdGlmaWNhdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAvKipcbiAgICogTm90aWZpY2F0aW9ucyBzZXR0aW5nc1xuICAgKiBAbWVtYmVyT2YgTm90aWZpY2F0aW9uc1xuICAgKiBAY29uc3RhbnRcbiAgICogQHR5cGUgeyBPYmplY3QgfVxuICAgKi9cbiAgdGhpcy5zZXR0aW5ncyA9IHtcbiAgICBjb250YWluZXI6IG51bGwsXG4gICAgZGV0YWlsc0NvbnRhaW5lcjogbnVsbCxcbiAgICBjYW52YXNJbnN0YW5jZTogbnVsbCxcbiAgICBsYldpZGdldDogbnVsbCxcbiAgICBldmVudFN0cmVhbTogW10sXG4gICAgY2hlY2tUaW1lb3V0OiAyMDAwLFxuICAgIG9uRGlzcGxheUNoZWNrVGltZW91dDogMTAwMDAsXG4gICAgY2hlY2tJbnRlcnZhbDogbnVsbCxcbiAgICBhdXRvTm90aWZpY2F0aW9uSGlkZUludGVydmFsOiBudWxsLFxuICAgIGF1dG9Ob3RpZmljYXRpb25IaWRlVGltZTogMTAwMDAsXG4gICAgZGlzcGxheUluUHJvZ3Jlc3M6IGZhbHNlLFxuICAgIGRhdGFFeHRyYWN0aW9uRm9yQ2FudmFzOiBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2YgZGF0YS5tZXRhZGF0YSAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YS5tZXRhZGF0YS5sZW5ndGggPiAwICYmIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgbWFwT2JqZWN0KGRhdGEubWV0YWRhdGEsIGZ1bmN0aW9uIChtZXRhKSB7XG4gICAgICAgICAgaWYgKG1ldGEua2V5ID09PSAnd2ViQXNzZXQnICYmICFmb3VuZCkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VPYmogPSB7XG4gICAgICAgICAgICAgIGltYWdlU3JjOiBtZXRhLnZhbHVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2VPYmopO1xuICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2VPYmopO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmb3IgKHZhciBvcHQgaW4gb3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgICB0aGlzLnNldHRpbmdzW29wdF0gPSBvcHRpb25zW29wdF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5sYXlvdXRXcmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGljb25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBpbmZvcm1hdGlvbldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgaW5mb3JtYXRpb25Ub3BXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGluZm9ybWF0aW9uRGV0YWlsc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBpbmZvcm1hdGlvbkRldGFpbHNMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBpbmZvcm1hdGlvbkRldGFpbHNEZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBpbmZvcm1hdGlvbldyYXBwZXJDbG9zZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBpbmZvcm1hdGlvbkNsb3NlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXG4gICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1ub3RpZi13cmFwcGVyJyk7XG4gICAgaWNvbldyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbm90aWYtaWNvbi13cmFwcGVyJyk7XG4gICAgaWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1ub3RpZi1pY29uJyk7XG4gICAgaW5mb3JtYXRpb25Ub3BXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW5vdGlmLWluZm9ybWF0aW9uLXRvcC13cmFwcGVyJyk7XG4gICAgaW5mb3JtYXRpb25XcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW5vdGlmLWluZm9ybWF0aW9uLXdyYXBwZXInKTtcbiAgICBpbmZvcm1hdGlvbkRldGFpbHNDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbm90aWYtaW5mb3JtYXRpb24tZGV0YWlscy13cmFwcGVyJyk7XG4gICAgaW5mb3JtYXRpb25EZXRhaWxzTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbm90aWYtaW5mb3JtYXRpb24tZGV0YWlscy1sYWJlbCcpO1xuICAgIGluZm9ybWF0aW9uRGV0YWlsc0Rlc2NyaXB0aW9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW5vdGlmLWluZm9ybWF0aW9uLWRldGFpbHMtZGVzY3JpcHRpb24nKTtcbiAgICBpbmZvcm1hdGlvbldyYXBwZXJDbG9zZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi1jbG9zZS13cmFwcGVyJyk7XG4gICAgaW5mb3JtYXRpb25DbG9zZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi1jbG9zZScpO1xuXG4gICAgaW5mb3JtYXRpb25DbG9zZS5ocmVmID0gJ2phdmFzY3JpcHQ6dm9pZCgwKTsnO1xuICAgIGluZm9ybWF0aW9uQ2xvc2UuaW5uZXJIVE1MID0gJ3gnO1xuXG4gICAgaW5mb3JtYXRpb25EZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKGluZm9ybWF0aW9uRGV0YWlsc0xhYmVsKTtcbiAgICBpbmZvcm1hdGlvbkRldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoaW5mb3JtYXRpb25EZXRhaWxzRGVzY3JpcHRpb24pO1xuXG4gICAgaW5mb3JtYXRpb25XcmFwcGVyQ2xvc2UuYXBwZW5kQ2hpbGQoaW5mb3JtYXRpb25DbG9zZSk7XG4gICAgaW5mb3JtYXRpb25XcmFwcGVyLmFwcGVuZENoaWxkKGluZm9ybWF0aW9uV3JhcHBlckNsb3NlKTtcbiAgICBpbmZvcm1hdGlvbldyYXBwZXIuYXBwZW5kQ2hpbGQoaW5mb3JtYXRpb25EZXRhaWxzQ29udGFpbmVyKTtcbiAgICBpbmZvcm1hdGlvblRvcFdyYXBwZXIuYXBwZW5kQ2hpbGQoaW5mb3JtYXRpb25XcmFwcGVyKTtcbiAgICBpY29uV3JhcHBlci5hcHBlbmRDaGlsZChpY29uKTtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGljb25XcmFwcGVyKTtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGluZm9ybWF0aW9uVG9wV3JhcHBlcik7XG5cbiAgICByZXR1cm4gd3JhcHBlcjtcbiAgfTtcblxuICB2YXIgcHJvY2Vzc2VkID0ge307XG4gIHRoaXMuc3RhcnRTU0UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLnNldHRpbmdzLnNzZUluc3RhbmNlID0gbmV3IE1lc3NhZ2luZyh7XG4gICAgICBzc2VVcmw6IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudXJpLm1lbWJlclNTRS5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm1lbWJlcklkKSxcbiAgICAgIGhlYXJ0YmVhdDogX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy51cmkubWVtYmVyU1NFSGVhcnRiZWF0LnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQpLFxuICAgICAgYWpheDoge1xuICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgIGFwaUtleToge1xuICAgICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5hcGlLZXlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgZGF0YUtleSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICB2YXIgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3NlZFtkYXRhS2V5XSA9PT0gJ3VuZGVmaW5lZCcgfHwgKHR5cGVvZiBwcm9jZXNzZWRbZGF0YUtleV0gIT09ICd1bmRlZmluZWQnICYmIChwcm9jZXNzZWRbZGF0YUtleV0gKyAxMDAwMCkgPCBjdXJyZW50VGltZSkpIHtcbiAgICAgICAgICBwcm9jZXNzZWRbSlNPTi5zdHJpbmdpZnkoZGF0YSldID0gY3VycmVudFRpbWU7XG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MuZXZlbnRTdHJlYW0ucHVzaChkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uU3RhcnR1cEVycm9yOiBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgIH0sXG4gICAgICBkZWJ1ZzogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuYXV0b05vdGlmaWNhdGlvbkhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5hdXRvTm90aWZpY2F0aW9uSGlkZUludGVydmFsKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuc2V0dGluZ3MuYXV0b05vdGlmaWNhdGlvbkhpZGVJbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgX3RoaXMuc2V0dGluZ3MuYXV0b05vdGlmaWNhdGlvbkhpZGVJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuaGlkZU5vdGlmaWNhdGlvbigpO1xuICAgIH0sIF90aGlzLnNldHRpbmdzLmF1dG9Ob3RpZmljYXRpb25IaWRlVGltZSk7XG4gIH07XG5cbiAgdGhpcy5oaWRlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuYXV0b05vdGlmaWNhdGlvbkhpZGVJbnRlcnZhbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnNldHRpbmdzLmF1dG9Ob3RpZmljYXRpb25IaWRlSW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIF90aGlzLnNldHRpbmdzLmRpc3BsYXlJblByb2dyZXNzID0gZmFsc2U7XG4gICAgcmVtb3ZlQ2xhc3MocXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi13cmFwcGVyJyksICdjbC1zaG93Jyk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9LCAyMDApO1xuICB9O1xuXG4gIHRoaXMuc2hvd0FjaGlldmVtZW50Tm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBsYWJlbCA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXIsICcuY2wtd2lkZ2V0LW5vdGlmLWluZm9ybWF0aW9uLWRldGFpbHMtbGFiZWwnKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyLCAnLmNsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi1kZXRhaWxzLWRlc2NyaXB0aW9uJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uVGV4dCA9IHN0cmlwSHRtbChkYXRhLmRhdGEuZGVzY3JpcHRpb24pO1xuXG4gICAgbGFiZWwuaW5uZXJIVE1MID0gKGRhdGEuZGF0YS5uYW1lLmxlbmd0aCA+IDIzKSA/IGRhdGEuZGF0YS5uYW1lLnN1YnN0cigwLCAyMykgKyAnLi4uJyA6IGRhdGEuZGF0YS5uYW1lO1xuICAgIGRlc2NyaXB0aW9uLmlubmVySFRNTCA9IChkZXNjcmlwdGlvblRleHQubGVuZ3RoID4gNjApID8gZGVzY3JpcHRpb25UZXh0LnN1YnN0cigwLCA2MCkgKyAnLi4uJyA6IGRlc2NyaXB0aW9uVGV4dDtcblxuICAgIF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXIuZGF0YXNldC5pZCA9IGRhdGEuZGF0YS5pZDtcblxuICAgIF90aGlzLnNldHRpbmdzLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFkZENsYXNzKHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbm90aWYtaW5mb3JtYXRpb24td3JhcHBlcicpLCAnY2wtc2hvdycpO1xuICAgIH0sIDIwMCk7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuY2FudmFzSW5zdGFuY2UgIT09IG51bGwpIHtcbiAgICAgIF90aGlzLmhhbmRsZUNhbnZhc0FuaW1hdGlvbnMoZGF0YS5kYXRhKTtcbiAgICB9XG5cbiAgICBfdGhpcy5hdXRvTm90aWZpY2F0aW9uSGlkZSgpO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlQ2FudmFzQW5pbWF0aW9ucyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuc2V0dGluZ3MuZGF0YUV4dHJhY3Rpb25Gb3JDYW52YXMoZGF0YSwgZnVuY3Rpb24gKGNhbnZhc0RhdGEpIHtcbiAgICAgIGlmIChjYW52YXNEYXRhLmltYWdlU3JjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuY2FudmFzSW5zdGFuY2Uuc2V0dGluZ3MuaW1hZ2VTcmMgPSBjYW52YXNEYXRhLmltYWdlU3JjO1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5jYW52YXNJbnN0YW5jZS5pbml0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5ldmVudFN0cmVhbUNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuY2hlY2tJbnRlcnZhbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnNldHRpbmdzLmNoZWNrSW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5ldmVudFN0cmVhbS5sZW5ndGggPiAwICYmICFfdGhpcy5zZXR0aW5ncy5kaXNwbGF5SW5Qcm9ncmVzcykge1xuICAgICAgdmFyIGRhdGEgPSBfdGhpcy5zZXR0aW5ncy5ldmVudFN0cmVhbVswXTtcbiAgICAgIHZhciBpbmRleCA9IF90aGlzLnNldHRpbmdzLmV2ZW50U3RyZWFtLmluZGV4T2YoZGF0YSk7XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YS5hY2hpZXZlbWVudElkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5kaXNwbGF5SW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmdldEFjaGlldmVtZW50KGRhdGEuYWNoaWV2ZW1lbnRJZCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICBfdGhpcy5zaG93QWNoaWV2ZW1lbnROb3RpZmljYXRpb24oZGF0YSk7XG5cbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5jaGVja0ludGVydmFsID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5ldmVudFN0cmVhbUNoZWNrKCk7XG4gICAgICAgICAgfSwgX3RoaXMuc2V0dGluZ3Mub25EaXNwbGF5Q2hlY2tUaW1lb3V0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuZXZlbnRTdHJlYW0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEubm90aWZpY2F0aW9uSWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmNoZWNrSW50ZXJ2YWwgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5ldmVudFN0cmVhbUNoZWNrKCk7XG4gICAgICAgIH0sIF90aGlzLnNldHRpbmdzLmNoZWNrVGltZW91dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5jaGVja0ludGVydmFsID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuZXZlbnRTdHJlYW1DaGVjaygpO1xuICAgICAgICB9LCBfdGhpcy5zZXR0aW5ncy5jaGVja1RpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5ldmVudFN0cmVhbS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5jaGVja0ludGVydmFsID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmV2ZW50U3RyZWFtQ2hlY2soKTtcbiAgICAgIH0sIF90aGlzLnNldHRpbmdzLmNoZWNrVGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciA9PT0gbnVsbCkge1xuICAgICAgX3RoaXMuc3RhcnRTU0UoKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmJpbmRDb250YWluZXIuYXBwZW5kQ2hpbGQoX3RoaXMubGF5b3V0V3JhcHBlcigpKTtcbiAgICAgIF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW5vdGlmLWluZm9ybWF0aW9uLWRldGFpbHMtd3JhcHBlcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZXJtaW5hdGUgU1NFXG4gICAgICBfdGhpcy5zZXR0aW5ncy5zc2VJbnN0YW5jZS5jbG9zZUNoYW5lbCgpO1xuXG4gICAgICAvLyB1cGRhdGUgdGhlIG1lbWJlclxuICAgICAgX3RoaXMuc2V0dGluZ3Muc3NlSW5zdGFuY2Uuc2V0dGluZ3Muc3NlVXJsID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy51cmkubWVtYmVyU1NFLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQpO1xuICAgICAgX3RoaXMuc2V0dGluZ3Muc3NlSW5zdGFuY2Uuc2V0dGluZ3MuaGVhcnRiZWF0ID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy51cmkubWVtYmVyU1NFSGVhcnRiZWF0LnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQpO1xuXG4gICAgICAvLyByZS1pbnN0YW50aWF0ZSBTU0VcbiAgICAgIF90aGlzLnNldHRpbmdzLnNzZUluc3RhbmNlLm9wZW5DaGFuZWwoKTtcbiAgICB9XG5cbiAgICBfdGhpcy5ldmVudFN0cmVhbUNoZWNrKCk7XG4gIH07XG59O1xuIiwiLy8gZGVmYXVsdCBkb21haW5cblxuLy8gdmFyIGFwaVVSTCA9IFwiaHR0cDovLzE5Mi4xNjguMS44Ojk5OThcIjtcblxuY29uc3QgYXBpVVJMID0gJ2h0dHBzOi8vZ2F0ZXdheS5jb21wZXRpdGlvbmxhYnMuY29tJztcblxuY29uc3QgY0xhYnMgPSB7XG4gIGFwaToge1xuICAgIHVybDogYXBpVVJMXG4gIH0sXG4gIGNsYXNzU2VsZWN0b3I6IC9eXFwuKFtcXHctXSspJC8sIC8vIGNsYXNzIHN0cmluZyBleHByZXNzaW9uIGNoZWNrXG4gIGlkU2VsZWN0b3I6IC9eI1tcXHdcXGRcXC1cXF9cXCZcXCFcXEBcXCpdKyQvLCAvLyBJRCBzdHJpbmcgZXhwcmVzc2lvbiBjaGVja1xuICB0YWdTZWxlY3RvcjogL15bXFx3LV0rJC8gLy8gVEFHIHN0cmluZyBleHByZXNzaW9uIGNoZWNrXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjTGFicztcbiIsImltcG9ydCB7IGFkZENsYXNzLCBoYXNDbGFzcywgaXNpT1NEZXZpY2UsIGlzTW9iaWxlVGFibGV0LCByZW1vdmVDbGFzcyB9IGZyb20gJy4uL3V0aWxzJztcblxuLy8gdmFyIHNjcm9sbE9iajIgPSBudWxsO1xubGV0IG1vdmVtZW50SW50ZXJ2YWw7XG5cbmNvbnN0IGRyYWdFbGVtZW50ID0gZnVuY3Rpb24gKGVsbW50LCBkcmFnZ2FibGVFbCwgb3ZlcmxheUNvbnRhaW5lciwgY29udGFpbmVyLCBkcmFnZ2luZywgZmluaXNoRHJhZ2dpbmcsIG1vYmlsZVRvdWNoKSB7XG4gIHZhciBwb3MxID0gMDtcbiAgdmFyIHBvczIgPSAwO1xuICB2YXIgcG9zMyA9IDA7XG4gIHZhciBwb3M0ID0gMDtcbiAgdmFyIGlzTW9iaWxlID0gaXNNb2JpbGVUYWJsZXQoKTtcbiAgdmFyIGlzaU9TID0gaXNpT1NEZXZpY2UoKTtcbiAgdmFyIGlzUGFyZW50V2luZG93ID0gZWxtbnQucGFyZW50Tm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgbWF4TGVmdCA9IChpc1BhcmVudFdpbmRvdyA/IHdpbmRvdy5pbm5lcldpZHRoIDogY29udGFpbmVyLm9mZnNldFdpZHRoKTtcbiAgdmFyIG1heFRvcCA9IChpc1BhcmVudFdpbmRvdyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lci5vZmZzZXRIZWlnaHQpO1xuICB2YXIgdG91Y2hTdGFydDsgdmFyIG1vdmluZyA9IG51bGw7XG4gIC8vIHNjcm9sbE9iajIgPSBxdWVyeShcIi5zY3JvbGwtcmVzXCIpO1xuXG4gIGlmIChtb3ZlbWVudEludGVydmFsKSB7XG4gICAgY2xlYXJUaW1lb3V0KG1vdmVtZW50SW50ZXJ2YWwpO1xuICB9XG5cbiAgdmFyIG9uV2luZG93Q2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpc1ZlcnRpY2FsID0gaGFzQ2xhc3MoZWxtbnQsICdjbC12ZXJ0aWNhbC1taW5pJyk7XG4gICAgdmFyIG1heExlZnQgPSAoaXNQYXJlbnRXaW5kb3cgPyB3aW5kb3cuaW5uZXJXaWR0aCA6IGNvbnRhaW5lci5vZmZzZXRXaWR0aCk7XG4gICAgdmFyIG1heFRvcCA9IChpc1BhcmVudFdpbmRvdyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lci5vZmZzZXRIZWlnaHQpO1xuICAgIHZhciBvZmZzZXRNYXhMZWZ0ID0gbWF4TGVmdCAtIHBhcnNlSW50KGVsbW50Lm9mZnNldFdpZHRoICsgKGlzVmVydGljYWwgPyBkcmFnZ2FibGVFbC5vZmZzZXRXaWR0aCAvIDcgOiBkcmFnZ2FibGVFbC5vZmZzZXRXaWR0aCAvIDEuNikpO1xuICAgIHZhciBvZmZzZXRNYXhUb3AgPSBtYXhUb3AgLSBwYXJzZUludChlbG1udC5vZmZzZXRIZWlnaHQgKyAoaXNWZXJ0aWNhbCA/IGRyYWdnYWJsZUVsLm9mZnNldEhlaWdodCAvIDEuMiA6IGRyYWdnYWJsZUVsLm9mZnNldEhlaWdodCAvIDQpKTtcbiAgICB2YXIgZWxUb3AgPSBwYXJzZUludChlbG1udC5zdHlsZS50b3ApO1xuICAgIHZhciBlbExlZnQgPSBwYXJzZUludChlbG1udC5zdHlsZS5sZWZ0KTtcblxuICAgIGlmIChlbFRvcCA+IG9mZnNldE1heFRvcCAmJiBvZmZzZXRNYXhUb3AgPiA1KSB7XG4gICAgICBlbG1udC5zdHlsZS50b3AgPSBvZmZzZXRNYXhUb3AgKyAncHgnO1xuICAgIH1cbiAgICBpZiAoZWxMZWZ0ID4gb2Zmc2V0TWF4TGVmdCAmJiBvZmZzZXRNYXhMZWZ0ID4gNSkge1xuICAgICAgZWxtbnQuc3R5bGUubGVmdCA9IG9mZnNldE1heExlZnQgKyAncHgnO1xuICAgIH1cbiAgfTtcblxuICBpZiAoaXNNb2JpbGUpIHtcbiAgICAvKiBsaXN0ZW4gdG8gdGhlIHRvdWNoTW92ZSBldmVudCxcbiAgICAgIGV2ZXJ5IHRpbWUgaXQgZmlyZXMsIGdyYWIgdGhlIGxvY2F0aW9uXG4gICAgICBvZiB0b3VjaCBhbmQgYXNzaWduIGl0IHRvIGJveCAqL1xuXG4gICAgdmFyIGp1c3RBVG91Y2ggPSBmYWxzZTtcbiAgICBkcmFnZ2FibGVFbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGp1c3RBVG91Y2ggPSB0cnVlO1xuXG4gICAgICBpZiAodG91Y2hTdGFydCkgY2xlYXJUaW1lb3V0KHRvdWNoU3RhcnQpO1xuXG4gICAgICBtYXhMZWZ0ID0gKGlzUGFyZW50V2luZG93ID8gd2luZG93LmlubmVyV2lkdGggOiBjb250YWluZXIub2Zmc2V0V2lkdGgpO1xuICAgICAgbWF4VG9wID0gKGlzUGFyZW50V2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogY29udGFpbmVyLm9mZnNldEhlaWdodCk7XG5cbiAgICAgIHRvdWNoU3RhcnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAganVzdEFUb3VjaCA9IGZhbHNlO1xuICAgICAgfSwgMTAwKTtcbiAgICB9LCB7IHBhc3NpdmU6IGlzaU9TIH0pO1xuXG4gICAgZHJhZ2dhYmxlRWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHBvczMgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICBwb3M0ID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgLy8gbW92aW5nID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICAgIGVsZW1lbnREcmFnKGUpO1xuICAgIH0sIHsgcGFzc2l2ZTogaXNpT1MgfSk7XG5cbiAgICBkcmFnZ2FibGVFbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAvLyBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBjdXJyZW50IGJveCBwb3NpdGlvbi5cbiAgICAgIGNsb3NlRHJhZ0VsZW1lbnQoZSk7XG4gICAgICBtb3ZpbmcgPSBudWxsO1xuXG4gICAgICBpZiAoanVzdEFUb3VjaCAmJiB0eXBlb2YgbW9iaWxlVG91Y2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbW9iaWxlVG91Y2goKTtcbiAgICAgIH1cbiAgICB9LCB7IHBhc3NpdmU6IGlzaU9TIH0pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIG9uV2luZG93Q2hhbmdlKCk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgcHJlc2VudCwgdGhlIGhlYWRlciBpcyB3aGVyZSB5b3UgbW92ZSB0aGUgRElWIGZyb206XG4gICAgZHJhZ2dhYmxlRWwub25tb3VzZWRvd24gPSBkcmFnTW91c2VEb3duO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBvbldpbmRvd0NoYW5nZSgpO1xuICAgIH0sIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZHJhZ01vdXNlRG93biAoZSkge1xuICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBtYXhMZWZ0ID0gKGlzUGFyZW50V2luZG93ID8gd2luZG93LmlubmVyV2lkdGggOiBjb250YWluZXIub2Zmc2V0V2lkdGgpO1xuICAgIG1heFRvcCA9IChpc1BhcmVudFdpbmRvdyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lci5vZmZzZXRIZWlnaHQpO1xuXG4gICAgb3ZlcmxheUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgIC8vIGdldCB0aGUgbW91c2UgY3Vyc29yIHBvc2l0aW9uIGF0IHN0YXJ0dXA6XG4gICAgcG9zMyA9IGUuY2xpZW50WDtcbiAgICBwb3M0ID0gZS5jbGllbnRZO1xuICAgIGRvY3VtZW50Lm9ubW91c2V1cCA9IGNsb3NlRHJhZ0VsZW1lbnQ7XG4gICAgLy8gY2FsbCBhIGZ1bmN0aW9uIHdoZW5ldmVyIHRoZSBjdXJzb3IgbW92ZXM6XG4gICAgZG9jdW1lbnQub25tb3VzZW1vdmUgPSBlbGVtZW50RHJhZztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFkZGl0aW9uYWwgb2Zmc2V0IHRvIG1heCBsZWZ0IGFuZCB0b3AgYmFzZWQgb24gb3JpZW50YXRpb24gYW5kIGNvbnRhaW5lciB3aWR0aCAod2lsbCBiZSBhZmZlY3RlZCBieSBDU1Mgc3R5bGluZyBzbyBuZWVkcyB0byBiZSBhZGp1c3RlZCBhY2NvcmRpbmdseSlcbiAgICogLSBlbG1udCA9PiBpcyB0aGUgbWFpbiBjb250YWluZXIgdGhhdCBoYXMgdGhlIHBvc2l0aW9uaW5nIGFwcGxpZWQgdG9cbiAgICogLSBkcmFnZ2FibGVFbCA9PiBrZXkgZWxlbWVudCB0aGF0IGlzIG1lYW4gZm9yIGRyYWdnaW5nXG4gICAqL1xuICB2YXIgY2hlY2tNYXhNaW5SZXN0cmFpbnRzID0gZnVuY3Rpb24gKG5ld1RvcCwgbmV3TGVmdCwgb2Zmc2V0TWF4TGVmdCwgb2Zmc2V0TWF4VG9wKSB7XG4gICAgdmFyIC8vIG1pbkxlZnQgPSAoaXNWZXJ0aWNhbCA/IGVsbW50Lm9mZnNldFdpZHRoLzQgOiAwICksIC8vIGF0dGVtcHQgdG8gcmVzdHJpY3QgdGhlIGNvbnRhaW5lciB0byBnbyBvdXQgb2YgYm91bmRzIGJ5IGEgZmV3IHBpeGVscywgbmVlZHMgc29tZSB3b3JrXG4gICAgICBtaW5MZWZ0ID0gMDtcbiAgICB2YXIgdG9wID0gKG5ld1RvcCA8PSAwID8gMCA6IG5ld1RvcCk7XG4gICAgdmFyIGxlZnQgPSAobmV3TGVmdCA8PSBtaW5MZWZ0ID8gbWluTGVmdCA6IG5ld0xlZnQpO1xuXG4gICAgaWYgKGxlZnQgPj0gb2Zmc2V0TWF4TGVmdCkge1xuICAgICAgbGVmdCA9IG9mZnNldE1heExlZnQ7XG4gICAgfVxuICAgIGlmICh0b3AgPj0gb2Zmc2V0TWF4VG9wKSB7XG4gICAgICB0b3AgPSBvZmZzZXRNYXhUb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogdG9wLFxuICAgICAgbGVmdDogbGVmdFxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gZWxlbWVudERyYWcgKGUpIHtcbiAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIC8vIGNhbGN1bGF0ZSB0aGUgbmV3IGN1cnNvciBwb3NpdGlvbjpcbiAgICB2YXIgcG9zWCA9IChpc01vYmlsZSkgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLmNsaWVudFg7XG4gICAgdmFyIHBvc1kgPSAoaXNNb2JpbGUpID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5jbGllbnRZO1xuICAgIHZhciBpc1ZlcnRpY2FsID0gaGFzQ2xhc3MoZWxtbnQsICdjbC12ZXJ0aWNhbC1taW5pJyk7XG4gICAgdmFyIG9mZnNldE1heExlZnQgPSBtYXhMZWZ0IC0gcGFyc2VJbnQoZWxtbnQub2Zmc2V0V2lkdGggKyAoaXNWZXJ0aWNhbCA/IGRyYWdnYWJsZUVsLm9mZnNldFdpZHRoIC8gNyA6IGRyYWdnYWJsZUVsLm9mZnNldFdpZHRoIC8gMS42KSk7XG4gICAgdmFyIG9mZnNldE1heFRvcCA9IG1heFRvcCAtIHBhcnNlSW50KGVsbW50Lm9mZnNldEhlaWdodCArIChpc1ZlcnRpY2FsID8gZHJhZ2dhYmxlRWwub2Zmc2V0SGVpZ2h0IC8gMS4yIDogZHJhZ2dhYmxlRWwub2Zmc2V0SGVpZ2h0IC8gNCkpO1xuXG4gICAgcG9zMSA9IHBvczMgLSBwb3NYO1xuICAgIHBvczIgPSBwb3M0IC0gcG9zWTtcbiAgICBwb3MzID0gcGFyc2VJbnQocG9zWCk7XG4gICAgcG9zNCA9IHBhcnNlSW50KHBvc1kpO1xuICAgIG1vdmluZyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgY2hlY2tNb3ZlbWVudCgpO1xuXG4gICAgaWYgKCFoYXNDbGFzcyhlbG1udCwgJ2NsLWJlaW5nLW1vdmVkJykpIGFkZENsYXNzKGVsbW50LCAnY2wtYmVpbmctbW92ZWQnKTtcblxuICAgIHZhciBuZXdUb3AgPSAoaXNNb2JpbGUpID8gKHBvc1kgLSBwYXJzZUludChkcmFnZ2FibGVFbC5vZmZzZXRIZWlnaHQgLyAyKSkgOiAoZWxtbnQub2Zmc2V0VG9wIC0gcG9zMik7XG4gICAgdmFyIG5ld0xlZnQgPSAoaXNNb2JpbGUpID8gKHBvc1ggLSBwYXJzZUludChkcmFnZ2FibGVFbC5vZmZzZXRXaWR0aCAvIDIpKSA6IChlbG1udC5vZmZzZXRMZWZ0IC0gcG9zMSk7XG4gICAgdmFyIGxlZnRUb3BDaGVjayA9IGNoZWNrTWF4TWluUmVzdHJhaW50cyhuZXdUb3AsIG5ld0xlZnQsIG9mZnNldE1heExlZnQsIG9mZnNldE1heFRvcCk7IC8vIHNldCB0aGUgZWxlbWVudCdzIG5ldyBwb3NpdGlvbjpcblxuICAgIC8vIHNjcm9sbE9iajIuaW5uZXJIVE1MID0gbGVmdFRvcENoZWNrLnRvcCArIFwiLVwiICsgbGVmdFRvcENoZWNrLmxlZnQgKyBcIiA6IFwiKyBuZXdUb3AgKyBcIi1cIiArIG5ld0xlZnQgKyBcIiA6IFwiICsgKHBvc1ggPCAwIHx8IHBvc1kgPCAwIHx8IHBvc1ggPiBtYXhMZWZ0IHx8IHBvc1kgPiBtYXhUb3ApICsgXCItXCIgKyAobmV3VG9wID4gb2Zmc2V0TWF4VG9wIHx8IG5ld0xlZnQgPiBvZmZzZXRNYXhMZWZ0KTtcbiAgICAvLyBzY3JvbGxPYmoyLmlubmVySFRNTCA9IGxlZnRUb3BDaGVjay50b3AgKyBcIi1cIiArIGxlZnRUb3BDaGVjay5sZWZ0ICsgXCIgOiBcIisgbmV3VG9wICtcIi1cIisgbmV3TGVmdCArIFwiIDogXCIgKyAocG9zWCA8IDAgfHwgcG9zWSA8IDAgfHwgcG9zWCA+IG1heExlZnQgfHwgcG9zWSA+IG1heFRvcCkgKyBcIi1cIiArIChuZXdUb3AgPiBvZmZzZXRNYXhUb3AgfHwgbmV3TGVmdCA+IG9mZnNldE1heExlZnQpO1xuXG4gICAgaWYgKHBvc1ggPCAwIHx8IHBvc1kgPCAwIHx8IHBvc1ggPiBtYXhMZWZ0IHx8IHBvc1kgPiBtYXhUb3ApIHtcbiAgICAgIGNsb3NlRHJhZ0VsZW1lbnQoZSk7XG4gICAgfSBlbHNlIGlmIChuZXdUb3AgPiBvZmZzZXRNYXhUb3AgfHwgbmV3TGVmdCA+IG9mZnNldE1heExlZnQpIHtcbiAgICAgIGNsb3NlRHJhZ0VsZW1lbnQoZSk7XG4gICAgfSBlbHNlIGlmIChsZWZ0VG9wQ2hlY2sudG9wID4gb2Zmc2V0TWF4VG9wIHx8IGxlZnRUb3BDaGVjay5sZWZ0ID4gb2Zmc2V0TWF4TGVmdCkge1xuICAgICAgY2xvc2VEcmFnRWxlbWVudChlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxtbnQuc3R5bGUudG9wID0gbGVmdFRvcENoZWNrLnRvcCArICdweCc7XG4gICAgICBlbG1udC5zdHlsZS5sZWZ0ID0gbGVmdFRvcENoZWNrLmxlZnQgKyAncHgnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZHJhZ2dpbmcgPT09ICdmdW5jdGlvbicpIGRyYWdnaW5nKG5ld1RvcCwgbmV3TGVmdCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZURyYWdFbGVtZW50IChlKSB7XG4gICAgb3ZlcmxheUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGlmIChpc01vYmlsZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzdG9wIG1vdmluZyB3aGVuIG1vdXNlIGJ1dHRvbiBpcyByZWxlYXNlZDpcbiAgICAgIGRvY3VtZW50Lm9ubW91c2V1cCA9IG51bGw7XG4gICAgICBkb2N1bWVudC5vbm1vdXNlbW92ZSA9IG51bGw7XG4gICAgfVxuICAgIG1vdmluZyA9IG51bGw7XG5cbiAgICByZW1vdmVDbGFzcyhlbG1udCwgJ2NsLWJlaW5nLW1vdmVkJyk7XG5cbiAgICBpZiAodHlwZW9mIGZpbmlzaERyYWdnaW5nID09PSAnZnVuY3Rpb24nKSBmaW5pc2hEcmFnZ2luZygpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tNb3ZlbWVudCAoKSB7XG4gICAgaWYgKG1vdmVtZW50SW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFyVGltZW91dChtb3ZlbWVudEludGVydmFsKTtcbiAgICB9XG5cbiAgICBtb3ZlbWVudEludGVydmFsID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobW92aW5nICE9PSBudWxsICYmIG1vdmluZyArIDMwMDAgPCBuZXcgRGF0ZSgpLmdldFRpbWUoKSAmJiAhaXNNb2JpbGUpIHtcbiAgICAgICAgY2xvc2VEcmFnRWxlbWVudCgpO1xuICAgICAgfSBlbHNlIGlmIChtb3ZpbmcgIT09IG51bGwpIHtcbiAgICAgICAgY2hlY2tNb3ZlbWVudCgpO1xuICAgICAgfVxuICAgIH0sIDMwMDApO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBkcmFnRWxlbWVudDtcbiIsIi8vIGdsb2JhbCB0aW1lb3V0IGhhbmRsaW5nXG5pbXBvcnQgbWFwT2JqZWN0IGZyb20gJy4uL3V0aWxzL21hcE9iamVjdCc7XG5cbnRyeSB7XG4gIGlmICh0eXBlb2Ygc2V0VGltZW91dEdsb2JhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHdpbmRvdy5fc2V0VGltZW91dEdsb2JhbFJlcG9zaXRvcnkgPSBbXTtcbiAgICB3aW5kb3cuc2V0VGltZW91dEdsb2JhbCA9IGZ1bmN0aW9uIChpZCwgZnVuYywgdGltZXIpIHtcbiAgICAgIHZhciBleGlzdHMgPSBmYWxzZTtcbiAgICAgIG1hcE9iamVjdCh3aW5kb3cuX3NldFRpbWVvdXRHbG9iYWxSZXBvc2l0b3J5LCBmdW5jdGlvbiAoaW5zdGFuY2UsIGtleSwgY291bnQpIHtcbiAgICAgICAgaWYgKGlkID09PSBpbnN0YW5jZS5pZCkge1xuICAgICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICB2YXIgaW50ZXJ2YWwgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBtYXBPYmplY3Qod2luZG93Ll9zZXRUaW1lb3V0R2xvYmFsUmVwb3NpdG9yeSwgZnVuY3Rpb24gKGluc3RhbmNlLCBrZXksIGNvdW50KSB7XG4gICAgICAgICAgICBpZiAoaWQgPT09IGluc3RhbmNlLmlkKSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5fc2V0VGltZW91dEdsb2JhbFJlcG9zaXRvcnkuc3BsaWNlKGtleSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGZ1bmMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRpbWVyKTtcblxuICAgICAgICB3aW5kb3cuX3NldFRpbWVvdXRHbG9iYWxSZXBvc2l0b3J5LnB1c2goe1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBmdW5jOiBmdW5jLFxuICAgICAgICAgIHRpbWVyOiB0aW1lcixcbiAgICAgICAgICBpbnRlcnZhbDogaW50ZXJ2YWxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGludGVydmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0R2xvYmFsIC0gSUQgWycgKyBpZCArICddIGFscmVhZHkgaW4gdXNlJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBjbG9zZVRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAod2luZG93Ll9zZXRUaW1lb3V0R2xvYmFsUmVwb3NpdG9yeS5sZW5ndGggPiAwKSB7XG4gICAgICAgIG1hcE9iamVjdCh3aW5kb3cuX3NldFRpbWVvdXRHbG9iYWxSZXBvc2l0b3J5LCBmdW5jdGlvbiAoaW5zdGFuY2UsIGtleSwgY291bnQpIHtcbiAgICAgICAgICBpZiAoaW5zdGFuY2UuaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW5zdGFuY2UuaW50ZXJ2YWwpO1xuICAgICAgICAgICAgaW5zdGFuY2UuaW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZUVuYWJsZVRpbWVvdXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHdpbmRvdy5fc2V0VGltZW91dEdsb2JhbFJlcG9zaXRvcnkubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgdG1wID0gW107XG4gICAgICAgIG1hcE9iamVjdCh3aW5kb3cuX3NldFRpbWVvdXRHbG9iYWxSZXBvc2l0b3J5LCBmdW5jdGlvbiAoaW5zdGFuY2UsIGtleSwgY291bnQpIHtcbiAgICAgICAgICB0bXAucHVzaChpbnN0YW5jZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdpbmRvdy5fc2V0VGltZW91dEdsb2JhbFJlcG9zaXRvcnkgPSBbXTtcbiAgICAgICAgbWFwT2JqZWN0KHRtcCwgZnVuY3Rpb24gKGluc3RhbmNlLCBrZXksIGNvdW50KSB7XG4gICAgICAgICAgd2luZG93LnNldFRpbWVvdXRHbG9iYWwoaW5zdGFuY2UuaWQsIGluc3RhbmNlLmZ1bmMsIGluc3RhbmNlLnRpbWVyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciB3aW5kb3dBY3Rpdml0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoaWRkZW4gPSAnaGlkZGVuJztcblxuICAgICAgICAvLyBTdGFuZGFyZHM6XG4gICAgICAgIGlmIChoaWRkZW4gaW4gZG9jdW1lbnQpIHtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25jaGFuZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKChoaWRkZW4gPSAnbW96SGlkZGVuJykgaW4gZG9jdW1lbnQpIHtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3p2aXNpYmlsaXR5Y2hhbmdlJywgb25jaGFuZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKChoaWRkZW4gPSAnd2Via2l0SGlkZGVuJykgaW4gZG9jdW1lbnQpIHtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJywgb25jaGFuZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKChoaWRkZW4gPSAnbXNIaWRkZW4nKSBpbiBkb2N1bWVudCkge1xuICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21zdmlzaWJpbGl0eWNoYW5nZScsIG9uY2hhbmdlKTtcbiAgICAgICAgfSBlbHNlIGlmICgnb25mb2N1c2luJyBpbiBkb2N1bWVudCkgeyAvLyBJRSA5IGFuZCBsb3dlcjpcbiAgICAgICAgICBkb2N1bWVudC5vbmZvY3VzaW4gPSBkb2N1bWVudC5vbmZvY3Vzb3V0ID0gb25jaGFuZ2U7XG4gICAgICAgIH0gZWxzZSB7IC8vIEFsbCBvdGhlcnM6XG4gICAgICAgICAgd2luZG93Lm9ucGFnZXNob3cgPSB3aW5kb3cub25wYWdlaGlkZSA9IHdpbmRvdy5vbmZvY3VzID0gd2luZG93Lm9uYmx1ciA9IG9uY2hhbmdlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb25jaGFuZ2UgKGV2dCkge1xuICAgICAgICAgIHZhciBzdGF0dXMgPSAnJztcbiAgICAgICAgICB2YXIgdiA9ICd2aXNpYmxlJztcbiAgICAgICAgICB2YXIgaCA9ICdoaWRkZW4nO1xuICAgICAgICAgIHZhciBldnRNYXAgPSB7XG4gICAgICAgICAgICBmb2N1czogdiwgZm9jdXNpbjogdiwgcGFnZXNob3c6IHYsIGJsdXI6IGgsIGZvY3Vzb3V0OiBoLCBwYWdlaGlkZTogaFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBldnQgPSBldnQgfHwgd2luZG93LmV2ZW50O1xuICAgICAgICAgIGlmIChldnQudHlwZSBpbiBldnRNYXApIHtcbiAgICAgICAgICAgIHN0YXR1cyA9IGV2dE1hcFtldnQudHlwZV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXR1cyA9IHRoaXNbaGlkZGVuXSA/ICdoaWRkZW4nIDogJ3Zpc2libGUnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGF0dXMgPT09ICd2aXNpYmxlJykge1xuICAgICAgICAgICAgcmVFbmFibGVUaW1lb3V0cygpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSAnaGlkZGVuJykge1xuICAgICAgICAgICAgY2xvc2VUaW1lb3V0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IHRoZSBpbml0aWFsIHN0YXRlIChidXQgb25seSBpZiBicm93c2VyIHN1cHBvcnRzIHRoZSBQYWdlIFZpc2liaWxpdHkgQVBJKVxuICAgICAgICBpZiAoZG9jdW1lbnRbaGlkZGVuXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgb25jaGFuZ2UoeyB0eXBlOiBkb2N1bWVudFtoaWRkZW5dID8gJ2JsdXInIDogJ2ZvY3VzJyB9KTtcbiAgICAgICAgfVxuICAgICAgfSkoKTtcbiAgICB9O1xuXG4gICAgd2luZG93QWN0aXZpdHkoKTtcbiAgfVxufSBjYXRjaCAoZXJyKSB7XG4gIGNvbnNvbGUubG9nKGVycik7XG59XG4iLCIvL1xuaWYgKCF3aW5kb3cuY29uc29sZSkge1xuICB3aW5kb3cuY29uc29sZSA9IGZ1bmN0aW9uICgpIHtcbiAgfTtcblxuICBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvdy5jb25zb2xlLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIHdpbmRvdy5jb25zb2xlLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGVycik7XG4gICAgfTtcbiAgICB3aW5kb3cuY29uc29sZS5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoZXJyKTtcbiAgICB9O1xuICB9XG59XG5cbi8vXG50cnkge1xuICBFdmVudC5wcm90b3R5cGUucHJldmVudERlZmF1bHQgfHwgKEV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJldHVyblZhbHVlID0gITE7XG4gIH0pO1xufSBjYXRjaCAoZXJyKSB7XG4gIGNvbnNvbGUubG9nKGVycik7XG59XG5cbi8vXG50cnkge1xuICBFdmVudC5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uIHx8IChFdmVudC5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FuY2VsQnViYmxlID0gITA7XG4gIH0pO1xufSBjYXRjaCAoZXJyKSB7XG4gIGNvbnNvbGUubG9nKGVycik7XG59XG5cbi8vXG50cnkge1xuICBpZiAoIUVsZW1lbnQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICB2YXIgZXZlbnRMaXN0ZW5lcnMgPSBbXTsgdmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgdmFyIG47IHZhciByID0gdGhpcztcbiAgICAgIGlmIChuID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS50YXJnZXQgPSBlLnNyY0VsZW1lbnQsIGUuY3VycmVudFRhcmdldCA9IHIsIGUucGFnZVggPSBldmVudC5jbGllbnRYICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0LCBlLnBhZ2VZID0gZXZlbnQuY2xpZW50WSArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLCB0LmhhbmRsZUV2ZW50ID8gdC5oYW5kbGVFdmVudChlKSA6IHQuY2FsbChyLCBlKTtcbiAgICAgIH0sIGUgPT09ICdET01Db250ZW50TG9hZGVkJykge1xuICAgICAgICB2YXIgbyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyAmJiBuKGUpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoZG9jdW1lbnQuYXR0YWNoRXZlbnQoJ29ucmVhZHlzdGF0ZWNoYW5nZScsIG8pLCBldmVudExpc3RlbmVycy5wdXNoKHtcbiAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgdHlwZTogZSxcbiAgICAgICAgICBsaXN0ZW5lcjogdCxcbiAgICAgICAgICB3cmFwcGVyOiBvXG4gICAgICAgIH0pLCBkb2N1bWVudC5yZWFkeVN0YXRlID09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgICB2YXIgaSA9IG5ldyBFdmVudCgpO1xuICAgICAgICAgIGkuc3JjRWxlbWVudCA9IHdpbmRvdywgbyhpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHRoaXMuYXR0YWNoRXZlbnQoJ29uJyArIGUsIG4pLCBldmVudExpc3RlbmVycy5wdXNoKHsgb2JqZWN0OiB0aGlzLCB0eXBlOiBlLCBsaXN0ZW5lcjogdCwgd3JhcHBlcjogbiB9KTtcbiAgICB9OyB2YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICBmb3IgKHZhciBuID0gMDsgbiA8IGV2ZW50TGlzdGVuZXJzLmxlbmd0aDspIHtcbiAgICAgICAgdmFyIHIgPSBldmVudExpc3RlbmVyc1tuXTtcbiAgICAgICAgaWYgKHIub2JqZWN0ID09IHRoaXMgJiYgci50eXBlID09IGUgJiYgci5saXN0ZW5lciA9PSB0KSB7XG4gICAgICAgICAgZSA9PSAnRE9NQ29udGVudExvYWRlZCcgPyB0aGlzLmRldGFjaEV2ZW50KCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCByLndyYXBwZXIpIDogdGhpcy5kZXRhY2hFdmVudCgnb24nICsgZSwgci53cmFwcGVyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICArK247XG4gICAgICB9XG4gICAgfTtcbiAgICBFbGVtZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lciwgRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHJlbW92ZUV2ZW50TGlzdGVuZXIsIEhUTUxEb2N1bWVudCAmJiAoSFRNTERvY3VtZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lciwgSFRNTERvY3VtZW50LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gcmVtb3ZlRXZlbnRMaXN0ZW5lciksIFdpbmRvdyAmJiAoV2luZG93LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lciwgV2luZG93LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcik7XG4gIH1cbiAgRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlIHx8IChFbGVtZW50LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9LCBOb2RlTGlzdC5wcm90b3R5cGUucmVtb3ZlID0gSFRNTENvbGxlY3Rpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBlID0gMCwgdCA9IHRoaXMubGVuZ3RoOyB0ID4gZTsgZSsrKSB0aGlzW2VdICYmIHRoaXNbZV0ucGFyZW50RWxlbWVudCAmJiB0aGlzW2VdLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpc1tlXSk7XG4gIH0pO1xufSBjYXRjaCAoZXJyKSB7XG4gIGNvbnNvbGUubG9nKGVycik7XG59XG50eXBlb2YgWERvbWFpblJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmICh0eXBlb2Ygd2luZG93LkpTT04gIT09ICdvYmplY3QnICYmICh3aW5kb3cuSlNPTiA9IHt9KSwgKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIGYgKGUpIHtcbiAgICByZXR1cm4gZSA8IDEwID8gJzAnICsgZSA6IGU7XG4gIH1cblxuICBmdW5jdGlvbiBxdW90ZSAoZSkge1xuICAgIHJldHVybiBlc2NhcGFibGUubGFzdEluZGV4ID0gMCwgZXNjYXBhYmxlLnRlc3QoZSkgPyAnXCInICsgZS5yZXBsYWNlKGVzY2FwYWJsZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciB0ID0gbWV0YVtlXTtcbiAgICAgIHJldHVybiB0eXBlb2YgdCA9PT0gJ3N0cmluZycgPyB0IDogJ1xcXFx1JyArICgnMDAwMCcgKyBlLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCk7XG4gICAgfSkgKyAnXCInIDogJ1wiJyArIGUgKyAnXCInO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RyIChlLCB0KSB7XG4gICAgdmFyIG47IHZhciByOyB2YXIgbzsgdmFyIGk7IHZhciBhOyB2YXIgcCA9IGdhcDsgdmFyIHUgPSB0W2VdO1xuICAgIHN3aXRjaCAodSAmJiB0eXBlb2YgdSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHUudG9KU09OID09PSAnZnVuY3Rpb24nICYmICh1ID0gdS50b0pTT04oZSkpLCB0eXBlb2YgcmVwID09PSAnZnVuY3Rpb24nICYmICh1ID0gcmVwLmNhbGwodCwgZSwgdSkpLCB0eXBlb2YgdSkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIHF1b3RlKHUpO1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKHUpID8gU3RyaW5nKHUpIDogJ251bGwnO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBjYXNlICdudWxsJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyh1KTtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGlmICghdSkgcmV0dXJuICdudWxsJztcbiAgICAgICAgaWYgKGdhcCArPSBpbmRlbnQsIGEgPSBbXSwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh1KSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgICAgIGZvciAoaSA9IHUubGVuZ3RoLCBuID0gMDsgaSA+IG47IG4gKz0gMSkgYVtuXSA9IHN0cihuLCB1KSB8fCAnbnVsbCc7XG4gICAgICAgICAgcmV0dXJuIG8gPSBhLmxlbmd0aCA9PT0gMCA/ICdbXScgOiBnYXAgPyAnW1xcbicgKyBnYXAgKyBhLmpvaW4oJyxcXG4nICsgZ2FwKSArICdcXG4nICsgcCArICddJyA6ICdbJyArIGEuam9pbignLCcpICsgJ10nLCBnYXAgPSBwLCBvO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXAgJiYgdHlwZW9mIHJlcCA9PT0gJ29iamVjdCcpIGZvciAoaSA9IHJlcC5sZW5ndGgsIG4gPSAwOyBpID4gbjsgbiArPSAxKSB0eXBlb2YgcmVwW25dID09PSAnc3RyaW5nJyAmJiAociA9IHJlcFtuXSwgbyA9IHN0cihyLCB1KSwgbyAmJiBhLnB1c2gocXVvdGUocikgKyAoZ2FwID8gJzogJyA6ICc6JykgKyBvKSk7IGVsc2UgZm9yIChyIGluIHUpIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh1LCByKSAmJiAobyA9IHN0cihyLCB1KSwgbyAmJiBhLnB1c2gocXVvdGUocikgKyAoZ2FwID8gJzogJyA6ICc6JykgKyBvKSk7XG4gICAgICAgIHJldHVybiBvID0gYS5sZW5ndGggPT09IDAgPyAne30nIDogZ2FwID8gJ3tcXG4nICsgZ2FwICsgYS5qb2luKCcsXFxuJyArIGdhcCkgKyAnXFxuJyArIHAgKyAnfScgOiAneycgKyBhLmpvaW4oJywnKSArICd9JywgZ2FwID0gcCwgbztcbiAgICB9XG4gIH1cblxuICB0eXBlb2YgRGF0ZS5wcm90b3R5cGUudG9KU09OICE9PSAnZnVuY3Rpb24nICYmIChEYXRlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzRmluaXRlKHRoaXMudmFsdWVPZigpKSA/IHRoaXMuZ2V0VVRDRnVsbFllYXIoKSArICctJyArIGYodGhpcy5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBmKHRoaXMuZ2V0VVRDRGF0ZSgpKSArICdUJyArIGYodGhpcy5nZXRVVENIb3VycygpKSArICc6JyArIGYodGhpcy5nZXRVVENNaW51dGVzKCkpICsgJzonICsgZih0aGlzLmdldFVUQ1NlY29uZHMoKSkgKyAnWicgOiBudWxsO1xuICB9LCBTdHJpbmcucHJvdG90eXBlLnRvSlNPTiA9IE51bWJlci5wcm90b3R5cGUudG9KU09OID0gQm9vbGVhbi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKTtcbiAgfSk7XG4gIHZhciBjeCwgZXNjYXBhYmxlLCBnYXAsIGluZGVudCwgbWV0YSwgcmVwO1xuICB0eXBlb2Ygd2luZG93LkpTT04uc3RyaW5naWZ5ICE9PSAnZnVuY3Rpb24nICYmIChlc2NhcGFibGUgPSAvW1xcXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHg5ZlxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLCBtZXRhID0ge1xuICAgICdcXGInOiAnXFxcXGInLFxuICAgICdcdCc6ICdcXFxcdCcsXG4gICAgJ1xcbic6ICdcXFxcbicsXG4gICAgJ1xcZic6ICdcXFxcZicsXG4gICAgJ1xccic6ICdcXFxccicsXG4gICAgJ1wiJzogJ1xcXFxcIicsXG4gICAgJ1xcXFwnOiAnXFxcXFxcXFwnXG4gIH0sIHdpbmRvdy5KU09OLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7XG4gICAgdmFyIHI7XG4gICAgaWYgKGdhcCA9ICcnLCBpbmRlbnQgPSAnJywgdHlwZW9mIG4gPT09ICdudW1iZXInKSBmb3IgKHIgPSAwOyBuID4gcjsgciArPSAxKSBpbmRlbnQgKz0gJyAnOyBlbHNlIHR5cGVvZiBuID09PSAnc3RyaW5nJyAmJiAoaW5kZW50ID0gbik7XG4gICAgaWYgKHJlcCA9IHQsIHQgJiYgdHlwZW9mIHQgIT09ICdmdW5jdGlvbicgJiYgKHR5cGVvZiB0ICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgdC5sZW5ndGggIT09ICdudW1iZXInKSkgdGhyb3cgbmV3IEVycm9yKCdKU09OLnN0cmluZ2lmeScpO1xuICAgIHJldHVybiBzdHIoJycsIHsgJyc6IGUgfSk7XG4gIH0pLCB0eXBlb2Ygd2luZG93LkpTT04ucGFyc2UgIT09ICdmdW5jdGlvbicgJiYgKGN4ID0gL1tcXHUwMDAwXFx1MDBhZFxcdTA2MDAtXFx1MDYwNFxcdTA3MGZcXHUxN2I0XFx1MTdiNVxcdTIwMGMtXFx1MjAwZlxcdTIwMjgtXFx1MjAyZlxcdTIwNjAtXFx1MjA2ZlxcdWZlZmZcXHVmZmYwLVxcdWZmZmZdL2csIHdpbmRvdy5KU09OLnBhcnNlID0gZnVuY3Rpb24gKHRleHQsIHJldml2ZXIpIHtcbiAgICBmdW5jdGlvbiB3YWxrIChlLCB0KSB7XG4gICAgICB2YXIgbjsgdmFyIHI7IHZhciBvID0gZVt0XTtcbiAgICAgIGlmIChvICYmIHR5cGVvZiBvID09PSAnb2JqZWN0JykgZm9yIChuIGluIG8pIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBuKSAmJiAociA9IHdhbGsobywgbiksIHZvaWQgMCAhPT0gciA/IG9bbl0gPSByIDogZGVsZXRlIG9bbl0pO1xuICAgICAgcmV0dXJuIHJldml2ZXIuY2FsbChlLCB0LCBvKTtcbiAgICB9XG5cbiAgICB2YXIgajtcbiAgICBpZiAodGV4dCA9IFN0cmluZyh0ZXh0KSwgY3gubGFzdEluZGV4ID0gMCwgY3gudGVzdCh0ZXh0KSAmJiAodGV4dCA9IHRleHQucmVwbGFjZShjeCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiAnXFxcXHUnICsgKCcwMDAwJyArIGUuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KTtcbiAgICB9KSksIC9eW1xcXSw6e31cXHNdKiQvLnRlc3QodGV4dC5yZXBsYWNlKC9cXFxcKD86W1wiXFxcXFxcL2JmbnJ0XXx1WzAtOWEtZkEtRl17NH0pL2csICdAJykucmVwbGFjZSgvXCJbXlwiXFxcXFxcblxccl0qXCJ8dHJ1ZXxmYWxzZXxudWxsfC0/XFxkKyg/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/L2csICddJykucmVwbGFjZSgvKD86Xnw6fCwpKD86XFxzKlxcWykrL2csICcnKSkpIHJldHVybiBqID0gZXZhbCgnKCcgKyB0ZXh0ICsgJyknKSwgdHlwZW9mIHJldml2ZXIgPT09ICdmdW5jdGlvbicgPyB3YWxrKHsgJyc6IGogfSwgJycpIDogajtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0pTT04ucGFyc2UnKTtcbiAgfSk7XG59KCkpKTtcblxuLy9cbnZhciBfc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbnRyeSB7XG4gIF9zbGljZS5jYWxsKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG59IGNhdGNoIChlKSB7XG4gIEFycmF5LnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgaWYgKGUgPSB0eXBlb2YgZSAhPT0gJ3VuZGVmaW5lZCcgPyBlIDogdGhpcy5sZW5ndGgsIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzKSA9PT0gJ1tvYmplY3QgQXJyYXldJykgcmV0dXJuIF9zbGljZS5jYWxsKHRoaXMsIHQsIGUpO1xuICAgIHZhciByOyB2YXIgaTsgdmFyIGMgPSBbXTsgdmFyIGwgPSB0aGlzLmxlbmd0aDsgdmFyIG8gPSB0IHx8IDA7XG4gICAgbyA9IG8gPj0gMCA/IG8gOiBsICsgbztcbiAgICB2YXIgYSA9IGUgfHwgbDtcbiAgICBpZiAoZSA8IDAgJiYgKGEgPSBsICsgZSksIGkgPSBhIC0gbywgaSA+IDApIGlmIChjID0gbmV3IEFycmF5KGkpLCB0aGlzLmNoYXJBdCkgZm9yIChyID0gMDsgaSA+IHI7IHIrKykgY1tyXSA9IHRoaXMuY2hhckF0KG8gKyByKTsgZWxzZSBmb3IgKHIgPSAwOyBpID4gcjsgcisrKSBjW3JdID0gdGhpc1tvICsgcl07XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG5cbi8vIFtFdmVudFNvdXJjZV0gUG9seWZpbGwgZml4OiBodHRwczovL2dpdGh1Yi5jb20vcmVteS9wb2x5ZmlsbHMvYmxvYi9tYXN0ZXIvRXZlbnRTb3VyY2UuanNcblxuKGZ1bmN0aW9uIChnbG9iYWwpIHtcbiAgaWYgKCdFdmVudFNvdXJjZScgaW4gZ2xvYmFsKSByZXR1cm47XG4gIHZhciByZVRyaW0gPSAvXihcXHN8XFx1MDBBMCkrfChcXHN8XFx1MDBBMCkrJC9nO1xuICB2YXIgRXZlbnRTb3VyY2UgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgdmFyIGV2ZW50c291cmNlID0gdGhpczsgdmFyIGludGVydmFsID0gNTAwOyAvKiBwb2xsaW5nIGludGVydmFsICAqLyB2YXIgbGFzdEV2ZW50SWQgPSBudWxsOyB2YXIgY2FjaGUgPSAnJztcbiAgICBpZiAoIXVybCB8fCB0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdOb3QgZW5vdWdoIGFyZ3VtZW50cycpO1xuICAgIH1cbiAgICB0aGlzLlVSTCA9IHVybDtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSB0aGlzLkNPTk5FQ1RJTkc7XG4gICAgdGhpcy5fcG9sbFRpbWVyID0gbnVsbDtcbiAgICB0aGlzLl94aHIgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gcG9sbEFnYWluIChpbnRlcnZhbCkge1xuICAgICAgZXZlbnRzb3VyY2UuX3BvbGxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBwb2xsLmNhbGwoZXZlbnRzb3VyY2UpO1xuICAgICAgfSwgaW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvbGwgKCkge1xuICAgICAgdHJ5IHsgLyogZm9yY2UgaGlkaW5nIG9mIHRoZSBlcnJvciBtZXNzYWdlLi4uIGluc2FuZT8gKi9cbiAgICAgICAgaWYgKGV2ZW50c291cmNlLnJlYWR5U3RhdGUgPT09IGV2ZW50c291cmNlLkNMT1NFRCkgcmV0dXJuOyAvKiBOT1RFOiBJRTcgYW5kIHVwd2FyZHMgc3VwcG9ydCAqL1xuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhoci5vcGVuKCdHRVQnLCBldmVudHNvdXJjZS5VUkwsIHRydWUpO1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ3RleHQvZXZlbnQtc3RyZWFtJyk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgJ25vLWNhY2hlJyk7IC8qIHdlIG11c3QgbWFrZSB1c2Ugb2YgdGhpcyBvbiB0aGUgc2VydmVyIHNpZGUgaWYgd2UncmUgd29ya2luZyB3aXRoIEFuZHJvaWQgLSBiZWNhdXNlIHRoZXkgZG9uJ3QgdHJpZ2dlciByZWFkeWNoYW5nZSB1bnRpbCB0aGUgc2VydmVyIGNvbm5lY3Rpb24gaXMgY2xvc2VkICovXG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLVJlcXVlc3RlZC1XaXRoJywgJ1hNTEh0dHBSZXF1ZXN0Jyk7XG4gICAgICAgIGlmIChsYXN0RXZlbnRJZCAhPSBudWxsKSB4aHIuc2V0UmVxdWVzdEhlYWRlcignTGFzdC1FdmVudC1JRCcsIGxhc3RFdmVudElkKTtcbiAgICAgICAgY2FjaGUgPSAnJztcbiAgICAgICAgeGhyLnRpbWVvdXQgPSA1MDAwMDtcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09IDMgfHwgKHRoaXMucmVhZHlTdGF0ZSA9PSA0ICYmIHRoaXMuc3RhdHVzID09IDIwMCkpIHsgLyogb24gc3VjY2VzcyAqL1xuICAgICAgICAgICAgaWYgKGV2ZW50c291cmNlLnJlYWR5U3RhdGUgPT0gZXZlbnRzb3VyY2UuQ09OTkVDVElORykge1xuICAgICAgICAgICAgICBldmVudHNvdXJjZS5yZWFkeVN0YXRlID0gZXZlbnRzb3VyY2UuT1BFTjtcbiAgICAgICAgICAgICAgZXZlbnRzb3VyY2UuZGlzcGF0Y2hFdmVudCgnb3BlbicsIHsgdHlwZTogJ29wZW4nIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3BvbnNlVGV4dCA9ICcnO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmVzcG9uc2VUZXh0ID0gdGhpcy5yZXNwb25zZVRleHQgfHwgJyc7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB9IC8qIHByb2Nlc3MgdGhpcy5yZXNwb25zZVRleHQgKi9cbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IHJlc3BvbnNlVGV4dC5zdWJzdHIoY2FjaGUubGVuZ3RoKS5zcGxpdCgnXFxuJyk7IHZhciBldmVudFR5cGUgPSAnbWVzc2FnZSc7IHZhciBkYXRhID0gW107IHZhciBpID0gMDtcbiAgICAgICAgICAgIHZhciBsaW5lID0gJyc7XG4gICAgICAgICAgICBjYWNoZSA9IHJlc3BvbnNlVGV4dDsgLyogVE9ETyBoYW5kbGUgJ2V2ZW50JyAoZm9yIGJ1ZmZlciBuYW1lKSwgcmV0cnkgKi9cbiAgICAgICAgICAgIGZvciAoOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgbGluZSA9IHBhcnRzW2ldLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICAgICAgICAgIGlmIChsaW5lLmluZGV4T2YoJ2V2ZW50JykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBldmVudFR5cGUgPSBsaW5lLnJlcGxhY2UoL2V2ZW50Oj9cXHMqLywgJycpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmUuaW5kZXhPZigncmV0cnknKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciByZXRyeSA9IHBhcnNlSW50KGxpbmUucmVwbGFjZSgvcmV0cnk6P1xccyovLCAnJykpO1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocmV0cnkpKSB7XG4gICAgICAgICAgICAgICAgICBpbnRlcnZhbCA9IHJldHJ5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5lLmluZGV4T2YoJ2RhdGEnKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRhdGEucHVzaChsaW5lLnJlcGxhY2UoL2RhdGE6P1xccyovLCAnJykpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmUuaW5kZXhPZignaWQ6JykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBsYXN0RXZlbnRJZCA9IGxpbmUucmVwbGFjZSgvaWQ6P1xccyovLCAnJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobGluZS5pbmRleE9mKCdpZCcpID09PSAwKSB7IC8qIHRoaXMgcmVzZXRzIHRoZSBpZCAqL1xuICAgICAgICAgICAgICAgIGxhc3RFdmVudElkID0gbnVsbDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5lID09PSAnJykge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IE1lc3NhZ2VFdmVudChkYXRhLmpvaW4oJ1xcbicpLCBldmVudHNvdXJjZS51cmwsIGxhc3RFdmVudElkKTtcbiAgICAgICAgICAgICAgICAgIGV2ZW50c291cmNlLmRpc3BhdGNoRXZlbnQoZXZlbnRUeXBlLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICBkYXRhID0gW107XG4gICAgICAgICAgICAgICAgICBldmVudFR5cGUgPSAnbWVzc2FnZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSA0KSBwb2xsQWdhaW4oaW50ZXJ2YWwpOyAvKiBkb24ndCBuZWVkIHRvIHBvbGwgYWdhaW4sIGJlY2F1c2Ugd2UncmUgbG9uZy1sb2FkaW5nICovXG4gICAgICAgICAgfSBlbHNlIGlmIChldmVudHNvdXJjZS5yZWFkeVN0YXRlICE9PSBldmVudHNvdXJjZS5DTE9TRUQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IDQpIHsgLyogYW5kIHNvbWUgb3RoZXIgc3RhdHVzIGRpc3BhdGNoIGVycm9yICovXG4gICAgICAgICAgICAgIGV2ZW50c291cmNlLnJlYWR5U3RhdGUgPSBldmVudHNvdXJjZS5DT05ORUNUSU5HO1xuICAgICAgICAgICAgICBldmVudHNvdXJjZS5kaXNwYXRjaEV2ZW50KCdlcnJvcicsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgcG9sbEFnYWluKGludGVydmFsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yZWFkeVN0YXRlID09PSAwKSB7IC8qIGxpa2VseSBhYm9ydGVkICovXG4gICAgICAgICAgICAgIHBvbGxBZ2FpbihpbnRlcnZhbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHRydWUgfHwgeGhyLnJlYWR5U3RhdGUgPT09IDMpIHhoci5hYm9ydCgpO1xuICAgICAgICB9LCB4aHIudGltZW91dCk7XG4gICAgICAgIGV2ZW50c291cmNlLl94aHIgPSB4aHI7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIGluIGFuIGF0dGVtcHQgdG8gc2lsZW5jZSB0aGUgZXJyb3JzICovXG4gICAgICAgIGV2ZW50c291cmNlLmRpc3BhdGNoRXZlbnQoJ2Vycm9yJywgeyB0eXBlOiAnZXJyb3InLCBkYXRhOiBlLm1lc3NhZ2UgfSk7IC8qID8/PyAqL1xuICAgICAgfVxuICAgIH07XG5cbiAgICBwb2xsKCk7IC8qIGluaXQgbm93ICovXG4gIH07XG4gIEV2ZW50U291cmNlLnByb3RvdHlwZSA9IHtcbiAgICBjbG9zZTogZnVuY3Rpb24gKCkgeyAvKiBjbG9zZXMgdGhlIGNvbm5lY3Rpb24gLSBkaXNhYmxpbmcgdGhlIHBvbGxpbmcgKi9cbiAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IHRoaXMuQ0xPU0VEO1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9wb2xsVGltZXIpO1xuICAgICAgdGhpcy5feGhyLmFib3J0KCk7XG4gICAgfSxcbiAgICBDT05ORUNUSU5HOiAwLFxuICAgIE9QRU46IDEsXG4gICAgQ0xPU0VEOiAyLFxuICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICh0eXBlLCBldmVudCkge1xuICAgICAgdmFyIGhhbmRsZXJzID0gdGhpc1snXycgKyB0eXBlICsgJ0hhbmRsZXJzJ107XG4gICAgICBpZiAoaGFuZGxlcnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGhhbmRsZXJzW2ldLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpc1snb24nICsgdHlwZV0pIHtcbiAgICAgICAgdGhpc1snb24nICsgdHlwZV0uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgaWYgKCF0aGlzWydfJyArIHR5cGUgKyAnSGFuZGxlcnMnXSkge1xuICAgICAgICB0aGlzWydfJyArIHR5cGUgKyAnSGFuZGxlcnMnXSA9IFtdO1xuICAgICAgfVxuICAgICAgdGhpc1snXycgKyB0eXBlICsgJ0hhbmRsZXJzJ10ucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICh0eXBlLCBoYW5kbGVyKSB7XG4gICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzWydfJyArIHR5cGUgKyAnSGFuZGxlcnMnXTtcbiAgICAgIGlmICghaGFuZGxlcnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IGhhbmRsZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGlmIChoYW5kbGVyc1tpXSA9PT0gaGFuZGxlcikge1xuICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgb25lcnJvcjogbnVsbCxcbiAgICBvbm1lc3NhZ2U6IG51bGwsXG4gICAgb25vcGVuOiBudWxsLFxuICAgIHJlYWR5U3RhdGU6IDAsXG4gICAgVVJMOiAnJ1xuICB9O1xuICB2YXIgTWVzc2FnZUV2ZW50ID0gZnVuY3Rpb24gKGRhdGEsIG9yaWdpbiwgbGFzdEV2ZW50SWQpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xuICAgIHRoaXMubGFzdEV2ZW50SWQgPSBsYXN0RXZlbnRJZCB8fCAnJztcbiAgfTtcbiAgTWVzc2FnZUV2ZW50LnByb3RvdHlwZSA9IHsgZGF0YTogbnVsbCwgdHlwZTogJ21lc3NhZ2UnLCBsYXN0RXZlbnRJZDogJycsIG9yaWdpbjogJycgfTtcbiAgaWYgKCdtb2R1bGUnIGluIGdsb2JhbCkgbW9kdWxlLmV4cG9ydHMgPSBFdmVudFNvdXJjZTtcbiAgZ2xvYmFsLkV2ZW50U291cmNlID0gRXZlbnRTb3VyY2U7XG59KSh3aW5kb3cpO1xuIiwiLyoqXG4gKiBBcHAvQXBwZW5kIG5ldyBjbGFzcyBzdHJpbmcgdG8gdGhlIHByb3ZpZGVkIERPTSBlbGVtZW50XG4gKiBAbWVtYmVyT2YgbW9kdWxlOnV0aWxzXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0gZWxlbWVudFxuICogQHBhcmFtIGNsYXNzTmFtZVxuICogQHJldHVybnMge3tjbGFzc0xpc3R9fCp9XG4gKi9cbmNvbnN0IGFkZENsYXNzID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICB0cnkge1xuICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9ICcgJyArIGNsYXNzTmFtZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLnRyYWNlKCk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkZENsYXNzO1xuIiwiY29uc3QgYXBwZW5kTmV4dCA9IGZ1bmN0aW9uIChlbCwgbmV3Tm9kZSkge1xuICBpZiAoZWwubmV4dFNpYmxpbmcpIHtcbiAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCBlbC5uZXh0U2libGluZyk7XG4gIH0gZWxzZSB7XG4gICAgZWwucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChuZXdOb2RlKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYXBwZW5kTmV4dDtcbiIsImNvbnN0IGNhbWVsVG9LZWJhYkNhc2UgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tBLVpdL2csIGxldHRlciA9PiBgLSR7bGV0dGVyLnRvTG93ZXJDYXNlKCl9YCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjYW1lbFRvS2ViYWJDYXNlO1xuIiwiaW1wb3J0IGNMYWJzIGZyb20gJy4uL21vZHVsZXMvY0xhYnMnO1xuaW1wb3J0IGhhc0NsYXNzIGZyb20gJy4vaGFzQ2xhc3MnO1xuXG4vKipcbiAqIEl0ZXJhdGUgdXAgdGhlIHRyZWUgb2YgRE9NIGVsZW1lbnRzIHRvIGZpbmQgdGhlIGNsb3NlcyBtYXRjaFxuICogQG1lbWJlck9mIG1vZHVsZTp1dGlsc1xuICogQHN0YXRpY1xuICogQHBhcmFtIGVsZW1lbnRcbiAqIEBwYXJhbSBzZWxlY3RvclxuICogQHJldHVybnMge251bGwgfCBQYXJlbnROb2RlfVxuICovXG5jb25zdCBjbG9zZXN0ID0gZnVuY3Rpb24gKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHNlbGVjdG9yQ2xhc3NTdHJpbmcgPSBzZWxlY3Rvci5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgdmFyIHNlbGVjdG9ySWRTdHJpbmcgPSBzZWxlY3Rvci5pZDtcblxuICAgIGlmIChzZWxlY3RvcklkU3RyaW5nICE9PSBudWxsICYmIHNlbGVjdG9ySWRTdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgc2VsZWN0b3IgPSAnIycgKyBzZWxlY3RvcklkU3RyaW5nO1xuICAgIH0gZWxzZSBpZiAoc2VsZWN0b3JDbGFzc1N0cmluZyAhPT0gbnVsbCAmJiBzZWxlY3RvckNsYXNzU3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgIHNlbGVjdG9yID0gJy4nICsgc2VsZWN0b3JDbGFzc1N0cmluZy5zcGxpdCgnICcpWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLm5vZGVOYW1lO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3Nlc3QgKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5sb2coZWxlbWVudCwgc2VsZWN0b3IpO1xuICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50ICE9PSBudWxsICYmIHR5cGVvZiBlbGVtZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHNlbGVjdG9yLm1hdGNoKGNMYWJzLmNsYXNzU2VsZWN0b3IpICYmIGhhc0NsYXNzKGVsZW1lbnQsIHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0b3IubWF0Y2goY0xhYnMuaWRTZWxlY3RvcikgJiYgZWxlbWVudC5pZCA9PT0gc2VsZWN0b3IucmVwbGFjZSgnIycsICcnKSkge1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0b3IubWF0Y2goY0xhYnMudGFnU2VsZWN0b3IpICYmIGVsZW1lbnQubm9kZU5hbWUgPT09IHNlbGVjdG9yLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsb3Nlc3Q7XG4iLCIvKipcbiAqIFByZXBlbmRzIDAgdGhlIHByb3ZpZGVkIG51bWJlciBhbmQgcmV0dXJucyB0aGUgZm9ybWF0ZWQgZWxlbWVudCBhcyBhIHN0cmluZ1xuICogQG1lbWJlck9mIG1vZHVsZTp1dGlsc1xuICogQHN0YXRpY1xuICogQHBhcmFtIG51bVxuICogQHBhcmFtIHNpemUge251bWJlcn1cbiAqIEByZXR1cm5zIHtzdHJpbmd9IDEgPT4gMDAxXG4gKi9cbmNvbnN0IGZvcm1hdE51bWJlckxlYWRpbmdaZXJvcyA9IGZ1bmN0aW9uIChudW0sIHNpemUpIHtcbiAgdmFyIHMgPSBTdHJpbmcobnVtKTtcbiAgd2hpbGUgKHMubGVuZ3RoIDwgc2l6ZSkgcyA9ICcwJyArIHM7XG4gIHJldHVybiBzO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zO1xuIiwiY29uc3QgZ2V0T2Zmc2V0ID0gZnVuY3Rpb24gKGVsKSB7XG4gIHZhciBfeCA9IDA7XG4gIHZhciBfeSA9IDA7XG4gIHdoaWxlIChlbCAmJiAhaXNOYU4oZWwub2Zmc2V0TGVmdCkgJiYgIWlzTmFOKGVsLm9mZnNldFRvcCkpIHtcbiAgICBfeCArPSBlbC5vZmZzZXRMZWZ0IC0gZWwuc2Nyb2xsTGVmdDtcbiAgICBfeSArPSBlbC5vZmZzZXRUb3AgLSBlbC5zY3JvbGxUb3A7XG4gICAgZWwgPSBlbC5vZmZzZXRQYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIHsgdG9wOiBfeSwgbGVmdDogX3ggfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldE9mZnNldDtcbiIsIi8qKlxuICogUHJvdmlkZXMgYW4gYWJpbGl0eSB0byBjaGVjayBpZiBhIERPTSBlbGVtZW50IGNvbnRhaW5zIGEgY2xhc3Mgc3RyaW5nXG4gKiBAbWVtYmVyT2YgbW9kdWxlOnV0aWxzXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0gZWxlbWVudFxuICogQHBhcmFtIGNsYXNzTmFtZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gX2hhc0NsYXNzIChlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoJy4nLCAnJyk7XG5cbiAgdHJ5IHtcbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnKF58ICknICsgY2xhc3NOYW1lICsgJyggfCQpJywgJ2dpJykudGVzdChlbGVtZW50LmNsYXNzTmFtZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHR5cGVvZiBlLnN0YWNrICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5sb2coZS5zdGFjayk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGUsIGVsZW1lbnQsIGNsYXNzTmFtZSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuY29uc3QgaGFzQ2xhc3MgPSBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBfaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChjbGFzc05hbWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHZhciBoYXNDbGFzcyA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgaW4gY2xhc3NOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIGNsYXNzTmFtZVtpXSA9PT0gJ3N0cmluZycgJiYgX2hhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZVtpXSkpIHtcbiAgICAgICAgaGFzQ2xhc3MgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGFzQ2xhc3M7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhc0NsYXNzO1xuIiwiLyoqXG4gQG1vZHVsZSB1dGlsc1xuICovXG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2l6ZW9mIH0gZnJvbSAnLi9zaXplb2YnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0VsZW1lbnQgfSBmcm9tICcuL2lzRWxlbWVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG9iamVjdENvdW50IH0gZnJvbSAnLi9vYmplY3RDb3VudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlbW92ZSB9IGZyb20gJy4vcmVtb3ZlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb2JqZWN0SXRlcmF0b3IgfSBmcm9tICcuL29iamVjdEl0ZXJhdG9yJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYWRkQ2xhc3MgfSBmcm9tICcuL2FkZENsYXNzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVtb3ZlQ2xhc3MgfSBmcm9tICcuL3JlbW92ZUNsYXNzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaGFzQ2xhc3MgfSBmcm9tICcuL2hhc0NsYXNzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3RyaW5nQ29udGFpbnMgfSBmcm9tICcuL3N0cmluZ0NvbnRhaW5zJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zIH0gZnJvbSAnLi9mb3JtYXROdW1iZXJMZWFkaW5nWmVyb3MnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdHJpcEh0bWwgfSBmcm9tICcuL3N0cmlwSHRtbCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNsb3Nlc3QgfSBmcm9tICcuL2Nsb3Nlc3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc01vYmlsZVRhYmxldCB9IGZyb20gJy4vaXNNb2JpbGVUYWJsZXQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBnZXRPZmZzZXQgfSBmcm9tICcuL2dldE9mZnNldCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzaU9TRGV2aWNlIH0gZnJvbSAnLi9pc2lPU0RldmljZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFwcGVuZE5leHQgfSBmcm9tICcuL2FwcGVuZE5leHQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBxdWVyeSB9IGZyb20gJy4vcXVlcnknO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0cmltIH0gZnJvbSAnLi90cmltJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWVyZ2VPYmplY3RzIH0gZnJvbSAnLi9tZXJnZU9iamVjdHMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzY3JvbGxFbmFibGVkIH0gZnJvbSAnLi9zY3JvbGxFbmFibGVkJztcbiIsIi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGl0IGlzIGEgRE9NIGVsZW1lbnRcbiAqIEBtZW1iZXJPZiBtb2R1bGU6dXRpbHNcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSBvIHtPYmplY3R9XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5jb25zdCBpc0VsZW1lbnQgPSBmdW5jdGlvbiAobykge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gJ29iamVjdCdcbiAgICAgID8gbyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XG4gICAgICA6IC8qIERPTTIgKi8gbyAmJiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLm5vZGVUeXBlID09PSAxICYmIHR5cGVvZiBvLm5vZGVOYW1lID09PSAnc3RyaW5nJ1xuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNFbGVtZW50O1xuIiwiLy8gYSBjaGVjayB0byB0ZXN0IGlmIHRoZSBkZXZpY2UgaXMgYSBtb2JpbGUgb3IgdGFibGV0XG5pbXBvcnQgc3RyaW5nQ29udGFpbnMgZnJvbSAnLi9zdHJpbmdDb250YWlucyc7XG5cbmNvbnN0IGlzTW9iaWxlVGFibGV0ID0gZnVuY3Rpb24gKCkge1xuICBsZXQgY2hlY2sgPSBmYWxzZTtcblxuICAoZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWlub3xhbmRyb2lkfGlwYWR8cGxheWJvb2t8c2lsay9pLnRlc3QoYSkgfHwgLzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdChhLnN1YnN0cigwLCA0KSkpIGNoZWNrID0gdHJ1ZTtcbiAgfSkobmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYSk7XG5cbiAgLy8gY3VzdG9tIHNvbHV0aW9uIGJlY2F1c2UgbGF0ZXN0IGlPUyAxMyB1c2VyQWdlbnQgZG9lc24ndCByZXR1cm4gY29ycmVjdCBtb2JpbGUgaW5mb3JtYXRpb25cbiAgaWYgKCFjaGVjaykge1xuICAgIGNoZWNrID0gc3RyaW5nQ29udGFpbnMod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSwgJ21hY2ludG9zaCcpICYmICgnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGNoZWNrO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNNb2JpbGVUYWJsZXQ7XG4iLCIvLyBjaGVjayBpZiBpT1NcbmNvbnN0IGlzaU9TRGV2aWNlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFuYXZpZ2F0b3IucGxhdGZvcm0gJiYgL2lQKGFkfGhvbmV8b2QpLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpc2lPU0RldmljZTtcbiIsImNvbnN0IG1hcE9iamVjdCA9IGZ1bmN0aW9uIChvYmosIGNhbGxiYWNrKSB7XG4gIGlmIChvYmogIT09IG51bGwpIHtcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB2YXIgcmV0ID0gY2FsbGJhY2sob2JqW2tleV0sIGtleSwgY291bnQpO1xuICAgICAgICBpZiAodHlwZW9mIHJldCAhPT0gJ3VuZGVmaW5lZCcpIG9ialtrZXldID0gcmV0O1xuXG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKCdyZXR1cm5lZCBvYmplY3QgaXMgbnVsbCcsIHR5cGVvZiBvYmopO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hcE9iamVjdDtcbiIsImltcG9ydCBzaXplb2YgZnJvbSAnLi9zaXplb2YnO1xuXG5jb25zdCBtZXJnZU9iamVjdHMgPSBmdW5jdGlvbiAob2JqMSwgb2JqMiwgYXJyYXlUeXBlKSB7XG4gIHZhciBvYmozID0gKHR5cGVvZiBhcnJheVR5cGUgPT09ICd1bmRlZmluZWQnIHx8IGFycmF5VHlwZSA9PT0gZmFsc2UpID8ge30gOiBbXTtcblxuICBmb3IgKGNvbnN0IGkgaW4gb2JqMSkge1xuICAgIG9iajNbaV0gPSBvYmoxW2ldO1xuICB9XG5cbiAgZm9yIChjb25zdCBrIGluIG9iajIpIHtcbiAgICBpZiAodHlwZW9mIG9iajFba10gIT09ICdvYmplY3QnKSB7XG4gICAgICBvYmozW2tdID0gb2JqMltrXTtcbiAgICB9IGVsc2UgaWYgKG9iajFba10gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgb2JqM1trXSA9IG9iajJba107IC8vIGFycmF5cyBnZXQgb3ZlcndyaXR0ZW4gYW5kIG5vdCBleHRlbmRlZFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iajFba10gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvYmoxW2tdID09PSAnb2JqZWN0JyAmJiBvYmoxW2tdICE9PSBudWxsICYmIHR5cGVvZiBvYmoxW2tdLm5vZGVUeXBlID09PSAndW5kZWZpbmVkJyAmJiBzaXplb2Yob2JqMVtrXSkgPiAwKSB7XG4gICAgICBvYmozW2tdID0gbWVyZ2VPYmplY3RzKG9iajFba10sIG9iajJba10pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iajFba10gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvYmoxW2tdID09PSAnb2JqZWN0Jykge1xuICAgICAgb2JqM1trXSA9IG9iajJba107XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdmYWlsJyk7XG4gICAgfVxuXG4gICAgaWYgKG9iajNba10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVsZXRlIG9iajNba107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajM7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZXJnZU9iamVjdHM7XG4iLCIvKipcbiAqIFJldHVybnMgYSBjb3VudCBvZiBvYmplY3QgZnJvbSBhIHF1ZXJ5IHJlc3VsdFxuICogQG1lbWJlck9mIG1vZHVsZTp1dGlsc1xuICogQHN0YXRpY1xuICogQHBhcmFtb2JqICB7T2JqZWN0fSBhbnl0aGluZyBvciBBcnJheSBvYmplY3RcbiAqL1xuY29uc3Qgb2JqZWN0Q291bnQgPSBmdW5jdGlvbiAob2JqKSB7XG4gIGlmIChvYmogIT09IG51bGwgJiYgb2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIG9iai5sZW5ndGg7XG4gIH0gZWxzZSBpZiAob2JqICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdENvdW50O1xuIiwiLyoqXG4gKiBPYmplY3QgaXRlcmF0b3IgLSBiZXN0IHVzYWdlIGlzIGZvciBhIGxpc3Qgb2YgRE9NIGVsZW1lbnRzXG4gKiBAbWVtYmVyT2YgbW9kdWxlOnV0aWxzXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0gb2JqXG4gKiBAcGFyYW0gY2FsbGJhY2tcbiAqL1xuY29uc3Qgb2JqZWN0SXRlcmF0b3IgPSBmdW5jdGlvbiAob2JqLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmoubGVuZ3RoICE9PSAndW5kZWZpbmVkJyAmJiBvYmogaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICBjYWxsYmFjayhvYmpba2V5XSwga2V5LCBjb3VudCwgb2JqLmxlbmd0aCk7XG5cbiAgICAgIGNvdW50Kys7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogIT09ICd1bmRlZmluZWQnICYmIG9iaiAhPT0gbnVsbCkge1xuICAgIGNhbGxiYWNrKG9iaiwgMCwgMCwgMSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdEl0ZXJhdG9yO1xuIiwiaW1wb3J0IGNMYWJzIGZyb20gJy4uL21vZHVsZXMvY0xhYnMnO1xuaW1wb3J0IHRyaW0gZnJvbSAnLi90cmltJztcblxuLyoqXG4gKiBRdWVyeSBzZWxlY3Rvciwgc3VwcG9ydHMgQ1NTIGVsZW1lbnQgc2VsZWN0aW9uXG4gKlxuICogU3VwcG9ydHM6XG4gKiAgLSBDbGFzcyBzZWxlY3Rpb246IFwiLmVsZW1lbnRcIlxuICogIC0gSUQgc2VsZWN0aW9uOiBcIiNlbGVtZW50XCJcbiAqICAtIFRhZyBzZWxlY3Rpb246IFwiZGl2XCJcbiAqICAtIE11bHRpIGRlcHRoIHNlbGVjdGlvbjogJy5lbGVtZW50IHVsIGxpJ1xuICpcbiAqIEBtZW1iZXJPZiBtb2R1bGU6dXRpbHNcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7T2JqZWN0fSBcIm9wdGlvbmFsXCJcbiAqIEBwYXJhbSB7U3RyaW5nfSBDU1MgZWxlbWVudCBzZWxlY3RvclxuICogQHJldHVybnMgeyhPYmplY3R8bnVsbHxBcnJheSl9IGRlcGVuZGluZyBvbiB0aGUgcHJvdmlkZWQgc2VsZWN0b3IgcmVzdWx0cyBjYW4gdmFyeSAobnVsbCwgbm9kZSwgTm9kZUxpc3QgYXJyYXkpXG4gKi9cbmNvbnN0IHF1ZXJ5ID0gZnVuY3Rpb24gKGRvYywgc2VsZWN0b3IpIHtcbiAgdmFyIHJlc3VsdDtcblxuICB2YXIgdG1wRG9jID0gZG9jOyB2YXIgdG1wU2VsZWN0b3IgPSBzZWxlY3RvcjsgLy8gdXNlZCBmb3IgZGVidWcgb25seVxuXG4gIGlmICh0eXBlb2YgZG9jID09PSAnc3RyaW5nJyAmJiBzZWxlY3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc2VsZWN0b3IgPSBkb2M7XG4gICAgZG9jID0gZG9jdW1lbnQ7XG4gIH1cblxuICB0cnkge1xuICAgIGlmIChkb2MgIT09IG51bGwpIHtcbiAgICAgIHNlbGVjdG9yID0gdHJpbShzZWxlY3Rvcik7IC8vXG5cbiAgICAgIGlmIChzZWxlY3Rvci5tYXRjaChjTGFicy5jbGFzc1NlbGVjdG9yKSkge1xuICAgICAgICByZXN1bHQgPSBkb2MuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShzZWxlY3Rvci5yZXBsYWNlKCcuJywgJycpKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0b3IubWF0Y2goY0xhYnMuaWRTZWxlY3RvcikpIHtcbiAgICAgICAgcmVzdWx0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IucmVwbGFjZSgnIycsICcnKSk7XG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdG9yLm1hdGNoKGNMYWJzLnRhZ1NlbGVjdG9yKSkge1xuICAgICAgICByZXN1bHQgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc2VsZWN0b3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXN1bHQgIT09IG51bGwgJiYgcmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0Lm5vZGVUeXBlKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSBpZiAocmVzdWx0ICE9PSBudWxsICYmIHJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiByZXN1bHRbMF07XG4gICAgfSBlbHNlIGlmIChyZXN1bHQgIT09IG51bGwgJiYgcmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgICBjb25zb2xlLmxvZyh0bXBTZWxlY3Rvcik7XG4gICAgY29uc29sZS5sb2codG1wRG9jKTtcbiAgICBjb25zb2xlLmxvZyhkb2MsIHNlbGVjdG9yKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcXVlcnk7XG4iLCIvKipcbiAqIFJlbW92ZXMgYW4gSFRNTCBET00gZWxlbWVudFxuICogQG1lbWJlck9mIG1vZHVsZTp1dGlsc1xuICogQHN0YXRpY1xuICogQHBhcmFtb2JqIGVsIHtPYmplY3R9IERPTSBlbGVtZW50XG4gKi9cbmNvbnN0IHJlbW92ZSA9IGZ1bmN0aW9uIChlbCkge1xuICBpZiAoZWwgIT09IG51bGwpIHtcbiAgICBlbC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGVsKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVtb3ZlO1xuIiwiLyoqXG4gKiBSZW1vdmUgY2xhc3Mgc3RyaW5nIGZyb20gcHJvdmlkZWQgRE9NIGVsZW1lbnRcbiAqIEBtZW1iZXJPZiBtb2R1bGU6dXRpbHNcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSBlbGVtZW50XG4gKiBAcGFyYW0gY2xhc3NOYW1lXG4gKiBAcmV0dXJucyB7e2NsYXNzTGlzdH18Kn1cbiAqL1xuY29uc3QgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIHRyeSB7XG4gICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxiKScgKyBjbGFzc05hbWUuc3BsaXQoJyAnKS5qb2luKCd8JykgKyAnKFxcXFxifCQpJywgJ2dpJyksICcgJyk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAvLyBjb25zb2xlLmVycm9yKGUpO1xuICAgIC8vIGNvbnNvbGUudHJhY2UoKTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVtb3ZlQ2xhc3M7XG4iLCIvKipcbiAqIENoZWNrIGlmIHNjcm9sbGluZyBpcyBlbmFibGVkXG4gKiBAbWVtYmVyT2YgbW9kdWxlOnV0aWxzXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0gZG9jXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3Qgc2Nyb2xsRW5hYmxlZCA9IGZ1bmN0aW9uIChkb2MpIHtcbiAgcmV0dXJuIChkb2MgIT09IG51bGwpID8gKGRvYy5zY3JvbGxIZWlnaHQgPiBkb2Mub2Zmc2V0SGVpZ2h0KSA6IGZhbHNlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc2Nyb2xsRW5hYmxlZDtcbiIsImltcG9ydCBpc0VsZW1lbnQgZnJvbSAnLi9pc0VsZW1lbnQnO1xuXG4vKipcbiAqIHJldHVybnMgdGhlIHNpemUgb2YgYW4gT2JqZWN0IG9yIGFycmF5XG4gKlxuICogQG1lbWJlck9mIG1vZHVsZTp1dGlsc1xuICogQHN0YXRpY1xuICogQHBhcmFtIG9iaiB7T2JqZWN0fVxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5jb25zdCBzaXplb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gIGxldCBzaXplID0gMDsgbGV0IGtleTtcbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSBzaXplKys7XG4gIH1cblxuICBpZiAoc2l6ZSA9PT0gMCAmJiBpc0VsZW1lbnQob2JqKSkge1xuICAgIHNpemUgPSAxO1xuICB9XG5cbiAgcmV0dXJuIHNpemU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzaXplb2Y7XG4iLCIvKipcbiAqIEEgY2hlY2sgaWYgYSBzdHJpbmcgY29udGFpbnMgYW4gZW50cnkgb2Ygc2VhcmNoZWQgZm9yIHRlcm1cbiAqIEBtZW1iZXJPZiBtb2R1bGU6dXRpbHNcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSBzdHIge3N0cmluZ31cbiAqIEBwYXJhbSBwYXJ0aWFsIHtzdHJpbmd9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3Qgc3RyaW5nQ29udGFpbnMgPSBmdW5jdGlvbiAoc3RyLCBwYXJ0aWFsKSB7XG4gIHJldHVybiAoc3RyLmluZGV4T2YocGFydGlhbCkgPiAtMSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdDb250YWlucztcbiIsIi8qKlxuICogUmVtb3ZlcyBIVE1MIHRhZ3MgZnJvbSB0aGUgcHJvdmlkZWQgaW5wdXQgYW5kIHJldHVybnMgb25seSB0aGUgdGV4dFxuICogLSB0aGlzIGlzIGEgdmVyeSBiYXNpYyBpbXBsZW1lbnRhdGlvbiBhbmQgc2hvdWxkIGJlIHVzZWQgY2FyZWZ1bGx5XG4gKlxuICogQG1lbWJlck9mIG1vZHVsZTp1dGlsc1xuICogQHN0YXRpY1xuICogQHBhcmFtIGh0bWwge3N0cmluZ31cbiAqIEByZXR1cm5zIHtzdHJpbmcgfCBzdHJpbmd9XG4gKi9cbmNvbnN0IHN0cmlwSHRtbCA9IGZ1bmN0aW9uIChodG1sKSB7XG4gIHZhciB0bXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKTtcbiAgdG1wLmlubmVySFRNTCA9IGh0bWw7XG4gIHJldHVybiB0bXAudGV4dENvbnRlbnQgfHwgdG1wLmlubmVyVGV4dCB8fCAnJztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmlwSHRtbDtcbiIsImNvbnN0IHRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdHJpbTtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIuLi9jc3MvdGhlbWUvY2wtc3R5bGUtMS1kYXJrLXRoZW1lLmNzc1wiOyJdLCJzb3VyY2VSb290IjoiIn0=